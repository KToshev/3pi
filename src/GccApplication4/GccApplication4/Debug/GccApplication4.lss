
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00002fdc  00003070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  00800192  00800192  00003102  2**0
                  ALLOC
  3 .stab         00006414  00000000  00000000  00003104  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000121fa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001223c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000070  00000000  00000000  0001227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002f47  00000000  00000000  000122ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a78  00000000  00000000  00015233  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000e1e  00000000  00000000  00015cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000010c  00000000  00000000  00016acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000011c2  00000000  00000000  00016bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001668  00000000  00000000  00017d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000238  00000000  00000000  00019402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	fa 03       	fmulsu	r23, r18
      6a:	f4 03       	fmuls	r23, r20
      6c:	12 04       	cpc	r1, r2
      6e:	b7 08       	sbc	r11, r7
      70:	be 08       	sbc	r11, r14
      72:	0c 04       	cpc	r0, r12
      74:	06 04       	cpc	r0, r6
      76:	00 04       	cpc	r0, r0
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	39 09       	sbc	r19, r9

000000a8 <__ctors_end>:
      a8:	3a 13       	cpse	r19, r26

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ec ed       	ldi	r30, 0xDC	; 220
      be:	ff e2       	ldi	r31, 0x2F	; 47
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a2 39       	cpi	r26, 0x92	; 146
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	a2 e9       	ldi	r26, 0x92	; 146
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a0 34       	cpi	r26, 0x40	; 64
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 02 09 	call	0x1204	; 0x1204 <main>
      f6:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	40 f4       	brcc	.+16     	; 0x11a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x1c>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	30 f0       	brcs	.+12     	; 0x120 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x22>
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	9f e7       	ldi	r25, 0x7F	; 127
     118:	08 95       	ret
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	9f e7       	ldi	r25, 0x7F	; 127
     11e:	08 95       	ret
     120:	ac 01       	movw	r20, r24
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	84 0f       	add	r24, r20
     128:	95 1f       	adc	r25, r21
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	4a e5       	ldi	r20, 0x5A	; 90
     130:	42 9f       	mul	r20, r18
     132:	f0 01       	movw	r30, r0
     134:	43 9f       	mul	r20, r19
     136:	f0 0d       	add	r31, r0
     138:	11 24       	eor	r1, r1
     13a:	8e 0f       	add	r24, r30
     13c:	9f 1f       	adc	r25, r31
     13e:	fc 01       	movw	r30, r24
     140:	ef 50       	subi	r30, 0x0F	; 15
     142:	fe 4f       	sbci	r31, 0xFE	; 254
     144:	80 81       	ld	r24, Z
     146:	91 81       	ldd	r25, Z+1	; 0x01
     148:	08 95       	ret

0000014a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     14a:	fc 01       	movw	r30, r24
     14c:	40 81       	ld	r20, Z
     14e:	51 81       	ldd	r21, Z+1	; 0x01
     150:	4f 30       	cpi	r20, 0x0F	; 15
     152:	51 05       	cpc	r21, r1
     154:	e8 f4       	brcc	.+58     	; 0x190 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x46>
     156:	82 81       	ldd	r24, Z+2	; 0x02
     158:	93 81       	ldd	r25, Z+3	; 0x03
     15a:	8f 30       	cpi	r24, 0x0F	; 15
     15c:	91 05       	cpc	r25, r1
     15e:	d8 f0       	brcs	.+54     	; 0x196 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x4c>
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	9f e7       	ldi	r25, 0x7F	; 127
     164:	08 95       	ret
     166:	9c 01       	movw	r18, r24
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	82 0f       	add	r24, r18
     16e:	93 1f       	adc	r25, r19
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a e5       	ldi	r18, 0x5A	; 90
     176:	24 9f       	mul	r18, r20
     178:	f0 01       	movw	r30, r0
     17a:	25 9f       	mul	r18, r21
     17c:	f0 0d       	add	r31, r0
     17e:	11 24       	eor	r1, r1
     180:	8e 0f       	add	r24, r30
     182:	9f 1f       	adc	r25, r31
     184:	fc 01       	movw	r30, r24
     186:	ef 50       	subi	r30, 0x0F	; 15
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	80 81       	ld	r24, Z
     18c:	91 81       	ldd	r25, Z+1	; 0x01
     18e:	08 95       	ret
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	9f e7       	ldi	r25, 0x7F	; 127
     194:	08 95       	ret
     196:	fc 01       	movw	r30, r24
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	e8 0f       	add	r30, r24
     19e:	f9 1f       	adc	r31, r25
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	6a e5       	ldi	r22, 0x5A	; 90
     1a6:	64 9f       	mul	r22, r20
     1a8:	90 01       	movw	r18, r0
     1aa:	65 9f       	mul	r22, r21
     1ac:	30 0d       	add	r19, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	e2 0f       	add	r30, r18
     1b2:	f3 1f       	adc	r31, r19
     1b4:	ef 50       	subi	r30, 0x0F	; 15
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	25 81       	ldd	r18, Z+5	; 0x05
     1ba:	21 11       	cpse	r18, r1
     1bc:	d4 cf       	rjmp	.-88     	; 0x166 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x1c>
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	9f e7       	ldi	r25, 0x7F	; 127
     1c2:	08 95       	ret

000001c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1c4:	dc 01       	movw	r26, r24
     1c6:	2d 91       	ld	r18, X+
     1c8:	3c 91       	ld	r19, X
     1ca:	11 97       	sbiw	r26, 0x01	; 1
     1cc:	2f 30       	cpi	r18, 0x0F	; 15
     1ce:	31 05       	cpc	r19, r1
     1d0:	d8 f5       	brcc	.+118    	; 0x248 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x84>
     1d2:	12 96       	adiw	r26, 0x02	; 2
     1d4:	4d 91       	ld	r20, X+
     1d6:	5c 91       	ld	r21, X
     1d8:	13 97       	sbiw	r26, 0x03	; 3
     1da:	4f 30       	cpi	r20, 0x0F	; 15
     1dc:	51 05       	cpc	r21, r1
     1de:	e8 f1       	brcs	.+122    	; 0x25a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x96>
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	9f e7       	ldi	r25, 0x7F	; 127
     1e4:	08 95       	ret
     1e6:	fa 01       	movw	r30, r20
     1e8:	ee 0f       	add	r30, r30
     1ea:	ff 1f       	adc	r31, r31
     1ec:	e4 0f       	add	r30, r20
     1ee:	f5 1f       	adc	r31, r21
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	aa e5       	ldi	r26, 0x5A	; 90
     1f6:	a2 9f       	mul	r26, r18
     1f8:	c0 01       	movw	r24, r0
     1fa:	a3 9f       	mul	r26, r19
     1fc:	90 0d       	add	r25, r0
     1fe:	11 24       	eor	r1, r1
     200:	e8 0f       	add	r30, r24
     202:	f9 1f       	adc	r31, r25
     204:	ef 50       	subi	r30, 0x0F	; 15
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	85 81       	ldd	r24, Z+5	; 0x05
     20a:	81 11       	cpse	r24, r1
     20c:	20 c0       	rjmp	.+64     	; 0x24e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x8a>
     20e:	fb 01       	movw	r30, r22
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	dc 01       	movw	r26, r24
     216:	a2 1b       	sub	r26, r18
     218:	b3 0b       	sbc	r27, r19
     21a:	fd 01       	movw	r30, r26
     21c:	22 f4       	brpl	.+8      	; 0x226 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x62>
     21e:	ee 27       	eor	r30, r30
     220:	ff 27       	eor	r31, r31
     222:	ea 1b       	sub	r30, r26
     224:	fb 0b       	sbc	r31, r27
     226:	db 01       	movw	r26, r22
     228:	12 96       	adiw	r26, 0x02	; 2
     22a:	2d 91       	ld	r18, X+
     22c:	3c 91       	ld	r19, X
     22e:	13 97       	sbiw	r26, 0x03	; 3
     230:	24 1b       	sub	r18, r20
     232:	35 0b       	sbc	r19, r21
     234:	c9 01       	movw	r24, r18
     236:	99 23       	and	r25, r25
     238:	24 f4       	brge	.+8      	; 0x242 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x7e>
     23a:	88 27       	eor	r24, r24
     23c:	99 27       	eor	r25, r25
     23e:	82 1b       	sub	r24, r18
     240:	93 0b       	sbc	r25, r19
     242:	8e 0f       	add	r24, r30
     244:	9f 1f       	adc	r25, r31
     246:	08 95       	ret
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	9f e7       	ldi	r25, 0x7F	; 127
     24c:	08 95       	ret
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	9f e7       	ldi	r25, 0x7F	; 127
     252:	08 95       	ret
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	9f e7       	ldi	r25, 0x7F	; 127
     258:	08 95       	ret
     25a:	fa 01       	movw	r30, r20
     25c:	ee 0f       	add	r30, r30
     25e:	ff 1f       	adc	r31, r31
     260:	e4 0f       	add	r30, r20
     262:	f5 1f       	adc	r31, r21
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	aa e5       	ldi	r26, 0x5A	; 90
     26a:	a2 9f       	mul	r26, r18
     26c:	c0 01       	movw	r24, r0
     26e:	a3 9f       	mul	r26, r19
     270:	90 0d       	add	r25, r0
     272:	11 24       	eor	r1, r1
     274:	e8 0f       	add	r30, r24
     276:	f9 1f       	adc	r31, r25
     278:	ef 50       	subi	r30, 0x0F	; 15
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	84 81       	ldd	r24, Z+4	; 0x04
     27e:	81 11       	cpse	r24, r1
     280:	e9 cf       	rjmp	.-46     	; 0x254 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x90>
     282:	b1 cf       	rjmp	.-158    	; 0x1e6 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>

00000284 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     284:	db 01       	movw	r26, r22
     286:	8d 91       	ld	r24, X+
     288:	9c 91       	ld	r25, X
     28a:	11 97       	sbiw	r26, 0x01	; 1
     28c:	8f 30       	cpi	r24, 0x0F	; 15
     28e:	91 05       	cpc	r25, r1
     290:	d8 f5       	brcc	.+118    	; 0x308 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x84>
     292:	12 96       	adiw	r26, 0x02	; 2
     294:	6d 91       	ld	r22, X+
     296:	7c 91       	ld	r23, X
     298:	13 97       	sbiw	r26, 0x03	; 3
     29a:	6f 30       	cpi	r22, 0x0F	; 15
     29c:	71 05       	cpc	r23, r1
     29e:	e8 f1       	brcs	.+122    	; 0x31a <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x96>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	9f e7       	ldi	r25, 0x7F	; 127
     2a4:	08 95       	ret

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     2a6:	fb 01       	movw	r30, r22
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	e6 0f       	add	r30, r22
     2ae:	f7 1f       	adc	r31, r23
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	aa e5       	ldi	r26, 0x5A	; 90
     2b6:	a8 9f       	mul	r26, r24
     2b8:	90 01       	movw	r18, r0
     2ba:	a9 9f       	mul	r26, r25
     2bc:	30 0d       	add	r19, r0
     2be:	11 24       	eor	r1, r1
     2c0:	e2 0f       	add	r30, r18
     2c2:	f3 1f       	adc	r31, r19
     2c4:	ef 50       	subi	r30, 0x0F	; 15
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	25 81       	ldd	r18, Z+5	; 0x05
     2ca:	21 11       	cpse	r18, r1
     2cc:	20 c0       	rjmp	.+64     	; 0x30e <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x8a>
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
     2ce:	fa 01       	movw	r30, r20
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	28 1b       	sub	r18, r24
     2d6:	39 0b       	sbc	r19, r25
     2d8:	f9 01       	movw	r30, r18
     2da:	ff 23       	and	r31, r31
     2dc:	24 f4       	brge	.+8      	; 0x2e6 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x62>
     2de:	ee 27       	eor	r30, r30
     2e0:	ff 27       	eor	r31, r31
     2e2:	e2 1b       	sub	r30, r18
     2e4:	f3 0b       	sbc	r31, r19
     2e6:	da 01       	movw	r26, r20
     2e8:	12 96       	adiw	r26, 0x02	; 2
     2ea:	2d 91       	ld	r18, X+
     2ec:	3c 91       	ld	r19, X
     2ee:	13 97       	sbiw	r26, 0x03	; 3
     2f0:	26 1b       	sub	r18, r22
     2f2:	37 0b       	sbc	r19, r23
     2f4:	c9 01       	movw	r24, r18
     2f6:	99 23       	and	r25, r25
     2f8:	24 f4       	brge	.+8      	; 0x302 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x7e>
     2fa:	88 27       	eor	r24, r24
     2fc:	99 27       	eor	r25, r25
     2fe:	82 1b       	sub	r24, r18
     300:	93 0b       	sbc	r25, r19
     302:	8e 0f       	add	r24, r30
     304:	9f 1f       	adc	r25, r31
     306:	08 95       	ret
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	9f e7       	ldi	r25, 0x7F	; 127
     30c:	08 95       	ret
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	9f e7       	ldi	r25, 0x7F	; 127
     312:	08 95       	ret
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	9f e7       	ldi	r25, 0x7F	; 127
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
                }

                return result;
     318:	08 95       	ret
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     31a:	fb 01       	movw	r30, r22
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	e6 0f       	add	r30, r22
     322:	f7 1f       	adc	r31, r23
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	aa e5       	ldi	r26, 0x5A	; 90
     32a:	a8 9f       	mul	r26, r24
     32c:	90 01       	movw	r18, r0
     32e:	a9 9f       	mul	r26, r25
     330:	30 0d       	add	r19, r0
     332:	11 24       	eor	r1, r1
     334:	e2 0f       	add	r30, r18
     336:	f3 1f       	adc	r31, r19
     338:	ef 50       	subi	r30, 0x0F	; 15
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	21 11       	cpse	r18, r1
     340:	e9 cf       	rjmp	.-46     	; 0x314 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x90>
     342:	b1 cf       	rjmp	.-158    	; 0x2a6 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>

00000344 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     344:	fb 01       	movw	r30, r22
     346:	20 81       	ld	r18, Z
     348:	31 81       	ldd	r19, Z+1	; 0x01
     34a:	2f 30       	cpi	r18, 0x0F	; 15
     34c:	31 05       	cpc	r19, r1
     34e:	40 f4       	brcc	.+16     	; 0x360 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x1c>
     350:	82 81       	ldd	r24, Z+2	; 0x02
     352:	93 81       	ldd	r25, Z+3	; 0x03
     354:	8f 30       	cpi	r24, 0x0F	; 15
     356:	91 05       	cpc	r25, r1
     358:	30 f0       	brcs	.+12     	; 0x366 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x22>
                clear();
                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
                {
                    short result = SHRT_MAX;
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	9f e7       	ldi	r25, 0x7F	; 127
     35e:	08 95       	ret
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f e7       	ldi	r25, 0x7F	; 127
     364:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     366:	ac 01       	movw	r20, r24
     368:	44 0f       	add	r20, r20
     36a:	55 1f       	adc	r21, r21
     36c:	84 0f       	add	r24, r20
     36e:	95 1f       	adc	r25, r21
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	4a e5       	ldi	r20, 0x5A	; 90
     376:	42 9f       	mul	r20, r18
     378:	f0 01       	movw	r30, r0
     37a:	43 9f       	mul	r20, r19
     37c:	f0 0d       	add	r31, r0
     37e:	11 24       	eor	r1, r1
     380:	8e 0f       	add	r24, r30
     382:	9f 1f       	adc	r25, r31
     384:	fc 01       	movw	r30, r24
     386:	ef 50       	subi	r30, 0x0F	; 15
     388:	fe 4f       	sbci	r31, 0xFE	; 254
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
                    }

                    return result;
                };
     38e:	08 95       	ret

00000390 <_ZN5Robot14initializeMenuEv>:
            print( ", " );
            print_long( y );
            print( ")" );
        }

        void initializeMenu()
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
        {
            clear();
     3a2:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>

            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     3a6:	0f 2e       	mov	r0, r31
     3a8:	ff e0       	ldi	r31, 0x0F	; 15
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	f0 2d       	mov	r31, r0

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <button_is_pressed>
     3b6:	81 11       	cpse	r24, r1
     3b8:	45 c0       	rjmp	.+138    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
            {
                if ( button_is_pressed( BUTTON_A ) )
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <button_is_pressed>
     3c0:	88 23       	and	r24, r24
     3c2:	41 f0       	breq	.+16     	; 0x3d4 <_ZN5Robot14initializeMenuEv+0x44>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	9e 81       	ldd	r25, Y+6	; 0x06
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	b7 01       	movw	r22, r14
     3cc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodhi4>
     3d0:	9e 83       	std	Y+6, r25	; 0x06
     3d2:	8d 83       	std	Y+5, r24	; 0x05
                }

                if ( button_is_pressed( BUTTON_C ) )
     3d4:	80 e2       	ldi	r24, 0x20	; 32
     3d6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <button_is_pressed>
     3da:	88 23       	and	r24, r24
     3dc:	41 f0       	breq	.+16     	; 0x3ee <_ZN5Robot14initializeMenuEv+0x5e>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     3de:	8f 81       	ldd	r24, Y+7	; 0x07
     3e0:	98 85       	ldd	r25, Y+8	; 0x08
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	b7 01       	movw	r22, r14
     3e6:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodhi4>
     3ea:	98 87       	std	Y+8, r25	; 0x08
     3ec:	8f 83       	std	Y+7, r24	; 0x07
                }

                printPos( finishPos.x, finishPos.y );
     3ee:	0f 81       	ldd	r16, Y+7	; 0x07
     3f0:	18 85       	ldd	r17, Y+8	; 0x08
     3f2:	cd 80       	ldd	r12, Y+5	; 0x05
     3f4:	de 80       	ldd	r13, Y+6	; 0x06

        }

        void printPos( short x, short y )
        {
            clear();
     3f6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "(" );
     3fa:	81 e5       	ldi	r24, 0x51	; 81
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( x );
     402:	b6 01       	movw	r22, r12
     404:	dd 0c       	add	r13, r13
     406:	88 0b       	sbc	r24, r24
     408:	99 0b       	sbc	r25, r25
     40a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ", " );
     40e:	83 e5       	ldi	r24, 0x53	; 83
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( y );
     416:	b8 01       	movw	r22, r16
     418:	11 0f       	add	r17, r17
     41a:	88 0b       	sbc	r24, r24
     41c:	99 0b       	sbc	r25, r25
     41e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ")" );
     422:	86 e5       	ldi	r24, 0x56	; 86
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos.x, finishPos.y );

                lcd_goto_xy( 0, 1 );
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
                print( " A B C " );
     432:	88 e5       	ldi	r24, 0x58	; 88
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 09 11 	call	0x2212	; 0x2212 <print>

                delay_ms( 100 );
     43a:	84 e6       	ldi	r24, 0x64	; 100
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     442:	b6 cf       	rjmp	.-148    	; 0x3b0 <_ZN5Robot14initializeMenuEv+0x20>

                delay_ms( 100 );
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     444:	80 e1       	ldi	r24, 0x10	; 16
     446:	0e 94 66 12 	call	0x24cc	; 0x24cc <wait_for_button_release>
            delay_ms( 1000 );
     44a:	88 ee       	ldi	r24, 0xE8	; 232
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
        }
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	df 90       	pop	r13
     460:	cf 90       	pop	r12
     462:	08 95       	ret

00000464 <_ZN5Robot8mainMenuEv>:

        //Main program menu
        void mainMenu()
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	ea 97       	sbiw	r28, 0x3a	; 58
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	1c 01       	movw	r2, r24
        {
            clear();
     47a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "A - Test" );
     47e:	80 e6       	ldi	r24, 0x60	; 96
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            lcd_goto_xy( 0, 1 );
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
            print( "B - Main" );
     48e:	89 e6       	ldi	r24, 0x69	; 105
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     496:	9e 01       	movw	r18, r28
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	3a a7       	std	Y+42, r19	; 0x2a
     49e:	29 a7       	std	Y+41, r18	; 0x29
     4a0:	ce 01       	movw	r24, r28
     4a2:	41 96       	adiw	r24, 0x11	; 17
     4a4:	9c a7       	std	Y+44, r25	; 0x2c
     4a6:	8b a7       	std	Y+43, r24	; 0x2b

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     4a8:	de 01       	movw	r26, r28
     4aa:	91 96       	adiw	r26, 0x21	; 33
     4ac:	be a7       	std	Y+46, r27	; 0x2e
     4ae:	ad a7       	std	Y+45, r26	; 0x2d
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     4b0:	b9 a5       	ldd	r27, Y+41	; 0x29
     4b2:	bd ab       	std	Y+53, r27	; 0x35
     4b4:	ea a5       	ldd	r30, Y+42	; 0x2a
     4b6:	ee ab       	std	Y+54, r30	; 0x36

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     4b8:	fd a5       	ldd	r31, Y+45	; 0x2d
     4ba:	ff a7       	std	Y+47, r31	; 0x2f
     4bc:	2e a5       	ldd	r18, Y+46	; 0x2e
     4be:	28 ab       	std	Y+48, r18	; 0x30
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     4c0:	c1 01       	movw	r24, r2
     4c2:	09 96       	adiw	r24, 0x09	; 9
     4c4:	9a af       	std	Y+58, r25	; 0x3a
     4c6:	89 af       	std	Y+57, r24	; 0x39

            bool isSelectedProgram = false;

            while ( !isSelectedProgram )
            {
                if ( button_is_pressed( BUTTON_A ) )
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <button_is_pressed>
     4ce:	88 23       	and	r24, r24
     4d0:	31 f1       	breq	.+76     	; 0x51e <_ZN5Robot8mainMenuEv+0xba>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	0e 94 66 12 	call	0x24cc	; 0x24cc <wait_for_button_release>
        // Displays the data returned from the sensors
        void testSensors()
        {
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );
     4d8:	61 01       	movw	r12, r2
     4da:	99 e0       	ldi	r25, 0x09	; 9
     4dc:	c9 0e       	add	r12, r25
     4de:	d1 1c       	adc	r13, r1
     4e0:	71 01       	movw	r14, r2
     4e2:	a3 e1       	ldi	r26, 0x13	; 19
     4e4:	ea 0e       	add	r14, r26
     4e6:	f1 1c       	adc	r15, r1
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	c6 01       	movw	r24, r12
     4ec:	0e 94 01 13 	call	0x2602	; 0x2602 <read_line_sensors>
     4f0:	86 01       	movw	r16, r12

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
                {
                    print_long( sensors[ i ] );
     4f2:	f8 01       	movw	r30, r16
     4f4:	61 91       	ld	r22, Z+
     4f6:	71 91       	ld	r23, Z+
     4f8:	8f 01       	movw	r16, r30
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    delay_ms( 500 );
     502:	84 ef       	ldi	r24, 0xF4	; 244
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                    clear();
     50a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
     50e:	0e 15       	cp	r16, r14
     510:	1f 05       	cpc	r17, r15
     512:	79 f7       	brne	.-34     	; 0x4f2 <_ZN5Robot8mainMenuEv+0x8e>
                    delay_ms( 500 );
                    clear();
                }

                // Play sound to notify that the next iteration will begin.
                play( ">>a32" );
     514:	82 e7       	ldi	r24, 0x72	; 114
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <play>
     51c:	e5 cf       	rjmp	.-54     	; 0x4e8 <_ZN5Robot8mainMenuEv+0x84>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
                    testSensors();
                }

                if ( button_is_pressed( BUTTON_B ) )
     51e:	80 e1       	ldi	r24, 0x10	; 16
     520:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <button_is_pressed>
     524:	88 23       	and	r24, r24
     526:	81 f2       	breq	.-96     	; 0x4c8 <_ZN5Robot8mainMenuEv+0x64>
                {
                    wait_for_button_release( BUTTON_B );//wait for the button to be released before run the program
     528:	80 e1       	ldi	r24, 0x10	; 16
     52a:	0e 94 66 12 	call	0x24cc	; 0x24cc <wait_for_button_release>
                    // mainRobotLogic the initialization menu
                    initializeMenu();
     52e:	c1 01       	movw	r24, r2
     530:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN5Robot14initializeMenuEv>
        }

        // Main logic function
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
     534:	d1 01       	movw	r26, r2
     536:	4d 91       	ld	r20, X+
     538:	5c 91       	ld	r21, X
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	12 96       	adiw	r26, 0x02	; 2
     53e:	8d 91       	ld	r24, X+
     540:	9c 91       	ld	r25, X
     542:	13 97       	sbiw	r26, 0x03	; 3
     544:	9c 01       	movw	r18, r24
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	2a e5       	ldi	r18, 0x5A	; 90
     554:	24 9f       	mul	r18, r20
     556:	f0 01       	movw	r30, r0
     558:	25 9f       	mul	r18, r21
     55a:	f0 0d       	add	r31, r0
     55c:	11 24       	eor	r1, r1
     55e:	8e 0f       	add	r24, r30
     560:	9f 1f       	adc	r25, r31
     562:	fc 01       	movw	r30, r24
     564:	ef 50       	subi	r30, 0x0F	; 15
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	11 82       	std	Z+1, r1	; 0x01
     56a:	10 82       	st	Z, r1
            matrix[ position.x ][ position.y ].isVisited	= true;
     56c:	4d 91       	ld	r20, X+
     56e:	5c 91       	ld	r21, X
     570:	11 97       	sbiw	r26, 0x01	; 1
     572:	12 96       	adiw	r26, 0x02	; 2
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	13 97       	sbiw	r26, 0x03	; 3
     57a:	bc 01       	movw	r22, r24
     57c:	66 0f       	add	r22, r22
     57e:	77 1f       	adc	r23, r23
     580:	86 0f       	add	r24, r22
     582:	97 1f       	adc	r25, r23
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	24 9f       	mul	r18, r20
     58a:	f0 01       	movw	r30, r0
     58c:	25 9f       	mul	r18, r21
     58e:	f0 0d       	add	r31, r0
     590:	11 24       	eor	r1, r1
     592:	8e 0f       	add	r24, r30
     594:	9f 1f       	adc	r25, r31
     596:	fc 01       	movw	r30, r24
     598:	ef 50       	subi	r30, 0x0F	; 15
     59a:	fe 4f       	sbci	r31, 0xFE	; 254
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	85 83       	std	Z+5, r24	; 0x05

                return result;
            };

            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );
     5a0:	2b aa       	std	Y+51, r2	; 0x33
     5a2:	3c aa       	std	Y+52, r3	; 0x34
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( position.x != finishPos.x || position.y != finishPos.y )
     5a4:	f1 01       	movw	r30, r2
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	85 81       	ldd	r24, Z+5	; 0x05
     5ac:	96 81       	ldd	r25, Z+6	; 0x06
     5ae:	28 17       	cp	r18, r24
     5b0:	39 07       	cpc	r19, r25
     5b2:	41 f4       	brne	.+16     	; 0x5c4 <_ZN5Robot8mainMenuEv+0x160>
     5b4:	22 81       	ldd	r18, Z+2	; 0x02
     5b6:	33 81       	ldd	r19, Z+3	; 0x03
     5b8:	87 81       	ldd	r24, Z+7	; 0x07
     5ba:	90 85       	ldd	r25, Z+8	; 0x08
     5bc:	28 17       	cp	r18, r24
     5be:	39 07       	cpc	r19, r25
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <_ZN5Robot8mainMenuEv+0x160>
     5c2:	82 cf       	rjmp	.-252    	; 0x4c8 <_ZN5Robot8mainMenuEv+0x64>
            {
                stepToGoal( finishPos );
     5c4:	91 01       	movw	r18, r2
     5c6:	2b 5f       	subi	r18, 0xFB	; 251
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	3a ab       	std	Y+50, r19	; 0x32
     5cc:	29 ab       	std	Y+49, r18	; 0x31
     5ce:	88 e0       	ldi	r24, 0x08	; 8
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	98 af       	std	Y+56, r25	; 0x38
     5d4:	8f ab       	std	Y+55, r24	; 0x37
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	e4 e1       	ldi	r30, 0x14	; 20
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	ad a9       	ldd	r26, Y+53	; 0x35
     5de:	be a9       	ldd	r27, Y+54	; 0x36
     5e0:	01 90       	ld	r0, Z+
     5e2:	0d 92       	st	X+, r0
     5e4:	8a 95       	dec	r24
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <_ZN5Robot8mainMenuEv+0x17c>
            short	minDist					= getDist( from, to );
     5e8:	69 a9       	ldd	r22, Y+49	; 0x31
     5ea:	7a a9       	ldd	r23, Y+50	; 0x32
     5ec:	8b a9       	ldd	r24, Y+51	; 0x33
     5ee:	9c a9       	ldd	r25, Y+52	; 0x34
     5f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     5f4:	5c 01       	movw	r10, r24
            Point2D	minPos( from );
     5f6:	d1 01       	movw	r26, r2
     5f8:	4d 90       	ld	r4, X+
     5fa:	5d 90       	ld	r5, X+
     5fc:	6d 90       	ld	r6, X+
     5fe:	7c 90       	ld	r7, X
     600:	fe 01       	movw	r30, r28
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	4f 01       	movw	r8, r30
     606:	f4 01       	movw	r30, r8

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     608:	d1 01       	movw	r26, r2
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	cd 90       	ld	r12, X+
     60e:	dc 90       	ld	r13, X
     610:	13 97       	sbiw	r26, 0x03	; 3
     612:	80 89       	ldd	r24, Z+16	; 0x10
     614:	91 89       	ldd	r25, Z+17	; 0x11
     616:	c8 0e       	add	r12, r24
     618:	d9 1e       	adc	r13, r25
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
     61a:	8d 91       	ld	r24, X+
     61c:	9c 91       	ld	r25, X
     61e:	00 81       	ld	r16, Z
     620:	11 81       	ldd	r17, Z+1	; 0x01
     622:	b2 e0       	ldi	r27, 0x02	; 2
     624:	8b 0e       	add	r8, r27
     626:	91 1c       	adc	r9, r1
     628:	08 0f       	add	r16, r24
     62a:	19 1f       	adc	r17, r25
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     62c:	1a a3       	std	Y+34, r17	; 0x22
     62e:	09 a3       	std	Y+33, r16	; 0x21
     630:	dc a2       	std	Y+36, r13	; 0x24
     632:	cb a2       	std	Y+35, r12	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     634:	69 a9       	ldd	r22, Y+49	; 0x31
     636:	7a a9       	ldd	r23, Y+50	; 0x32
     638:	8f a5       	ldd	r24, Y+47	; 0x2f
     63a:	98 a9       	ldd	r25, Y+48	; 0x30
     63c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     640:	7c 01       	movw	r14, r24

                if ( doPrint )
     642:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     646:	88 23       	and	r24, r24
     648:	a1 f1       	breq	.+104    	; 0x6b2 <_ZN5Robot8mainMenuEv+0x24e>

        }

        void printPos( short x, short y )
        {
            clear();
     64a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "(" );
     64e:	81 e5       	ldi	r24, 0x51	; 81
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( x );
     656:	b8 01       	movw	r22, r16
     658:	11 0f       	add	r17, r17
     65a:	88 0b       	sbc	r24, r24
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ", " );
     662:	83 e5       	ldi	r24, 0x53	; 83
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( y );
     66a:	b6 01       	movw	r22, r12
     66c:	dd 0c       	add	r13, r13
     66e:	88 0b       	sbc	r24, r24
     670:	99 0b       	sbc	r25, r25
     672:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ")" );
     676:	86 e5       	ldi	r24, 0x56	; 86
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos.x, currPos.y );
                    lcd_goto_xy( 0, 1 );
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
                    print_long( currDist );
     686:	b7 01       	movw	r22, r14
     688:	0f 2c       	mov	r0, r15
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    print( " | " );
     694:	88 e7       	ldi	r24, 0x78	; 120
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                    print_long( minDist );
     69c:	b5 01       	movw	r22, r10
     69e:	0b 2c       	mov	r0, r11
     6a0:	00 0c       	add	r0, r0
     6a2:	88 0b       	sbc	r24, r24
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    delay_ms( 4000 );
     6aa:	80 ea       	ldi	r24, 0xA0	; 160
     6ac:	9f e0       	ldi	r25, 0x0F	; 15
     6ae:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                }

                if ( currDist < minDist )
     6b2:	ea 14       	cp	r14, r10
     6b4:	fb 04       	cpc	r15, r11
     6b6:	2c f4       	brge	.+10     	; 0x6c2 <_ZN5Robot8mainMenuEv+0x25e>
                {
                    minDist = currDist;
                    minPos	= currPos;
     6b8:	49 a0       	ldd	r4, Y+33	; 0x21
     6ba:	5a a0       	ldd	r5, Y+34	; 0x22
     6bc:	6b a0       	ldd	r6, Y+35	; 0x23
     6be:	7c a0       	ldd	r7, Y+36	; 0x24
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     6c0:	57 01       	movw	r10, r14
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     6c2:	eb a5       	ldd	r30, Y+43	; 0x2b
     6c4:	fc a5       	ldd	r31, Y+44	; 0x2c
     6c6:	8e 16       	cp	r8, r30
     6c8:	9f 06       	cpc	r9, r31
     6ca:	09 f0       	breq	.+2      	; 0x6ce <_ZN5Robot8mainMenuEv+0x26a>
     6cc:	9c cf       	rjmp	.-200    	; 0x606 <_ZN5Robot8mainMenuEv+0x1a2>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     6ce:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
     6d2:	72 01       	movw	r14, r4
     6d4:	83 01       	movw	r16, r6
            , y ( inY )
        {}

        bool operator==( const Point2D& pt ) const
        {
            return x == pt.x && y == pt.y;
     6d6:	d1 01       	movw	r26, r2
     6d8:	8d 91       	ld	r24, X+
     6da:	9c 91       	ld	r25, X
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	84 15       	cp	r24, r4
     6e0:	95 05       	cpc	r25, r5
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <_ZN5Robot8mainMenuEv+0x282>
     6e4:	37 c5       	rjmp	.+2670   	; 0x1154 <__stack+0x855>
     6e6:	12 96       	adiw	r26, 0x02	; 2
     6e8:	2d 91       	ld	r18, X+
     6ea:	3c 91       	ld	r19, X
     6ec:	13 97       	sbiw	r26, 0x03	; 3
     6ee:	26 15       	cp	r18, r6
     6f0:	37 05       	cpc	r19, r7
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <_ZN5Robot8mainMenuEv+0x292>
     6f4:	70 c0       	rjmp	.+224    	; 0x7d6 <_ZN5Robot8mainMenuEv+0x372>
     6f6:	07 c5       	rjmp	.+2574   	; 0x1106 <__stack+0x807>
     6f8:	f5 01       	movw	r30, r10
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     6fa:	d1 01       	movw	r26, r2
     6fc:	12 96       	adiw	r26, 0x02	; 2
     6fe:	8d 90       	ld	r8, X+
     700:	9c 90       	ld	r9, X
     702:	13 97       	sbiw	r26, 0x03	; 3
     704:	80 89       	ldd	r24, Z+16	; 0x10
     706:	91 89       	ldd	r25, Z+17	; 0x11
     708:	88 0e       	add	r8, r24
     70a:	99 1e       	adc	r9, r25
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
     70c:	8d 91       	ld	r24, X+
     70e:	9c 91       	ld	r25, X
     710:	00 81       	ld	r16, Z
     712:	11 81       	ldd	r17, Z+1	; 0x01
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	ab 0e       	add	r10, r27
     718:	b1 1c       	adc	r11, r1
     71a:	08 0f       	add	r16, r24
     71c:	19 1f       	adc	r17, r25
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     71e:	1a a3       	std	Y+34, r17	; 0x22
     720:	09 a3       	std	Y+33, r16	; 0x21
     722:	9c a2       	std	Y+36, r9	; 0x24
     724:	8b a2       	std	Y+35, r8	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     726:	6b a9       	ldd	r22, Y+51	; 0x33
     728:	7c a9       	ldd	r23, Y+52	; 0x34
     72a:	8f a5       	ldd	r24, Y+47	; 0x2f
     72c:	98 a9       	ldd	r25, Y+48	; 0x30
     72e:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
     732:	6c 01       	movw	r12, r24

                if ( doPrint )
     734:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     738:	88 23       	and	r24, r24
     73a:	a1 f1       	breq	.+104    	; 0x7a4 <_ZN5Robot8mainMenuEv+0x340>

        }

        void printPos( short x, short y )
        {
            clear();
     73c:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "(" );
     740:	81 e5       	ldi	r24, 0x51	; 81
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( x );
     748:	b8 01       	movw	r22, r16
     74a:	11 0f       	add	r17, r17
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ", " );
     754:	83 e5       	ldi	r24, 0x53	; 83
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( y );
     75c:	b4 01       	movw	r22, r8
     75e:	99 0c       	add	r9, r9
     760:	88 0b       	sbc	r24, r24
     762:	99 0b       	sbc	r25, r25
     764:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ")" );
     768:	86 e5       	ldi	r24, 0x56	; 86
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos.x, currPos.y );
                    lcd_goto_xy( 0, 1 );
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
                    print_long( currDist );
     778:	b6 01       	movw	r22, r12
     77a:	0d 2c       	mov	r0, r13
     77c:	00 0c       	add	r0, r0
     77e:	88 0b       	sbc	r24, r24
     780:	99 0b       	sbc	r25, r25
     782:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    print( " | " );
     786:	88 e7       	ldi	r24, 0x78	; 120
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                    print_long( minDist );
     78e:	b7 01       	movw	r22, r14
     790:	0f 2c       	mov	r0, r15
     792:	00 0c       	add	r0, r0
     794:	88 0b       	sbc	r24, r24
     796:	99 0b       	sbc	r25, r25
     798:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    delay_ms( 4000 );
     79c:	80 ea       	ldi	r24, 0xA0	; 160
     79e:	9f e0       	ldi	r25, 0x0F	; 15
     7a0:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                }

                if ( currDist < minDist )
     7a4:	ce 14       	cp	r12, r14
     7a6:	df 04       	cpc	r13, r15
     7a8:	2c f4       	brge	.+10     	; 0x7b4 <_ZN5Robot8mainMenuEv+0x350>
                {
                    minDist = currDist;
                    minPos	= currPos;
     7aa:	49 a0       	ldd	r4, Y+33	; 0x21
     7ac:	5a a0       	ldd	r5, Y+34	; 0x22
     7ae:	6b a0       	ldd	r6, Y+35	; 0x23
     7b0:	7c a0       	ldd	r7, Y+36	; 0x24
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     7b2:	76 01       	movw	r14, r12
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     7b4:	eb a5       	ldd	r30, Y+43	; 0x2b
     7b6:	fc a5       	ldd	r31, Y+44	; 0x2c
     7b8:	ae 16       	cp	r10, r30
     7ba:	bf 06       	cpc	r11, r31
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <_ZN5Robot8mainMenuEv+0x35c>
     7be:	9c cf       	rjmp	.-200    	; 0x6f8 <_ZN5Robot8mainMenuEv+0x294>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     7c0:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
     7c4:	c2 01       	movw	r24, r4
     7c6:	83 01       	movw	r16, r6
            , y ( inY )
        {}

        bool operator==( const Point2D& pt ) const
        {
            return x == pt.x && y == pt.y;
     7c8:	d1 01       	movw	r26, r2
     7ca:	2d 91       	ld	r18, X+
     7cc:	3c 91       	ld	r19, X
     7ce:	24 15       	cp	r18, r4
     7d0:	35 05       	cpc	r19, r5
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <_ZN5Robot8mainMenuEv+0x372>
     7d4:	be c4       	rjmp	.+2428   	; 0x1152 <__stack+0x853>
     7d6:	f1 01       	movw	r30, r2
     7d8:	22 81       	ldd	r18, Z+2	; 0x02
     7da:	33 81       	ldd	r19, Z+3	; 0x03
     7dc:	20 17       	cp	r18, r16
     7de:	31 07       	cpc	r19, r17
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <_ZN5Robot8mainMenuEv+0x380>
     7e2:	29 c1       	rjmp	.+594    	; 0xa36 <__stack+0x137>
     7e4:	7c 01       	movw	r14, r24
     7e6:	b6 c4       	rjmp	.+2412   	; 0x1154 <__stack+0x855>

                case EOrientation::East:
                    return 0;

                case EOrientation::NorthEast:
                    return 45;
     7e8:	0f 2e       	mov	r0, r31
     7ea:	fd e2       	ldi	r31, 0x2D	; 45
     7ec:	cf 2e       	mov	r12, r31
     7ee:	d1 2c       	mov	r13, r1
     7f0:	f0 2d       	mov	r31, r0
     7f2:	1a c0       	rjmp	.+52     	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>

                case EOrientation::North:
                    return 90;
     7f4:	0f 2e       	mov	r0, r31
     7f6:	fa e5       	ldi	r31, 0x5A	; 90
     7f8:	cf 2e       	mov	r12, r31
     7fa:	d1 2c       	mov	r13, r1
     7fc:	f0 2d       	mov	r31, r0
     7fe:	14 c0       	rjmp	.+40     	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>

                case EOrientation::NorthWest:
                    return 135;
     800:	0f 2e       	mov	r0, r31
     802:	f7 e8       	ldi	r31, 0x87	; 135
     804:	cf 2e       	mov	r12, r31
     806:	f0 2d       	mov	r31, r0
     808:	d1 2c       	mov	r13, r1
     80a:	0e c0       	rjmp	.+28     	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>

                case EOrientation::West:
                    return 180;
     80c:	0f 2e       	mov	r0, r31
     80e:	f4 eb       	ldi	r31, 0xB4	; 180
     810:	cf 2e       	mov	r12, r31
     812:	f0 2d       	mov	r31, r0
     814:	d1 2c       	mov	r13, r1
     816:	08 c0       	rjmp	.+16     	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>

                case EOrientation::SouthWest:
                default:
                    return 225;
     818:	0f 2e       	mov	r0, r31
     81a:	f1 ee       	ldi	r31, 0xE1	; 225
     81c:	cf 2e       	mov	r12, r31
     81e:	f0 2d       	mov	r31, r0
     820:	d1 2c       	mov	r13, r1
     822:	02 c0       	rjmp	.+4      	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     824:	c1 2c       	mov	r12, r1
     826:	d1 2c       	mov	r13, r1
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     828:	d1 01       	movw	r26, r2
     82a:	8d 91       	ld	r24, X+
     82c:	9c 91       	ld	r25, X
     82e:	11 97       	sbiw	r26, 0x01	; 1
     830:	47 01       	movw	r8, r14
     832:	88 1a       	sub	r8, r24
     834:	99 0a       	sbc	r9, r25
            short	y			= -startPoint.y + endPoint.y;
     836:	12 96       	adiw	r26, 0x02	; 2
     838:	8d 91       	ld	r24, X+
     83a:	9c 91       	ld	r25, X
     83c:	13 97       	sbiw	r26, 0x03	; 3
     83e:	f8 01       	movw	r30, r16
     840:	e8 1b       	sub	r30, r24
     842:	f9 0b       	sbc	r31, r25
     844:	cf 01       	movw	r24, r30
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     846:	81 14       	cp	r8, r1
     848:	91 04       	cpc	r9, r1
     84a:	61 f4       	brne	.+24     	; 0x864 <_ZN5Robot8mainMenuEv+0x400>
            {
                if ( y > 0 )
     84c:	1e 16       	cp	r1, r30
     84e:	1f 06       	cpc	r1, r31
     850:	4c f1       	brlt	.+82     	; 0x8a4 <_ZN5Robot8mainMenuEv+0x440>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     852:	ff 23       	and	r31, r31
     854:	6c f5       	brge	.+90     	; 0x8b0 <_ZN5Robot8mainMenuEv+0x44c>
                {
                    angle = -90;
     856:	0f 2e       	mov	r0, r31
     858:	f6 ea       	ldi	r31, 0xA6	; 166
     85a:	af 2e       	mov	r10, r31
     85c:	f0 2d       	mov	r31, r0
     85e:	bb 24       	eor	r11, r11
     860:	ba 94       	dec	r11
     862:	28 c0       	rjmp	.+80     	; 0x8b4 <_ZN5Robot8mainMenuEv+0x450>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     864:	b4 01       	movw	r22, r8
     866:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodhi4>
     86a:	07 2e       	mov	r0, r23
     86c:	00 0c       	add	r0, r0
     86e:	88 0b       	sbc	r24, r24
     870:	99 0b       	sbc	r25, r25
     872:	0e 94 29 0a 	call	0x1452	; 0x1452 <__floatsisf>
     876:	0e 94 50 09 	call	0x12a0	; 0x12a0 <atan>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	44 e3       	ldi	r20, 0x34	; 52
     880:	53 e4       	ldi	r21, 0x43	; 67
     882:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     886:	2b ed       	ldi	r18, 0xDB	; 219
     888:	3f e0       	ldi	r19, 0x0F	; 15
     88a:	49 e4       	ldi	r20, 0x49	; 73
     88c:	50 e4       	ldi	r21, 0x40	; 64
     88e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__divsf3>
     892:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fixsfsi>
     896:	5b 01       	movw	r10, r22

                if ( x < 0 )
     898:	99 20       	and	r9, r9
     89a:	64 f4       	brge	.+24     	; 0x8b4 <_ZN5Robot8mainMenuEv+0x450>
                {
                    angle += 180;
     89c:	f4 eb       	ldi	r31, 0xB4	; 180
     89e:	af 0e       	add	r10, r31
     8a0:	b1 1c       	adc	r11, r1
     8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <_ZN5Robot8mainMenuEv+0x450>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fa e5       	ldi	r31, 0x5A	; 90
     8a8:	af 2e       	mov	r10, r31
     8aa:	b1 2c       	mov	r11, r1
     8ac:	f0 2d       	mov	r31, r0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <_ZN5Robot8mainMenuEv+0x450>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     8b0:	a1 2c       	mov	r10, r1
     8b2:	b1 2c       	mov	r11, r1
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     8b4:	c6 01       	movw	r24, r12
     8b6:	8a 19       	sub	r24, r10
     8b8:	9b 09       	sbc	r25, r11
     8ba:	6d e2       	ldi	r22, 0x2D	; 45
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodhi4>
     8c2:	07 2e       	mov	r0, r23
     8c4:	00 0c       	add	r0, r0
     8c6:	88 0b       	sbc	r24, r24
     8c8:	99 0b       	sbc	r25, r25
     8ca:	0e 94 29 0a 	call	0x1452	; 0x1452 <__floatsisf>
     8ce:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <round>
     8d2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fixsfsi>
     8d6:	6b 01       	movw	r12, r22

            if ( direction > 4 )
     8d8:	65 30       	cpi	r22, 0x05	; 5
     8da:	71 05       	cpc	r23, r1
     8dc:	1c f0       	brlt	.+6      	; 0x8e4 <_ZN5Robot8mainMenuEv+0x480>
            {
                direction = -8 + direction;
     8de:	38 e0       	ldi	r19, 0x08	; 8
     8e0:	c3 1a       	sub	r12, r19
     8e2:	d1 08       	sbc	r13, r1
            }

            if ( direction < -4 )
     8e4:	4c ef       	ldi	r20, 0xFC	; 252
     8e6:	c4 16       	cp	r12, r20
     8e8:	4f ef       	ldi	r20, 0xFF	; 255
     8ea:	d4 06       	cpc	r13, r20
     8ec:	1c f4       	brge	.+6      	; 0x8f4 <_ZN5Robot8mainMenuEv+0x490>
            {
                direction = 8 + direction;
     8ee:	68 e0       	ldi	r22, 0x08	; 8
     8f0:	c6 0e       	add	r12, r22
     8f2:	d1 1c       	adc	r13, r1
            }

            clear();
     8f4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print_long( direction );
     8f8:	b6 01       	movw	r22, r12
     8fa:	0d 2c       	mov	r0, r13
     8fc:	00 0c       	add	r0, r0
     8fe:	88 0b       	sbc	r24, r24
     900:	99 0b       	sbc	r25, r25
     902:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            lcd_goto_xy( 0, 1 );
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
            print_long( angle );
     90e:	b5 01       	movw	r22, r10
     910:	0b 2c       	mov	r0, r11
     912:	00 0c       	add	r0, r0
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     91c:	8d e2       	ldi	r24, 0x2D	; 45
     91e:	a8 16       	cp	r10, r24
     920:	b1 04       	cpc	r11, r1
     922:	81 f1       	breq	.+96     	; 0x984 <__stack+0x85>
     924:	74 f4       	brge	.+28     	; 0x942 <__stack+0x43>
     926:	a3 ed       	ldi	r26, 0xD3	; 211
     928:	aa 16       	cp	r10, r26
     92a:	af ef       	ldi	r26, 0xFF	; 255
     92c:	ba 06       	cpc	r11, r26
     92e:	09 f1       	breq	.+66     	; 0x972 <__stack+0x73>
     930:	a1 14       	cp	r10, r1
     932:	b1 04       	cpc	r11, r1
     934:	11 f1       	breq	.+68     	; 0x97a <__stack+0x7b>
     936:	b6 ea       	ldi	r27, 0xA6	; 166
     938:	ab 16       	cp	r10, r27
     93a:	bf ef       	ldi	r27, 0xFF	; 255
     93c:	bb 06       	cpc	r11, r27
     93e:	b1 f5       	brne	.+108    	; 0x9ac <__stack+0xad>
     940:	13 c0       	rjmp	.+38     	; 0x968 <__stack+0x69>
     942:	e7 e8       	ldi	r30, 0x87	; 135
     944:	ae 16       	cp	r10, r30
     946:	b1 04       	cpc	r11, r1
     948:	29 f1       	breq	.+74     	; 0x994 <__stack+0x95>
     94a:	2c f4       	brge	.+10     	; 0x956 <__stack+0x57>
     94c:	2a e5       	ldi	r18, 0x5A	; 90
     94e:	a2 16       	cp	r10, r18
     950:	b1 04       	cpc	r11, r1
     952:	e1 f0       	breq	.+56     	; 0x98c <__stack+0x8d>
     954:	2b c0       	rjmp	.+86     	; 0x9ac <__stack+0xad>
     956:	34 eb       	ldi	r19, 0xB4	; 180
     958:	a3 16       	cp	r10, r19
     95a:	b1 04       	cpc	r11, r1
     95c:	f9 f0       	breq	.+62     	; 0x99c <__stack+0x9d>
     95e:	41 ee       	ldi	r20, 0xE1	; 225
     960:	a4 16       	cp	r10, r20
     962:	b1 04       	cpc	r11, r1
     964:	01 f1       	breq	.+64     	; 0x9a6 <__stack+0xa7>
     966:	22 c0       	rjmp	.+68     	; 0x9ac <__stack+0xad>
            {
                case -90:
                    orientation = EOrientation::South;
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	d1 01       	movw	r26, r2
     96c:	14 96       	adiw	r26, 0x04	; 4
     96e:	8c 93       	st	X, r24
     970:	1d c0       	rjmp	.+58     	; 0x9ac <__stack+0xad>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	f1 01       	movw	r30, r2
     976:	84 83       	std	Z+4, r24	; 0x04
     978:	19 c0       	rjmp	.+50     	; 0x9ac <__stack+0xad>
                    break;

                case 0:
                    orientation = EOrientation::East;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	d1 01       	movw	r26, r2
     97e:	14 96       	adiw	r26, 0x04	; 4
     980:	8c 93       	st	X, r24
     982:	14 c0       	rjmp	.+40     	; 0x9ac <__stack+0xad>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	f1 01       	movw	r30, r2
     988:	84 83       	std	Z+4, r24	; 0x04
     98a:	10 c0       	rjmp	.+32     	; 0x9ac <__stack+0xad>
                    break;

                case 90:
                    orientation = EOrientation::North;
     98c:	d1 01       	movw	r26, r2
     98e:	14 96       	adiw	r26, 0x04	; 4
     990:	1c 92       	st	X, r1
     992:	0c c0       	rjmp	.+24     	; 0x9ac <__stack+0xad>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     994:	27 e0       	ldi	r18, 0x07	; 7
     996:	f1 01       	movw	r30, r2
     998:	24 83       	std	Z+4, r18	; 0x04
     99a:	08 c0       	rjmp	.+16     	; 0x9ac <__stack+0xad>
                    break;

                case 180:
                    orientation = EOrientation::West;
     99c:	86 e0       	ldi	r24, 0x06	; 6
     99e:	d1 01       	movw	r26, r2
     9a0:	14 96       	adiw	r26, 0x04	; 4
     9a2:	8c 93       	st	X, r24
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     9a6:	85 e0       	ldi	r24, 0x05	; 5
     9a8:	f1 01       	movw	r30, r2
     9aa:	84 83       	std	Z+4, r24	; 0x04
            print_long( angle );
            //delay_ms(1000);

            setDeviceOrientation( angle );

            if ( direction < 0 )
     9ac:	dd 20       	and	r13, r13
     9ae:	ec f4       	brge	.+58     	; 0x9ea <__stack+0xeb>
        }

    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     9b0:	6a e2       	ldi	r22, 0x2A	; 42
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	86 ed       	ldi	r24, 0xD6	; 214
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>

            delay_ms( 200 * turns );
     9bc:	c6 01       	movw	r24, r12
     9be:	99 23       	and	r25, r25
     9c0:	24 f4       	brge	.+8      	; 0x9ca <__stack+0xcb>
     9c2:	88 27       	eor	r24, r24
     9c4:	99 27       	eor	r25, r25
     9c6:	8c 19       	sub	r24, r12
     9c8:	9d 09       	sbc	r25, r13
     9ca:	48 ec       	ldi	r20, 0xC8	; 200
     9cc:	9c 01       	movw	r18, r24
     9ce:	42 9f       	mul	r20, r18
     9d0:	c0 01       	movw	r24, r0
     9d2:	43 9f       	mul	r20, r19
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>

            set_motors( 0, 0 );
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>
     9e8:	1f c0       	rjmp	.+62     	; 0xa28 <__stack+0x129>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     9ea:	1c 14       	cp	r1, r12
     9ec:	1d 04       	cpc	r1, r13
     9ee:	e4 f4       	brge	.+56     	; 0xa28 <__stack+0x129>
        }

    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     9f0:	66 ed       	ldi	r22, 0xD6	; 214
     9f2:	7f ef       	ldi	r23, 0xFF	; 255
     9f4:	8a e2       	ldi	r24, 0x2A	; 42
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>

            delay_ms( 200 * turns );
     9fc:	c6 01       	movw	r24, r12
     9fe:	99 23       	and	r25, r25
     a00:	24 f4       	brge	.+8      	; 0xa0a <__stack+0x10b>
     a02:	88 27       	eor	r24, r24
     a04:	99 27       	eor	r25, r25
     a06:	8c 19       	sub	r24, r12
     a08:	9d 09       	sbc	r25, r13
     a0a:	e8 ec       	ldi	r30, 0xC8	; 200
     a0c:	dc 01       	movw	r26, r24
     a0e:	ea 9f       	mul	r30, r26
     a10:	c0 01       	movw	r24, r0
     a12:	eb 9f       	mul	r30, r27
     a14:	90 0d       	add	r25, r0
     a16:	11 24       	eor	r1, r1
     a18:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>

            set_motors( 0, 0 );
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <__stack+0x139>
            , y ( inY )
        {}

        bool operator==( const Point2D& pt ) const
        {
            return x == pt.x && y == pt.y;
     a36:	7c 01       	movw	r14, r24
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensors[ 5 ];
            read_line_sensors( sensors, IR_EMITTERS_ON );
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	8d a9       	ldd	r24, Y+53	; 0x35
     a3c:	9e a9       	ldd	r25, Y+54	; 0x36
     a3e:	0e 94 01 13 	call	0x2602	; 0x2602 <read_line_sensors>

            if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	81 3b       	cpi	r24, 0xB1	; 177
     a48:	94 40       	sbci	r25, 0x04	; 4
     a4a:	50 f4       	brcc	.+20     	; 0xa60 <__stack+0x161>
     a4c:	8d 81       	ldd	r24, Y+5	; 0x05
     a4e:	9e 81       	ldd	r25, Y+6	; 0x06
     a50:	81 3b       	cpi	r24, 0xB1	; 177
     a52:	94 40       	sbci	r25, 0x04	; 4
     a54:	28 f4       	brcc	.+10     	; 0xa60 <__stack+0x161>
     a56:	8f 81       	ldd	r24, Y+7	; 0x07
     a58:	98 85       	ldd	r25, Y+8	; 0x08
     a5a:	81 3b       	cpi	r24, 0xB1	; 177
     a5c:	94 40       	sbci	r25, 0x04	; 4
     a5e:	38 f1       	brcs	.+78     	; 0xaae <__stack+0x1af>
            {
                clear();
     a60:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
                print( "!OBS!" );
     a64:	8c e7       	ldi	r24, 0x7C	; 124
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                delay_ms( 1000 );
     a6c:	88 ee       	ldi	r24, 0xE8	; 232
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     a74:	98 01       	movw	r18, r16
     a76:	22 0f       	add	r18, r18
     a78:	33 1f       	adc	r19, r19
     a7a:	20 0f       	add	r18, r16
     a7c:	31 1f       	adc	r19, r17
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	4a e5       	ldi	r20, 0x5A	; 90
     a84:	4e 9d       	mul	r20, r14
     a86:	c0 01       	movw	r24, r0
     a88:	4f 9d       	mul	r20, r15
     a8a:	90 0d       	add	r25, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	fc 01       	movw	r30, r24
     a94:	ef 50       	subi	r30, 0x0F	; 15
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	84 83       	std	Z+4, r24	; 0x04
     a9c:	8f a9       	ldd	r24, Y+55	; 0x37
     a9e:	98 ad       	ldd	r25, Y+56	; 0x38
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	98 af       	std	Y+56, r25	; 0x38
     aa4:	8f ab       	std	Y+55, r24	; 0x37
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f0       	breq	.+2      	; 0xaac <__stack+0x1ad>
     aaa:	95 cd       	rjmp	.-1238   	; 0x5d6 <_ZN5Robot8mainMenuEv+0x172>
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <__stack+0x1c3>
                print( "!OBS!" );
                delay_ms( 1000 );
                return false;
            }

            clear();
     aae:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "NOT OBS" );
     ab2:	82 e8       	ldi	r24, 0x82	; 130
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            delay_ms( 1000 );
     aba:	88 ee       	ldi	r24, 0xE8	; 232
     abc:	93 e0       	ldi	r25, 0x03	; 3
     abe:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     ac2:	fe a2       	std	Y+38, r15	; 0x26
     ac4:	ed a2       	std	Y+37, r14	; 0x25
     ac6:	18 a7       	std	Y+40, r17	; 0x28
     ac8:	0f a3       	std	Y+39, r16	; 0x27

        }

        void printPos( short x, short y )
        {
            clear();
     aca:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "(" );
     ace:	81 e5       	ldi	r24, 0x51	; 81
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( x );
     ad6:	b7 01       	movw	r22, r14
     ad8:	ff 0c       	add	r15, r15
     ada:	88 0b       	sbc	r24, r24
     adc:	99 0b       	sbc	r25, r25
     ade:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ", " );
     ae2:	83 e5       	ldi	r24, 0x53	; 83
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( y );
     aea:	b8 01       	movw	r22, r16
     aec:	11 0f       	add	r17, r17
     aee:	88 0b       	sbc	r24, r24
     af0:	99 0b       	sbc	r25, r25
     af2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ")" );
     af6:	86 e5       	ldi	r24, 0x56	; 86
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );

            printPos( nextPos.x, nextPos.y );
            delay_ms( 1000 );
     afe:	88 ee       	ldi	r24, 0xE8	; 232
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     b06:	8f a1       	ldd	r24, Y+39	; 0x27
     b08:	98 a5       	ldd	r25, Y+40	; 0x28
     b0a:	2d a1       	ldd	r18, Y+37	; 0x25
     b0c:	3e a1       	ldd	r19, Y+38	; 0x26
     b0e:	ac 01       	movw	r20, r24
     b10:	44 0f       	add	r20, r20
     b12:	55 1f       	adc	r21, r21
     b14:	84 0f       	add	r24, r20
     b16:	95 1f       	adc	r25, r21
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	4a e5       	ldi	r20, 0x5A	; 90
     b1e:	42 9f       	mul	r20, r18
     b20:	f0 01       	movw	r30, r0
     b22:	43 9f       	mul	r20, r19
     b24:	f0 0d       	add	r31, r0
     b26:	11 24       	eor	r1, r1
     b28:	8e 0f       	add	r24, r30
     b2a:	9f 1f       	adc	r25, r31
     b2c:	fc 01       	movw	r30, r24
     b2e:	ef 50       	subi	r30, 0x0F	; 15
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	85 81       	ldd	r24, Z+5	; 0x05
     b34:	81 11       	cpse	r24, r1
     b36:	e6 c0       	rjmp	.+460    	; 0xd04 <__stack+0x405>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	e4 e1       	ldi	r30, 0x14	; 20
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	ad a9       	ldd	r26, Y+53	; 0x35
     b40:	be a9       	ldd	r27, Y+54	; 0x36
     b42:	01 90       	ld	r0, Z+
     b44:	0d 92       	st	X+, r0
     b46:	8a 95       	dec	r24
     b48:	e1 f7       	brne	.-8      	; 0xb42 <__stack+0x243>
            short	minDist					= getDist( from, to );
     b4a:	be 01       	movw	r22, r28
     b4c:	6b 5d       	subi	r22, 0xDB	; 219
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	cb 01       	movw	r24, r22
     b52:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     b56:	4c 01       	movw	r8, r24
            Point2D	minPos( from );
     b58:	4d a0       	ldd	r4, Y+37	; 0x25
     b5a:	5e a0       	ldd	r5, Y+38	; 0x26
     b5c:	6f a0       	ldd	r6, Y+39	; 0x27
     b5e:	78 a4       	ldd	r7, Y+40	; 0x28
     b60:	de 01       	movw	r26, r28
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	6d 01       	movw	r12, r26
     b66:	f6 01       	movw	r30, r12

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     b68:	af a0       	ldd	r10, Y+39	; 0x27
     b6a:	b8 a4       	ldd	r11, Y+40	; 0x28
     b6c:	80 89       	ldd	r24, Z+16	; 0x10
     b6e:	91 89       	ldd	r25, Z+17	; 0x11
     b70:	a8 0e       	add	r10, r24
     b72:	b9 1e       	adc	r11, r25
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
     b74:	0d a1       	ldd	r16, Y+37	; 0x25
     b76:	1e a1       	ldd	r17, Y+38	; 0x26
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	b2 e0       	ldi	r27, 0x02	; 2
     b7e:	cb 0e       	add	r12, r27
     b80:	d1 1c       	adc	r13, r1
     b82:	08 0f       	add	r16, r24
     b84:	19 1f       	adc	r17, r25
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     b86:	1a a3       	std	Y+34, r17	; 0x22
     b88:	09 a3       	std	Y+33, r16	; 0x21
     b8a:	bc a2       	std	Y+36, r11	; 0x24
     b8c:	ab a2       	std	Y+35, r10	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     b8e:	be 01       	movw	r22, r28
     b90:	6b 5d       	subi	r22, 0xDB	; 219
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	ce 01       	movw	r24, r28
     b96:	81 96       	adiw	r24, 0x21	; 33
     b98:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     b9c:	7c 01       	movw	r14, r24

                if ( doPrint )
     b9e:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     ba2:	88 23       	and	r24, r24
     ba4:	a1 f1       	breq	.+104    	; 0xc0e <__stack+0x30f>

        }

        void printPos( short x, short y )
        {
            clear();
     ba6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "(" );
     baa:	81 e5       	ldi	r24, 0x51	; 81
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( x );
     bb2:	b8 01       	movw	r22, r16
     bb4:	11 0f       	add	r17, r17
     bb6:	88 0b       	sbc	r24, r24
     bb8:	99 0b       	sbc	r25, r25
     bba:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ", " );
     bbe:	83 e5       	ldi	r24, 0x53	; 83
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( y );
     bc6:	b5 01       	movw	r22, r10
     bc8:	bb 0c       	add	r11, r11
     bca:	88 0b       	sbc	r24, r24
     bcc:	99 0b       	sbc	r25, r25
     bce:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ")" );
     bd2:	86 e5       	ldi	r24, 0x56	; 86
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos.x, currPos.y );
                    lcd_goto_xy( 0, 1 );
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
                    print_long( currDist );
     be2:	b7 01       	movw	r22, r14
     be4:	0f 2c       	mov	r0, r15
     be6:	00 0c       	add	r0, r0
     be8:	88 0b       	sbc	r24, r24
     bea:	99 0b       	sbc	r25, r25
     bec:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    print( " | " );
     bf0:	88 e7       	ldi	r24, 0x78	; 120
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                    print_long( minDist );
     bf8:	b4 01       	movw	r22, r8
     bfa:	09 2c       	mov	r0, r9
     bfc:	00 0c       	add	r0, r0
     bfe:	88 0b       	sbc	r24, r24
     c00:	99 0b       	sbc	r25, r25
     c02:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    delay_ms( 4000 );
     c06:	80 ea       	ldi	r24, 0xA0	; 160
     c08:	9f e0       	ldi	r25, 0x0F	; 15
     c0a:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                }

                if ( currDist < minDist )
     c0e:	e8 14       	cp	r14, r8
     c10:	f9 04       	cpc	r15, r9
     c12:	2c f4       	brge	.+10     	; 0xc1e <__stack+0x31f>
                {
                    minDist = currDist;
                    minPos	= currPos;
     c14:	49 a0       	ldd	r4, Y+33	; 0x21
     c16:	5a a0       	ldd	r5, Y+34	; 0x22
     c18:	6b a0       	ldd	r6, Y+35	; 0x23
     c1a:	7c a0       	ldd	r7, Y+36	; 0x24
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     c1c:	47 01       	movw	r8, r14
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     c1e:	eb a5       	ldd	r30, Y+43	; 0x2b
     c20:	fc a5       	ldd	r31, Y+44	; 0x2c
     c22:	ce 16       	cp	r12, r30
     c24:	df 06       	cpc	r13, r31
     c26:	09 f0       	breq	.+2      	; 0xc2a <__stack+0x32b>
     c28:	9e cf       	rjmp	.-196    	; 0xb66 <__stack+0x267>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     c2a:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     c2e:	6d a1       	ldd	r22, Y+37	; 0x25
     c30:	7e a1       	ldd	r23, Y+38	; 0x26
     c32:	8f a1       	ldd	r24, Y+39	; 0x27
     c34:	98 a5       	ldd	r25, Y+40	; 0x28
     c36:	ac 01       	movw	r20, r24
     c38:	44 0f       	add	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	48 0f       	add	r20, r24
     c3e:	59 1f       	adc	r21, r25
     c40:	44 0f       	add	r20, r20
     c42:	55 1f       	adc	r21, r21
     c44:	1a e5       	ldi	r17, 0x5A	; 90
     c46:	16 9f       	mul	r17, r22
     c48:	90 01       	movw	r18, r0
     c4a:	17 9f       	mul	r17, r23
     c4c:	30 0d       	add	r19, r0
     c4e:	11 24       	eor	r1, r1
     c50:	24 0f       	add	r18, r20
     c52:	35 1f       	adc	r19, r21
     c54:	d9 01       	movw	r26, r18
     c56:	af 50       	subi	r26, 0x0F	; 15
     c58:	be 4f       	sbci	r27, 0xFE	; 254
     c5a:	ed 90       	ld	r14, X+
     c5c:	fc 90       	ld	r15, X
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     c5e:	a3 01       	movw	r20, r6
     c60:	44 0f       	add	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	46 0d       	add	r20, r6
     c66:	57 1d       	adc	r21, r7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	14 9d       	mul	r17, r4
     c6e:	90 01       	movw	r18, r0
     c70:	15 9d       	mul	r17, r5
     c72:	30 0d       	add	r19, r0
     c74:	11 24       	eor	r1, r1
     c76:	24 0f       	add	r18, r20
     c78:	35 1f       	adc	r19, r21
     c7a:	2f 50       	subi	r18, 0x0F	; 15
     c7c:	3e 4f       	sbci	r19, 0xFE	; 254
     c7e:	d9 01       	movw	r26, r18
     c80:	2d 91       	ld	r18, X+
     c82:	3c 91       	ld	r19, X
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     c84:	64 15       	cp	r22, r4
     c86:	75 05       	cpc	r23, r5
     c88:	31 f0       	breq	.+12     	; 0xc96 <__stack+0x397>
     c8a:	86 15       	cp	r24, r6
     c8c:	97 05       	cpc	r25, r7
     c8e:	49 f4       	brne	.+18     	; 0xca2 <__stack+0x3a3>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     c90:	42 e0       	ldi	r20, 0x02	; 2
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	0b c0       	rjmp	.+22     	; 0xcac <__stack+0x3ad>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     c96:	86 15       	cp	r24, r6
     c98:	97 05       	cpc	r25, r7
     c9a:	31 f0       	breq	.+12     	; 0xca8 <__stack+0x3a9>
            {
                distance = 2;
     c9c:	42 e0       	ldi	r20, 0x02	; 2
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__stack+0x3ad>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     ca2:	43 e0       	ldi	r20, 0x03	; 3
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <__stack+0x3ad>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     cac:	24 0f       	add	r18, r20
     cae:	35 1f       	adc	r19, r21

                if ( savedDist > currDist )
     cb0:	2e 15       	cp	r18, r14
     cb2:	3f 05       	cpc	r19, r15
     cb4:	9c f4       	brge	.+38     	; 0xcdc <__stack+0x3dd>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     cb6:	fc 01       	movw	r30, r24
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e8 0f       	add	r30, r24
     cbe:	f9 1f       	adc	r31, r25
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	aa e5       	ldi	r26, 0x5A	; 90
     cc6:	a6 9f       	mul	r26, r22
     cc8:	a0 01       	movw	r20, r0
     cca:	a7 9f       	mul	r26, r23
     ccc:	50 0d       	add	r21, r0
     cce:	11 24       	eor	r1, r1
     cd0:	e4 0f       	add	r30, r20
     cd2:	f5 1f       	adc	r31, r21
     cd4:	ef 50       	subi	r30, 0x0F	; 15
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	31 83       	std	Z+1, r19	; 0x01
     cda:	20 83       	st	Z, r18
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     cdc:	9c 01       	movw	r18, r24
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	82 0f       	add	r24, r18
     ce4:	93 1f       	adc	r25, r19
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	2a e5       	ldi	r18, 0x5A	; 90
     cec:	26 9f       	mul	r18, r22
     cee:	f0 01       	movw	r30, r0
     cf0:	27 9f       	mul	r18, r23
     cf2:	f0 0d       	add	r31, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	8e 0f       	add	r24, r30
     cf8:	9f 1f       	adc	r25, r31
     cfa:	fc 01       	movw	r30, r24
     cfc:	ef 50       	subi	r30, 0x0F	; 15
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	85 83       	std	Z+5, r24	; 0x05
            }

            // Move until stepping on the goal position
            if ( position.x != goalPos.x || position.y != goalPos.y )
     d04:	f1 01       	movw	r30, r2
     d06:	20 81       	ld	r18, Z
     d08:	31 81       	ldd	r19, Z+1	; 0x01
     d0a:	85 81       	ldd	r24, Z+5	; 0x05
     d0c:	96 81       	ldd	r25, Z+6	; 0x06
     d0e:	28 17       	cp	r18, r24
     d10:	39 07       	cpc	r19, r25
     d12:	39 f4       	brne	.+14     	; 0xd22 <__stack+0x423>
     d14:	22 81       	ldd	r18, Z+2	; 0x02
     d16:	33 81       	ldd	r19, Z+3	; 0x03
     d18:	87 81       	ldd	r24, Z+7	; 0x07
     d1a:	90 85       	ldd	r25, Z+8	; 0x08
     d1c:	28 17       	cp	r18, r24
     d1e:	39 07       	cpc	r19, r25
     d20:	e1 f1       	breq	.+120    	; 0xd9a <__stack+0x49b>
            {
                position = nextPos;
     d22:	8d a1       	ldd	r24, Y+37	; 0x25
     d24:	9e a1       	ldd	r25, Y+38	; 0x26
     d26:	af a1       	ldd	r26, Y+39	; 0x27
     d28:	b8 a5       	ldd	r27, Y+40	; 0x28
     d2a:	f1 01       	movw	r30, r2
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 19, 19 );
     d34:	63 e1       	ldi	r22, 0x13	; 19
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	83 e1       	ldi	r24, 0x13	; 19
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	89 ad       	ldd	r24, Y+57	; 0x39
     d44:	9a ad       	ldd	r25, Y+58	; 0x3a
     d46:	0e 94 01 13 	call	0x2602	; 0x2602 <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     d4a:	d1 01       	movw	r26, r2
     d4c:	1b 96       	adiw	r26, 0x0b	; 11
     d4e:	8d 91       	ld	r24, X+
     d50:	9c 91       	ld	r25, X
     d52:	1c 97       	sbiw	r26, 0x0c	; 12
     d54:	81 3b       	cpi	r24, 0xB1	; 177
     d56:	b4 e0       	ldi	r27, 0x04	; 4
     d58:	9b 07       	cpc	r25, r27
     d5a:	88 f4       	brcc	.+34     	; 0xd7e <__stack+0x47f>
     d5c:	f1 01       	movw	r30, r2
     d5e:	25 85       	ldd	r18, Z+13	; 0x0d
     d60:	36 85       	ldd	r19, Z+14	; 0x0e
            {
                return true;
            }
            else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     d62:	8f 35       	cpi	r24, 0x5F	; 95
     d64:	91 40       	sbci	r25, 0x01	; 1
     d66:	58 f4       	brcc	.+22     	; 0xd7e <__stack+0x47f>
     d68:	2f 35       	cpi	r18, 0x5F	; 95
     d6a:	31 40       	sbci	r19, 0x01	; 1
     d6c:	40 f4       	brcc	.+16     	; 0xd7e <__stack+0x47f>

        void moveForward()
        {
            set_motors( 19, 19 );

            while ( !isOnMarker() ) {}
     d6e:	d1 01       	movw	r26, r2
     d70:	1f 96       	adiw	r26, 0x0f	; 15
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	50 97       	sbiw	r26, 0x10	; 16
     d78:	8f 35       	cpi	r24, 0x5F	; 95
     d7a:	91 40       	sbci	r25, 0x01	; 1
     d7c:	08 f3       	brcs	.-62     	; 0xd40 <__stack+0x441>

            play( ">>a32" );
     d7e:	82 e7       	ldi	r24, 0x72	; 114
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <play>
            delay_ms( 900 );
     d86:	84 e8       	ldi	r24, 0x84	; 132
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
            set_motors( 0, 0 );
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>

            while ( position.x != finishPos.x || position.y != finishPos.y )
            {
                stepToGoal( finishPos );

                if ( position.x == finishPos.x && position.y == finishPos.y )
     d9a:	f1 01       	movw	r30, r2
     d9c:	20 81       	ld	r18, Z
     d9e:	31 81       	ldd	r19, Z+1	; 0x01
     da0:	85 81       	ldd	r24, Z+5	; 0x05
     da2:	96 81       	ldd	r25, Z+6	; 0x06
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	09 f0       	breq	.+2      	; 0xdac <__stack+0x4ad>
     daa:	fc cb       	rjmp	.-2056   	; 0x5a4 <_ZN5Robot8mainMenuEv+0x140>
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	47 81       	ldd	r20, Z+7	; 0x07
     db2:	50 85       	ldd	r21, Z+8	; 0x08
     db4:	84 17       	cp	r24, r20
     db6:	95 07       	cpc	r25, r21
     db8:	09 f0       	breq	.+2      	; 0xdbc <__stack+0x4bd>
     dba:	f4 cb       	rjmp	.-2072   	; 0x5a4 <_ZN5Robot8mainMenuEv+0x140>
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
     dbc:	ac 01       	movw	r20, r24
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	84 0f       	add	r24, r20
     dc4:	95 1f       	adc	r25, r21
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	6a e5       	ldi	r22, 0x5A	; 90
     dcc:	62 9f       	mul	r22, r18
     dce:	f0 01       	movw	r30, r0
     dd0:	63 9f       	mul	r22, r19
     dd2:	f0 0d       	add	r31, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	8e 0f       	add	r24, r30
     dd8:	9f 1f       	adc	r25, r31
     dda:	fc 01       	movw	r30, r24
     ddc:	ef 50       	subi	r30, 0x0F	; 15
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	13 82       	std	Z+3, r1	; 0x03
     de2:	12 82       	std	Z+2, r1	; 0x02
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
     de4:	f1 01       	movw	r30, r2
     de6:	85 81       	ldd	r24, Z+5	; 0x05
     de8:	96 81       	ldd	r25, Z+6	; 0x06
     dea:	a7 81       	ldd	r26, Z+7	; 0x07
     dec:	b0 85       	ldd	r27, Z+8	; 0x08
     dee:	58 2f       	mov	r21, r24
     df0:	49 2f       	mov	r20, r25
     df2:	8d a3       	std	Y+37, r24	; 0x25
     df4:	9e a3       	std	Y+38, r25	; 0x26
     df6:	af a3       	std	Y+39, r26	; 0x27
     df8:	b8 a7       	std	Y+40, r27	; 0x28
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
     dfa:	87 81       	ldd	r24, Z+7	; 0x07
     dfc:	90 85       	ldd	r25, Z+8	; 0x08
     dfe:	25 81       	ldd	r18, Z+5	; 0x05
     e00:	36 81       	ldd	r19, Z+6	; 0x06
     e02:	fc 01       	movw	r30, r24
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	8e 0f       	add	r24, r30
     e0a:	9f 1f       	adc	r25, r31
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	62 9f       	mul	r22, r18
     e12:	f0 01       	movw	r30, r0
     e14:	63 9f       	mul	r22, r19
     e16:	f0 0d       	add	r31, r0
     e18:	11 24       	eor	r1, r1
     e1a:	8e 0f       	add	r24, r30
     e1c:	9f 1f       	adc	r25, r31
     e1e:	fc 01       	movw	r30, r24
     e20:	ef 50       	subi	r30, 0x0F	; 15
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
     e24:	a0 80       	ld	r10, Z
     e26:	b1 80       	ldd	r11, Z+1	; 0x01

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     e28:	25 2f       	mov	r18, r21
     e2a:	34 2f       	mov	r19, r20
     e2c:	8f a1       	ldd	r24, Y+39	; 0x27
     e2e:	98 a5       	ldd	r25, Y+40	; 0x28
     e30:	fc 01       	movw	r30, r24
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	e8 0f       	add	r30, r24
     e38:	f9 1f       	adc	r31, r25
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	62 9f       	mul	r22, r18
     e40:	a0 01       	movw	r20, r0
     e42:	63 9f       	mul	r22, r19
     e44:	50 0d       	add	r21, r0
     e46:	11 24       	eor	r1, r1
     e48:	e4 0f       	add	r30, r20
     e4a:	f5 1f       	adc	r31, r21
     e4c:	ef 50       	subi	r30, 0x0F	; 15
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	40 81       	ld	r20, Z
     e52:	51 81       	ldd	r21, Z+1	; 0x01
     e54:	41 15       	cp	r20, r1
     e56:	51 05       	cpc	r21, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <__stack+0x55d>
     e5a:	cc c0       	rjmp	.+408    	; 0xff4 <__stack+0x6f5>
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
     e5c:	b5 01       	movw	r22, r10
     e5e:	64 1b       	sub	r22, r20
     e60:	75 0b       	sbc	r23, r21
     e62:	fc 01       	movw	r30, r24
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e8 0f       	add	r30, r24
     e6a:	f9 1f       	adc	r31, r25
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	aa e5       	ldi	r26, 0x5A	; 90
     e72:	a2 9f       	mul	r26, r18
     e74:	a0 01       	movw	r20, r0
     e76:	a3 9f       	mul	r26, r19
     e78:	50 0d       	add	r21, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	e4 0f       	add	r30, r20
     e7e:	f5 1f       	adc	r31, r21
     e80:	ef 50       	subi	r30, 0x0F	; 15
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	42 81       	ldd	r20, Z+2	; 0x02
     e86:	53 81       	ldd	r21, Z+3	; 0x03
     e88:	46 17       	cp	r20, r22
     e8a:	57 07       	cpc	r21, r23
     e8c:	a4 f4       	brge	.+40     	; 0xeb6 <__stack+0x5b7>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     e8e:	ac 01       	movw	r20, r24
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	fc 01       	movw	r30, r24
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	a2 9f       	mul	r26, r18
     ea0:	c0 01       	movw	r24, r0
     ea2:	a3 9f       	mul	r26, r19
     ea4:	90 0d       	add	r25, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	8e 0f       	add	r24, r30
     eaa:	9f 1f       	adc	r25, r31
     eac:	fc 01       	movw	r30, r24
     eae:	ef 50       	subi	r30, 0x0F	; 15
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	73 83       	std	Z+3, r23	; 0x03
     eb4:	62 83       	std	Z+2, r22	; 0x02
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	e4 e1       	ldi	r30, 0x14	; 20
     eba:	f1 e0       	ldi	r31, 0x01	; 1
     ebc:	ad a9       	ldd	r26, Y+53	; 0x35
     ebe:	be a9       	ldd	r27, Y+54	; 0x36
     ec0:	01 90       	ld	r0, Z+
     ec2:	0d 92       	st	X+, r0
     ec4:	8a 95       	dec	r24
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <__stack+0x5c1>
            short	minDist					= getDist( from, to );
     ec8:	be 01       	movw	r22, r28
     eca:	6b 5d       	subi	r22, 0xDB	; 219
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	cb 01       	movw	r24, r22
     ed0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     ed4:	6c 01       	movw	r12, r24
            Point2D	minPos( from );
     ed6:	4d a0       	ldd	r4, Y+37	; 0x25
     ed8:	5e a0       	ldd	r5, Y+38	; 0x26
     eda:	6f a0       	ldd	r6, Y+39	; 0x27
     edc:	78 a4       	ldd	r7, Y+40	; 0x28
     ede:	fe 01       	movw	r30, r28
     ee0:	31 96       	adiw	r30, 0x01	; 1
     ee2:	4f 01       	movw	r8, r30
     ee4:	f4 01       	movw	r30, r8

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     ee6:	2f a1       	ldd	r18, Y+39	; 0x27
     ee8:	38 a5       	ldd	r19, Y+40	; 0x28
     eea:	80 89       	ldd	r24, Z+16	; 0x10
     eec:	91 89       	ldd	r25, Z+17	; 0x11
     eee:	79 01       	movw	r14, r18
     ef0:	e8 0e       	add	r14, r24
     ef2:	f9 1e       	adc	r15, r25
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
     ef4:	0d a1       	ldd	r16, Y+37	; 0x25
     ef6:	1e a1       	ldd	r17, Y+38	; 0x26
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	8f 0e       	add	r8, r31
     f00:	91 1c       	adc	r9, r1
     f02:	08 0f       	add	r16, r24
     f04:	19 1f       	adc	r17, r25
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     f06:	1a a3       	std	Y+34, r17	; 0x22
     f08:	09 a3       	std	Y+33, r16	; 0x21
     f0a:	fc a2       	std	Y+36, r15	; 0x24
     f0c:	eb a2       	std	Y+35, r14	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     f0e:	be 01       	movw	r22, r28
     f10:	6b 5d       	subi	r22, 0xDB	; 219
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f a5       	ldd	r24, Y+47	; 0x2f
     f16:	98 a9       	ldd	r25, Y+48	; 0x30
     f18:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     f1c:	9a ab       	std	Y+50, r25	; 0x32
     f1e:	89 ab       	std	Y+49, r24	; 0x31

                if ( doPrint )
     f20:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     f24:	88 23       	and	r24, r24
     f26:	a9 f1       	breq	.+106    	; 0xf92 <__stack+0x693>

        }

        void printPos( short x, short y )
        {
            clear();
     f28:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print( "(" );
     f2c:	81 e5       	ldi	r24, 0x51	; 81
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( x );
     f34:	b8 01       	movw	r22, r16
     f36:	11 0f       	add	r17, r17
     f38:	88 0b       	sbc	r24, r24
     f3a:	99 0b       	sbc	r25, r25
     f3c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ", " );
     f40:	83 e5       	ldi	r24, 0x53	; 83
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            print_long( y );
     f48:	b7 01       	movw	r22, r14
     f4a:	ff 0c       	add	r15, r15
     f4c:	88 0b       	sbc	r24, r24
     f4e:	99 0b       	sbc	r25, r25
     f50:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( ")" );
     f54:	86 e5       	ldi	r24, 0x56	; 86
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos.x, currPos.y );
                    lcd_goto_xy( 0, 1 );
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	0e 94 81 11 	call	0x2302	; 0x2302 <lcd_goto_xy>
                    print_long( currDist );
     f64:	29 a9       	ldd	r18, Y+49	; 0x31
     f66:	3a a9       	ldd	r19, Y+50	; 0x32
     f68:	b9 01       	movw	r22, r18
     f6a:	33 0f       	add	r19, r19
     f6c:	88 0b       	sbc	r24, r24
     f6e:	99 0b       	sbc	r25, r25
     f70:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    print( " | " );
     f74:	88 e7       	ldi	r24, 0x78	; 120
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                    print_long( minDist );
     f7c:	b6 01       	movw	r22, r12
     f7e:	0d 2c       	mov	r0, r13
     f80:	00 0c       	add	r0, r0
     f82:	88 0b       	sbc	r24, r24
     f84:	99 0b       	sbc	r25, r25
     f86:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
                    delay_ms( 4000 );
     f8a:	80 ea       	ldi	r24, 0xA0	; 160
     f8c:	9f e0       	ldi	r25, 0x0F	; 15
     f8e:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                }

                if ( currDist < minDist )
     f92:	89 a9       	ldd	r24, Y+49	; 0x31
     f94:	9a a9       	ldd	r25, Y+50	; 0x32
     f96:	8c 15       	cp	r24, r12
     f98:	9d 05       	cpc	r25, r13
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <__stack+0x6a7>
                {
                    minDist = currDist;
                    minPos	= currPos;
     f9c:	49 a0       	ldd	r4, Y+33	; 0x21
     f9e:	5a a0       	ldd	r5, Y+34	; 0x22
     fa0:	6b a0       	ldd	r6, Y+35	; 0x23
     fa2:	7c a0       	ldd	r7, Y+36	; 0x24
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     fa4:	6c 01       	movw	r12, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     fa6:	ab a5       	ldd	r26, Y+43	; 0x2b
     fa8:	bc a5       	ldd	r27, Y+44	; 0x2c
     faa:	8a 16       	cp	r8, r26
     fac:	9b 06       	cpc	r9, r27
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__stack+0x6b3>
     fb0:	99 cf       	rjmp	.-206    	; 0xee4 <__stack+0x5e5>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     fb2:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
                if ( currCell.distToFinish < dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
     fb6:	4d a2       	std	Y+37, r4	; 0x25
     fb8:	5e a2       	std	Y+38, r5	; 0x26
     fba:	6f a2       	std	Y+39, r6	; 0x27
     fbc:	78 a6       	std	Y+40, r7	; 0x28
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     fbe:	24 2d       	mov	r18, r4
     fc0:	35 2d       	mov	r19, r5
     fc2:	8f a1       	ldd	r24, Y+39	; 0x27
     fc4:	98 a5       	ldd	r25, Y+40	; 0x28
     fc6:	fc 01       	movw	r30, r24
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	e8 0f       	add	r30, r24
     fce:	f9 1f       	adc	r31, r25
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	ba e5       	ldi	r27, 0x5A	; 90
     fd6:	b2 9f       	mul	r27, r18
     fd8:	a0 01       	movw	r20, r0
     fda:	b3 9f       	mul	r27, r19
     fdc:	50 0d       	add	r21, r0
     fde:	11 24       	eor	r1, r1
     fe0:	e4 0f       	add	r30, r20
     fe2:	f5 1f       	adc	r31, r21
     fe4:	ef 50       	subi	r30, 0x0F	; 15
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	40 81       	ld	r20, Z
     fea:	51 81       	ldd	r21, Z+1	; 0x01
     fec:	41 15       	cp	r20, r1
     fee:	51 05       	cpc	r21, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__stack+0x6f5>
     ff2:	34 cf       	rjmp	.-408    	; 0xe5c <__stack+0x55d>
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish < dist - currCell.distToStart )
     ff4:	fc 01       	movw	r30, r24
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	e8 0f       	add	r30, r24
     ffc:	f9 1f       	adc	r31, r25
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	6a e5       	ldi	r22, 0x5A	; 90
    1004:	62 9f       	mul	r22, r18
    1006:	a0 01       	movw	r20, r0
    1008:	63 9f       	mul	r22, r19
    100a:	50 0d       	add	r21, r0
    100c:	11 24       	eor	r1, r1
    100e:	e4 0f       	add	r30, r20
    1010:	f5 1f       	adc	r31, r21
    1012:	ef 50       	subi	r30, 0x0F	; 15
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	42 81       	ldd	r20, Z+2	; 0x02
    1018:	53 81       	ldd	r21, Z+3	; 0x03
    101a:	4a 15       	cp	r20, r10
    101c:	5b 05       	cpc	r21, r11
    101e:	a4 f4       	brge	.+40     	; 0x1048 <__stack+0x749>
            {
                currCell.distToFinish = dist - currCell.distToStart;
    1020:	ac 01       	movw	r20, r24
    1022:	44 0f       	add	r20, r20
    1024:	55 1f       	adc	r21, r21
    1026:	84 0f       	add	r24, r20
    1028:	95 1f       	adc	r25, r21
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	4a e5       	ldi	r20, 0x5A	; 90
    1030:	42 9f       	mul	r20, r18
    1032:	f0 01       	movw	r30, r0
    1034:	43 9f       	mul	r20, r19
    1036:	f0 0d       	add	r31, r0
    1038:	11 24       	eor	r1, r1
    103a:	8e 0f       	add	r24, r30
    103c:	9f 1f       	adc	r25, r31
    103e:	fc 01       	movw	r30, r24
    1040:	ef 50       	subi	r30, 0x0F	; 15
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	b3 82       	std	Z+3, r11	; 0x03
    1046:	a2 82       	std	Z+2, r10	; 0x02

        void reverseDirection()
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );
    1048:	f1 01       	movw	r30, r2
    104a:	c5 80       	ldd	r12, Z+5	; 0x05
    104c:	d6 80       	ldd	r13, Z+6	; 0x06
    104e:	e7 80       	ldd	r14, Z+7	; 0x07
    1050:	f0 84       	ldd	r15, Z+8	; 0x08
    1052:	41 ef       	ldi	r20, 0xF1	; 241
    1054:	51 e0       	ldi	r21, 0x01	; 1

            for ( short i = 0; i < MAX_ROWS; i++ )
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	fa 01       	movw	r30, r20
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    1060:	92 2e       	mov	r9, r18
    1062:	03 2f       	mov	r16, r19
    1064:	df 01       	movw	r26, r30

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
    1066:	65 81       	ldd	r22, Z+5	; 0x05
    1068:	66 23       	and	r22, r22
    106a:	b1 f0       	breq	.+44     	; 0x1098 <__stack+0x799>
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    106c:	a0 80       	ld	r10, Z
    106e:	b1 80       	ldd	r11, Z+1	; 0x01
    1070:	a1 14       	cp	r10, r1
    1072:	b1 04       	cpc	r11, r1
    1074:	21 f4       	brne	.+8      	; 0x107e <__stack+0x77f>
    1076:	e8 2e       	mov	r14, r24
    1078:	f9 2e       	mov	r15, r25
    107a:	c9 2c       	mov	r12, r9
    107c:	d0 2e       	mov	r13, r16
                        {
                            // Save the start position.
                            startPos = Point2D( i, j );
                        }

                        short tmp						= matrix[ i ][ j ].distToFinish;
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	6d 91       	ld	r22, X+
    1082:	7c 91       	ld	r23, X
    1084:	13 97       	sbiw	r26, 0x03	; 3
                        matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
    1086:	13 96       	adiw	r26, 0x03	; 3
    1088:	bc 92       	st	X, r11
    108a:	ae 92       	st	-X, r10
    108c:	12 97       	sbiw	r26, 0x02	; 2
                        matrix[ i ][ j ].distToStart	= tmp;
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	7c 93       	st	X, r23
    1092:	6e 93       	st	-X, r22
                        matrix[ i ][ j ].isVisited		= false;
    1094:	15 96       	adiw	r26, 0x05	; 5
    1096:	1c 92       	st	X, r1
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	36 96       	adiw	r30, 0x06	; 6
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
    109c:	8f 30       	cpi	r24, 0x0F	; 15
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f7       	brne	.-62     	; 0x1064 <__stack+0x765>
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	46 5a       	subi	r20, 0xA6	; 166
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
    10aa:	2f 30       	cpi	r18, 0x0F	; 15
    10ac:	31 05       	cpc	r19, r1
    10ae:	a9 f6       	brne	.-86     	; 0x105a <__stack+0x75b>
                    }
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
    10b0:	d1 01       	movw	r26, r2
    10b2:	15 96       	adiw	r26, 0x05	; 5
    10b4:	cc 92       	st	X, r12
    10b6:	15 97       	sbiw	r26, 0x05	; 5
    10b8:	16 96       	adiw	r26, 0x06	; 6
    10ba:	dc 92       	st	X, r13
    10bc:	16 97       	sbiw	r26, 0x06	; 6
    10be:	17 96       	adiw	r26, 0x07	; 7
    10c0:	ec 92       	st	X, r14
    10c2:	17 97       	sbiw	r26, 0x07	; 7
    10c4:	18 96       	adiw	r26, 0x08	; 8
    10c6:	fc 92       	st	X, r15
    10c8:	18 97       	sbiw	r26, 0x08	; 8

                if ( position.x == finishPos.x && position.y == finishPos.y )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
                    this->reverseDirection();
                    doPrint = true;
    10ca:	41 e0       	ldi	r20, 0x01	; 1
    10cc:	40 93 37 07 	sts	0x0737, r20	; 0x800737 <doPrint>
                    matrix[ position.x ][ position.y ].isVisited	= true;
    10d0:	2d 91       	ld	r18, X+
    10d2:	3c 91       	ld	r19, X
    10d4:	11 97       	sbiw	r26, 0x01	; 1
    10d6:	12 96       	adiw	r26, 0x02	; 2
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	13 97       	sbiw	r26, 0x03	; 3
    10de:	bc 01       	movw	r22, r24
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	86 0f       	add	r24, r22
    10e6:	97 1f       	adc	r25, r23
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	5a e5       	ldi	r21, 0x5A	; 90
    10ee:	52 9f       	mul	r21, r18
    10f0:	f0 01       	movw	r30, r0
    10f2:	53 9f       	mul	r21, r19
    10f4:	f0 0d       	add	r31, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	8e 0f       	add	r24, r30
    10fa:	9f 1f       	adc	r25, r31
    10fc:	fc 01       	movw	r30, r24
    10fe:	ef 50       	subi	r30, 0x0F	; 15
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	45 83       	std	Z+5, r20	; 0x05
    1104:	4f ca       	rjmp	.-2914   	; 0x5a4 <_ZN5Robot8mainMenuEv+0x140>
            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );

            if ( nextPos == position )
            {
                clear();
    1106:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
                print( "here" );
    110a:	8a e8       	ldi	r24, 0x8A	; 138
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
                delay_ms( 1000 );
    1112:	88 ee       	ldi	r24, 0xE8	; 232
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
                clear();
    111a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
    111e:	80 e2       	ldi	r24, 0x20	; 32
    1120:	e4 e1       	ldi	r30, 0x14	; 20
    1122:	f1 e0       	ldi	r31, 0x01	; 1
    1124:	ad a9       	ldd	r26, Y+53	; 0x35
    1126:	be a9       	ldd	r27, Y+54	; 0x36
    1128:	01 90       	ld	r0, Z+
    112a:	0d 92       	st	X+, r0
    112c:	8a 95       	dec	r24
    112e:	e1 f7       	brne	.-8      	; 0x1128 <__stack+0x829>
            short	minDist					= getDist( from, to );
    1130:	6b a9       	ldd	r22, Y+51	; 0x33
    1132:	7c a9       	ldd	r23, Y+52	; 0x34
    1134:	86 2f       	mov	r24, r22
    1136:	97 2f       	mov	r25, r23
    1138:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
    113c:	7c 01       	movw	r14, r24
            Point2D	minPos( from );
    113e:	f1 01       	movw	r30, r2
    1140:	40 80       	ld	r4, Z
    1142:	51 80       	ldd	r5, Z+1	; 0x01
    1144:	62 80       	ldd	r6, Z+2	; 0x02
    1146:	73 80       	ldd	r7, Z+3	; 0x03
    1148:	9e 01       	movw	r18, r28
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	59 01       	movw	r10, r18
    1150:	d3 ca       	rjmp	.-2650   	; 0x6f8 <_ZN5Robot8mainMenuEv+0x294>

                    return result;
                };

                // Get next pos using the lambda from above
                nextPos = this->getClosestAdjacent( position, position, getDistToStart );
    1152:	72 01       	movw	r14, r4
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
    1154:	d1 01       	movw	r26, r2
    1156:	14 96       	adiw	r26, 0x04	; 4
    1158:	8c 91       	ld	r24, X
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	91 05       	cpc	r25, r1
    1160:	08 f0       	brcs	.+2      	; 0x1164 <__stack+0x865>
    1162:	5a cb       	rjmp	.-2380   	; 0x818 <_ZN5Robot8mainMenuEv+0x3b4>
    1164:	fc 01       	movw	r30, r24
    1166:	ec 5c       	subi	r30, 0xCC	; 204
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
    116e:	0f 2e       	mov	r0, r31
    1170:	f3 ed       	ldi	r31, 0xD3	; 211
    1172:	cf 2e       	mov	r12, r31
    1174:	f0 2d       	mov	r31, r0
    1176:	dd 24       	eor	r13, r13
    1178:	da 94       	dec	r13
    117a:	56 cb       	rjmp	.-2388   	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
    117c:	0f 2e       	mov	r0, r31
    117e:	f6 ea       	ldi	r31, 0xA6	; 166
    1180:	cf 2e       	mov	r12, r31
    1182:	f0 2d       	mov	r31, r0
    1184:	dd 24       	eor	r13, r13
    1186:	da 94       	dec	r13
    1188:	4f cb       	rjmp	.-2402   	; 0x828 <_ZN5Robot8mainMenuEv+0x3c4>

0000118a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    118a:	fb 01       	movw	r30, r22
    118c:	40 81       	ld	r20, Z
    118e:	51 81       	ldd	r21, Z+1	; 0x01
    1190:	4f 30       	cpi	r20, 0x0F	; 15
    1192:	51 05       	cpc	r21, r1
    1194:	e8 f4       	brcc	.+58     	; 0x11d0 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x46>
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	8f 30       	cpi	r24, 0x0F	; 15
    119c:	91 05       	cpc	r25, r1
    119e:	d8 f0       	brcs	.+54     	; 0x11d6 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x4c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	9f e7       	ldi	r25, 0x7F	; 127
    11a4:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
    11a6:	9c 01       	movw	r18, r24
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	2a e5       	ldi	r18, 0x5A	; 90
    11b6:	24 9f       	mul	r18, r20
    11b8:	f0 01       	movw	r30, r0
    11ba:	25 9f       	mul	r18, r21
    11bc:	f0 0d       	add	r31, r0
    11be:	11 24       	eor	r1, r1
    11c0:	8e 0f       	add	r24, r30
    11c2:	9f 1f       	adc	r25, r31
    11c4:	fc 01       	movw	r30, r24
    11c6:	ef 50       	subi	r30, 0x0F	; 15
    11c8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f e7       	ldi	r25, 0x7F	; 127
    11d4:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
    11d6:	fc 01       	movw	r30, r24
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	e8 0f       	add	r30, r24
    11de:	f9 1f       	adc	r31, r25
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	6a e5       	ldi	r22, 0x5A	; 90
    11e6:	64 9f       	mul	r22, r20
    11e8:	90 01       	movw	r18, r0
    11ea:	65 9f       	mul	r22, r21
    11ec:	30 0d       	add	r19, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	e2 0f       	add	r30, r18
    11f2:	f3 1f       	adc	r31, r19
    11f4:	ef 50       	subi	r30, 0x0F	; 15
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	25 81       	ldd	r18, Z+5	; 0x05
    11fa:	21 11       	cpse	r18, r1
    11fc:	d4 cf       	rjmp	.-88     	; 0x11a6 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x1c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f e7       	ldi	r25, 0x7F	; 127
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
    1202:	08 95       	ret

00001204 <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	63 97       	sbiw	r28, 0x13	; 19
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    1218:	85 e0       	ldi	r24, 0x05	; 5
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	1c 82       	std	Y+4, r1	; 0x04
    1222:	1b 82       	std	Y+3, r1	; 0x03

    public:
        Robot()
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
    1224:	1d 82       	std	Y+5, r1	; 0x05
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    1226:	9f 83       	std	Y+7, r25	; 0x07
    1228:	8e 83       	std	Y+6, r24	; 0x06
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	99 87       	std	Y+9, r25	; 0x09
    1230:	88 87       	std	Y+8, r24	; 0x08
        {}

        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
    1232:	80 ed       	ldi	r24, 0xD0	; 208
    1234:	97 e0       	ldi	r25, 0x07	; 7
    1236:	0e 94 36 13 	call	0x266c	; 0x266c <pololu_3pi_init>

            set_motors( 0, 0 );
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 37 12 	call	0x246e	; 0x246e <set_motors>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    1246:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <read_battery_millivolts_3pi>
    124a:	8c 01       	movw	r16, r24

            // Display battery voltage and wait two seconds
            unsigned short bat = read_battery_millivolts();
            clear();
    124c:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <clear>
            print_long( bat );
    1250:	b8 01       	movw	r22, r16
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 5e 11 	call	0x22bc	; 0x22bc <print_long>
            print( "mV" );
    125a:	8f e8       	ldi	r24, 0x8F	; 143
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 09 11 	call	0x2212	; 0x2212 <print>
            delay_ms( 1000 );
    1262:	88 ee       	ldi	r24, 0xE8	; 232
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>

            this->mainMenu();
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 32 02 	call	0x464	; 0x464 <_ZN5Robot8mainMenuEv>

00001272 <_GLOBAL__sub_I_doPrint>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1272:	41 ef       	ldi	r20, 0xF1	; 241
    1274:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( SHRT_MAX )
            , distToFinish( SHRT_MAX )
            , isObstacle( false )
            , isVisited( false )
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	9f e7       	ldi	r25, 0x7F	; 127
    127a:	fa 01       	movw	r30, r20
    127c:	46 5a       	subi	r20, 0xA6	; 166
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	9a 01       	movw	r18, r20
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
    1286:	93 83       	std	Z+3, r25	; 0x03
    1288:	82 83       	std	Z+2, r24	; 0x02
    128a:	14 82       	std	Z+4, r1	; 0x04
    128c:	15 82       	std	Z+5, r1	; 0x05
    128e:	36 96       	adiw	r30, 0x06	; 6
            isObstacle		= other.isObstacle;
        }
};

typedef short ( *getDistFunc )( const Point2D&, const Point2D& );
Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    1290:	e2 17       	cp	r30, r18
    1292:	f3 07       	cpc	r31, r19
    1294:	b1 f7       	brne	.-20     	; 0x1282 <_GLOBAL__sub_I_doPrint+0x10>
    1296:	27 e0       	ldi	r18, 0x07	; 7
    1298:	47 33       	cpi	r20, 0x37	; 55
    129a:	52 07       	cpc	r21, r18
    129c:	71 f7       	brne	.-36     	; 0x127a <_GLOBAL__sub_I_doPrint+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    129e:	08 95       	ret

000012a0 <atan>:
    12a0:	df 93       	push	r29
    12a2:	dd 27       	eor	r29, r29
    12a4:	b9 2f       	mov	r27, r25
    12a6:	bf 77       	andi	r27, 0x7F	; 127
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	16 16       	cp	r1, r22
    12ae:	17 06       	cpc	r1, r23
    12b0:	48 07       	cpc	r20, r24
    12b2:	5b 07       	cpc	r21, r27
    12b4:	18 f4       	brcc	.+6      	; 0x12bc <atan+0x1c>
    12b6:	d9 2f       	mov	r29, r25
    12b8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <inverse>
    12bc:	9f 93       	push	r25
    12be:	8f 93       	push	r24
    12c0:	7f 93       	push	r23
    12c2:	6f 93       	push	r22
    12c4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <square>
    12c8:	e8 e7       	ldi	r30, 0x78	; 120
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	0e 94 6d 0a 	call	0x14da	; 0x14da <__fp_powser>
    12d0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_round>
    12d4:	2f 91       	pop	r18
    12d6:	3f 91       	pop	r19
    12d8:	4f 91       	pop	r20
    12da:	5f 91       	pop	r21
    12dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__mulsf3x>
    12e0:	dd 23       	and	r29, r29
    12e2:	51 f0       	breq	.+20     	; 0x12f8 <atan+0x58>
    12e4:	90 58       	subi	r25, 0x80	; 128
    12e6:	a2 ea       	ldi	r26, 0xA2	; 162
    12e8:	2a ed       	ldi	r18, 0xDA	; 218
    12ea:	3f e0       	ldi	r19, 0x0F	; 15
    12ec:	49 ec       	ldi	r20, 0xC9	; 201
    12ee:	5f e3       	ldi	r21, 0x3F	; 63
    12f0:	d0 78       	andi	r29, 0x80	; 128
    12f2:	5d 27       	eor	r21, r29
    12f4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__addsf3x>
    12f8:	df 91       	pop	r29
    12fa:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__fp_round>

000012fe <__divsf3>:
    12fe:	0e 94 93 09 	call	0x1326	; 0x1326 <__divsf3x>
    1302:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__fp_round>
    1306:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_pscB>
    130a:	58 f0       	brcs	.+22     	; 0x1322 <__divsf3+0x24>
    130c:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscA>
    1310:	40 f0       	brcs	.+16     	; 0x1322 <__divsf3+0x24>
    1312:	29 f4       	brne	.+10     	; 0x131e <__divsf3+0x20>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	29 f0       	breq	.+10     	; 0x1322 <__divsf3+0x24>
    1318:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_inf>
    131c:	51 11       	cpse	r21, r1
    131e:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_szero>
    1322:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_nan>

00001326 <__divsf3x>:
    1326:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_split3>
    132a:	68 f3       	brcs	.-38     	; 0x1306 <__divsf3+0x8>

0000132c <__divsf3_pse>:
    132c:	99 23       	and	r25, r25
    132e:	b1 f3       	breq	.-20     	; 0x131c <__divsf3+0x1e>
    1330:	55 23       	and	r21, r21
    1332:	91 f3       	breq	.-28     	; 0x1318 <__divsf3+0x1a>
    1334:	95 1b       	sub	r25, r21
    1336:	55 0b       	sbc	r21, r21
    1338:	bb 27       	eor	r27, r27
    133a:	aa 27       	eor	r26, r26
    133c:	62 17       	cp	r22, r18
    133e:	73 07       	cpc	r23, r19
    1340:	84 07       	cpc	r24, r20
    1342:	38 f0       	brcs	.+14     	; 0x1352 <__divsf3_pse+0x26>
    1344:	9f 5f       	subi	r25, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	22 0f       	add	r18, r18
    134a:	33 1f       	adc	r19, r19
    134c:	44 1f       	adc	r20, r20
    134e:	aa 1f       	adc	r26, r26
    1350:	a9 f3       	breq	.-22     	; 0x133c <__divsf3_pse+0x10>
    1352:	35 d0       	rcall	.+106    	; 0x13be <__divsf3_pse+0x92>
    1354:	0e 2e       	mov	r0, r30
    1356:	3a f0       	brmi	.+14     	; 0x1366 <__divsf3_pse+0x3a>
    1358:	e0 e8       	ldi	r30, 0x80	; 128
    135a:	32 d0       	rcall	.+100    	; 0x13c0 <__divsf3_pse+0x94>
    135c:	91 50       	subi	r25, 0x01	; 1
    135e:	50 40       	sbci	r21, 0x00	; 0
    1360:	e6 95       	lsr	r30
    1362:	00 1c       	adc	r0, r0
    1364:	ca f7       	brpl	.-14     	; 0x1358 <__divsf3_pse+0x2c>
    1366:	2b d0       	rcall	.+86     	; 0x13be <__divsf3_pse+0x92>
    1368:	fe 2f       	mov	r31, r30
    136a:	29 d0       	rcall	.+82     	; 0x13be <__divsf3_pse+0x92>
    136c:	66 0f       	add	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	bb 1f       	adc	r27, r27
    1374:	26 17       	cp	r18, r22
    1376:	37 07       	cpc	r19, r23
    1378:	48 07       	cpc	r20, r24
    137a:	ab 07       	cpc	r26, r27
    137c:	b0 e8       	ldi	r27, 0x80	; 128
    137e:	09 f0       	breq	.+2      	; 0x1382 <__divsf3_pse+0x56>
    1380:	bb 0b       	sbc	r27, r27
    1382:	80 2d       	mov	r24, r0
    1384:	bf 01       	movw	r22, r30
    1386:	ff 27       	eor	r31, r31
    1388:	93 58       	subi	r25, 0x83	; 131
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	3a f0       	brmi	.+14     	; 0x139c <__divsf3_pse+0x70>
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	51 05       	cpc	r21, r1
    1392:	78 f0       	brcs	.+30     	; 0x13b2 <__divsf3_pse+0x86>
    1394:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_inf>
    1398:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_szero>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	e4 f3       	brlt	.-8      	; 0x1398 <__divsf3_pse+0x6c>
    13a0:	98 3e       	cpi	r25, 0xE8	; 232
    13a2:	d4 f3       	brlt	.-12     	; 0x1398 <__divsf3_pse+0x6c>
    13a4:	86 95       	lsr	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	b7 95       	ror	r27
    13ac:	f7 95       	ror	r31
    13ae:	9f 5f       	subi	r25, 0xFF	; 255
    13b0:	c9 f7       	brne	.-14     	; 0x13a4 <__divsf3_pse+0x78>
    13b2:	88 0f       	add	r24, r24
    13b4:	91 1d       	adc	r25, r1
    13b6:	96 95       	lsr	r25
    13b8:	87 95       	ror	r24
    13ba:	97 f9       	bld	r25, 7
    13bc:	08 95       	ret
    13be:	e1 e0       	ldi	r30, 0x01	; 1
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	bb 1f       	adc	r27, r27
    13c8:	62 17       	cp	r22, r18
    13ca:	73 07       	cpc	r23, r19
    13cc:	84 07       	cpc	r24, r20
    13ce:	ba 07       	cpc	r27, r26
    13d0:	20 f0       	brcs	.+8      	; 0x13da <__divsf3_pse+0xae>
    13d2:	62 1b       	sub	r22, r18
    13d4:	73 0b       	sbc	r23, r19
    13d6:	84 0b       	sbc	r24, r20
    13d8:	ba 0b       	sbc	r27, r26
    13da:	ee 1f       	adc	r30, r30
    13dc:	88 f7       	brcc	.-30     	; 0x13c0 <__divsf3_pse+0x94>
    13de:	e0 95       	com	r30
    13e0:	08 95       	ret

000013e2 <__fixsfsi>:
    13e2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    13e6:	68 94       	set
    13e8:	b1 11       	cpse	r27, r1
    13ea:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_szero>
    13ee:	08 95       	ret

000013f0 <__fixunssfsi>:
    13f0:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__fp_splitA>
    13f4:	88 f0       	brcs	.+34     	; 0x1418 <__fixunssfsi+0x28>
    13f6:	9f 57       	subi	r25, 0x7F	; 127
    13f8:	98 f0       	brcs	.+38     	; 0x1420 <__fixunssfsi+0x30>
    13fa:	b9 2f       	mov	r27, r25
    13fc:	99 27       	eor	r25, r25
    13fe:	b7 51       	subi	r27, 0x17	; 23
    1400:	b0 f0       	brcs	.+44     	; 0x142e <__fixunssfsi+0x3e>
    1402:	e1 f0       	breq	.+56     	; 0x143c <__fixunssfsi+0x4c>
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	1a f0       	brmi	.+6      	; 0x1414 <__fixunssfsi+0x24>
    140e:	ba 95       	dec	r27
    1410:	c9 f7       	brne	.-14     	; 0x1404 <__fixunssfsi+0x14>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <__fixunssfsi+0x4c>
    1414:	b1 30       	cpi	r27, 0x01	; 1
    1416:	91 f0       	breq	.+36     	; 0x143c <__fixunssfsi+0x4c>
    1418:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fp_zero>
    141c:	b1 e0       	ldi	r27, 0x01	; 1
    141e:	08 95       	ret
    1420:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_zero>
    1424:	67 2f       	mov	r22, r23
    1426:	78 2f       	mov	r23, r24
    1428:	88 27       	eor	r24, r24
    142a:	b8 5f       	subi	r27, 0xF8	; 248
    142c:	39 f0       	breq	.+14     	; 0x143c <__fixunssfsi+0x4c>
    142e:	b9 3f       	cpi	r27, 0xF9	; 249
    1430:	cc f3       	brlt	.-14     	; 0x1424 <__fixunssfsi+0x34>
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b3 95       	inc	r27
    143a:	d9 f7       	brne	.-10     	; 0x1432 <__fixunssfsi+0x42>
    143c:	3e f4       	brtc	.+14     	; 0x144c <__fixunssfsi+0x5c>
    143e:	90 95       	com	r25
    1440:	80 95       	com	r24
    1442:	70 95       	com	r23
    1444:	61 95       	neg	r22
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	8f 4f       	sbci	r24, 0xFF	; 255
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	08 95       	ret

0000144e <__floatunsisf>:
    144e:	e8 94       	clt
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <__floatsisf+0x12>

00001452 <__floatsisf>:
    1452:	97 fb       	bst	r25, 7
    1454:	3e f4       	brtc	.+14     	; 0x1464 <__floatsisf+0x12>
    1456:	90 95       	com	r25
    1458:	80 95       	com	r24
    145a:	70 95       	com	r23
    145c:	61 95       	neg	r22
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	99 23       	and	r25, r25
    1466:	a9 f0       	breq	.+42     	; 0x1492 <__floatsisf+0x40>
    1468:	f9 2f       	mov	r31, r25
    146a:	96 e9       	ldi	r25, 0x96	; 150
    146c:	bb 27       	eor	r27, r27
    146e:	93 95       	inc	r25
    1470:	f6 95       	lsr	r31
    1472:	87 95       	ror	r24
    1474:	77 95       	ror	r23
    1476:	67 95       	ror	r22
    1478:	b7 95       	ror	r27
    147a:	f1 11       	cpse	r31, r1
    147c:	f8 cf       	rjmp	.-16     	; 0x146e <__floatsisf+0x1c>
    147e:	fa f4       	brpl	.+62     	; 0x14be <__floatsisf+0x6c>
    1480:	bb 0f       	add	r27, r27
    1482:	11 f4       	brne	.+4      	; 0x1488 <__floatsisf+0x36>
    1484:	60 ff       	sbrs	r22, 0
    1486:	1b c0       	rjmp	.+54     	; 0x14be <__floatsisf+0x6c>
    1488:	6f 5f       	subi	r22, 0xFF	; 255
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	8f 4f       	sbci	r24, 0xFF	; 255
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	16 c0       	rjmp	.+44     	; 0x14be <__floatsisf+0x6c>
    1492:	88 23       	and	r24, r24
    1494:	11 f0       	breq	.+4      	; 0x149a <__floatsisf+0x48>
    1496:	96 e9       	ldi	r25, 0x96	; 150
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <__floatsisf+0x6a>
    149a:	77 23       	and	r23, r23
    149c:	21 f0       	breq	.+8      	; 0x14a6 <__floatsisf+0x54>
    149e:	9e e8       	ldi	r25, 0x8E	; 142
    14a0:	87 2f       	mov	r24, r23
    14a2:	76 2f       	mov	r23, r22
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <__floatsisf+0x5e>
    14a6:	66 23       	and	r22, r22
    14a8:	71 f0       	breq	.+28     	; 0x14c6 <__floatsisf+0x74>
    14aa:	96 e8       	ldi	r25, 0x86	; 134
    14ac:	86 2f       	mov	r24, r22
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	2a f0       	brmi	.+10     	; 0x14be <__floatsisf+0x6c>
    14b4:	9a 95       	dec	r25
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	da f7       	brpl	.-10     	; 0x14b4 <__floatsisf+0x62>
    14be:	88 0f       	add	r24, r24
    14c0:	96 95       	lsr	r25
    14c2:	87 95       	ror	r24
    14c4:	97 f9       	bld	r25, 7
    14c6:	08 95       	ret

000014c8 <__fp_inf>:
    14c8:	97 f9       	bld	r25, 7
    14ca:	9f 67       	ori	r25, 0x7F	; 127
    14cc:	80 e8       	ldi	r24, 0x80	; 128
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	08 95       	ret

000014d4 <__fp_nan>:
    14d4:	9f ef       	ldi	r25, 0xFF	; 255
    14d6:	80 ec       	ldi	r24, 0xC0	; 192
    14d8:	08 95       	ret

000014da <__fp_powser>:
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	1f 93       	push	r17
    14e0:	0f 93       	push	r16
    14e2:	ff 92       	push	r15
    14e4:	ef 92       	push	r14
    14e6:	df 92       	push	r13
    14e8:	7b 01       	movw	r14, r22
    14ea:	8c 01       	movw	r16, r24
    14ec:	68 94       	set
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <__fp_powser+0x22>
    14f0:	da 2e       	mov	r13, r26
    14f2:	ef 01       	movw	r28, r30
    14f4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__mulsf3x>
    14f8:	fe 01       	movw	r30, r28
    14fa:	e8 94       	clt
    14fc:	a5 91       	lpm	r26, Z+
    14fe:	25 91       	lpm	r18, Z+
    1500:	35 91       	lpm	r19, Z+
    1502:	45 91       	lpm	r20, Z+
    1504:	55 91       	lpm	r21, Z+
    1506:	a6 f3       	brts	.-24     	; 0x14f0 <__fp_powser+0x16>
    1508:	ef 01       	movw	r28, r30
    150a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__addsf3x>
    150e:	fe 01       	movw	r30, r28
    1510:	97 01       	movw	r18, r14
    1512:	a8 01       	movw	r20, r16
    1514:	da 94       	dec	r13
    1516:	69 f7       	brne	.-38     	; 0x14f2 <__fp_powser+0x18>
    1518:	df 90       	pop	r13
    151a:	ef 90       	pop	r14
    151c:	ff 90       	pop	r15
    151e:	0f 91       	pop	r16
    1520:	1f 91       	pop	r17
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <__fp_pscA>:
    1528:	00 24       	eor	r0, r0
    152a:	0a 94       	dec	r0
    152c:	16 16       	cp	r1, r22
    152e:	17 06       	cpc	r1, r23
    1530:	18 06       	cpc	r1, r24
    1532:	09 06       	cpc	r0, r25
    1534:	08 95       	ret

00001536 <__fp_pscB>:
    1536:	00 24       	eor	r0, r0
    1538:	0a 94       	dec	r0
    153a:	12 16       	cp	r1, r18
    153c:	13 06       	cpc	r1, r19
    153e:	14 06       	cpc	r1, r20
    1540:	05 06       	cpc	r0, r21
    1542:	08 95       	ret

00001544 <__fp_round>:
    1544:	09 2e       	mov	r0, r25
    1546:	03 94       	inc	r0
    1548:	00 0c       	add	r0, r0
    154a:	11 f4       	brne	.+4      	; 0x1550 <__fp_round+0xc>
    154c:	88 23       	and	r24, r24
    154e:	52 f0       	brmi	.+20     	; 0x1564 <__fp_round+0x20>
    1550:	bb 0f       	add	r27, r27
    1552:	40 f4       	brcc	.+16     	; 0x1564 <__fp_round+0x20>
    1554:	bf 2b       	or	r27, r31
    1556:	11 f4       	brne	.+4      	; 0x155c <__fp_round+0x18>
    1558:	60 ff       	sbrs	r22, 0
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <__fp_round+0x20>
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	8f 4f       	sbci	r24, 0xFF	; 255
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	08 95       	ret

00001566 <__fp_split3>:
    1566:	57 fd       	sbrc	r21, 7
    1568:	90 58       	subi	r25, 0x80	; 128
    156a:	44 0f       	add	r20, r20
    156c:	55 1f       	adc	r21, r21
    156e:	59 f0       	breq	.+22     	; 0x1586 <__fp_splitA+0x10>
    1570:	5f 3f       	cpi	r21, 0xFF	; 255
    1572:	71 f0       	breq	.+28     	; 0x1590 <__fp_splitA+0x1a>
    1574:	47 95       	ror	r20

00001576 <__fp_splitA>:
    1576:	88 0f       	add	r24, r24
    1578:	97 fb       	bst	r25, 7
    157a:	99 1f       	adc	r25, r25
    157c:	61 f0       	breq	.+24     	; 0x1596 <__fp_splitA+0x20>
    157e:	9f 3f       	cpi	r25, 0xFF	; 255
    1580:	79 f0       	breq	.+30     	; 0x15a0 <__fp_splitA+0x2a>
    1582:	87 95       	ror	r24
    1584:	08 95       	ret
    1586:	12 16       	cp	r1, r18
    1588:	13 06       	cpc	r1, r19
    158a:	14 06       	cpc	r1, r20
    158c:	55 1f       	adc	r21, r21
    158e:	f2 cf       	rjmp	.-28     	; 0x1574 <__fp_split3+0xe>
    1590:	46 95       	lsr	r20
    1592:	f1 df       	rcall	.-30     	; 0x1576 <__fp_splitA>
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <__fp_splitA+0x30>
    1596:	16 16       	cp	r1, r22
    1598:	17 06       	cpc	r1, r23
    159a:	18 06       	cpc	r1, r24
    159c:	99 1f       	adc	r25, r25
    159e:	f1 cf       	rjmp	.-30     	; 0x1582 <__fp_splitA+0xc>
    15a0:	86 95       	lsr	r24
    15a2:	71 05       	cpc	r23, r1
    15a4:	61 05       	cpc	r22, r1
    15a6:	08 94       	sec
    15a8:	08 95       	ret

000015aa <__fp_zero>:
    15aa:	e8 94       	clt

000015ac <__fp_szero>:
    15ac:	bb 27       	eor	r27, r27
    15ae:	66 27       	eor	r22, r22
    15b0:	77 27       	eor	r23, r23
    15b2:	cb 01       	movw	r24, r22
    15b4:	97 f9       	bld	r25, 7
    15b6:	08 95       	ret

000015b8 <inverse>:
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 e8       	ldi	r24, 0x80	; 128
    15c2:	9f e3       	ldi	r25, 0x3F	; 63
    15c4:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__divsf3>

000015c8 <__mulsf3>:
    15c8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__mulsf3x>
    15cc:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__fp_round>
    15d0:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscA>
    15d4:	38 f0       	brcs	.+14     	; 0x15e4 <__mulsf3+0x1c>
    15d6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_pscB>
    15da:	20 f0       	brcs	.+8      	; 0x15e4 <__mulsf3+0x1c>
    15dc:	95 23       	and	r25, r21
    15de:	11 f0       	breq	.+4      	; 0x15e4 <__mulsf3+0x1c>
    15e0:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_inf>
    15e4:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_nan>
    15e8:	11 24       	eor	r1, r1
    15ea:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_szero>

000015ee <__mulsf3x>:
    15ee:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_split3>
    15f2:	70 f3       	brcs	.-36     	; 0x15d0 <__mulsf3+0x8>

000015f4 <__mulsf3_pse>:
    15f4:	95 9f       	mul	r25, r21
    15f6:	c1 f3       	breq	.-16     	; 0x15e8 <__mulsf3+0x20>
    15f8:	95 0f       	add	r25, r21
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	55 1f       	adc	r21, r21
    15fe:	62 9f       	mul	r22, r18
    1600:	f0 01       	movw	r30, r0
    1602:	72 9f       	mul	r23, r18
    1604:	bb 27       	eor	r27, r27
    1606:	f0 0d       	add	r31, r0
    1608:	b1 1d       	adc	r27, r1
    160a:	63 9f       	mul	r22, r19
    160c:	aa 27       	eor	r26, r26
    160e:	f0 0d       	add	r31, r0
    1610:	b1 1d       	adc	r27, r1
    1612:	aa 1f       	adc	r26, r26
    1614:	64 9f       	mul	r22, r20
    1616:	66 27       	eor	r22, r22
    1618:	b0 0d       	add	r27, r0
    161a:	a1 1d       	adc	r26, r1
    161c:	66 1f       	adc	r22, r22
    161e:	82 9f       	mul	r24, r18
    1620:	22 27       	eor	r18, r18
    1622:	b0 0d       	add	r27, r0
    1624:	a1 1d       	adc	r26, r1
    1626:	62 1f       	adc	r22, r18
    1628:	73 9f       	mul	r23, r19
    162a:	b0 0d       	add	r27, r0
    162c:	a1 1d       	adc	r26, r1
    162e:	62 1f       	adc	r22, r18
    1630:	83 9f       	mul	r24, r19
    1632:	a0 0d       	add	r26, r0
    1634:	61 1d       	adc	r22, r1
    1636:	22 1f       	adc	r18, r18
    1638:	74 9f       	mul	r23, r20
    163a:	33 27       	eor	r19, r19
    163c:	a0 0d       	add	r26, r0
    163e:	61 1d       	adc	r22, r1
    1640:	23 1f       	adc	r18, r19
    1642:	84 9f       	mul	r24, r20
    1644:	60 0d       	add	r22, r0
    1646:	21 1d       	adc	r18, r1
    1648:	82 2f       	mov	r24, r18
    164a:	76 2f       	mov	r23, r22
    164c:	6a 2f       	mov	r22, r26
    164e:	11 24       	eor	r1, r1
    1650:	9f 57       	subi	r25, 0x7F	; 127
    1652:	50 40       	sbci	r21, 0x00	; 0
    1654:	9a f0       	brmi	.+38     	; 0x167c <__mulsf3_pse+0x88>
    1656:	f1 f0       	breq	.+60     	; 0x1694 <__mulsf3_pse+0xa0>
    1658:	88 23       	and	r24, r24
    165a:	4a f0       	brmi	.+18     	; 0x166e <__mulsf3_pse+0x7a>
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	bb 1f       	adc	r27, r27
    1662:	66 1f       	adc	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	88 1f       	adc	r24, r24
    1668:	91 50       	subi	r25, 0x01	; 1
    166a:	50 40       	sbci	r21, 0x00	; 0
    166c:	a9 f7       	brne	.-22     	; 0x1658 <__mulsf3_pse+0x64>
    166e:	9e 3f       	cpi	r25, 0xFE	; 254
    1670:	51 05       	cpc	r21, r1
    1672:	80 f0       	brcs	.+32     	; 0x1694 <__mulsf3_pse+0xa0>
    1674:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_inf>
    1678:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_szero>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	e4 f3       	brlt	.-8      	; 0x1678 <__mulsf3_pse+0x84>
    1680:	98 3e       	cpi	r25, 0xE8	; 232
    1682:	d4 f3       	brlt	.-12     	; 0x1678 <__mulsf3_pse+0x84>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b7 95       	ror	r27
    168c:	f7 95       	ror	r31
    168e:	e7 95       	ror	r30
    1690:	9f 5f       	subi	r25, 0xFF	; 255
    1692:	c1 f7       	brne	.-16     	; 0x1684 <__mulsf3_pse+0x90>
    1694:	fe 2b       	or	r31, r30
    1696:	88 0f       	add	r24, r24
    1698:	91 1d       	adc	r25, r1
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	97 f9       	bld	r25, 7
    16a0:	08 95       	ret

000016a2 <round>:
    16a2:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__fp_splitA>
    16a6:	e8 f0       	brcs	.+58     	; 0x16e2 <round+0x40>
    16a8:	9e 37       	cpi	r25, 0x7E	; 126
    16aa:	e8 f0       	brcs	.+58     	; 0x16e6 <round+0x44>
    16ac:	96 39       	cpi	r25, 0x96	; 150
    16ae:	b8 f4       	brcc	.+46     	; 0x16de <round+0x3c>
    16b0:	9e 38       	cpi	r25, 0x8E	; 142
    16b2:	48 f4       	brcc	.+18     	; 0x16c6 <round+0x24>
    16b4:	67 2f       	mov	r22, r23
    16b6:	78 2f       	mov	r23, r24
    16b8:	88 27       	eor	r24, r24
    16ba:	98 5f       	subi	r25, 0xF8	; 248
    16bc:	f9 cf       	rjmp	.-14     	; 0x16b0 <round+0xe>
    16be:	86 95       	lsr	r24
    16c0:	77 95       	ror	r23
    16c2:	67 95       	ror	r22
    16c4:	93 95       	inc	r25
    16c6:	95 39       	cpi	r25, 0x95	; 149
    16c8:	d0 f3       	brcs	.-12     	; 0x16be <round+0x1c>
    16ca:	b6 2f       	mov	r27, r22
    16cc:	b1 70       	andi	r27, 0x01	; 1
    16ce:	6b 0f       	add	r22, r27
    16d0:	71 1d       	adc	r23, r1
    16d2:	81 1d       	adc	r24, r1
    16d4:	20 f4       	brcc	.+8      	; 0x16de <round+0x3c>
    16d6:	87 95       	ror	r24
    16d8:	77 95       	ror	r23
    16da:	67 95       	ror	r22
    16dc:	93 95       	inc	r25
    16de:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_mintl>
    16e2:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__fp_mpack>
    16e6:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_szero>

000016ea <square>:
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__mulsf3>
    16f2:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscA>
    16f6:	38 f0       	brcs	.+14     	; 0x1706 <square+0x1c>
    16f8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_pscB>
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <square+0x1c>
    16fe:	39 f4       	brne	.+14     	; 0x170e <square+0x24>
    1700:	9f 3f       	cpi	r25, 0xFF	; 255
    1702:	19 f4       	brne	.+6      	; 0x170a <square+0x20>
    1704:	26 f4       	brtc	.+8      	; 0x170e <square+0x24>
    1706:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_nan>
    170a:	0e f4       	brtc	.+2      	; 0x170e <square+0x24>
    170c:	e0 95       	com	r30
    170e:	e7 fb       	bst	r30, 7
    1710:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_inf>

00001714 <__addsf3x>:
    1714:	e9 2f       	mov	r30, r25
    1716:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_split3>
    171a:	58 f3       	brcs	.-42     	; 0x16f2 <square+0x8>
    171c:	ba 17       	cp	r27, r26
    171e:	62 07       	cpc	r22, r18
    1720:	73 07       	cpc	r23, r19
    1722:	84 07       	cpc	r24, r20
    1724:	95 07       	cpc	r25, r21
    1726:	20 f0       	brcs	.+8      	; 0x1730 <__addsf3x+0x1c>
    1728:	79 f4       	brne	.+30     	; 0x1748 <__addsf3x+0x34>
    172a:	a6 f5       	brtc	.+104    	; 0x1794 <__addsf3x+0x80>
    172c:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_zero>
    1730:	0e f4       	brtc	.+2      	; 0x1734 <__addsf3x+0x20>
    1732:	e0 95       	com	r30
    1734:	0b 2e       	mov	r0, r27
    1736:	ba 2f       	mov	r27, r26
    1738:	a0 2d       	mov	r26, r0
    173a:	0b 01       	movw	r0, r22
    173c:	b9 01       	movw	r22, r18
    173e:	90 01       	movw	r18, r0
    1740:	0c 01       	movw	r0, r24
    1742:	ca 01       	movw	r24, r20
    1744:	a0 01       	movw	r20, r0
    1746:	11 24       	eor	r1, r1
    1748:	ff 27       	eor	r31, r31
    174a:	59 1b       	sub	r21, r25
    174c:	99 f0       	breq	.+38     	; 0x1774 <__addsf3x+0x60>
    174e:	59 3f       	cpi	r21, 0xF9	; 249
    1750:	50 f4       	brcc	.+20     	; 0x1766 <__addsf3x+0x52>
    1752:	50 3e       	cpi	r21, 0xE0	; 224
    1754:	68 f1       	brcs	.+90     	; 0x17b0 <__addsf3x+0x9c>
    1756:	1a 16       	cp	r1, r26
    1758:	f0 40       	sbci	r31, 0x00	; 0
    175a:	a2 2f       	mov	r26, r18
    175c:	23 2f       	mov	r18, r19
    175e:	34 2f       	mov	r19, r20
    1760:	44 27       	eor	r20, r20
    1762:	58 5f       	subi	r21, 0xF8	; 248
    1764:	f3 cf       	rjmp	.-26     	; 0x174c <__addsf3x+0x38>
    1766:	46 95       	lsr	r20
    1768:	37 95       	ror	r19
    176a:	27 95       	ror	r18
    176c:	a7 95       	ror	r26
    176e:	f0 40       	sbci	r31, 0x00	; 0
    1770:	53 95       	inc	r21
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__addsf3x+0x52>
    1774:	7e f4       	brtc	.+30     	; 0x1794 <__addsf3x+0x80>
    1776:	1f 16       	cp	r1, r31
    1778:	ba 0b       	sbc	r27, r26
    177a:	62 0b       	sbc	r22, r18
    177c:	73 0b       	sbc	r23, r19
    177e:	84 0b       	sbc	r24, r20
    1780:	ba f0       	brmi	.+46     	; 0x17b0 <__addsf3x+0x9c>
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	a1 f0       	breq	.+40     	; 0x17ae <__addsf3x+0x9a>
    1786:	ff 0f       	add	r31, r31
    1788:	bb 1f       	adc	r27, r27
    178a:	66 1f       	adc	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	c2 f7       	brpl	.-16     	; 0x1782 <__addsf3x+0x6e>
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <__addsf3x+0x9c>
    1794:	ba 0f       	add	r27, r26
    1796:	62 1f       	adc	r22, r18
    1798:	73 1f       	adc	r23, r19
    179a:	84 1f       	adc	r24, r20
    179c:	48 f4       	brcc	.+18     	; 0x17b0 <__addsf3x+0x9c>
    179e:	87 95       	ror	r24
    17a0:	77 95       	ror	r23
    17a2:	67 95       	ror	r22
    17a4:	b7 95       	ror	r27
    17a6:	f7 95       	ror	r31
    17a8:	9e 3f       	cpi	r25, 0xFE	; 254
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <__addsf3x+0x9a>
    17ac:	b0 cf       	rjmp	.-160    	; 0x170e <square+0x24>
    17ae:	93 95       	inc	r25
    17b0:	88 0f       	add	r24, r24
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <__addsf3x+0xa2>
    17b4:	99 27       	eor	r25, r25
    17b6:	ee 0f       	add	r30, r30
    17b8:	97 95       	ror	r25
    17ba:	87 95       	ror	r24
    17bc:	08 95       	ret

000017be <__fp_mintl>:
    17be:	88 23       	and	r24, r24
    17c0:	71 f4       	brne	.+28     	; 0x17de <__fp_mintl+0x20>
    17c2:	77 23       	and	r23, r23
    17c4:	21 f0       	breq	.+8      	; 0x17ce <__fp_mintl+0x10>
    17c6:	98 50       	subi	r25, 0x08	; 8
    17c8:	87 2b       	or	r24, r23
    17ca:	76 2f       	mov	r23, r22
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <__fp_mintl+0x1e>
    17ce:	66 23       	and	r22, r22
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <__fp_mintl+0x18>
    17d2:	99 27       	eor	r25, r25
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <__fp_mintl+0x32>
    17d6:	90 51       	subi	r25, 0x10	; 16
    17d8:	86 2b       	or	r24, r22
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	2a f0       	brmi	.+10     	; 0x17ea <__fp_mintl+0x2c>
    17e0:	9a 95       	dec	r25
    17e2:	66 0f       	add	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	da f7       	brpl	.-10     	; 0x17e0 <__fp_mintl+0x22>
    17ea:	88 0f       	add	r24, r24
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	97 f9       	bld	r25, 7
    17f2:	08 95       	ret

000017f4 <__fp_mpack>:
    17f4:	9f 3f       	cpi	r25, 0xFF	; 255
    17f6:	31 f0       	breq	.+12     	; 0x1804 <__fp_mpack_finite+0xc>

000017f8 <__fp_mpack_finite>:
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	20 f4       	brcc	.+8      	; 0x1804 <__fp_mpack_finite+0xc>
    17fc:	87 95       	ror	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b7 95       	ror	r27
    1804:	88 0f       	add	r24, r24
    1806:	91 1d       	adc	r25, r1
    1808:	96 95       	lsr	r25
    180a:	87 95       	ror	r24
    180c:	97 f9       	bld	r25, 7
    180e:	08 95       	ret

00001810 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1810:	ec e7       	ldi	r30, 0x7C	; 124
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8f 7d       	andi	r24, 0xDF	; 223
    1818:	80 83       	st	Z, r24
    181a:	08 95       	ret

0000181c <_ZN15OrangutanAnalog7setModeEh>:
    181c:	81 11       	cpse	r24, r1
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1820:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1824:	08 95       	ret
    1826:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    182a:	80 62       	ori	r24, 0x20	; 32
    182c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1830:	08 95       	ret

00001832 <_ZN15OrangutanAnalog7getModeEv>:
    1832:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1836:	85 fb       	bst	r24, 5
    1838:	88 27       	eor	r24, r24
    183a:	80 f9       	bld	r24, 0
    183c:	08 95       	ret

0000183e <_ZN15OrangutanAnalog16conversionResultEv>:
    183e:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN15OrangutanAnalog7getModeEv>
    1842:	88 23       	and	r24, r24
    1844:	21 f0       	breq	.+8      	; 0x184e <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1846:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	08 95       	ret
    184e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1852:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1856:	08 95       	ret

00001858 <_ZN15OrangutanAnalog15startConversionEhh>:
    1858:	80 32       	cpi	r24, 0x20	; 32
    185a:	a0 f4       	brcc	.+40     	; 0x1884 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    185c:	97 e8       	ldi	r25, 0x87	; 135
    185e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1862:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1866:	66 23       	and	r22, r22
    1868:	11 f0       	breq	.+4      	; 0x186e <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    186a:	90 6c       	ori	r25, 0xC0	; 192
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    186e:	9f 77       	andi	r25, 0x7F	; 127
    1870:	90 64       	ori	r25, 0x40	; 64
    1872:	90 7e       	andi	r25, 0xE0	; 224
    1874:	98 2b       	or	r25, r24
    1876:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    187a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    187e:	80 64       	ori	r24, 0x40	; 64
    1880:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1884:	08 95       	ret

00001886 <_ZN15OrangutanAnalog11readAverageEhj>:
    1886:	a0 e0       	ldi	r26, 0x00	; 0
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e9 e4       	ldi	r30, 0x49	; 73
    188c:	fc e0       	ldi	r31, 0x0C	; 12
    188e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__prologue_saves__+0x14>
    1892:	eb 01       	movw	r28, r22
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN15OrangutanAnalog15startConversionEhh>
    189a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    189e:	86 fd       	sbrc	r24, 6
    18a0:	fc cf       	rjmp	.-8      	; 0x189a <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    18a2:	8e 01       	movw	r16, r28
    18a4:	c1 2c       	mov	r12, r1
    18a6:	d1 2c       	mov	r13, r1
    18a8:	76 01       	movw	r14, r12
    18aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    18ae:	80 64       	ori	r24, 0x40	; 64
    18b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    18b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    18b8:	86 fd       	sbrc	r24, 6
    18ba:	fc cf       	rjmp	.-8      	; 0x18b4 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    18bc:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZN15OrangutanAnalog16conversionResultEv>
    18c0:	c8 0e       	add	r12, r24
    18c2:	d9 1e       	adc	r13, r25
    18c4:	e1 1c       	adc	r14, r1
    18c6:	f1 1c       	adc	r15, r1
    18c8:	01 50       	subi	r16, 0x01	; 1
    18ca:	11 09       	sbc	r17, r1
    18cc:	01 15       	cp	r16, r1
    18ce:	11 05       	cpc	r17, r1
    18d0:	61 f7       	brne	.-40     	; 0x18aa <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    18d2:	ce 01       	movw	r24, r28
    18d4:	96 95       	lsr	r25
    18d6:	87 95       	ror	r24
    18d8:	c0 34       	cpi	r28, 0x40	; 64
    18da:	d1 05       	cpc	r29, r1
    18dc:	38 f4       	brcc	.+14     	; 0x18ec <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    18de:	8c 0d       	add	r24, r12
    18e0:	9d 1d       	adc	r25, r13
    18e2:	be 01       	movw	r22, r28
    18e4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    18e8:	cb 01       	movw	r24, r22
    18ea:	0e c0       	rjmp	.+28     	; 0x1908 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    18ec:	a7 01       	movw	r20, r14
    18ee:	96 01       	movw	r18, r12
    18f0:	28 0f       	add	r18, r24
    18f2:	39 1f       	adc	r19, r25
    18f4:	41 1d       	adc	r20, r1
    18f6:	51 1d       	adc	r21, r1
    18f8:	ca 01       	movw	r24, r20
    18fa:	b9 01       	movw	r22, r18
    18fc:	9e 01       	movw	r18, r28
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    1906:	c9 01       	movw	r24, r18
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	e8 e0       	ldi	r30, 0x08	; 8
    190e:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__epilogue_restores__+0x14>

00001912 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    191e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1922:	9c 01       	movw	r18, r24
    1924:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <__umulhisi3>
    1928:	6b 01       	movw	r12, r22
    192a:	7c 01       	movw	r14, r24
    192c:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN15OrangutanAnalog7getModeEv>
    1930:	88 23       	and	r24, r24
    1932:	59 f0       	breq	.+22     	; 0x194a <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1934:	c7 01       	movw	r24, r14
    1936:	b6 01       	movw	r22, r12
    1938:	61 58       	subi	r22, 0x81	; 129
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	8f 4f       	sbci	r24, 0xFF	; 255
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
    1940:	2f ef       	ldi	r18, 0xFF	; 255
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	0a c0       	rjmp	.+20     	; 0x195e <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    194a:	c7 01       	movw	r24, r14
    194c:	b6 01       	movw	r22, r12
    194e:	61 50       	subi	r22, 0x01	; 1
    1950:	7e 4f       	sbci	r23, 0xFE	; 254
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	2f ef       	ldi	r18, 0xFF	; 255
    1958:	33 e0       	ldi	r19, 0x03	; 3
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    1962:	c9 01       	movw	r24, r18
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	08 95       	ret

0000196e <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    196e:	0e 94 43 0c 	call	0x1886	; 0x1886 <_ZN15OrangutanAnalog11readAverageEhj>
    1972:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1976:	08 95       	ret

00001978 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN15OrangutanAnalog7getModeEv>
    1982:	18 2f       	mov	r17, r24
    1984:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1988:	6a e0       	ldi	r22, 0x0A	; 10
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	86 e0       	ldi	r24, 0x06	; 6
    198e:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1992:	ec 01       	movw	r28, r24
    1994:	81 2f       	mov	r24, r17
    1996:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN15OrangutanAnalog7setModeEh>
    199a:	ce 01       	movw	r24, r28
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	8c 0f       	add	r24, r28
    19a2:	9d 1f       	adc	r25, r29
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	96 95       	lsr	r25
    19a8:	87 95       	ror	r24
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	08 95       	ret

000019b2 <read_battery_millivolts_3pi>:
    19b2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    19b6:	08 95       	ret

000019b8 <_ZL16currentCharacterv>:
    19b8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <_ZL17use_program_space>
    19bc:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <__data_end>
    19c0:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <__data_end+0x1>
    19c4:	99 23       	and	r25, r25
    19c6:	11 f0       	breq	.+4      	; 0x19cc <_ZL16currentCharacterv+0x14>
    19c8:	84 91       	lpm	r24, Z
    19ca:	01 c0       	rjmp	.+2      	; 0x19ce <_ZL16currentCharacterv+0x16>
    19cc:	80 81       	ld	r24, Z
    19ce:	2f eb       	ldi	r18, 0xBF	; 191
    19d0:	28 0f       	add	r18, r24
    19d2:	2a 31       	cpi	r18, 0x1A	; 26
    19d4:	10 f4       	brcc	.+4      	; 0x19da <_ZL16currentCharacterv+0x22>
    19d6:	80 5e       	subi	r24, 0xE0	; 224
    19d8:	08 95       	ret
    19da:	80 32       	cpi	r24, 0x20	; 32
    19dc:	49 f4       	brne	.+18     	; 0x19f0 <_ZL16currentCharacterv+0x38>
    19de:	9f 01       	movw	r18, r30
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    19e8:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    19ec:	ef 2b       	or	r30, r31
    19ee:	31 f7       	brne	.-52     	; 0x19bc <_ZL16currentCharacterv+0x4>
    19f0:	08 95       	ret

000019f2 <_ZL9getNumberv>:
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    19fc:	c0 e0       	ldi	r28, 0x00	; 0
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
    1a00:	1a e0       	ldi	r17, 0x0A	; 10
    1a02:	90 ed       	ldi	r25, 0xD0	; 208
    1a04:	98 0f       	add	r25, r24
    1a06:	9a 30       	cpi	r25, 0x0A	; 10
    1a08:	b8 f4       	brcc	.+46     	; 0x1a38 <_ZL9getNumberv+0x46>
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	12 9f       	mul	r17, r18
    1a0e:	e0 01       	movw	r28, r0
    1a10:	13 9f       	mul	r17, r19
    1a12:	d0 0d       	add	r29, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	c8 0f       	add	r28, r24
    1a18:	d1 1d       	adc	r29, r1
    1a1a:	87 fd       	sbrc	r24, 7
    1a1c:	da 95       	dec	r29
    1a1e:	e0 97       	sbiw	r28, 0x30	; 48
    1a20:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    1a24:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
    1a2e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
    1a32:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    1a36:	e5 cf       	rjmp	.-54     	; 0x1a02 <_ZL9getNumberv+0x10>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	08 95       	ret

00001a42 <_ZN15OrangutanBuzzer5init2Ev>:
    1a42:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a46:	83 e2       	ldi	r24, 0x23	; 35
    1a48:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a4c:	81 e1       	ldi	r24, 0x11	; 17
    1a4e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a52:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1a56:	80 e1       	ldi	r24, 0x10	; 16
    1a58:	97 e2       	ldi	r25, 0x27	; 39
    1a5a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a5e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a62:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a66:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a6a:	22 9a       	sbi	0x04, 2	; 4
    1a6c:	78 94       	sei
    1a6e:	08 95       	ret

00001a70 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1a70:	8f 92       	push	r8
    1a72:	9f 92       	push	r9
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	5c 01       	movw	r10, r24
    1a88:	8b 01       	movw	r16, r22
    1a8a:	d4 2e       	mov	r13, r20
    1a8c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <buzzerInitialized>
    1a90:	81 11       	cpse	r24, r1
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <buzzerInitialized>
    1a9a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN15OrangutanBuzzer5init2Ev>
    1a9e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1aa2:	b7 fe       	sbrs	r11, 7
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1aa6:	e8 94       	clt
    1aa8:	b7 f8       	bld	r11, 7
    1aaa:	2a e0       	ldi	r18, 0x0A	; 10
    1aac:	f2 2e       	mov	r15, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1ab0:	ff 24       	eor	r15, r15
    1ab2:	f3 94       	inc	r15
    1ab4:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ab8:	2e 2d       	mov	r18, r14
    1aba:	28 7f       	andi	r18, 0xF8	; 248
    1abc:	e2 2e       	mov	r14, r18
    1abe:	48 ec       	ldi	r20, 0xC8	; 200
    1ac0:	f4 9e       	mul	r15, r20
    1ac2:	c0 01       	movw	r24, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	8a 15       	cp	r24, r10
    1ac8:	9b 05       	cpc	r25, r11
    1aca:	e0 f4       	brcc	.+56     	; 0x1b04 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1acc:	e5 01       	movw	r28, r10
    1ace:	51 e1       	ldi	r21, 0x11	; 17
    1ad0:	a5 16       	cp	r10, r21
    1ad2:	57 e2       	ldi	r21, 0x27	; 39
    1ad4:	b5 06       	cpc	r11, r21
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1ad8:	c0 e1       	ldi	r28, 0x10	; 16
    1ada:	d7 e2       	ldi	r29, 0x27	; 39
    1adc:	be 01       	movw	r22, r28
    1ade:	76 95       	lsr	r23
    1ae0:	67 95       	ror	r22
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	60 58       	subi	r22, 0x80	; 128
    1ae8:	79 46       	sbci	r23, 0x69	; 105
    1aea:	87 46       	sbci	r24, 0x67	; 103
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	4e 01       	movw	r8, r28
    1af0:	a1 2c       	mov	r10, r1
    1af2:	b1 2c       	mov	r11, r1
    1af4:	a5 01       	movw	r20, r10
    1af6:	94 01       	movw	r18, r8
    1af8:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    1afc:	59 01       	movw	r10, r18
    1afe:	8e 2d       	mov	r24, r14
    1b00:	81 60       	ori	r24, 0x01	; 1
    1b02:	24 c0       	rjmp	.+72     	; 0x1b4c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1b04:	c8 e2       	ldi	r28, 0x28	; 40
    1b06:	fc 9e       	mul	r15, r28
    1b08:	c0 2d       	mov	r28, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
    1b0e:	ca 15       	cp	r28, r10
    1b10:	db 05       	cpc	r29, r11
    1b12:	08 f4       	brcc	.+2      	; 0x1b16 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1b14:	e5 01       	movw	r28, r10
    1b16:	be 01       	movw	r22, r28
    1b18:	76 95       	lsr	r23
    1b1a:	67 95       	ror	r22
    1b1c:	9e 01       	movw	r18, r28
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	8a e0       	ldi	r24, 0x0A	; 10
    1b24:	f8 12       	cpse	r15, r24
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	60 5e       	subi	r22, 0xE0	; 224
    1b2e:	73 44       	sbci	r23, 0x43	; 67
    1b30:	81 44       	sbci	r24, 0x41	; 65
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	60 53       	subi	r22, 0x30	; 48
    1b3c:	7d 4e       	sbci	r23, 0xED	; 237
    1b3e:	8c 4e       	sbci	r24, 0xEC	; 236
    1b40:	9f 4f       	sbci	r25, 0xFF	; 255
    1b42:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    1b46:	59 01       	movw	r10, r18
    1b48:	8e 2d       	mov	r24, r14
    1b4a:	82 60       	ori	r24, 0x02	; 2
    1b4c:	88 2e       	mov	r8, r24
    1b4e:	2a e0       	ldi	r18, 0x0A	; 10
    1b50:	f2 12       	cpse	r15, r18
    1b52:	07 c0       	rjmp	.+14     	; 0x1b62 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1b54:	ce 01       	movw	r24, r28
    1b56:	05 96       	adiw	r24, 0x05	; 5
    1b58:	6a e0       	ldi	r22, 0x0A	; 10
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    1b60:	eb 01       	movw	r28, r22
    1b62:	c8 3e       	cpi	r28, 0xE8	; 232
    1b64:	43 e0       	ldi	r20, 0x03	; 3
    1b66:	d4 07       	cpc	r29, r20
    1b68:	59 f0       	breq	.+22     	; 0x1b80 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1b6a:	98 01       	movw	r18, r16
    1b6c:	de 01       	movw	r26, r28
    1b6e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <__umulhisi3>
    1b72:	28 ee       	ldi	r18, 0xE8	; 232
    1b74:	33 e0       	ldi	r19, 0x03	; 3
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divmodsi4>
    1b7e:	89 01       	movw	r16, r18
    1b80:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b84:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b88:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b8c:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b90:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b94:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b98:	4d 2d       	mov	r20, r13
    1b9a:	40 31       	cpi	r20, 0x10	; 16
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1b9e:	4f e0       	ldi	r20, 0x0F	; 15
    1ba0:	80 e1       	ldi	r24, 0x10	; 16
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	84 1b       	sub	r24, r20
    1ba6:	91 09       	sbc	r25, r1
    1ba8:	a9 01       	movw	r20, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1bac:	56 95       	lsr	r21
    1bae:	47 95       	ror	r20
    1bb0:	8a 95       	dec	r24
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1bb4:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1bb8:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1bbc:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <_ZL13buzzerTimeout+0x1>
    1bc0:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <_ZL13buzzerTimeout>
    1bc4:	86 b3       	in	r24, 0x16	; 22
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	86 bb       	out	0x16, r24	; 22
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	08 95       	ret

00001be8 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	eb 01       	movw	r28, r22
    1bee:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1bf2:	41 11       	cpse	r20, r1
    1bf4:	05 c0       	rjmp	.+10     	; 0x1c00 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	be 01       	movw	r22, r28
    1bfa:	88 ee       	ldi	r24, 0xE8	; 232
    1bfc:	93 e0       	ldi	r25, 0x03	; 3
    1bfe:	43 c0       	rjmp	.+134    	; 0x1c86 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1c00:	81 31       	cpi	r24, 0x11	; 17
    1c02:	30 f0       	brcs	.+12     	; 0x1c10 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1c04:	50 ef       	ldi	r21, 0xF0	; 240
    1c06:	58 0f       	add	r21, r24
    1c08:	50 36       	cpi	r21, 0x60	; 96
    1c0a:	18 f0       	brcs	.+6      	; 0x1c12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1c0c:	5f e5       	ldi	r21, 0x5F	; 95
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	85 2f       	mov	r24, r21
    1c14:	6c e0       	ldi	r22, 0x0C	; 12
    1c16:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__udivmodqi4>
    1c1a:	68 2f       	mov	r22, r24
    1c1c:	74 ef       	ldi	r23, 0xF4	; 244
    1c1e:	76 03       	mulsu	r23, r22
    1c20:	90 01       	movw	r18, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	25 0f       	add	r18, r21
    1c26:	31 1d       	adc	r19, r1
    1c28:	2c 30       	cpi	r18, 0x0C	; 12
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	40 f4       	brcc	.+16     	; 0x1c3e <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1c2e:	f9 01       	movw	r30, r18
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	ec 5c       	subi	r30, 0xCC	; 204
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	20 81       	ld	r18, Z
    1c3a:	31 81       	ldd	r19, Z+1	; 0x01
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	87 30       	cpi	r24, 0x07	; 7
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1c46:	08 2e       	mov	r0, r24
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	28 f0       	brcs	.+10     	; 0x1c60 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1c56:	c9 01       	movw	r24, r18
    1c58:	05 96       	adiw	r24, 0x05	; 5
    1c5a:	6a e0       	ldi	r22, 0x0A	; 10
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	0c c0       	rjmp	.+24     	; 0x1c78 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1c60:	c9 01       	movw	r24, r18
    1c62:	90 58       	subi	r25, 0x80	; 128
    1c64:	0c c0       	rjmp	.+24     	; 0x1c7e <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1c66:	c9 01       	movw	r24, r18
    1c68:	36 e0       	ldi	r19, 0x06	; 6
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	3a 95       	dec	r19
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1c72:	02 96       	adiw	r24, 0x02	; 2
    1c74:	65 e0       	ldi	r22, 0x05	; 5
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	40 31       	cpi	r20, 0x10	; 16
    1c80:	08 f0       	brcs	.+2      	; 0x1c84 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1c82:	4f e0       	ldi	r20, 0x0F	; 15
    1c84:	be 01       	movw	r22, r28
    1c86:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <_ZL8nextNotev>:
    1c90:	a2 e0       	ldi	r26, 0x02	; 2
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ee e4       	ldi	r30, 0x4E	; 78
    1c96:	fe e0       	ldi	r31, 0x0E	; 14
    1c98:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__prologue_saves__+0x4>
    1c9c:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1ca0:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZL8staccato>
    1ca4:	88 23       	and	r24, r24
    1ca6:	21 f0       	breq	.+8      	; 0x1cb0 <_ZL8nextNotev+0x20>
    1ca8:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <_ZL22staccato_rest_duration>
    1cac:	61 11       	cpse	r22, r1
    1cae:	17 c0       	rjmp	.+46     	; 0x1cde <_ZL8nextNotev+0x4e>
    1cb0:	77 24       	eor	r7, r7
    1cb2:	73 94       	inc	r7
    1cb4:	b0 ec       	ldi	r27, 0xC0	; 192
    1cb6:	ab 2e       	mov	r10, r27
    1cb8:	bd e5       	ldi	r27, 0x5D	; 93
    1cba:	bb 2e       	mov	r11, r27
    1cbc:	1a e0       	ldi	r17, 0x0A	; 10
    1cbe:	61 2e       	mov	r6, r17
    1cc0:	04 e0       	ldi	r16, 0x04	; 4
    1cc2:	80 2e       	mov	r8, r16
    1cc4:	80 ed       	ldi	r24, 0xD0	; 208
    1cc6:	c8 2e       	mov	r12, r24
    1cc8:	87 e0       	ldi	r24, 0x07	; 7
    1cca:	d8 2e       	mov	r13, r24
    1ccc:	94 e0       	ldi	r25, 0x04	; 4
    1cce:	e9 2e       	mov	r14, r25
    1cd0:	f1 2c       	mov	r15, r1
    1cd2:	04 ef       	ldi	r16, 0xF4	; 244
    1cd4:	11 e0       	ldi	r17, 0x01	; 1
    1cd6:	2f e0       	ldi	r18, 0x0F	; 15
    1cd8:	42 2e       	mov	r4, r18
    1cda:	51 2c       	mov	r5, r1
    1cdc:	15 c0       	rjmp	.+42     	; 0x1d08 <_ZL8nextNotev+0x78>
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	88 ee       	ldi	r24, 0xE8	; 232
    1ce4:	93 e0       	ldi	r25, 0x03	; 3
    1ce6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1cea:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL22staccato_rest_duration>
    1cee:	17 c1       	rjmp	.+558    	; 0x1f1e <_ZL8nextNotev+0x28e>
    1cf0:	86 36       	cpi	r24, 0x66	; 102
    1cf2:	d4 f5       	brge	.+116    	; 0x1d68 <_ZL8nextNotev+0xd8>
    1cf4:	81 36       	cpi	r24, 0x61	; 97
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <_ZL8nextNotev+0x6a>
    1cf8:	a9 c0       	rjmp	.+338    	; 0x1e4c <_ZL8nextNotev+0x1bc>
    1cfa:	7c f5       	brge	.+94     	; 0x1d5a <_ZL8nextNotev+0xca>
    1cfc:	8c 33       	cpi	r24, 0x3C	; 60
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <_ZL8nextNotev+0x72>
    1d00:	60 c0       	rjmp	.+192    	; 0x1dc2 <_ZL8nextNotev+0x132>
    1d02:	8e 33       	cpi	r24, 0x3E	; 62
    1d04:	81 f4       	brne	.+32     	; 0x1d26 <_ZL8nextNotev+0x96>
    1d06:	93 94       	inc	r9
    1d08:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    1d0c:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    1d10:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    1d14:	2f 5f       	subi	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1d1c:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1d20:	85 36       	cpi	r24, 0x65	; 101
    1d22:	31 f7       	brne	.-52     	; 0x1cf0 <_ZL8nextNotev+0x60>
    1d24:	52 c0       	rjmp	.+164    	; 0x1dca <_ZL8nextNotev+0x13a>
    1d26:	81 32       	cpi	r24, 0x21	; 33
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <_ZL8nextNotev+0x9c>
    1d2a:	8b c0       	rjmp	.+278    	; 0x1e42 <_ZL8nextNotev+0x1b2>
    1d2c:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1d30:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1d34:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1d38:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1d3c:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1d40:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1d44:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1d48:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1d4c:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1d50:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL8staccato>
    1d54:	a4 e0       	ldi	r26, 0x04	; 4
    1d56:	9a 2e       	mov	r9, r26
    1d58:	d7 cf       	rjmp	.-82     	; 0x1d08 <_ZL8nextNotev+0x78>
    1d5a:	83 36       	cpi	r24, 0x63	; 99
    1d5c:	a1 f1       	breq	.+104    	; 0x1dc6 <_ZL8nextNotev+0x136>
    1d5e:	0c f4       	brge	.+2      	; 0x1d62 <_ZL8nextNotev+0xd2>
    1d60:	78 c0       	rjmp	.+240    	; 0x1e52 <_ZL8nextNotev+0x1c2>
    1d62:	10 e0       	ldi	r17, 0x00	; 0
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	77 c0       	rjmp	.+238    	; 0x1e56 <_ZL8nextNotev+0x1c6>
    1d68:	8d 36       	cpi	r24, 0x6D	; 109
    1d6a:	c1 f1       	breq	.+112    	; 0x1ddc <_ZL8nextNotev+0x14c>
    1d6c:	94 f4       	brge	.+36     	; 0x1d92 <_ZL8nextNotev+0x102>
    1d6e:	87 36       	cpi	r24, 0x67	; 103
    1d70:	91 f1       	breq	.+100    	; 0x1dd6 <_ZL8nextNotev+0x146>
    1d72:	74 f1       	brlt	.+92     	; 0x1dd0 <_ZL8nextNotev+0x140>
    1d74:	8c 36       	cpi	r24, 0x6C	; 108
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <_ZL8nextNotev+0xea>
    1d78:	64 c0       	rjmp	.+200    	; 0x1e42 <_ZL8nextNotev+0x1b2>
    1d7a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZL9getNumberv>
    1d7e:	bc 01       	movw	r22, r24
    1d80:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1d84:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1d88:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1d8c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1d90:	51 c0       	rjmp	.+162    	; 0x1e34 <_ZL8nextNotev+0x1a4>
    1d92:	82 37       	cpi	r24, 0x72	; 114
    1d94:	c9 f1       	breq	.+114    	; 0x1e08 <_ZL8nextNotev+0x178>
    1d96:	4c f4       	brge	.+18     	; 0x1daa <_ZL8nextNotev+0x11a>
    1d98:	8f 36       	cpi	r24, 0x6F	; 111
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <_ZL8nextNotev+0x10e>
    1d9c:	52 c0       	rjmp	.+164    	; 0x1e42 <_ZL8nextNotev+0x1b2>
    1d9e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZL9getNumberv>
    1da2:	98 2e       	mov	r9, r24
    1da4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1da8:	af cf       	rjmp	.-162    	; 0x1d08 <_ZL8nextNotev+0x78>
    1daa:	84 37       	cpi	r24, 0x74	; 116
    1dac:	81 f1       	breq	.+96     	; 0x1e0e <_ZL8nextNotev+0x17e>
    1dae:	86 37       	cpi	r24, 0x76	; 118
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <_ZL8nextNotev+0x124>
    1db2:	47 c0       	rjmp	.+142    	; 0x1e42 <_ZL8nextNotev+0x1b2>
    1db4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZL9getNumberv>
    1db8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1dbc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1dc0:	a3 cf       	rjmp	.-186    	; 0x1d08 <_ZL8nextNotev+0x78>
    1dc2:	9a 94       	dec	r9
    1dc4:	a1 cf       	rjmp	.-190    	; 0x1d08 <_ZL8nextNotev+0x78>
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
    1dc8:	20 c0       	rjmp	.+64     	; 0x1e0a <_ZL8nextNotev+0x17a>
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    1dcc:	84 e0       	ldi	r24, 0x04	; 4
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <_ZL8nextNotev+0x1c6>
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	85 e0       	ldi	r24, 0x05	; 5
    1dd4:	40 c0       	rjmp	.+128    	; 0x1e56 <_ZL8nextNotev+0x1c6>
    1dd6:	10 e0       	ldi	r17, 0x00	; 0
    1dd8:	87 e0       	ldi	r24, 0x07	; 7
    1dda:	3d c0       	rjmp	.+122    	; 0x1e56 <_ZL8nextNotev+0x1c6>
    1ddc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    1de0:	8c 36       	cpi	r24, 0x6C	; 108
    1de2:	19 f4       	brne	.+6      	; 0x1dea <_ZL8nextNotev+0x15a>
    1de4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL8staccato>
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <_ZL8nextNotev+0x162>
    1dea:	70 92 96 01 	sts	0x0196, r7	; 0x800196 <_ZL8staccato>
    1dee:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL22staccato_rest_duration>
    1df2:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    1df6:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1e02:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1e06:	80 cf       	rjmp	.-256    	; 0x1d08 <_ZL8nextNotev+0x78>
    1e08:	11 e0       	ldi	r17, 0x01	; 1
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	24 c0       	rjmp	.+72     	; 0x1e56 <_ZL8nextNotev+0x1c6>
    1e0e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZL9getNumberv>
    1e12:	bc 01       	movw	r22, r24
    1e14:	c5 01       	movw	r24, r10
    1e16:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    1e1a:	66 9e       	mul	r6, r22
    1e1c:	c0 01       	movw	r24, r0
    1e1e:	67 9e       	mul	r6, r23
    1e20:	90 0d       	add	r25, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1e28:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1e2c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1e30:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1e34:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    1e38:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1e3c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1e40:	63 cf       	rjmp	.-314    	; 0x1d08 <_ZL8nextNotev+0x78>
    1e42:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
    1e46:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
    1e4a:	69 c0       	rjmp	.+210    	; 0x1f1e <_ZL8nextNotev+0x28e>
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	89 e0       	ldi	r24, 0x09	; 9
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <_ZL8nextNotev+0x1c6>
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	8b e0       	ldi	r24, 0x0B	; 11
    1e56:	08 2f       	mov	r16, r24
    1e58:	9c e0       	ldi	r25, 0x0C	; 12
    1e5a:	99 9e       	mul	r9, r25
    1e5c:	00 0d       	add	r16, r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    1e64:	98 2f       	mov	r25, r24
    1e66:	97 7f       	andi	r25, 0xF7	; 247
    1e68:	93 32       	cpi	r25, 0x23	; 35
    1e6a:	61 f4       	brne	.+24     	; 0x1e84 <_ZL8nextNotev+0x1f4>
    1e6c:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    1e70:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1e7c:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1e80:	0f 5f       	subi	r16, 0xFF	; 255
    1e82:	ee cf       	rjmp	.-36     	; 0x1e60 <_ZL8nextNotev+0x1d0>
    1e84:	8d 32       	cpi	r24, 0x2D	; 45
    1e86:	71 f4       	brne	.+28     	; 0x1ea4 <_ZL8nextNotev+0x214>
    1e88:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    1e8c:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    1e90:	2f 5f       	subi	r18, 0xFF	; 255
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1e98:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1e9c:	01 50       	subi	r16, 0x01	; 1
    1e9e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    1ea2:	f0 cf       	rjmp	.-32     	; 0x1e84 <_ZL8nextNotev+0x1f4>
    1ea4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1ea8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1eac:	81 53       	subi	r24, 0x31	; 49
    1eae:	88 30       	cpi	r24, 0x08	; 8
    1eb0:	50 f4       	brcc	.+20     	; 0x1ec6 <_ZL8nextNotev+0x236>
    1eb2:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1eb6:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1eba:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZL9getNumberv>
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    1ec6:	7b 01       	movw	r14, r22
    1ec8:	f6 94       	lsr	r15
    1eca:	e7 94       	ror	r14
    1ecc:	69 83       	std	Y+1, r22	; 0x01
    1ece:	7a 83       	std	Y+2, r23	; 0x02
    1ed0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZL16currentCharacterv>
    1ed4:	69 81       	ldd	r22, Y+1	; 0x01
    1ed6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ed8:	8e 32       	cpi	r24, 0x2E	; 46
    1eda:	69 f4       	brne	.+26     	; 0x1ef6 <_ZL8nextNotev+0x266>
    1edc:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    1ee0:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    1ee4:	2f 5f       	subi	r18, 0xFF	; 255
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1eec:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1ef0:	6e 0d       	add	r22, r14
    1ef2:	7f 1d       	adc	r23, r15
    1ef4:	e9 cf       	rjmp	.-46     	; 0x1ec8 <_ZL8nextNotev+0x238>
    1ef6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZL8staccato>
    1efa:	88 23       	and	r24, r24
    1efc:	39 f0       	breq	.+14     	; 0x1f0c <_ZL8nextNotev+0x27c>
    1efe:	9b 01       	movw	r18, r22
    1f00:	36 95       	lsr	r19
    1f02:	27 95       	ror	r18
    1f04:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <_ZL22staccato_rest_duration>
    1f08:	62 1b       	sub	r22, r18
    1f0a:	71 09       	sbc	r23, r1
    1f0c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1f10:	11 23       	and	r17, r17
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <_ZL8nextNotev+0x288>
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <_ZL8nextNotev+0x28a>
    1f18:	80 2f       	mov	r24, r16
    1f1a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1f1e:	22 96       	adiw	r28, 0x02	; 2
    1f20:	e0 e1       	ldi	r30, 0x10	; 16
    1f22:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__epilogue_restores__+0x4>

00001f26 <__vector_13>:
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL13buzzerTimeout>
    1f4c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL13buzzerTimeout+0x1>
    1f50:	9c 01       	movw	r18, r24
    1f52:	21 50       	subi	r18, 0x01	; 1
    1f54:	31 09       	sbc	r19, r1
    1f56:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <_ZL13buzzerTimeout+0x1>
    1f5a:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <_ZL13buzzerTimeout>
    1f5e:	89 2b       	or	r24, r25
    1f60:	11 f5       	brne	.+68     	; 0x1fa6 <__vector_13+0x80>
    1f62:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f66:	78 94       	sei
    1f68:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f6c:	88 7f       	andi	r24, 0xF8	; 248
    1f6e:	81 60       	ori	r24, 0x01	; 1
    1f70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f74:	80 e1       	ldi	r24, 0x10	; 16
    1f76:	97 e2       	ldi	r25, 0x27	; 39
    1f78:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f7c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f80:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f84:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1f8e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    1f92:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    1f96:	89 2b       	or	r24, r25
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <__vector_13+0x80>
    1f9a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL17play_mode_setting>
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <__vector_13+0x80>
    1fa2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZL8nextNotev>
    1fa6:	ff 91       	pop	r31
    1fa8:	ef 91       	pop	r30
    1faa:	bf 91       	pop	r27
    1fac:	af 91       	pop	r26
    1fae:	9f 91       	pop	r25
    1fb0:	8f 91       	pop	r24
    1fb2:	7f 91       	pop	r23
    1fb4:	6f 91       	pop	r22
    1fb6:	5f 91       	pop	r21
    1fb8:	4f 91       	pop	r20
    1fba:	3f 91       	pop	r19
    1fbc:	2f 91       	pop	r18
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	0f 90       	pop	r0
    1fc4:	1f 90       	pop	r1
    1fc6:	18 95       	reti

00001fc8 <_ZN15OrangutanBuzzer4playEPKc>:
    1fc8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1fcc:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
    1fd0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
    1fd4:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL17use_program_space>
    1fd8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL22staccato_rest_duration>
    1fdc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZL8nextNotev>
    1fe0:	08 95       	ret

00001fe2 <play>:
    1fe2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN15OrangutanBuzzer4playEPKc>
    1fe6:	08 95       	ret

00001fe8 <delay_us.constprop.0>:
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	6f 93       	push	r22
    1fee:	64 e0       	ldi	r22, 0x04	; 4
    1ff0:	6a 95       	dec	r22
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <delay_us.constprop.0+0x8>
    1ff4:	6f 91       	pop	r22
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	c9 f7       	brne	.-14     	; 0x1fec <delay_us.constprop.0+0x4>
    1ffa:	08 95       	ret

00001ffc <_ZN12OrangutanLCD8busyWaitEv>:
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	1a b1       	in	r17, 0x0a	; 10
    2006:	57 98       	cbi	0x0a, 7	; 10
    2008:	5a 98       	cbi	0x0b, 2	; 11
    200a:	28 9a       	sbi	0x05, 0	; 5
    200c:	c0 e0       	ldi	r28, 0x00	; 0
    200e:	d0 e0       	ldi	r29, 0x00	; 0
    2010:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <delay_us.constprop.0>
    2014:	5c 9a       	sbi	0x0b, 4	; 11
    2016:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <delay_us.constprop.0>
    201a:	09 b1       	in	r16, 0x09	; 9
    201c:	5c 98       	cbi	0x0b, 4	; 11
    201e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <delay_us.constprop.0>
    2022:	5c 9a       	sbi	0x0b, 4	; 11
    2024:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <delay_us.constprop.0>
    2028:	5c 98       	cbi	0x0b, 4	; 11
    202a:	24 96       	adiw	r28, 0x04	; 4
    202c:	07 ff       	sbrs	r16, 7
    202e:	10 c0       	rjmp	.+32     	; 0x2050 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2030:	ae 01       	movw	r20, r28
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <lcdTimeout>
    203a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <lcdTimeout+0x1>
    203e:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <lcdTimeout+0x2>
    2042:	b0 91 9e 01 	lds	r27, 0x019E	; 0x80019e <lcdTimeout+0x3>
    2046:	48 17       	cp	r20, r24
    2048:	59 07       	cpc	r21, r25
    204a:	6a 07       	cpc	r22, r26
    204c:	7b 07       	cpc	r23, r27
    204e:	00 f3       	brcs	.-64     	; 0x2010 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    2050:	1a b9       	out	0x0a, r17	; 10
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	08 95       	ret

0000205c <_ZN12OrangutanLCD8sendDataEh>:
    205c:	95 b1       	in	r25, 0x05	; 5
    205e:	28 2f       	mov	r18, r24
    2060:	21 70       	andi	r18, 0x01	; 1
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	22 0f       	add	r18, r18
    2066:	33 1f       	adc	r19, r19
    2068:	48 2f       	mov	r20, r24
    206a:	46 70       	andi	r20, 0x06	; 6
    206c:	68 e0       	ldi	r22, 0x08	; 8
    206e:	46 9f       	mul	r20, r22
    2070:	a0 01       	movw	r20, r0
    2072:	11 24       	eor	r1, r1
    2074:	24 2b       	or	r18, r20
    2076:	9d 7c       	andi	r25, 0xCD	; 205
    2078:	29 2b       	or	r18, r25
    207a:	25 b9       	out	0x05, r18	; 5
    207c:	9b b1       	in	r25, 0x0b	; 11
    207e:	88 70       	andi	r24, 0x08	; 8
    2080:	82 95       	swap	r24
    2082:	80 7f       	andi	r24, 0xF0	; 240
    2084:	9f 77       	andi	r25, 0x7F	; 127
    2086:	89 2b       	or	r24, r25
    2088:	8b b9       	out	0x0b, r24	; 11
    208a:	5c 9a       	sbi	0x0b, 4	; 11
    208c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <delay_us.constprop.0>
    2090:	5c 98       	cbi	0x0b, 4	; 11
    2092:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <delay_us.constprop.0>
    2096:	08 95       	ret

00002098 <_ZN12OrangutanLCD4sendEhhh>:
    2098:	a0 e0       	ldi	r26, 0x00	; 0
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e2 e5       	ldi	r30, 0x52	; 82
    209e:	f0 e1       	ldi	r31, 0x10	; 16
    20a0:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x16>
    20a4:	c8 2f       	mov	r28, r24
    20a6:	d6 2e       	mov	r13, r22
    20a8:	e4 2e       	mov	r14, r20
    20aa:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <_ZZN12OrangutanLCD4initEvE11initialized>
    20ae:	81 11       	cpse	r24, r1
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <_ZN12OrangutanLCD4sendEhhh+0x24>
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <_ZZN12OrangutanLCD4initEvE11initialized>
    20b8:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN12OrangutanLCD5init2Ev>
    20bc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN12OrangutanLCD8busyWaitEv>
    20c0:	14 b1       	in	r17, 0x04	; 4
    20c2:	d5 b1       	in	r29, 0x05	; 5
    20c4:	fa b0       	in	r15, 0x0a	; 10
    20c6:	0b b1       	in	r16, 0x0b	; 11
    20c8:	28 98       	cbi	0x05, 0	; 5
    20ca:	dd 20       	and	r13, r13
    20cc:	11 f0       	breq	.+4      	; 0x20d2 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    20ce:	5a 9a       	sbi	0x0b, 2	; 11
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    20d2:	5a 98       	cbi	0x0b, 2	; 11
    20d4:	94 b1       	in	r25, 0x04	; 4
    20d6:	92 63       	ori	r25, 0x32	; 50
    20d8:	94 b9       	out	0x04, r25	; 4
    20da:	57 9a       	sbi	0x0a, 7	; 10
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	e8 16       	cp	r14, r24
    20e0:	29 f0       	breq	.+10     	; 0x20ec <_ZN12OrangutanLCD4sendEhhh+0x54>
    20e2:	8c 2f       	mov	r24, r28
    20e4:	82 95       	swap	r24
    20e6:	8f 70       	andi	r24, 0x0F	; 15
    20e8:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN12OrangutanLCD8sendDataEh>
    20ec:	8c 2f       	mov	r24, r28
    20ee:	8f 70       	andi	r24, 0x0F	; 15
    20f0:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN12OrangutanLCD8sendDataEh>
    20f4:	fa b8       	out	0x0a, r15	; 10
    20f6:	0b b9       	out	0x0b, r16	; 11
    20f8:	14 b9       	out	0x04, r17	; 4
    20fa:	d5 b9       	out	0x05, r29	; 5
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	e7 e0       	ldi	r30, 0x07	; 7
    2102:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x16>

00002106 <_ZN12OrangutanLCD8send_cmdEh>:
    2106:	42 e0       	ldi	r20, 0x02	; 2
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 4c 10 	call	0x2098	; 0x2098 <_ZN12OrangutanLCD4sendEhhh>
    210e:	08 95       	ret

00002110 <_ZN12OrangutanLCD9send_dataEh>:
    2110:	42 e0       	ldi	r20, 0x02	; 2
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	0e 94 4c 10 	call	0x2098	; 0x2098 <_ZN12OrangutanLCD4sendEhhh>
    2118:	08 95       	ret

0000211a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	0e 94 4c 10 	call	0x2098	; 0x2098 <_ZN12OrangutanLCD4sendEhhh>
    2122:	08 95       	ret

00002124 <_ZN12OrangutanLCD5init2Ev>:
    2124:	80 e1       	ldi	r24, 0x10	; 16
    2126:	97 e2       	ldi	r25, 0x27	; 39
    2128:	a0 e0       	ldi	r26, 0x00	; 0
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <lcdTimeout>
    2130:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <lcdTimeout+0x1>
    2134:	a0 93 9d 01 	sts	0x019D, r26	; 0x80019d <lcdTimeout+0x2>
    2138:	b0 93 9e 01 	sts	0x019E, r27	; 0x80019e <lcdTimeout+0x3>
    213c:	52 9a       	sbi	0x0a, 2	; 10
    213e:	20 9a       	sbi	0x04, 0	; 4
    2140:	54 9a       	sbi	0x0a, 4	; 10
    2142:	8e e1       	ldi	r24, 0x1E	; 30
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2150:	86 e0       	ldi	r24, 0x06	; 6
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
    2182:	88 e2       	ldi	r24, 0x28	; 40
    2184:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    2188:	88 e0       	ldi	r24, 0x08	; 8
    218a:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    2194:	86 e0       	ldi	r24, 0x06	; 6
    2196:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    219a:	8c e0       	ldi	r24, 0x0C	; 12
    219c:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    21a0:	08 95       	ret

000021a2 <_ZN12OrangutanLCD5clearEv>:
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    21a8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <printf_chars>
    21ac:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <printf_chars+0x1>
    21b0:	89 2b       	or	r24, r25
    21b2:	f9 f0       	breq	.+62     	; 0x21f2 <_ZN12OrangutanLCD5clearEv+0x50>
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	a0 e2       	ldi	r26, 0x20	; 32
    21b8:	26 2f       	mov	r18, r22
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    21c0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	78 9f       	mul	r23, r24
    21ca:	a0 01       	movw	r20, r0
    21cc:	79 9f       	mul	r23, r25
    21ce:	50 0d       	add	r21, r0
    21d0:	11 24       	eor	r1, r1
    21d2:	24 17       	cp	r18, r20
    21d4:	35 07       	cpc	r19, r21
    21d6:	4c f4       	brge	.+18     	; 0x21ea <_ZN12OrangutanLCD5clearEv+0x48>
    21d8:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <printf_chars>
    21dc:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <printf_chars+0x1>
    21e0:	e2 0f       	add	r30, r18
    21e2:	f3 1f       	adc	r31, r19
    21e4:	a0 83       	st	Z, r26
    21e6:	6f 5f       	subi	r22, 0xFF	; 255
    21e8:	e7 cf       	rjmp	.-50     	; 0x21b8 <_ZN12OrangutanLCD5clearEv+0x16>
    21ea:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <col>
    21ee:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <row>
    21f2:	08 95       	ret

000021f4 <clear>:
    21f4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN12OrangutanLCD5clearEv>
    21f8:	08 95       	ret

000021fa <_ZN12OrangutanLCD5printEPKc>:
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	ec 01       	movw	r28, r24
    2200:	89 91       	ld	r24, Y+
    2202:	88 23       	and	r24, r24
    2204:	19 f0       	breq	.+6      	; 0x220c <_ZN12OrangutanLCD5printEPKc+0x12>
    2206:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN12OrangutanLCD9send_dataEh>
    220a:	fa cf       	rjmp	.-12     	; 0x2200 <_ZN12OrangutanLCD5printEPKc+0x6>
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <print>:
    2212:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN12OrangutanLCD5printEPKc>
    2216:	08 95       	ret

00002218 <_ZN12OrangutanLCD5printEm>:
    2218:	aa e0       	ldi	r26, 0x0A	; 10
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e2 e1       	ldi	r30, 0x12	; 18
    221e:	f1 e1       	ldi	r31, 0x11	; 17
    2220:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__prologue_saves__+0x14>
    2224:	1a e0       	ldi	r17, 0x0A	; 10
    2226:	5a e0       	ldi	r21, 0x0A	; 10
    2228:	c5 2e       	mov	r12, r21
    222a:	d1 2c       	mov	r13, r1
    222c:	e1 2c       	mov	r14, r1
    222e:	f1 2c       	mov	r15, r1
    2230:	06 2f       	mov	r16, r22
    2232:	a7 01       	movw	r20, r14
    2234:	96 01       	movw	r18, r12
    2236:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    223a:	ca 01       	movw	r24, r20
    223c:	b9 01       	movw	r22, r18
    223e:	11 50       	subi	r17, 0x01	; 1
    2240:	e1 e0       	ldi	r30, 0x01	; 1
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	ec 0f       	add	r30, r28
    2246:	fd 1f       	adc	r31, r29
    2248:	e1 0f       	add	r30, r17
    224a:	f1 1d       	adc	r31, r1
    224c:	00 5d       	subi	r16, 0xD0	; 208
    224e:	2a e0       	ldi	r18, 0x0A	; 10
    2250:	62 9f       	mul	r22, r18
    2252:	00 19       	sub	r16, r0
    2254:	11 24       	eor	r1, r1
    2256:	00 83       	st	Z, r16
    2258:	61 15       	cp	r22, r1
    225a:	71 05       	cpc	r23, r1
    225c:	81 05       	cpc	r24, r1
    225e:	91 05       	cpc	r25, r1
    2260:	39 f7       	brne	.-50     	; 0x2230 <_ZN12OrangutanLCD5printEm+0x18>
    2262:	1a 30       	cpi	r17, 0x0A	; 10
    2264:	58 f4       	brcc	.+22     	; 0x227c <_ZN12OrangutanLCD5printEm+0x64>
    2266:	e1 e0       	ldi	r30, 0x01	; 1
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	ec 0f       	add	r30, r28
    226c:	fd 1f       	adc	r31, r29
    226e:	e1 0f       	add	r30, r17
    2270:	f1 1d       	adc	r31, r1
    2272:	80 81       	ld	r24, Z
    2274:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN12OrangutanLCD9send_dataEh>
    2278:	1f 5f       	subi	r17, 0xFF	; 255
    227a:	f3 cf       	rjmp	.-26     	; 0x2262 <_ZN12OrangutanLCD5printEm+0x4a>
    227c:	2a 96       	adiw	r28, 0x0a	; 10
    227e:	e8 e0       	ldi	r30, 0x08	; 8
    2280:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__epilogue_restores__+0x14>

00002284 <_ZN12OrangutanLCD5printEl>:
    2284:	cf 92       	push	r12
    2286:	df 92       	push	r13
    2288:	ef 92       	push	r14
    228a:	ff 92       	push	r15
    228c:	6b 01       	movw	r12, r22
    228e:	7c 01       	movw	r14, r24
    2290:	97 ff       	sbrs	r25, 7
    2292:	0b c0       	rjmp	.+22     	; 0x22aa <_ZN12OrangutanLCD5printEl+0x26>
    2294:	f0 94       	com	r15
    2296:	e0 94       	com	r14
    2298:	d0 94       	com	r13
    229a:	c0 94       	com	r12
    229c:	c1 1c       	adc	r12, r1
    229e:	d1 1c       	adc	r13, r1
    22a0:	e1 1c       	adc	r14, r1
    22a2:	f1 1c       	adc	r15, r1
    22a4:	8d e2       	ldi	r24, 0x2D	; 45
    22a6:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN12OrangutanLCD9send_dataEh>
    22aa:	c7 01       	movw	r24, r14
    22ac:	b6 01       	movw	r22, r12
    22ae:	0e 94 0c 11 	call	0x2218	; 0x2218 <_ZN12OrangutanLCD5printEm>
    22b2:	ff 90       	pop	r15
    22b4:	ef 90       	pop	r14
    22b6:	df 90       	pop	r13
    22b8:	cf 90       	pop	r12
    22ba:	08 95       	ret

000022bc <print_long>:
    22bc:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN12OrangutanLCD5printEl>
    22c0:	08 95       	ret

000022c2 <_ZN12OrangutanLCD6gotoXYEhh>:
    22c2:	a5 e0       	ldi	r26, 0x05	; 5
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e7 e6       	ldi	r30, 0x67	; 103
    22c8:	f1 e1       	ldi	r31, 0x11	; 17
    22ca:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x1e>
    22ce:	18 2f       	mov	r17, r24
    22d0:	80 e8       	ldi	r24, 0x80	; 128
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	80 ec       	ldi	r24, 0xC0	; 192
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	84 e9       	ldi	r24, 0x94	; 148
    22da:	8b 83       	std	Y+3, r24	; 0x03
    22dc:	84 ed       	ldi	r24, 0xD4	; 212
    22de:	8c 83       	std	Y+4, r24	; 0x04
    22e0:	fe 01       	movw	r30, r28
    22e2:	e6 0f       	add	r30, r22
    22e4:	f1 1d       	adc	r31, r1
    22e6:	81 81       	ldd	r24, Z+1	; 0x01
    22e8:	81 0f       	add	r24, r17
    22ea:	6d 83       	std	Y+5, r22	; 0x05
    22ec:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN12OrangutanLCD8send_cmdEh>
    22f0:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <col>
    22f4:	6d 81       	ldd	r22, Y+5	; 0x05
    22f6:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <row>
    22fa:	25 96       	adiw	r28, 0x05	; 5
    22fc:	e3 e0       	ldi	r30, 0x03	; 3
    22fe:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x1e>

00002302 <lcd_goto_xy>:
    2302:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN12OrangutanLCD6gotoXYEhh>
    2306:	08 95       	ret

00002308 <_ZN16OrangutanDigital9setOutputEhh>:
    2308:	88 30       	cpi	r24, 0x08	; 8
    230a:	58 f4       	brcc	.+22     	; 0x2322 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2310:	99 0f       	add	r25, r25
    2312:	8a 95       	dec	r24
    2314:	ea f7       	brpl	.-6      	; 0x2310 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2316:	89 2f       	mov	r24, r25
    2318:	aa e2       	ldi	r26, 0x2A	; 42
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	eb e2       	ldi	r30, 0x2B	; 43
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	21 c0       	rjmp	.+66     	; 0x2364 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2322:	8e 30       	cpi	r24, 0x0E	; 14
    2324:	60 f4       	brcc	.+24     	; 0x233e <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2326:	98 ef       	ldi	r25, 0xF8	; 248
    2328:	98 0f       	add	r25, r24
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    232e:	88 0f       	add	r24, r24
    2330:	9a 95       	dec	r25
    2332:	ea f7       	brpl	.-6      	; 0x232e <_ZN16OrangutanDigital9setOutputEhh+0x26>
    2334:	a4 e2       	ldi	r26, 0x24	; 36
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e5 e2       	ldi	r30, 0x25	; 37
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	13 c0       	rjmp	.+38     	; 0x2364 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    233e:	85 31       	cpi	r24, 0x15	; 21
    2340:	60 f4       	brcc	.+24     	; 0x235a <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2342:	92 ef       	ldi	r25, 0xF2	; 242
    2344:	98 0f       	add	r25, r24
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	01 c0       	rjmp	.+2      	; 0x234c <_ZN16OrangutanDigital9setOutputEhh+0x44>
    234a:	88 0f       	add	r24, r24
    234c:	9a 95       	dec	r25
    234e:	ea f7       	brpl	.-6      	; 0x234a <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2350:	a7 e2       	ldi	r26, 0x27	; 39
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e8 e2       	ldi	r30, 0x28	; 40
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	a0 e0       	ldi	r26, 0x00	; 0
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e0 e0       	ldi	r30, 0x00	; 0
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	6f 3f       	cpi	r22, 0xFF	; 255
    2366:	19 f4       	brne	.+6      	; 0x236e <_ZN16OrangutanDigital9setOutputEhh+0x66>
    2368:	90 81       	ld	r25, Z
    236a:	98 27       	eor	r25, r24
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    236e:	66 23       	and	r22, r22
    2370:	19 f0       	breq	.+6      	; 0x2378 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2372:	90 81       	ld	r25, Z
    2374:	98 2b       	or	r25, r24
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2378:	20 81       	ld	r18, Z
    237a:	98 2f       	mov	r25, r24
    237c:	90 95       	com	r25
    237e:	92 23       	and	r25, r18
    2380:	90 83       	st	Z, r25
    2382:	9c 91       	ld	r25, X
    2384:	98 2b       	or	r25, r24
    2386:	9c 93       	st	X, r25
    2388:	08 95       	ret

0000238a <_ZN15OrangutanMotors5init2Ev>:
    238a:	83 ef       	ldi	r24, 0xF3	; 243
    238c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2390:	84 bd       	out	0x24, r24	; 36
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2398:	85 bd       	out	0x25, r24	; 37
    239a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    239e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    23a2:	18 bc       	out	0x28, r1	; 40
    23a4:	17 bc       	out	0x27, r1	; 39
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	86 e0       	ldi	r24, 0x06	; 6
    23aa:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN16OrangutanDigital9setOutputEhh>
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	85 e0       	ldi	r24, 0x05	; 5
    23b2:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN16OrangutanDigital9setOutputEhh>
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	8b e0       	ldi	r24, 0x0B	; 11
    23ba:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN16OrangutanDigital9setOutputEhh>
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN16OrangutanDigital9setOutputEhh>
    23c6:	08 95       	ret

000023c8 <_ZN15OrangutanMotors4initEv>:
    23c8:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <_ZZN15OrangutanMotors4initEvE11initialized>
    23cc:	81 11       	cpse	r24, r1
    23ce:	05 c0       	rjmp	.+10     	; 0x23da <_ZN15OrangutanMotors4initEv+0x12>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <_ZZN15OrangutanMotors4initEvE11initialized>
    23d6:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN15OrangutanMotors5init2Ev>
    23da:	08 95       	ret

000023dc <_ZN15OrangutanMotors10setM1SpeedEi>:
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
    23e2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN15OrangutanMotors4initEv>
    23e6:	d7 ff       	sbrs	r29, 7
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    23ea:	d1 95       	neg	r29
    23ec:	c1 95       	neg	r28
    23ee:	d1 09       	sbc	r29, r1
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	cf 3f       	cpi	r28, 0xFF	; 255
    23f8:	d1 05       	cpc	r29, r1
    23fa:	19 f0       	breq	.+6      	; 0x2402 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23fc:	14 f0       	brlt	.+4      	; 0x2402 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23fe:	cf ef       	ldi	r28, 0xFF	; 255
    2400:	d0 e0       	ldi	r29, 0x00	; 0
    2402:	88 23       	and	r24, r24
    2404:	19 f0       	breq	.+6      	; 0x240c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2406:	18 bc       	out	0x28, r1	; 40
    2408:	c7 bd       	out	0x27, r28	; 39
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    240c:	c8 bd       	out	0x28, r28	; 40
    240e:	17 bc       	out	0x27, r1	; 39
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	ec 01       	movw	r28, r24
    241c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN15OrangutanMotors4initEv>
    2420:	d7 ff       	sbrs	r29, 7
    2422:	05 c0       	rjmp	.+10     	; 0x242e <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2424:	d1 95       	neg	r29
    2426:	c1 95       	neg	r28
    2428:	d1 09       	sbc	r29, r1
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	cf 3f       	cpi	r28, 0xFF	; 255
    2432:	d1 05       	cpc	r29, r1
    2434:	19 f0       	breq	.+6      	; 0x243c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2436:	14 f0       	brlt	.+4      	; 0x243c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2438:	cf ef       	ldi	r28, 0xFF	; 255
    243a:	d0 e0       	ldi	r29, 0x00	; 0
    243c:	88 23       	and	r24, r24
    243e:	29 f0       	breq	.+10     	; 0x244a <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2440:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2444:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2448:	04 c0       	rjmp	.+8      	; 0x2452 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    244a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    244e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <_ZN15OrangutanMotors9setSpeedsEii>:
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	eb 01       	movw	r28, r22
    245e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <_ZN15OrangutanMotors10setM1SpeedEi>
    2462:	ce 01       	movw	r24, r28
    2464:	0e 94 0b 12 	call	0x2416	; 0x2416 <_ZN15OrangutanMotors10setM2SpeedEi>
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <set_motors>:
    246e:	0e 94 2c 12 	call	0x2458	; 0x2458 <_ZN15OrangutanMotors9setSpeedsEii>
    2472:	08 95       	ret

00002474 <_ZN20OrangutanPushbuttons5init2Ev>:
    2474:	84 b1       	in	r24, 0x04	; 4
    2476:	8d 7c       	andi	r24, 0xCD	; 205
    2478:	84 b9       	out	0x04, r24	; 4
    247a:	85 b1       	in	r24, 0x05	; 5
    247c:	82 63       	ori	r24, 0x32	; 50
    247e:	85 b9       	out	0x05, r24	; 5
    2480:	85 e0       	ldi	r24, 0x05	; 5
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	6f 93       	push	r22
    2486:	64 e0       	ldi	r22, 0x04	; 4
    2488:	6a 95       	dec	r22
    248a:	f1 f7       	brne	.-4      	; 0x2488 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    248c:	6f 91       	pop	r22
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	c9 f7       	brne	.-14     	; 0x2484 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2492:	08 95       	ret

00002494 <_ZN20OrangutanPushbuttons4initEv>:
    2494:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2498:	81 11       	cpse	r24, r1
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <_ZN20OrangutanPushbuttons4initEv+0x12>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    24a2:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN20OrangutanPushbuttons5init2Ev>
    24a6:	08 95       	ret

000024a8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    24a8:	cf 93       	push	r28
    24aa:	c8 2f       	mov	r28, r24
    24ac:	0e 94 4a 12 	call	0x2494	; 0x2494 <_ZN20OrangutanPushbuttons4initEv>
    24b0:	83 b1       	in	r24, 0x03	; 3
    24b2:	8c 23       	and	r24, r28
    24b4:	e9 f3       	breq	.-6      	; 0x24b0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    24b6:	8a e0       	ldi	r24, 0x0A	; 10
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 c5 12 	call	0x258a	; 0x258a <delay_ms>
    24be:	83 b1       	in	r24, 0x03	; 3
    24c0:	8c 23       	and	r24, r28
    24c2:	b1 f3       	breq	.-20     	; 0x24b0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    24c4:	83 b1       	in	r24, 0x03	; 3
    24c6:	8c 23       	and	r24, r28
    24c8:	cf 91       	pop	r28
    24ca:	08 95       	ret

000024cc <wait_for_button_release>:
    24cc:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    24d0:	08 95       	ret

000024d2 <_ZN20OrangutanPushbuttons9isPressedEh>:
    24d2:	a1 e0       	ldi	r26, 0x01	; 1
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ef e6       	ldi	r30, 0x6F	; 111
    24d8:	f2 e1       	ldi	r31, 0x12	; 18
    24da:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x20>
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	0e 94 4a 12 	call	0x2494	; 0x2494 <_ZN20OrangutanPushbuttons4initEv>
    24e4:	93 b1       	in	r25, 0x03	; 3
    24e6:	90 95       	com	r25
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	89 23       	and	r24, r25
    24ec:	21 96       	adiw	r28, 0x01	; 1
    24ee:	e2 e0       	ldi	r30, 0x02	; 2
    24f0:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x20>

000024f4 <button_is_pressed>:
    24f4:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN20OrangutanPushbuttons9isPressedEh>
    24f8:	08 95       	ret

000024fa <__vector_9>:
    24fa:	2f 92       	push	r2
    24fc:	8f 93       	push	r24
    24fe:	9f 93       	push	r25
    2500:	2f b6       	in	r2, 0x3f	; 63
    2502:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tickCount+0x1>
    2506:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <tickCount+0x2>
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tickCount+0x1>
    2510:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <tickCount+0x2>
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <tickCount+0x3>
    251a:	89 1f       	adc	r24, r25
    251c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <tickCount+0x3>
    2520:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <us_over_10+0x1>
    2524:	9c 5f       	subi	r25, 0xFC	; 252
    2526:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <us_over_10+0x1>
    252a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <us_over_10>
    252e:	80 51       	subi	r24, 0x10	; 16
    2530:	97 42       	sbci	r25, 0x27	; 39
    2532:	c0 f0       	brcs	.+48     	; 0x2564 <end>
    2534:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <us_over_10+0x1>
    2538:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <us_over_10>
    253c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msCounter>
    2540:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <msCounter+0x1>
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <msCounter>
    254a:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <msCounter+0x1>
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <msCounter+0x2>
    2554:	89 1f       	adc	r24, r25
    2556:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <msCounter+0x2>
    255a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <msCounter+0x3>
    255e:	89 1f       	adc	r24, r25
    2560:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <msCounter+0x3>

00002564 <end>:
    2564:	2f be       	out	0x3f, r2	; 63
    2566:	9f 91       	pop	r25
    2568:	8f 91       	pop	r24
    256a:	2f 90       	pop	r2
    256c:	18 95       	reti

0000256e <_ZN13OrangutanTime17delayMillisecondsEj>:
    256e:	28 ee       	ldi	r18, 0xE8	; 232
    2570:	33 e0       	ldi	r19, 0x03	; 3
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	48 f0       	brcs	.+18     	; 0x2588 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2576:	f9 01       	movw	r30, r18
    2578:	6f 93       	push	r22
    257a:	64 e0       	ldi	r22, 0x04	; 4
    257c:	6a 95       	dec	r22
    257e:	f1 f7       	brne	.-4      	; 0x257c <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2580:	6f 91       	pop	r22
    2582:	31 97       	sbiw	r30, 0x01	; 1
    2584:	c9 f7       	brne	.-14     	; 0x2578 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2586:	f5 cf       	rjmp	.-22     	; 0x2572 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2588:	08 95       	ret

0000258a <delay_ms>:
    258a:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN13OrangutanTime17delayMillisecondsEj>
    258e:	08 95       	ret

00002590 <_ZN13OrangutanTime5init2Ev>:
    2590:	e0 e7       	ldi	r30, 0x70	; 112
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8e 7f       	andi	r24, 0xFE	; 254
    2598:	80 83       	st	Z, r24
    259a:	a0 eb       	ldi	r26, 0xB0	; 176
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	8c 91       	ld	r24, X
    25a0:	83 60       	ori	r24, 0x03	; 3
    25a2:	8c 93       	st	X, r24
    25a4:	a1 eb       	ldi	r26, 0xB1	; 177
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	8c 91       	ld	r24, X
    25aa:	80 7f       	andi	r24, 0xF0	; 240
    25ac:	8c 93       	st	X, r24
    25ae:	8c 91       	ld	r24, X
    25b0:	82 60       	ori	r24, 0x02	; 2
    25b2:	8c 93       	st	X, r24
    25b4:	b8 9a       	sbi	0x17, 0	; 23
    25b6:	80 81       	ld	r24, Z
    25b8:	81 60       	ori	r24, 0x01	; 1
    25ba:	80 83       	st	Z, r24
    25bc:	78 94       	sei
    25be:	08 95       	ret

000025c0 <_ZN13OrangutanTime4initEv>:
    25c0:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <_ZZN13OrangutanTime4initEvE11initialized>
    25c4:	81 11       	cpse	r24, r1
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <_ZN13OrangutanTime4initEv+0x12>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <_ZZN13OrangutanTime4initEvE11initialized>
    25ce:	0e 94 c8 12 	call	0x2590	; 0x2590 <_ZN13OrangutanTime5init2Ev>
    25d2:	08 95       	ret

000025d4 <_ZN13OrangutanTime5resetEv>:
    25d4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_ZN13OrangutanTime4initEv>
    25d8:	e0 e7       	ldi	r30, 0x70	; 112
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8e 7f       	andi	r24, 0xFE	; 254
    25e0:	80 83       	st	Z, r24
    25e2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msCounter>
    25e6:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <msCounter+0x1>
    25ea:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <msCounter+0x2>
    25ee:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <msCounter+0x3>
    25f2:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <us_over_10+0x1>
    25f6:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <us_over_10>
    25fa:	80 81       	ld	r24, Z
    25fc:	81 60       	ori	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	08 95       	ret

00002602 <read_line_sensors>:
    2602:	46 2f       	mov	r20, r22
    2604:	bc 01       	movw	r22, r24
    2606:	8d ea       	ldi	r24, 0xAD	; 173
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	0e 94 84 15 	call	0x2b08	; 0x2b08 <_ZN16PololuQTRSensors4readEPjh>
    260e:	08 95       	ret

00002610 <_ZN9Pololu3pi4initEjh>:
    2610:	0f 93       	push	r16
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	00 d0       	rcall	.+0      	; 0x2618 <_ZN9Pololu3pi4initEjh+0x8>
    2618:	00 d0       	rcall	.+0      	; 0x261a <_ZN9Pololu3pi4initEjh+0xa>
    261a:	1f 92       	push	r1
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9c 01       	movw	r18, r24
    2622:	85 e0       	ldi	r24, 0x05	; 5
    2624:	ec e4       	ldi	r30, 0x4C	; 76
    2626:	f1 e0       	ldi	r31, 0x01	; 1
    2628:	de 01       	movw	r26, r28
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	01 90       	ld	r0, Z+
    262e:	0d 92       	st	X+, r0
    2630:	8a 95       	dec	r24
    2632:	e1 f7       	brne	.-8      	; 0x262c <_ZN9Pololu3pi4initEjh+0x1c>
    2634:	66 23       	and	r22, r22
    2636:	11 f0       	breq	.+4      	; 0x263c <_ZN9Pololu3pi4initEjh+0x2c>
    2638:	0f ef       	ldi	r16, 0xFF	; 255
    263a:	01 c0       	rjmp	.+2      	; 0x263e <_ZN9Pololu3pi4initEjh+0x2e>
    263c:	03 e1       	ldi	r16, 0x13	; 19
    263e:	45 e0       	ldi	r20, 0x05	; 5
    2640:	be 01       	movw	r22, r28
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	8d ea       	ldi	r24, 0xAD	; 173
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    264e:	8d ea       	ldi	r24, 0xAD	; 173
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN16PololuQTRSensors11emittersOffEv>
    2656:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN13OrangutanTime5resetEv>
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	0f 91       	pop	r16
    266a:	08 95       	ret

0000266c <pololu_3pi_init>:
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN9Pololu3pi4initEjh>
    2672:	08 95       	ret

00002674 <_GLOBAL__sub_D_pololu_3pi_init>:
    2674:	8d ea       	ldi	r24, 0xAD	; 173
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <_ZN16PololuQTRSensorsD1Ev>
    267c:	08 95       	ret

0000267e <delay_us>:
    267e:	6f 93       	push	r22
    2680:	64 e0       	ldi	r22, 0x04	; 4
    2682:	6a 95       	dec	r22
    2684:	f1 f7       	brne	.-4      	; 0x2682 <delay_us+0x4>
    2686:	6f 91       	pop	r22
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	c9 f7       	brne	.-14     	; 0x267e <delay_us>
    268c:	08 95       	ret

0000268e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    268e:	fc 01       	movw	r30, r24
    2690:	11 82       	std	Z+1, r1	; 0x01
    2692:	10 82       	st	Z, r1
    2694:	13 82       	std	Z+3, r1	; 0x03
    2696:	12 82       	std	Z+2, r1	; 0x02
    2698:	15 82       	std	Z+5, r1	; 0x05
    269a:	14 82       	std	Z+4, r1	; 0x04
    269c:	16 82       	std	Z+6, r1	; 0x06
    269e:	68 30       	cpi	r22, 0x08	; 8
    26a0:	68 f4       	brcc	.+26     	; 0x26bc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    26a2:	89 e2       	ldi	r24, 0x29	; 41
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	8b e2       	ldi	r24, 0x2B	; 43
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	93 83       	std	Z+3, r25	; 0x03
    26b0:	82 83       	std	Z+2, r24	; 0x02
    26b2:	8a e2       	ldi	r24, 0x2A	; 42
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	95 83       	std	Z+5, r25	; 0x05
    26b8:	84 83       	std	Z+4, r24	; 0x04
    26ba:	1f c0       	rjmp	.+62     	; 0x26fa <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    26bc:	6e 30       	cpi	r22, 0x0E	; 14
    26be:	70 f4       	brcc	.+28     	; 0x26dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    26c0:	83 e2       	ldi	r24, 0x23	; 35
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	85 e2       	ldi	r24, 0x25	; 37
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	93 83       	std	Z+3, r25	; 0x03
    26ce:	82 83       	std	Z+2, r24	; 0x02
    26d0:	84 e2       	ldi	r24, 0x24	; 36
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	95 83       	std	Z+5, r25	; 0x05
    26d6:	84 83       	std	Z+4, r24	; 0x04
    26d8:	68 50       	subi	r22, 0x08	; 8
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    26dc:	65 31       	cpi	r22, 0x15	; 21
    26de:	98 f4       	brcc	.+38     	; 0x2706 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    26e0:	86 e2       	ldi	r24, 0x26	; 38
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	88 e2       	ldi	r24, 0x28	; 40
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	93 83       	std	Z+3, r25	; 0x03
    26ee:	82 83       	std	Z+2, r24	; 0x02
    26f0:	87 e2       	ldi	r24, 0x27	; 39
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	95 83       	std	Z+5, r25	; 0x05
    26f6:	84 83       	std	Z+4, r24	; 0x04
    26f8:	6e 50       	subi	r22, 0x0E	; 14
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    26fe:	88 0f       	add	r24, r24
    2700:	6a 95       	dec	r22
    2702:	ea f7       	brpl	.-6      	; 0x26fe <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2704:	86 83       	std	Z+6, r24	; 0x06
    2706:	08 95       	ret

00002708 <_ZN16PololuQTRSensors4initEhhh>:
    2708:	a7 e0       	ldi	r26, 0x07	; 7
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea e8       	ldi	r30, 0x8A	; 138
    270e:	f3 e1       	ldi	r31, 0x13	; 19
    2710:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x1c>
    2714:	8c 01       	movw	r16, r24
    2716:	fc 01       	movw	r30, r24
    2718:	11 82       	std	Z+1, r1	; 0x01
    271a:	10 82       	st	Z, r1
    271c:	13 82       	std	Z+3, r1	; 0x03
    271e:	12 82       	std	Z+2, r1	; 0x02
    2720:	15 82       	std	Z+5, r1	; 0x05
    2722:	14 82       	std	Z+4, r1	; 0x04
    2724:	17 82       	std	Z+7, r1	; 0x07
    2726:	16 82       	std	Z+6, r1	; 0x06
    2728:	61 31       	cpi	r22, 0x11	; 17
    272a:	18 f0       	brcs	.+6      	; 0x2732 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    272c:	80 e1       	ldi	r24, 0x10	; 16
    272e:	80 87       	std	Z+8, r24	; 0x08
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2732:	fc 01       	movw	r30, r24
    2734:	60 87       	std	Z+8, r22	; 0x08
    2736:	f8 01       	movw	r30, r16
    2738:	20 8b       	std	Z+16, r18	; 0x10
    273a:	64 2f       	mov	r22, r20
    273c:	ce 01       	movw	r24, r28
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	0e 94 47 13 	call	0x268e	; 0x268e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2744:	8f 81       	ldd	r24, Y+7	; 0x07
    2746:	f8 01       	movw	r30, r16
    2748:	81 87       	std	Z+9, r24	; 0x09
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	93 87       	std	Z+11, r25	; 0x0b
    2750:	82 87       	std	Z+10, r24	; 0x0a
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	95 87       	std	Z+13, r25	; 0x0d
    2758:	84 87       	std	Z+12, r24	; 0x0c
    275a:	27 96       	adiw	r28, 0x07	; 7
    275c:	e4 e0       	ldi	r30, 0x04	; 4
    275e:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x1c>

00002762 <_ZN16PololuQTRSensors11emittersOffEv>:
    2762:	fc 01       	movw	r30, r24
    2764:	a4 85       	ldd	r26, Z+12	; 0x0c
    2766:	b5 85       	ldd	r27, Z+13	; 0x0d
    2768:	10 97       	sbiw	r26, 0x00	; 0
    276a:	79 f0       	breq	.+30     	; 0x278a <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    276c:	8c 91       	ld	r24, X
    276e:	91 85       	ldd	r25, Z+9	; 0x09
    2770:	89 2b       	or	r24, r25
    2772:	8c 93       	st	X, r24
    2774:	a2 85       	ldd	r26, Z+10	; 0x0a
    2776:	b3 85       	ldd	r27, Z+11	; 0x0b
    2778:	9c 91       	ld	r25, X
    277a:	81 85       	ldd	r24, Z+9	; 0x09
    277c:	80 95       	com	r24
    277e:	89 23       	and	r24, r25
    2780:	8c 93       	st	X, r24
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 3f 13 	call	0x267e	; 0x267e <delay_us>
    278a:	08 95       	ret

0000278c <_ZN16PololuQTRSensors10emittersOnEv>:
    278c:	fc 01       	movw	r30, r24
    278e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2790:	b5 85       	ldd	r27, Z+13	; 0x0d
    2792:	10 97       	sbiw	r26, 0x00	; 0
    2794:	71 f0       	breq	.+28     	; 0x27b2 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2796:	8c 91       	ld	r24, X
    2798:	91 85       	ldd	r25, Z+9	; 0x09
    279a:	89 2b       	or	r24, r25
    279c:	8c 93       	st	X, r24
    279e:	a2 85       	ldd	r26, Z+10	; 0x0a
    27a0:	b3 85       	ldd	r27, Z+11	; 0x0b
    27a2:	8c 91       	ld	r24, X
    27a4:	91 85       	ldd	r25, Z+9	; 0x09
    27a6:	89 2b       	or	r24, r25
    27a8:	8c 93       	st	X, r24
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 3f 13 	call	0x267e	; 0x267e <delay_us>
    27b2:	08 95       	ret

000027b4 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    27b4:	a7 e0       	ldi	r26, 0x07	; 7
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e0 ee       	ldi	r30, 0xE0	; 224
    27ba:	f3 e1       	ldi	r31, 0x13	; 19
    27bc:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x6>
    27c0:	7c 01       	movw	r14, r24
    27c2:	4b 01       	movw	r8, r22
    27c4:	64 2f       	mov	r22, r20
    27c6:	39 01       	movw	r6, r18
    27c8:	40 2f       	mov	r20, r16
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	0e 94 84 13 	call	0x2708	; 0x2708 <_ZN16PololuQTRSensors4initEhhh>
    27d0:	87 01       	movw	r16, r14
    27d2:	0f 5b       	subi	r16, 0xBF	; 191
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	f8 01       	movw	r30, r16
    27d8:	10 82       	st	Z, r1
    27da:	67 01       	movw	r12, r14
    27dc:	f2 e4       	ldi	r31, 0x42	; 66
    27de:	cf 0e       	add	r12, r31
    27e0:	d1 1c       	adc	r13, r1
    27e2:	f6 01       	movw	r30, r12
    27e4:	10 82       	st	Z, r1
    27e6:	57 01       	movw	r10, r14
    27e8:	f3 e4       	ldi	r31, 0x43	; 67
    27ea:	af 0e       	add	r10, r31
    27ec:	b1 1c       	adc	r11, r1
    27ee:	f5 01       	movw	r30, r10
    27f0:	10 82       	st	Z, r1
    27f2:	f7 01       	movw	r30, r14
    27f4:	77 86       	std	Z+15, r7	; 0x0f
    27f6:	66 86       	std	Z+14, r6	; 0x0e
    27f8:	51 2c       	mov	r5, r1
    27fa:	f7 01       	movw	r30, r14
    27fc:	80 85       	ldd	r24, Z+8	; 0x08
    27fe:	58 16       	cp	r5, r24
    2800:	50 f5       	brcc	.+84     	; 0x2856 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2802:	65 2c       	mov	r6, r5
    2804:	71 2c       	mov	r7, r1
    2806:	f4 01       	movw	r30, r8
    2808:	e6 0d       	add	r30, r6
    280a:	f7 1d       	adc	r31, r7
    280c:	60 81       	ld	r22, Z
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	0e 94 47 13 	call	0x268e	; 0x268e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2816:	2f 81       	ldd	r18, Y+7	; 0x07
    2818:	f7 01       	movw	r30, r14
    281a:	e6 0d       	add	r30, r6
    281c:	f7 1d       	adc	r31, r7
    281e:	21 8b       	std	Z+17, r18	; 0x11
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	f3 01       	movw	r30, r6
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	ee 0d       	add	r30, r14
    282c:	ff 1d       	adc	r31, r15
    282e:	92 a3       	std	Z+34, r25	; 0x22
    2830:	81 a3       	std	Z+33, r24	; 0x21
    2832:	83 32       	cpi	r24, 0x23	; 35
    2834:	91 05       	cpc	r25, r1
    2836:	11 f4       	brne	.+4      	; 0x283c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2838:	f8 01       	movw	r30, r16
    283a:	08 c0       	rjmp	.+16     	; 0x284c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    283c:	86 32       	cpi	r24, 0x26	; 38
    283e:	91 05       	cpc	r25, r1
    2840:	11 f4       	brne	.+4      	; 0x2846 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2842:	f6 01       	movw	r30, r12
    2844:	03 c0       	rjmp	.+6      	; 0x284c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2846:	89 97       	sbiw	r24, 0x29	; 41
    2848:	21 f4       	brne	.+8      	; 0x2852 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    284a:	f5 01       	movw	r30, r10
    284c:	80 81       	ld	r24, Z
    284e:	82 2b       	or	r24, r18
    2850:	80 83       	st	Z, r24
    2852:	53 94       	inc	r5
    2854:	d2 cf       	rjmp	.-92     	; 0x27fa <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2856:	27 96       	adiw	r28, 0x07	; 7
    2858:	ef e0       	ldi	r30, 0x0F	; 15
    285a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x6>

0000285e <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e5 e3       	ldi	r30, 0x35	; 53
    2864:	f4 e1       	ldi	r31, 0x14	; 20
    2866:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0xa>
    286a:	ec 01       	movw	r28, r24
    286c:	5b 01       	movw	r10, r22
    286e:	6c 01       	movw	r12, r24
    2870:	81 e4       	ldi	r24, 0x41	; 65
    2872:	c8 0e       	add	r12, r24
    2874:	d1 1c       	adc	r13, r1
    2876:	f6 01       	movw	r30, r12
    2878:	80 80       	ld	r8, Z
    287a:	7e 01       	movw	r14, r28
    287c:	f2 e4       	ldi	r31, 0x42	; 66
    287e:	ef 0e       	add	r14, r31
    2880:	f1 1c       	adc	r15, r1
    2882:	f7 01       	movw	r30, r14
    2884:	70 80       	ld	r7, Z
    2886:	8e 01       	movw	r16, r28
    2888:	0d 5b       	subi	r16, 0xBD	; 189
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	f8 01       	movw	r30, r16
    288e:	90 80       	ld	r9, Z
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	98 85       	ldd	r25, Y+8	; 0x08
    2894:	89 17       	cp	r24, r25
    2896:	48 f4       	brcc	.+18     	; 0x28aa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2898:	f5 01       	movw	r30, r10
    289a:	e8 0f       	add	r30, r24
    289c:	f1 1d       	adc	r31, r1
    289e:	e8 0f       	add	r30, r24
    28a0:	f1 1d       	adc	r31, r1
    28a2:	11 82       	std	Z+1, r1	; 0x01
    28a4:	10 82       	st	Z, r1
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	f4 cf       	rjmp	.-24     	; 0x2892 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    28aa:	84 b1       	in	r24, 0x04	; 4
    28ac:	f6 01       	movw	r30, r12
    28ae:	90 81       	ld	r25, Z
    28b0:	89 2b       	or	r24, r25
    28b2:	84 b9       	out	0x04, r24	; 4
    28b4:	87 b1       	in	r24, 0x07	; 7
    28b6:	f7 01       	movw	r30, r14
    28b8:	90 81       	ld	r25, Z
    28ba:	89 2b       	or	r24, r25
    28bc:	87 b9       	out	0x07, r24	; 7
    28be:	8a b1       	in	r24, 0x0a	; 10
    28c0:	f8 01       	movw	r30, r16
    28c2:	90 81       	ld	r25, Z
    28c4:	89 2b       	or	r24, r25
    28c6:	8a b9       	out	0x0a, r24	; 10
    28c8:	85 b1       	in	r24, 0x05	; 5
    28ca:	f6 01       	movw	r30, r12
    28cc:	90 81       	ld	r25, Z
    28ce:	89 2b       	or	r24, r25
    28d0:	85 b9       	out	0x05, r24	; 5
    28d2:	88 b1       	in	r24, 0x08	; 8
    28d4:	f7 01       	movw	r30, r14
    28d6:	90 81       	ld	r25, Z
    28d8:	89 2b       	or	r24, r25
    28da:	88 b9       	out	0x08, r24	; 8
    28dc:	8b b1       	in	r24, 0x0b	; 11
    28de:	f8 01       	movw	r30, r16
    28e0:	90 81       	ld	r25, Z
    28e2:	89 2b       	or	r24, r25
    28e4:	8b b9       	out	0x0b, r24	; 11
    28e6:	8a e0       	ldi	r24, 0x0A	; 10
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 3f 13 	call	0x267e	; 0x267e <delay_us>
    28ee:	94 b1       	in	r25, 0x04	; 4
    28f0:	f6 01       	movw	r30, r12
    28f2:	80 81       	ld	r24, Z
    28f4:	80 95       	com	r24
    28f6:	89 23       	and	r24, r25
    28f8:	84 b9       	out	0x04, r24	; 4
    28fa:	97 b1       	in	r25, 0x07	; 7
    28fc:	f7 01       	movw	r30, r14
    28fe:	80 81       	ld	r24, Z
    2900:	80 95       	com	r24
    2902:	89 23       	and	r24, r25
    2904:	87 b9       	out	0x07, r24	; 7
    2906:	9a b1       	in	r25, 0x0a	; 10
    2908:	f8 01       	movw	r30, r16
    290a:	80 81       	ld	r24, Z
    290c:	80 95       	com	r24
    290e:	89 23       	and	r24, r25
    2910:	8a b9       	out	0x0a, r24	; 10
    2912:	95 b1       	in	r25, 0x05	; 5
    2914:	f6 01       	movw	r30, r12
    2916:	80 81       	ld	r24, Z
    2918:	80 95       	com	r24
    291a:	89 23       	and	r24, r25
    291c:	85 b9       	out	0x05, r24	; 5
    291e:	98 b1       	in	r25, 0x08	; 8
    2920:	f7 01       	movw	r30, r14
    2922:	80 81       	ld	r24, Z
    2924:	80 95       	com	r24
    2926:	89 23       	and	r24, r25
    2928:	88 b9       	out	0x08, r24	; 8
    292a:	9b b1       	in	r25, 0x0b	; 11
    292c:	f8 01       	movw	r30, r16
    292e:	80 81       	ld	r24, Z
    2930:	80 95       	com	r24
    2932:	89 23       	and	r24, r25
    2934:	8b b9       	out	0x0b, r24	; 11
    2936:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    293a:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    293e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2942:	83 60       	ori	r24, 0x03	; 3
    2944:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    294e:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	2e 85       	ldd	r18, Y+14	; 0x0e
    2958:	3f 85       	ldd	r19, Y+15	; 0x0f
    295a:	82 17       	cp	r24, r18
    295c:	93 07       	cpc	r25, r19
    295e:	20 f5       	brcc	.+72     	; 0x29a8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2960:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2964:	2c 2d       	mov	r18, r12
    2966:	24 1b       	sub	r18, r20
    2968:	82 0f       	add	r24, r18
    296a:	91 1d       	adc	r25, r1
    296c:	03 b1       	in	r16, 0x03	; 3
    296e:	08 11       	cpse	r16, r8
    2970:	32 c0       	rjmp	.+100    	; 0x29d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2972:	f6 b0       	in	r15, 0x06	; 6
    2974:	f7 10       	cpse	r15, r7
    2976:	2f c0       	rjmp	.+94     	; 0x29d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2978:	29 b1       	in	r18, 0x09	; 9
    297a:	29 11       	cpse	r18, r9
    297c:	2c c0       	rjmp	.+88     	; 0x29d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    297e:	10 c0       	rjmp	.+32     	; 0x29a0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2980:	21 2f       	mov	r18, r17
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	a9 01       	movw	r20, r18
    2986:	44 0f       	add	r20, r20
    2988:	55 1f       	adc	r21, r21
    298a:	f5 01       	movw	r30, r10
    298c:	e4 0f       	add	r30, r20
    298e:	f5 1f       	adc	r31, r21
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	67 2b       	or	r22, r23
    2996:	21 f1       	breq	.+72     	; 0x29e0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2998:	1f 5f       	subi	r17, 0xFF	; 255
    299a:	28 85       	ldd	r18, Y+8	; 0x08
    299c:	12 17       	cp	r17, r18
    299e:	80 f3       	brcs	.-32     	; 0x2980 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    29a0:	7f 2c       	mov	r7, r15
    29a2:	80 2e       	mov	r8, r16
    29a4:	4c 2d       	mov	r20, r12
    29a6:	d7 cf       	rjmp	.-82     	; 0x2956 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    29a8:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    29ac:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	88 85       	ldd	r24, Y+8	; 0x08
    29b4:	28 17       	cp	r18, r24
    29b6:	30 f5       	brcc	.+76     	; 0x2a04 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    29b8:	f5 01       	movw	r30, r10
    29ba:	e2 0f       	add	r30, r18
    29bc:	f1 1d       	adc	r31, r1
    29be:	e2 0f       	add	r30, r18
    29c0:	f1 1d       	adc	r31, r1
    29c2:	80 81       	ld	r24, Z
    29c4:	91 81       	ldd	r25, Z+1	; 0x01
    29c6:	89 2b       	or	r24, r25
    29c8:	21 f4       	brne	.+8      	; 0x29d2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    29ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    29cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	ee cf       	rjmp	.-36     	; 0x29b2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    29d6:	03 b1       	in	r16, 0x03	; 3
    29d8:	f6 b0       	in	r15, 0x06	; 6
    29da:	99 b0       	in	r9, 0x09	; 9
    29dc:	10 e0       	ldi	r17, 0x00	; 0
    29de:	dd cf       	rjmp	.-70     	; 0x299a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    29e0:	de 01       	movw	r26, r28
    29e2:	a4 0f       	add	r26, r20
    29e4:	b5 1f       	adc	r27, r21
    29e6:	91 96       	adiw	r26, 0x21	; 33
    29e8:	0d 90       	ld	r0, X+
    29ea:	bc 91       	ld	r27, X
    29ec:	a0 2d       	mov	r26, r0
    29ee:	4c 91       	ld	r20, X
    29f0:	de 01       	movw	r26, r28
    29f2:	a2 0f       	add	r26, r18
    29f4:	b3 1f       	adc	r27, r19
    29f6:	51 96       	adiw	r26, 0x11	; 17
    29f8:	2c 91       	ld	r18, X
    29fa:	42 23       	and	r20, r18
    29fc:	69 f6       	brne	.-102    	; 0x2998 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	ca cf       	rjmp	.-108    	; 0x2998 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	ed e0       	ldi	r30, 0x0D	; 13
    2a0a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0xa>

00002a0e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	9b 01       	movw	r18, r22
    2a1e:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2a22:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a26:	47 b1       	in	r20, 0x07	; 7
    2a28:	18 b1       	in	r17, 0x08	; 8
    2a2a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a2e:	86 fd       	sbrc	r24, 6
    2a30:	fc cf       	rjmp	.-8      	; 0x2a2a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 85       	ldd	r25, Z+8	; 0x08
    2a36:	89 17       	cp	r24, r25
    2a38:	48 f4       	brcc	.+18     	; 0x2a4c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2a3a:	d9 01       	movw	r26, r18
    2a3c:	a8 0f       	add	r26, r24
    2a3e:	b1 1d       	adc	r27, r1
    2a40:	a8 0f       	add	r26, r24
    2a42:	b1 1d       	adc	r27, r1
    2a44:	1d 92       	st	X+, r1
    2a46:	1c 92       	st	X, r1
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	f4 cf       	rjmp	.-24     	; 0x2a34 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2a4c:	97 b1       	in	r25, 0x07	; 7
    2a4e:	82 a1       	ldd	r24, Z+34	; 0x22
    2a50:	80 95       	com	r24
    2a52:	89 23       	and	r24, r25
    2a54:	87 b9       	out	0x07, r24	; 7
    2a56:	98 b1       	in	r25, 0x08	; 8
    2a58:	82 a1       	ldd	r24, Z+34	; 0x22
    2a5a:	80 95       	com	r24
    2a5c:	89 23       	and	r24, r25
    2a5e:	88 b9       	out	0x08, r24	; 8
    2a60:	87 e8       	ldi	r24, 0x87	; 135
    2a62:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a66:	e1 2c       	mov	r14, r1
    2a68:	81 a1       	ldd	r24, Z+33	; 0x21
    2a6a:	e8 16       	cp	r14, r24
    2a6c:	10 f0       	brcs	.+4      	; 0x2a72 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2a6e:	e1 2c       	mov	r14, r1
    2a70:	29 c0       	rjmp	.+82     	; 0x2ac4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	80 85       	ldd	r24, Z+8	; 0x08
    2a76:	58 17       	cp	r21, r24
    2a78:	18 f5       	brcc	.+70     	; 0x2ac0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2a7a:	a5 2f       	mov	r26, r21
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	ef 01       	movw	r28, r30
    2a80:	ca 0f       	add	r28, r26
    2a82:	db 1f       	adc	r29, r27
    2a84:	89 89       	ldd	r24, Y+17	; 0x11
    2a86:	80 64       	ori	r24, 0x40	; 64
    2a88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2a8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a90:	80 64       	ori	r24, 0x40	; 64
    2a92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a9a:	86 fd       	sbrc	r24, 6
    2a9c:	fc cf       	rjmp	.-8      	; 0x2a96 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2a9e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2aa2:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2aa6:	aa 0f       	add	r26, r26
    2aa8:	bb 1f       	adc	r27, r27
    2aaa:	a2 0f       	add	r26, r18
    2aac:	b3 1f       	adc	r27, r19
    2aae:	8d 91       	ld	r24, X+
    2ab0:	9c 91       	ld	r25, X
    2ab2:	11 97       	sbiw	r26, 0x01	; 1
    2ab4:	86 0f       	add	r24, r22
    2ab6:	97 1f       	adc	r25, r23
    2ab8:	8d 93       	st	X+, r24
    2aba:	9c 93       	st	X, r25
    2abc:	5f 5f       	subi	r21, 0xFF	; 255
    2abe:	da cf       	rjmp	.-76     	; 0x2a74 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2ac0:	e3 94       	inc	r14
    2ac2:	d2 cf       	rjmp	.-92     	; 0x2a68 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2ac4:	80 85       	ldd	r24, Z+8	; 0x08
    2ac6:	e8 16       	cp	r14, r24
    2ac8:	a0 f4       	brcc	.+40     	; 0x2af2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2aca:	e9 01       	movw	r28, r18
    2acc:	ce 0d       	add	r28, r14
    2ace:	d1 1d       	adc	r29, r1
    2ad0:	ce 0d       	add	r28, r14
    2ad2:	d1 1d       	adc	r29, r1
    2ad4:	61 a1       	ldd	r22, Z+33	; 0x21
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	cb 01       	movw	r24, r22
    2ada:	95 95       	asr	r25
    2adc:	87 95       	ror	r24
    2ade:	a8 81       	ld	r26, Y
    2ae0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae2:	8a 0f       	add	r24, r26
    2ae4:	9b 1f       	adc	r25, r27
    2ae6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    2aea:	79 83       	std	Y+1, r23	; 0x01
    2aec:	68 83       	st	Y, r22
    2aee:	e3 94       	inc	r14
    2af0:	e9 cf       	rjmp	.-46     	; 0x2ac4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2af2:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2af6:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2afa:	18 b9       	out	0x08, r17	; 8
    2afc:	47 b9       	out	0x07, r20	; 7
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	e6 e0       	ldi	r30, 0x06	; 6
    2b04:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__+0x18>

00002b08 <_ZN16PololuQTRSensors4readEPjh>:
    2b08:	a0 e2       	ldi	r26, 0x20	; 32
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	ea e8       	ldi	r30, 0x8A	; 138
    2b0e:	f5 e1       	ldi	r31, 0x15	; 21
    2b10:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x16>
    2b14:	8c 01       	movw	r16, r24
    2b16:	7b 01       	movw	r14, r22
    2b18:	d4 2e       	mov	r13, r20
    2b1a:	8f ef       	ldi	r24, 0xFF	; 255
    2b1c:	84 0f       	add	r24, r20
    2b1e:	82 30       	cpi	r24, 0x02	; 2
    2b20:	18 f4       	brcc	.+6      	; 0x2b28 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2b22:	c8 01       	movw	r24, r16
    2b24:	0e 94 c6 13 	call	0x278c	; 0x278c <_ZN16PololuQTRSensors10emittersOnEv>
    2b28:	d8 01       	movw	r26, r16
    2b2a:	50 96       	adiw	r26, 0x10	; 16
    2b2c:	8c 91       	ld	r24, X
    2b2e:	b7 01       	movw	r22, r14
    2b30:	81 11       	cpse	r24, r1
    2b32:	10 c0       	rjmp	.+32     	; 0x2b54 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2b34:	c8 01       	movw	r24, r16
    2b36:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN16PololuQTRSensors11emittersOffEv>
    2b40:	b2 e0       	ldi	r27, 0x02	; 2
    2b42:	db 12       	cpse	r13, r27
    2b44:	3a c0       	rjmp	.+116    	; 0x2bba <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2b46:	be 01       	movw	r22, r28
    2b48:	6f 5f       	subi	r22, 0xFF	; 255
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	c8 01       	movw	r24, r16
    2b4e:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2b52:	0f c0       	rjmp	.+30     	; 0x2b72 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2b54:	c8 01       	movw	r24, r16
    2b56:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN16PololuQTRSensors11emittersOffEv>
    2b60:	e2 e0       	ldi	r30, 0x02	; 2
    2b62:	de 12       	cpse	r13, r30
    2b64:	2a c0       	rjmp	.+84     	; 0x2bba <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2b66:	be 01       	movw	r22, r28
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	f8 01       	movw	r30, r16
    2b76:	80 85       	ldd	r24, Z+8	; 0x08
    2b78:	48 17       	cp	r20, r24
    2b7a:	f8 f4       	brcc	.+62     	; 0x2bba <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2b7c:	84 2f       	mov	r24, r20
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	f7 01       	movw	r30, r14
    2b86:	e8 0f       	add	r30, r24
    2b88:	f9 1f       	adc	r31, r25
    2b8a:	21 e0       	ldi	r18, 0x01	; 1
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	2c 0f       	add	r18, r28
    2b90:	3d 1f       	adc	r19, r29
    2b92:	82 0f       	add	r24, r18
    2b94:	93 1f       	adc	r25, r19
    2b96:	d8 01       	movw	r26, r16
    2b98:	1e 96       	adiw	r26, 0x0e	; 14
    2b9a:	2d 91       	ld	r18, X+
    2b9c:	3c 91       	ld	r19, X
    2b9e:	1f 97       	sbiw	r26, 0x0f	; 15
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	8d 91       	ld	r24, X+
    2ba4:	9c 91       	ld	r25, X
    2ba6:	28 1b       	sub	r18, r24
    2ba8:	39 0b       	sbc	r19, r25
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
    2bb6:	4f 5f       	subi	r20, 0xFF	; 255
    2bb8:	dd cf       	rjmp	.-70     	; 0x2b74 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2bba:	a0 96       	adiw	r28, 0x20	; 32
    2bbc:	e7 e0       	ldi	r30, 0x07	; 7
    2bbe:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x16>

00002bc2 <_ZN16PololuQTRSensorsD1Ev>:
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	ec 01       	movw	r28, r24
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	9b 81       	ldd	r25, Y+3	; 0x03
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	11 f0       	breq	.+4      	; 0x2bd4 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2bd0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <free>
    2bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	11 f0       	breq	.+4      	; 0x2be0 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2bdc:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <free>
    2be0:	88 81       	ld	r24, Y
    2be2:	99 81       	ldd	r25, Y+1	; 0x01
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	11 f0       	breq	.+4      	; 0x2bec <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2be8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <free>
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	11 f0       	breq	.+4      	; 0x2bf8 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2bf4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <free>
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret

00002bfe <__udivmodqi4>:
    2bfe:	99 1b       	sub	r25, r25
    2c00:	79 e0       	ldi	r23, 0x09	; 9
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <__udivmodqi4_ep>

00002c04 <__udivmodqi4_loop>:
    2c04:	99 1f       	adc	r25, r25
    2c06:	96 17       	cp	r25, r22
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <__udivmodqi4_ep>
    2c0a:	96 1b       	sub	r25, r22

00002c0c <__udivmodqi4_ep>:
    2c0c:	88 1f       	adc	r24, r24
    2c0e:	7a 95       	dec	r23
    2c10:	c9 f7       	brne	.-14     	; 0x2c04 <__udivmodqi4_loop>
    2c12:	80 95       	com	r24
    2c14:	08 95       	ret

00002c16 <__udivmodhi4>:
    2c16:	aa 1b       	sub	r26, r26
    2c18:	bb 1b       	sub	r27, r27
    2c1a:	51 e1       	ldi	r21, 0x11	; 17
    2c1c:	07 c0       	rjmp	.+14     	; 0x2c2c <__udivmodhi4_ep>

00002c1e <__udivmodhi4_loop>:
    2c1e:	aa 1f       	adc	r26, r26
    2c20:	bb 1f       	adc	r27, r27
    2c22:	a6 17       	cp	r26, r22
    2c24:	b7 07       	cpc	r27, r23
    2c26:	10 f0       	brcs	.+4      	; 0x2c2c <__udivmodhi4_ep>
    2c28:	a6 1b       	sub	r26, r22
    2c2a:	b7 0b       	sbc	r27, r23

00002c2c <__udivmodhi4_ep>:
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	5a 95       	dec	r21
    2c32:	a9 f7       	brne	.-22     	; 0x2c1e <__udivmodhi4_loop>
    2c34:	80 95       	com	r24
    2c36:	90 95       	com	r25
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	08 95       	ret

00002c3e <__divmodhi4>:
    2c3e:	97 fb       	bst	r25, 7
    2c40:	07 2e       	mov	r0, r23
    2c42:	16 f4       	brtc	.+4      	; 0x2c48 <__divmodhi4+0xa>
    2c44:	00 94       	com	r0
    2c46:	07 d0       	rcall	.+14     	; 0x2c56 <__divmodhi4_neg1>
    2c48:	77 fd       	sbrc	r23, 7
    2c4a:	09 d0       	rcall	.+18     	; 0x2c5e <__divmodhi4_neg2>
    2c4c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    2c50:	07 fc       	sbrc	r0, 7
    2c52:	05 d0       	rcall	.+10     	; 0x2c5e <__divmodhi4_neg2>
    2c54:	3e f4       	brtc	.+14     	; 0x2c64 <__divmodhi4_exit>

00002c56 <__divmodhi4_neg1>:
    2c56:	90 95       	com	r25
    2c58:	81 95       	neg	r24
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	08 95       	ret

00002c5e <__divmodhi4_neg2>:
    2c5e:	70 95       	com	r23
    2c60:	61 95       	neg	r22
    2c62:	7f 4f       	sbci	r23, 0xFF	; 255

00002c64 <__divmodhi4_exit>:
    2c64:	08 95       	ret

00002c66 <__udivmodsi4>:
    2c66:	a1 e2       	ldi	r26, 0x21	; 33
    2c68:	1a 2e       	mov	r1, r26
    2c6a:	aa 1b       	sub	r26, r26
    2c6c:	bb 1b       	sub	r27, r27
    2c6e:	fd 01       	movw	r30, r26
    2c70:	0d c0       	rjmp	.+26     	; 0x2c8c <__udivmodsi4_ep>

00002c72 <__udivmodsi4_loop>:
    2c72:	aa 1f       	adc	r26, r26
    2c74:	bb 1f       	adc	r27, r27
    2c76:	ee 1f       	adc	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	a2 17       	cp	r26, r18
    2c7c:	b3 07       	cpc	r27, r19
    2c7e:	e4 07       	cpc	r30, r20
    2c80:	f5 07       	cpc	r31, r21
    2c82:	20 f0       	brcs	.+8      	; 0x2c8c <__udivmodsi4_ep>
    2c84:	a2 1b       	sub	r26, r18
    2c86:	b3 0b       	sbc	r27, r19
    2c88:	e4 0b       	sbc	r30, r20
    2c8a:	f5 0b       	sbc	r31, r21

00002c8c <__udivmodsi4_ep>:
    2c8c:	66 1f       	adc	r22, r22
    2c8e:	77 1f       	adc	r23, r23
    2c90:	88 1f       	adc	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	1a 94       	dec	r1
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <__udivmodsi4_loop>
    2c98:	60 95       	com	r22
    2c9a:	70 95       	com	r23
    2c9c:	80 95       	com	r24
    2c9e:	90 95       	com	r25
    2ca0:	9b 01       	movw	r18, r22
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	bd 01       	movw	r22, r26
    2ca6:	cf 01       	movw	r24, r30
    2ca8:	08 95       	ret

00002caa <__divmodsi4>:
    2caa:	05 2e       	mov	r0, r21
    2cac:	97 fb       	bst	r25, 7
    2cae:	1e f4       	brtc	.+6      	; 0x2cb6 <__divmodsi4+0xc>
    2cb0:	00 94       	com	r0
    2cb2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__negsi2>
    2cb6:	57 fd       	sbrc	r21, 7
    2cb8:	07 d0       	rcall	.+14     	; 0x2cc8 <__divmodsi4_neg2>
    2cba:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    2cbe:	07 fc       	sbrc	r0, 7
    2cc0:	03 d0       	rcall	.+6      	; 0x2cc8 <__divmodsi4_neg2>
    2cc2:	4e f4       	brtc	.+18     	; 0x2cd6 <__divmodsi4_exit>
    2cc4:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__negsi2>

00002cc8 <__divmodsi4_neg2>:
    2cc8:	50 95       	com	r21
    2cca:	40 95       	com	r20
    2ccc:	30 95       	com	r19
    2cce:	21 95       	neg	r18
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255

00002cd6 <__divmodsi4_exit>:
    2cd6:	08 95       	ret

00002cd8 <__negsi2>:
    2cd8:	90 95       	com	r25
    2cda:	80 95       	com	r24
    2cdc:	70 95       	com	r23
    2cde:	61 95       	neg	r22
    2ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	08 95       	ret

00002ce8 <__tablejump2__>:
    2ce8:	ee 0f       	add	r30, r30
    2cea:	ff 1f       	adc	r31, r31
    2cec:	05 90       	lpm	r0, Z+
    2cee:	f4 91       	lpm	r31, Z
    2cf0:	e0 2d       	mov	r30, r0
    2cf2:	09 94       	ijmp

00002cf4 <__umulhisi3>:
    2cf4:	a2 9f       	mul	r26, r18
    2cf6:	b0 01       	movw	r22, r0
    2cf8:	b3 9f       	mul	r27, r19
    2cfa:	c0 01       	movw	r24, r0
    2cfc:	a3 9f       	mul	r26, r19
    2cfe:	70 0d       	add	r23, r0
    2d00:	81 1d       	adc	r24, r1
    2d02:	11 24       	eor	r1, r1
    2d04:	91 1d       	adc	r25, r1
    2d06:	b2 9f       	mul	r27, r18
    2d08:	70 0d       	add	r23, r0
    2d0a:	81 1d       	adc	r24, r1
    2d0c:	11 24       	eor	r1, r1
    2d0e:	91 1d       	adc	r25, r1
    2d10:	08 95       	ret

00002d12 <__prologue_saves__>:
    2d12:	2f 92       	push	r2
    2d14:	3f 92       	push	r3
    2d16:	4f 92       	push	r4
    2d18:	5f 92       	push	r5
    2d1a:	6f 92       	push	r6
    2d1c:	7f 92       	push	r7
    2d1e:	8f 92       	push	r8
    2d20:	9f 92       	push	r9
    2d22:	af 92       	push	r10
    2d24:	bf 92       	push	r11
    2d26:	cf 92       	push	r12
    2d28:	df 92       	push	r13
    2d2a:	ef 92       	push	r14
    2d2c:	ff 92       	push	r15
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	ca 1b       	sub	r28, r26
    2d3c:	db 0b       	sbc	r29, r27
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	09 94       	ijmp

00002d4a <__epilogue_restores__>:
    2d4a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d4c:	39 88       	ldd	r3, Y+17	; 0x11
    2d4e:	48 88       	ldd	r4, Y+16	; 0x10
    2d50:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d52:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d54:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d56:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d58:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d5c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d5e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d60:	df 80       	ldd	r13, Y+7	; 0x07
    2d62:	ee 80       	ldd	r14, Y+6	; 0x06
    2d64:	fd 80       	ldd	r15, Y+5	; 0x05
    2d66:	0c 81       	ldd	r16, Y+4	; 0x04
    2d68:	1b 81       	ldd	r17, Y+3	; 0x03
    2d6a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d6c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d6e:	ce 0f       	add	r28, r30
    2d70:	d1 1d       	adc	r29, r1
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	f8 94       	cli
    2d76:	de bf       	out	0x3e, r29	; 62
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	cd bf       	out	0x3d, r28	; 61
    2d7c:	ed 01       	movw	r28, r26
    2d7e:	08 95       	ret

00002d80 <malloc>:
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	82 30       	cpi	r24, 0x02	; 2
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	10 f4       	brcc	.+4      	; 0x2d92 <malloc+0x12>
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	e0 91 3e 07 	lds	r30, 0x073E	; 0x80073e <__flp>
    2d96:	f0 91 3f 07 	lds	r31, 0x073F	; 0x80073f <__flp+0x1>
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	a0 e0       	ldi	r26, 0x00	; 0
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	30 97       	sbiw	r30, 0x00	; 0
    2da4:	19 f1       	breq	.+70     	; 0x2dec <malloc+0x6c>
    2da6:	40 81       	ld	r20, Z
    2da8:	51 81       	ldd	r21, Z+1	; 0x01
    2daa:	02 81       	ldd	r16, Z+2	; 0x02
    2dac:	13 81       	ldd	r17, Z+3	; 0x03
    2dae:	48 17       	cp	r20, r24
    2db0:	59 07       	cpc	r21, r25
    2db2:	c8 f0       	brcs	.+50     	; 0x2de6 <malloc+0x66>
    2db4:	84 17       	cp	r24, r20
    2db6:	95 07       	cpc	r25, r21
    2db8:	69 f4       	brne	.+26     	; 0x2dd4 <malloc+0x54>
    2dba:	10 97       	sbiw	r26, 0x00	; 0
    2dbc:	31 f0       	breq	.+12     	; 0x2dca <malloc+0x4a>
    2dbe:	12 96       	adiw	r26, 0x02	; 2
    2dc0:	0c 93       	st	X, r16
    2dc2:	12 97       	sbiw	r26, 0x02	; 2
    2dc4:	13 96       	adiw	r26, 0x03	; 3
    2dc6:	1c 93       	st	X, r17
    2dc8:	27 c0       	rjmp	.+78     	; 0x2e18 <malloc+0x98>
    2dca:	00 93 3e 07 	sts	0x073E, r16	; 0x80073e <__flp>
    2dce:	10 93 3f 07 	sts	0x073F, r17	; 0x80073f <__flp+0x1>
    2dd2:	22 c0       	rjmp	.+68     	; 0x2e18 <malloc+0x98>
    2dd4:	21 15       	cp	r18, r1
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	19 f0       	breq	.+6      	; 0x2de0 <malloc+0x60>
    2dda:	42 17       	cp	r20, r18
    2ddc:	53 07       	cpc	r21, r19
    2dde:	18 f4       	brcc	.+6      	; 0x2de6 <malloc+0x66>
    2de0:	9a 01       	movw	r18, r20
    2de2:	bd 01       	movw	r22, r26
    2de4:	ef 01       	movw	r28, r30
    2de6:	df 01       	movw	r26, r30
    2de8:	f8 01       	movw	r30, r16
    2dea:	db cf       	rjmp	.-74     	; 0x2da2 <malloc+0x22>
    2dec:	21 15       	cp	r18, r1
    2dee:	31 05       	cpc	r19, r1
    2df0:	f9 f0       	breq	.+62     	; 0x2e30 <malloc+0xb0>
    2df2:	28 1b       	sub	r18, r24
    2df4:	39 0b       	sbc	r19, r25
    2df6:	24 30       	cpi	r18, 0x04	; 4
    2df8:	31 05       	cpc	r19, r1
    2dfa:	80 f4       	brcc	.+32     	; 0x2e1c <malloc+0x9c>
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2e00:	61 15       	cp	r22, r1
    2e02:	71 05       	cpc	r23, r1
    2e04:	21 f0       	breq	.+8      	; 0x2e0e <malloc+0x8e>
    2e06:	fb 01       	movw	r30, r22
    2e08:	93 83       	std	Z+3, r25	; 0x03
    2e0a:	82 83       	std	Z+2, r24	; 0x02
    2e0c:	04 c0       	rjmp	.+8      	; 0x2e16 <malloc+0x96>
    2e0e:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <__flp+0x1>
    2e12:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <__flp>
    2e16:	fe 01       	movw	r30, r28
    2e18:	32 96       	adiw	r30, 0x02	; 2
    2e1a:	44 c0       	rjmp	.+136    	; 0x2ea4 <malloc+0x124>
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e2 0f       	add	r30, r18
    2e20:	f3 1f       	adc	r31, r19
    2e22:	81 93       	st	Z+, r24
    2e24:	91 93       	st	Z+, r25
    2e26:	22 50       	subi	r18, 0x02	; 2
    2e28:	31 09       	sbc	r19, r1
    2e2a:	39 83       	std	Y+1, r19	; 0x01
    2e2c:	28 83       	st	Y, r18
    2e2e:	3a c0       	rjmp	.+116    	; 0x2ea4 <malloc+0x124>
    2e30:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    2e34:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    2e38:	23 2b       	or	r18, r19
    2e3a:	41 f4       	brne	.+16     	; 0x2e4c <malloc+0xcc>
    2e3c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    2e40:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    2e44:	30 93 3d 07 	sts	0x073D, r19	; 0x80073d <__brkval+0x1>
    2e48:	20 93 3c 07 	sts	0x073C, r18	; 0x80073c <__brkval>
    2e4c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    2e50:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    2e54:	21 15       	cp	r18, r1
    2e56:	31 05       	cpc	r19, r1
    2e58:	41 f4       	brne	.+16     	; 0x2e6a <malloc+0xea>
    2e5a:	2d b7       	in	r18, 0x3d	; 61
    2e5c:	3e b7       	in	r19, 0x3e	; 62
    2e5e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    2e62:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    2e66:	24 1b       	sub	r18, r20
    2e68:	35 0b       	sbc	r19, r21
    2e6a:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <__brkval>
    2e6e:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <__brkval+0x1>
    2e72:	e2 17       	cp	r30, r18
    2e74:	f3 07       	cpc	r31, r19
    2e76:	a0 f4       	brcc	.+40     	; 0x2ea0 <malloc+0x120>
    2e78:	2e 1b       	sub	r18, r30
    2e7a:	3f 0b       	sbc	r19, r31
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	78 f0       	brcs	.+30     	; 0x2ea0 <malloc+0x120>
    2e82:	ac 01       	movw	r20, r24
    2e84:	4e 5f       	subi	r20, 0xFE	; 254
    2e86:	5f 4f       	sbci	r21, 0xFF	; 255
    2e88:	24 17       	cp	r18, r20
    2e8a:	35 07       	cpc	r19, r21
    2e8c:	48 f0       	brcs	.+18     	; 0x2ea0 <malloc+0x120>
    2e8e:	4e 0f       	add	r20, r30
    2e90:	5f 1f       	adc	r21, r31
    2e92:	50 93 3d 07 	sts	0x073D, r21	; 0x80073d <__brkval+0x1>
    2e96:	40 93 3c 07 	sts	0x073C, r20	; 0x80073c <__brkval>
    2e9a:	81 93       	st	Z+, r24
    2e9c:	91 93       	st	Z+, r25
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <malloc+0x124>
    2ea0:	e0 e0       	ldi	r30, 0x00	; 0
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	1f 91       	pop	r17
    2eac:	0f 91       	pop	r16
    2eae:	08 95       	ret

00002eb0 <free>:
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <free+0xa>
    2eb8:	81 c0       	rjmp	.+258    	; 0x2fbc <free+0x10c>
    2eba:	fc 01       	movw	r30, r24
    2ebc:	32 97       	sbiw	r30, 0x02	; 2
    2ebe:	13 82       	std	Z+3, r1	; 0x03
    2ec0:	12 82       	std	Z+2, r1	; 0x02
    2ec2:	a0 91 3e 07 	lds	r26, 0x073E	; 0x80073e <__flp>
    2ec6:	b0 91 3f 07 	lds	r27, 0x073F	; 0x80073f <__flp+0x1>
    2eca:	10 97       	sbiw	r26, 0x00	; 0
    2ecc:	81 f4       	brne	.+32     	; 0x2eee <free+0x3e>
    2ece:	20 81       	ld	r18, Z
    2ed0:	31 81       	ldd	r19, Z+1	; 0x01
    2ed2:	82 0f       	add	r24, r18
    2ed4:	93 1f       	adc	r25, r19
    2ed6:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    2eda:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    2ede:	28 17       	cp	r18, r24
    2ee0:	39 07       	cpc	r19, r25
    2ee2:	51 f5       	brne	.+84     	; 0x2f38 <free+0x88>
    2ee4:	f0 93 3d 07 	sts	0x073D, r31	; 0x80073d <__brkval+0x1>
    2ee8:	e0 93 3c 07 	sts	0x073C, r30	; 0x80073c <__brkval>
    2eec:	67 c0       	rjmp	.+206    	; 0x2fbc <free+0x10c>
    2eee:	ed 01       	movw	r28, r26
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	ce 17       	cp	r28, r30
    2ef6:	df 07       	cpc	r29, r31
    2ef8:	40 f4       	brcc	.+16     	; 0x2f0a <free+0x5a>
    2efa:	4a 81       	ldd	r20, Y+2	; 0x02
    2efc:	5b 81       	ldd	r21, Y+3	; 0x03
    2efe:	9e 01       	movw	r18, r28
    2f00:	41 15       	cp	r20, r1
    2f02:	51 05       	cpc	r21, r1
    2f04:	f1 f0       	breq	.+60     	; 0x2f42 <free+0x92>
    2f06:	ea 01       	movw	r28, r20
    2f08:	f5 cf       	rjmp	.-22     	; 0x2ef4 <free+0x44>
    2f0a:	d3 83       	std	Z+3, r29	; 0x03
    2f0c:	c2 83       	std	Z+2, r28	; 0x02
    2f0e:	40 81       	ld	r20, Z
    2f10:	51 81       	ldd	r21, Z+1	; 0x01
    2f12:	84 0f       	add	r24, r20
    2f14:	95 1f       	adc	r25, r21
    2f16:	c8 17       	cp	r28, r24
    2f18:	d9 07       	cpc	r29, r25
    2f1a:	59 f4       	brne	.+22     	; 0x2f32 <free+0x82>
    2f1c:	88 81       	ld	r24, Y
    2f1e:	99 81       	ldd	r25, Y+1	; 0x01
    2f20:	84 0f       	add	r24, r20
    2f22:	95 1f       	adc	r25, r21
    2f24:	02 96       	adiw	r24, 0x02	; 2
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	80 83       	st	Z, r24
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2e:	93 83       	std	Z+3, r25	; 0x03
    2f30:	82 83       	std	Z+2, r24	; 0x02
    2f32:	21 15       	cp	r18, r1
    2f34:	31 05       	cpc	r19, r1
    2f36:	29 f4       	brne	.+10     	; 0x2f42 <free+0x92>
    2f38:	f0 93 3f 07 	sts	0x073F, r31	; 0x80073f <__flp+0x1>
    2f3c:	e0 93 3e 07 	sts	0x073E, r30	; 0x80073e <__flp>
    2f40:	3d c0       	rjmp	.+122    	; 0x2fbc <free+0x10c>
    2f42:	e9 01       	movw	r28, r18
    2f44:	fb 83       	std	Y+3, r31	; 0x03
    2f46:	ea 83       	std	Y+2, r30	; 0x02
    2f48:	49 91       	ld	r20, Y+
    2f4a:	59 91       	ld	r21, Y+
    2f4c:	c4 0f       	add	r28, r20
    2f4e:	d5 1f       	adc	r29, r21
    2f50:	ec 17       	cp	r30, r28
    2f52:	fd 07       	cpc	r31, r29
    2f54:	61 f4       	brne	.+24     	; 0x2f6e <free+0xbe>
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	84 0f       	add	r24, r20
    2f5c:	95 1f       	adc	r25, r21
    2f5e:	02 96       	adiw	r24, 0x02	; 2
    2f60:	e9 01       	movw	r28, r18
    2f62:	99 83       	std	Y+1, r25	; 0x01
    2f64:	88 83       	st	Y, r24
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	9b 83       	std	Y+3, r25	; 0x03
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
    2f6e:	e0 e0       	ldi	r30, 0x00	; 0
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	12 96       	adiw	r26, 0x02	; 2
    2f74:	8d 91       	ld	r24, X+
    2f76:	9c 91       	ld	r25, X
    2f78:	13 97       	sbiw	r26, 0x03	; 3
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	19 f0       	breq	.+6      	; 0x2f84 <free+0xd4>
    2f7e:	fd 01       	movw	r30, r26
    2f80:	dc 01       	movw	r26, r24
    2f82:	f7 cf       	rjmp	.-18     	; 0x2f72 <free+0xc2>
    2f84:	8d 91       	ld	r24, X+
    2f86:	9c 91       	ld	r25, X
    2f88:	11 97       	sbiw	r26, 0x01	; 1
    2f8a:	9d 01       	movw	r18, r26
    2f8c:	2e 5f       	subi	r18, 0xFE	; 254
    2f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f90:	82 0f       	add	r24, r18
    2f92:	93 1f       	adc	r25, r19
    2f94:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    2f98:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    2f9c:	28 17       	cp	r18, r24
    2f9e:	39 07       	cpc	r19, r25
    2fa0:	69 f4       	brne	.+26     	; 0x2fbc <free+0x10c>
    2fa2:	30 97       	sbiw	r30, 0x00	; 0
    2fa4:	29 f4       	brne	.+10     	; 0x2fb0 <free+0x100>
    2fa6:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <__flp+0x1>
    2faa:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <__flp>
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <free+0x104>
    2fb0:	13 82       	std	Z+3, r1	; 0x03
    2fb2:	12 82       	std	Z+2, r1	; 0x02
    2fb4:	b0 93 3d 07 	sts	0x073D, r27	; 0x80073d <__brkval+0x1>
    2fb8:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <__brkval>
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	08 95       	ret

00002fc2 <__do_global_dtors>:
    2fc2:	10 e0       	ldi	r17, 0x00	; 0
    2fc4:	c4 e5       	ldi	r28, 0x54	; 84
    2fc6:	d0 e0       	ldi	r29, 0x00	; 0
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <__do_global_dtors+0x10>
    2fca:	fe 01       	movw	r30, r28
    2fcc:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__tablejump2__>
    2fd0:	21 96       	adiw	r28, 0x01	; 1
    2fd2:	c5 35       	cpi	r28, 0x55	; 85
    2fd4:	d1 07       	cpc	r29, r17
    2fd6:	c9 f7       	brne	.-14     	; 0x2fca <__do_global_dtors+0x8>
    2fd8:	f8 94       	cli

00002fda <__stop_program>:
    2fda:	ff cf       	rjmp	.-2      	; 0x2fda <__stop_program>
