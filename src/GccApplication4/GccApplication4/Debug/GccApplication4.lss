
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00002d68  00002dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ad  0080018e  0080018e  00002e8a  2**0
                  ALLOC
  3 .stab         00006414  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  000092a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00011f82  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00011fc4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000070  00000000  00000000  00012004  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000295e  00000000  00000000  00012074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a78  00000000  00000000  000149d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000cb2  00000000  00000000  0001544a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000010c  00000000  00000000  000160fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000011ba  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000135a  00000000  00000000  000173c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  0001871c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	7c 03       	fmul	r23, r20
      6a:	79 03       	fmul	r23, r17
      6c:	76 03       	mulsu	r23, r22
      6e:	73 03       	mulsu	r23, r19
      70:	88 03       	fmulsu	r16, r16
      72:	85 03       	fmuls	r16, r21
      74:	82 03       	fmuls	r16, r18
      76:	7f 03       	fmul	r23, r23
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	ff 07       	cpc	r31, r31

000000a8 <__ctors_end>:
      a8:	00 12       	cpse	r0, r16

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e8 e6       	ldi	r30, 0x68	; 104
      be:	fd e2       	ldi	r31, 0x2D	; 45
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ae 38       	cpi	r26, 0x8E	; 142
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	ae e8       	ldi	r26, 0x8E	; 142
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	ab 33       	cpi	r26, 0x3B	; 59
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 c8 07 	call	0xf90	; 0xf90 <main>
      f6:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	40 f4       	brcc	.+16     	; 0x11a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x1c>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	30 f0       	brcs	.+12     	; 0x120 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x22>
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	9f e7       	ldi	r25, 0x7F	; 127
     118:	08 95       	ret
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	9f e7       	ldi	r25, 0x7F	; 127
     11e:	08 95       	ret
     120:	ac 01       	movw	r20, r24
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	84 0f       	add	r24, r20
     128:	95 1f       	adc	r25, r21
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	4a e5       	ldi	r20, 0x5A	; 90
     130:	42 9f       	mul	r20, r18
     132:	f0 01       	movw	r30, r0
     134:	43 9f       	mul	r20, r19
     136:	f0 0d       	add	r31, r0
     138:	11 24       	eor	r1, r1
     13a:	8e 0f       	add	r24, r30
     13c:	9f 1f       	adc	r25, r31
     13e:	fc 01       	movw	r30, r24
     140:	e3 51       	subi	r30, 0x13	; 19
     142:	fe 4f       	sbci	r31, 0xFE	; 254
     144:	80 81       	ld	r24, Z
     146:	91 81       	ldd	r25, Z+1	; 0x01
     148:	08 95       	ret

0000014a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     14a:	fc 01       	movw	r30, r24
     14c:	40 81       	ld	r20, Z
     14e:	51 81       	ldd	r21, Z+1	; 0x01
     150:	4f 30       	cpi	r20, 0x0F	; 15
     152:	51 05       	cpc	r21, r1
     154:	e8 f4       	brcc	.+58     	; 0x190 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x46>
     156:	82 81       	ldd	r24, Z+2	; 0x02
     158:	93 81       	ldd	r25, Z+3	; 0x03
     15a:	8f 30       	cpi	r24, 0x0F	; 15
     15c:	91 05       	cpc	r25, r1
     15e:	d8 f0       	brcs	.+54     	; 0x196 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x4c>
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	9f e7       	ldi	r25, 0x7F	; 127
     164:	08 95       	ret
     166:	9c 01       	movw	r18, r24
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	82 0f       	add	r24, r18
     16e:	93 1f       	adc	r25, r19
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a e5       	ldi	r18, 0x5A	; 90
     176:	24 9f       	mul	r18, r20
     178:	f0 01       	movw	r30, r0
     17a:	25 9f       	mul	r18, r21
     17c:	f0 0d       	add	r31, r0
     17e:	11 24       	eor	r1, r1
     180:	8e 0f       	add	r24, r30
     182:	9f 1f       	adc	r25, r31
     184:	fc 01       	movw	r30, r24
     186:	e3 51       	subi	r30, 0x13	; 19
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	80 81       	ld	r24, Z
     18c:	91 81       	ldd	r25, Z+1	; 0x01
     18e:	08 95       	ret
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	9f e7       	ldi	r25, 0x7F	; 127
     194:	08 95       	ret
     196:	fc 01       	movw	r30, r24
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	e8 0f       	add	r30, r24
     19e:	f9 1f       	adc	r31, r25
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	6a e5       	ldi	r22, 0x5A	; 90
     1a6:	64 9f       	mul	r22, r20
     1a8:	90 01       	movw	r18, r0
     1aa:	65 9f       	mul	r22, r21
     1ac:	30 0d       	add	r19, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	e2 0f       	add	r30, r18
     1b2:	f3 1f       	adc	r31, r19
     1b4:	e3 51       	subi	r30, 0x13	; 19
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	25 81       	ldd	r18, Z+5	; 0x05
     1ba:	21 11       	cpse	r18, r1
     1bc:	d4 cf       	rjmp	.-88     	; 0x166 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x1c>
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	9f e7       	ldi	r25, 0x7F	; 127
     1c2:	08 95       	ret

000001c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1c4:	dc 01       	movw	r26, r24
     1c6:	2d 91       	ld	r18, X+
     1c8:	3c 91       	ld	r19, X
     1ca:	11 97       	sbiw	r26, 0x01	; 1
     1cc:	2f 30       	cpi	r18, 0x0F	; 15
     1ce:	31 05       	cpc	r19, r1
     1d0:	d8 f5       	brcc	.+118    	; 0x248 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x84>
     1d2:	12 96       	adiw	r26, 0x02	; 2
     1d4:	4d 91       	ld	r20, X+
     1d6:	5c 91       	ld	r21, X
     1d8:	13 97       	sbiw	r26, 0x03	; 3
     1da:	4f 30       	cpi	r20, 0x0F	; 15
     1dc:	51 05       	cpc	r21, r1
     1de:	e8 f1       	brcs	.+122    	; 0x25a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x96>
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	9f e7       	ldi	r25, 0x7F	; 127
     1e4:	08 95       	ret
     1e6:	fa 01       	movw	r30, r20
     1e8:	ee 0f       	add	r30, r30
     1ea:	ff 1f       	adc	r31, r31
     1ec:	e4 0f       	add	r30, r20
     1ee:	f5 1f       	adc	r31, r21
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	aa e5       	ldi	r26, 0x5A	; 90
     1f6:	a2 9f       	mul	r26, r18
     1f8:	c0 01       	movw	r24, r0
     1fa:	a3 9f       	mul	r26, r19
     1fc:	90 0d       	add	r25, r0
     1fe:	11 24       	eor	r1, r1
     200:	e8 0f       	add	r30, r24
     202:	f9 1f       	adc	r31, r25
     204:	e3 51       	subi	r30, 0x13	; 19
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	85 81       	ldd	r24, Z+5	; 0x05
     20a:	81 11       	cpse	r24, r1
     20c:	20 c0       	rjmp	.+64     	; 0x24e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x8a>
     20e:	fb 01       	movw	r30, r22
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	dc 01       	movw	r26, r24
     216:	a2 1b       	sub	r26, r18
     218:	b3 0b       	sbc	r27, r19
     21a:	fd 01       	movw	r30, r26
     21c:	22 f4       	brpl	.+8      	; 0x226 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x62>
     21e:	ee 27       	eor	r30, r30
     220:	ff 27       	eor	r31, r31
     222:	ea 1b       	sub	r30, r26
     224:	fb 0b       	sbc	r31, r27
     226:	db 01       	movw	r26, r22
     228:	12 96       	adiw	r26, 0x02	; 2
     22a:	2d 91       	ld	r18, X+
     22c:	3c 91       	ld	r19, X
     22e:	13 97       	sbiw	r26, 0x03	; 3
     230:	24 1b       	sub	r18, r20
     232:	35 0b       	sbc	r19, r21
     234:	c9 01       	movw	r24, r18
     236:	99 23       	and	r25, r25
     238:	24 f4       	brge	.+8      	; 0x242 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x7e>
     23a:	88 27       	eor	r24, r24
     23c:	99 27       	eor	r25, r25
     23e:	82 1b       	sub	r24, r18
     240:	93 0b       	sbc	r25, r19
     242:	8e 0f       	add	r24, r30
     244:	9f 1f       	adc	r25, r31
     246:	08 95       	ret
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	9f e7       	ldi	r25, 0x7F	; 127
     24c:	08 95       	ret
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	9f e7       	ldi	r25, 0x7F	; 127
     252:	08 95       	ret
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	9f e7       	ldi	r25, 0x7F	; 127
     258:	08 95       	ret
     25a:	fa 01       	movw	r30, r20
     25c:	ee 0f       	add	r30, r30
     25e:	ff 1f       	adc	r31, r31
     260:	e4 0f       	add	r30, r20
     262:	f5 1f       	adc	r31, r21
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	aa e5       	ldi	r26, 0x5A	; 90
     26a:	a2 9f       	mul	r26, r18
     26c:	c0 01       	movw	r24, r0
     26e:	a3 9f       	mul	r26, r19
     270:	90 0d       	add	r25, r0
     272:	11 24       	eor	r1, r1
     274:	e8 0f       	add	r30, r24
     276:	f9 1f       	adc	r31, r25
     278:	e3 51       	subi	r30, 0x13	; 19
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	84 81       	ldd	r24, Z+4	; 0x04
     27e:	81 11       	cpse	r24, r1
     280:	e9 cf       	rjmp	.-46     	; 0x254 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x90>
     282:	b1 cf       	rjmp	.-158    	; 0x1e6 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>

00000284 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     284:	db 01       	movw	r26, r22
     286:	8d 91       	ld	r24, X+
     288:	9c 91       	ld	r25, X
     28a:	11 97       	sbiw	r26, 0x01	; 1
     28c:	8f 30       	cpi	r24, 0x0F	; 15
     28e:	91 05       	cpc	r25, r1
     290:	d8 f5       	brcc	.+118    	; 0x308 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x84>
     292:	12 96       	adiw	r26, 0x02	; 2
     294:	6d 91       	ld	r22, X+
     296:	7c 91       	ld	r23, X
     298:	13 97       	sbiw	r26, 0x03	; 3
     29a:	6f 30       	cpi	r22, 0x0F	; 15
     29c:	71 05       	cpc	r23, r1
     29e:	e8 f1       	brcs	.+122    	; 0x31a <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x96>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	9f e7       	ldi	r25, 0x7F	; 127
     2a4:	08 95       	ret

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     2a6:	fb 01       	movw	r30, r22
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	e6 0f       	add	r30, r22
     2ae:	f7 1f       	adc	r31, r23
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	aa e5       	ldi	r26, 0x5A	; 90
     2b6:	a8 9f       	mul	r26, r24
     2b8:	90 01       	movw	r18, r0
     2ba:	a9 9f       	mul	r26, r25
     2bc:	30 0d       	add	r19, r0
     2be:	11 24       	eor	r1, r1
     2c0:	e2 0f       	add	r30, r18
     2c2:	f3 1f       	adc	r31, r19
     2c4:	e3 51       	subi	r30, 0x13	; 19
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	25 81       	ldd	r18, Z+5	; 0x05
     2ca:	21 11       	cpse	r18, r1
     2cc:	20 c0       	rjmp	.+64     	; 0x30e <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x8a>
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
     2ce:	fa 01       	movw	r30, r20
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	28 1b       	sub	r18, r24
     2d6:	39 0b       	sbc	r19, r25
     2d8:	f9 01       	movw	r30, r18
     2da:	ff 23       	and	r31, r31
     2dc:	24 f4       	brge	.+8      	; 0x2e6 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x62>
     2de:	ee 27       	eor	r30, r30
     2e0:	ff 27       	eor	r31, r31
     2e2:	e2 1b       	sub	r30, r18
     2e4:	f3 0b       	sbc	r31, r19
     2e6:	da 01       	movw	r26, r20
     2e8:	12 96       	adiw	r26, 0x02	; 2
     2ea:	2d 91       	ld	r18, X+
     2ec:	3c 91       	ld	r19, X
     2ee:	13 97       	sbiw	r26, 0x03	; 3
     2f0:	26 1b       	sub	r18, r22
     2f2:	37 0b       	sbc	r19, r23
     2f4:	c9 01       	movw	r24, r18
     2f6:	99 23       	and	r25, r25
     2f8:	24 f4       	brge	.+8      	; 0x302 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x7e>
     2fa:	88 27       	eor	r24, r24
     2fc:	99 27       	eor	r25, r25
     2fe:	82 1b       	sub	r24, r18
     300:	93 0b       	sbc	r25, r19
     302:	8e 0f       	add	r24, r30
     304:	9f 1f       	adc	r25, r31
     306:	08 95       	ret
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	9f e7       	ldi	r25, 0x7F	; 127
     30c:	08 95       	ret
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	9f e7       	ldi	r25, 0x7F	; 127
     312:	08 95       	ret
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	9f e7       	ldi	r25, 0x7F	; 127
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
                }

                return result;
     318:	08 95       	ret
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     31a:	fb 01       	movw	r30, r22
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	e6 0f       	add	r30, r22
     322:	f7 1f       	adc	r31, r23
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	aa e5       	ldi	r26, 0x5A	; 90
     32a:	a8 9f       	mul	r26, r24
     32c:	90 01       	movw	r18, r0
     32e:	a9 9f       	mul	r26, r25
     330:	30 0d       	add	r19, r0
     332:	11 24       	eor	r1, r1
     334:	e2 0f       	add	r30, r18
     336:	f3 1f       	adc	r31, r19
     338:	e3 51       	subi	r30, 0x13	; 19
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	21 11       	cpse	r18, r1
     340:	e9 cf       	rjmp	.-46     	; 0x314 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x90>
     342:	b1 cf       	rjmp	.-158    	; 0x2a6 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>

00000344 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     344:	fb 01       	movw	r30, r22
     346:	20 81       	ld	r18, Z
     348:	31 81       	ldd	r19, Z+1	; 0x01
     34a:	2f 30       	cpi	r18, 0x0F	; 15
     34c:	31 05       	cpc	r19, r1
     34e:	40 f4       	brcc	.+16     	; 0x360 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x1c>
     350:	82 81       	ldd	r24, Z+2	; 0x02
     352:	93 81       	ldd	r25, Z+3	; 0x03
     354:	8f 30       	cpi	r24, 0x0F	; 15
     356:	91 05       	cpc	r25, r1
     358:	30 f0       	brcs	.+12     	; 0x366 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x22>
                clear();
                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
                {
                    short result = SHRT_MAX;
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	9f e7       	ldi	r25, 0x7F	; 127
     35e:	08 95       	ret
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f e7       	ldi	r25, 0x7F	; 127
     364:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     366:	ac 01       	movw	r20, r24
     368:	44 0f       	add	r20, r20
     36a:	55 1f       	adc	r21, r21
     36c:	84 0f       	add	r24, r20
     36e:	95 1f       	adc	r25, r21
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	4a e5       	ldi	r20, 0x5A	; 90
     376:	42 9f       	mul	r20, r18
     378:	f0 01       	movw	r30, r0
     37a:	43 9f       	mul	r20, r19
     37c:	f0 0d       	add	r31, r0
     37e:	11 24       	eor	r1, r1
     380:	8e 0f       	add	r24, r30
     382:	9f 1f       	adc	r25, r31
     384:	fc 01       	movw	r30, r24
     386:	e3 51       	subi	r30, 0x13	; 19
     388:	fe 4f       	sbci	r31, 0xFE	; 254
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
                    }

                    return result;
                };
     38e:	08 95       	ret

00000390 <_ZN5Robot14initializeMenuEv>:
            print( ", " );
            print_long( y );
            print( ")" );
        }

        void initializeMenu()
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
        {
            clear();
     3a2:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>

            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     3a6:	0f 2e       	mov	r0, r31
     3a8:	ff e0       	ldi	r31, 0x0F	; 15
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	f0 2d       	mov	r31, r0

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	0e 94 40 11 	call	0x2280	; 0x2280 <button_is_pressed>
     3b6:	81 11       	cpse	r24, r1
     3b8:	45 c0       	rjmp	.+138    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
            {
                if ( button_is_pressed( BUTTON_A ) )
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 40 11 	call	0x2280	; 0x2280 <button_is_pressed>
     3c0:	88 23       	and	r24, r24
     3c2:	41 f0       	breq	.+16     	; 0x3d4 <_ZN5Robot14initializeMenuEv+0x44>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	9e 81       	ldd	r25, Y+6	; 0x06
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	b7 01       	movw	r22, r14
     3cc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     3d0:	9e 83       	std	Y+6, r25	; 0x06
     3d2:	8d 83       	std	Y+5, r24	; 0x05
                }

                if ( button_is_pressed( BUTTON_C ) )
     3d4:	80 e2       	ldi	r24, 0x20	; 32
     3d6:	0e 94 40 11 	call	0x2280	; 0x2280 <button_is_pressed>
     3da:	88 23       	and	r24, r24
     3dc:	41 f0       	breq	.+16     	; 0x3ee <_ZN5Robot14initializeMenuEv+0x5e>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     3de:	8f 81       	ldd	r24, Y+7	; 0x07
     3e0:	98 85       	ldd	r25, Y+8	; 0x08
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	b7 01       	movw	r22, r14
     3e6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     3ea:	98 87       	std	Y+8, r25	; 0x08
     3ec:	8f 83       	std	Y+7, r24	; 0x07
                }

                printPos( finishPos.x, finishPos.y );
     3ee:	0f 81       	ldd	r16, Y+7	; 0x07
     3f0:	18 85       	ldd	r17, Y+8	; 0x08
     3f2:	cd 80       	ldd	r12, Y+5	; 0x05
     3f4:	de 80       	ldd	r13, Y+6	; 0x06

        }

        void printPos( short x, short y )
        {
            clear();
     3f6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            print( "(" );
     3fa:	81 e5       	ldi	r24, 0x51	; 81
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            print_long( x );
     402:	b6 01       	movw	r22, r12
     404:	dd 0c       	add	r13, r13
     406:	88 0b       	sbc	r24, r24
     408:	99 0b       	sbc	r25, r25
     40a:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            print( ", " );
     40e:	83 e5       	ldi	r24, 0x53	; 83
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            print_long( y );
     416:	b8 01       	movw	r22, r16
     418:	11 0f       	add	r17, r17
     41a:	88 0b       	sbc	r24, r24
     41c:	99 0b       	sbc	r25, r25
     41e:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            print( ")" );
     422:	86 e5       	ldi	r24, 0x56	; 86
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos.x, finishPos.y );

                lcd_goto_xy( 0, 1 );
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 47 10 	call	0x208e	; 0x208e <lcd_goto_xy>
                print( " A B C " );
     432:	88 e5       	ldi	r24, 0x58	; 88
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>

                delay_ms( 100 );
     43a:	84 e6       	ldi	r24, 0x64	; 100
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     442:	b6 cf       	rjmp	.-148    	; 0x3b0 <_ZN5Robot14initializeMenuEv+0x20>

                delay_ms( 100 );
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     444:	80 e1       	ldi	r24, 0x10	; 16
     446:	0e 94 2c 11 	call	0x2258	; 0x2258 <wait_for_button_release>
            delay_ms( 1000 );
     44a:	88 ee       	ldi	r24, 0xE8	; 232
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
        }
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	df 90       	pop	r13
     460:	cf 90       	pop	r12
     462:	08 95       	ret

00000464 <_ZN5Robot8mainMenuEv>:

        //Main program menu
        void mainMenu()
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	ea 97       	sbiw	r28, 0x3a	; 58
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	1c 01       	movw	r2, r24
        {
            clear();
     47a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            print( "A - Test" );
     47e:	80 e6       	ldi	r24, 0x60	; 96
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            lcd_goto_xy( 0, 1 );
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 47 10 	call	0x208e	; 0x208e <lcd_goto_xy>
            print( "B - Main" );
     48e:	89 e6       	ldi	r24, 0x69	; 105
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     496:	9e 01       	movw	r18, r28
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	3a a7       	std	Y+42, r19	; 0x2a
     49e:	29 a7       	std	Y+41, r18	; 0x29
     4a0:	4e 01       	movw	r8, r28
     4a2:	31 e1       	ldi	r19, 0x11	; 17
     4a4:	83 0e       	add	r8, r19
     4a6:	91 1c       	adc	r9, r1

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     4a8:	ae 01       	movw	r20, r28
     4aa:	4f 5d       	subi	r20, 0xDF	; 223
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	5c a7       	std	Y+44, r21	; 0x2c
     4b0:	4b a7       	std	Y+43, r20	; 0x2b
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     4b2:	59 a5       	ldd	r21, Y+41	; 0x29
     4b4:	5b ab       	std	Y+51, r21	; 0x33
     4b6:	6a a5       	ldd	r22, Y+42	; 0x2a
     4b8:	6c ab       	std	Y+52, r22	; 0x34

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     4ba:	7b a5       	ldd	r23, Y+43	; 0x2b
     4bc:	7f a7       	std	Y+47, r23	; 0x2f
     4be:	8c a5       	ldd	r24, Y+44	; 0x2c
     4c0:	88 ab       	std	Y+48, r24	; 0x30
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     4c2:	d1 01       	movw	r26, r2
     4c4:	19 96       	adiw	r26, 0x09	; 9
     4c6:	ba af       	std	Y+58, r27	; 0x3a
     4c8:	a9 af       	std	Y+57, r26	; 0x39

            bool isSelectedProgram = false;

            while ( !isSelectedProgram )
            {
                if ( button_is_pressed( BUTTON_A ) )
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0e 94 40 11 	call	0x2280	; 0x2280 <button_is_pressed>
     4d0:	88 23       	and	r24, r24
     4d2:	31 f1       	breq	.+76     	; 0x520 <_ZN5Robot8mainMenuEv+0xbc>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 2c 11 	call	0x2258	; 0x2258 <wait_for_button_release>
        // Displays the data returned from the sensors
        void testSensors()
        {
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );
     4da:	61 01       	movw	r12, r2
     4dc:	b9 e0       	ldi	r27, 0x09	; 9
     4de:	cb 0e       	add	r12, r27
     4e0:	d1 1c       	adc	r13, r1
     4e2:	71 01       	movw	r14, r2
     4e4:	e3 e1       	ldi	r30, 0x13	; 19
     4e6:	ee 0e       	add	r14, r30
     4e8:	f1 1c       	adc	r15, r1
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	c6 01       	movw	r24, r12
     4ee:	0e 94 c7 11 	call	0x238e	; 0x238e <read_line_sensors>
     4f2:	86 01       	movw	r16, r12

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
                {
                    print_long( sensors[ i ] );
     4f4:	d8 01       	movw	r26, r16
     4f6:	6d 91       	ld	r22, X+
     4f8:	7d 91       	ld	r23, X+
     4fa:	8d 01       	movw	r16, r26
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
                    delay_ms( 500 );
     504:	84 ef       	ldi	r24, 0xF4	; 244
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
                    clear();
     50c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
     510:	0e 15       	cp	r16, r14
     512:	1f 05       	cpc	r17, r15
     514:	79 f7       	brne	.-34     	; 0x4f4 <_ZN5Robot8mainMenuEv+0x90>
                    delay_ms( 500 );
                    clear();
                }

                // Play sound to notify that the next iteration will begin.
                play( ">>a32" );
     516:	82 e7       	ldi	r24, 0x72	; 114
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <play>
     51e:	e5 cf       	rjmp	.-54     	; 0x4ea <_ZN5Robot8mainMenuEv+0x86>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
                    testSensors();
                }

                if ( button_is_pressed( BUTTON_B ) )
     520:	80 e1       	ldi	r24, 0x10	; 16
     522:	0e 94 40 11 	call	0x2280	; 0x2280 <button_is_pressed>
     526:	88 23       	and	r24, r24
     528:	81 f2       	breq	.-96     	; 0x4ca <_ZN5Robot8mainMenuEv+0x66>
                {
                    wait_for_button_release( BUTTON_B );//wait for the button to be released before run the program
     52a:	80 e1       	ldi	r24, 0x10	; 16
     52c:	0e 94 2c 11 	call	0x2258	; 0x2258 <wait_for_button_release>
                    // mainRobotLogic the initialization menu
                    initializeMenu();
     530:	c1 01       	movw	r24, r2
     532:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN5Robot14initializeMenuEv>
        }

        // Main logic function
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
     536:	f1 01       	movw	r30, r2
     538:	40 81       	ld	r20, Z
     53a:	51 81       	ldd	r21, Z+1	; 0x01
     53c:	82 81       	ldd	r24, Z+2	; 0x02
     53e:	93 81       	ldd	r25, Z+3	; 0x03
     540:	9c 01       	movw	r18, r24
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	2a e5       	ldi	r18, 0x5A	; 90
     550:	24 9f       	mul	r18, r20
     552:	f0 01       	movw	r30, r0
     554:	25 9f       	mul	r18, r21
     556:	f0 0d       	add	r31, r0
     558:	11 24       	eor	r1, r1
     55a:	8e 0f       	add	r24, r30
     55c:	9f 1f       	adc	r25, r31
     55e:	fc 01       	movw	r30, r24
     560:	e3 51       	subi	r30, 0x13	; 19
     562:	fe 4f       	sbci	r31, 0xFE	; 254
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	10 82       	st	Z, r1
            matrix[ position.x ][ position.y ].isVisited	= true;
     568:	d1 01       	movw	r26, r2
     56a:	4d 91       	ld	r20, X+
     56c:	5c 91       	ld	r21, X
     56e:	11 97       	sbiw	r26, 0x01	; 1
     570:	12 96       	adiw	r26, 0x02	; 2
     572:	8d 91       	ld	r24, X+
     574:	9c 91       	ld	r25, X
     576:	13 97       	sbiw	r26, 0x03	; 3
     578:	bc 01       	movw	r22, r24
     57a:	66 0f       	add	r22, r22
     57c:	77 1f       	adc	r23, r23
     57e:	86 0f       	add	r24, r22
     580:	97 1f       	adc	r25, r23
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	24 9f       	mul	r18, r20
     588:	f0 01       	movw	r30, r0
     58a:	25 9f       	mul	r18, r21
     58c:	f0 0d       	add	r31, r0
     58e:	11 24       	eor	r1, r1
     590:	8e 0f       	add	r24, r30
     592:	9f 1f       	adc	r25, r31
     594:	fc 01       	movw	r30, r24
     596:	e3 51       	subi	r30, 0x13	; 19
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	85 83       	std	Z+5, r24	; 0x05

                return result;
            };

            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );
     59e:	2f aa       	std	Y+55, r2	; 0x37
     5a0:	38 ae       	std	Y+56, r3	; 0x38
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( position.x != finishPos.x || position.y != finishPos.y )
     5a2:	f1 01       	movw	r30, r2
     5a4:	20 81       	ld	r18, Z
     5a6:	31 81       	ldd	r19, Z+1	; 0x01
     5a8:	85 81       	ldd	r24, Z+5	; 0x05
     5aa:	96 81       	ldd	r25, Z+6	; 0x06
     5ac:	28 17       	cp	r18, r24
     5ae:	39 07       	cpc	r19, r25
     5b0:	41 f4       	brne	.+16     	; 0x5c2 <_ZN5Robot8mainMenuEv+0x15e>
     5b2:	22 81       	ldd	r18, Z+2	; 0x02
     5b4:	33 81       	ldd	r19, Z+3	; 0x03
     5b6:	87 81       	ldd	r24, Z+7	; 0x07
     5b8:	90 85       	ldd	r25, Z+8	; 0x08
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	09 f4       	brne	.+2      	; 0x5c2 <_ZN5Robot8mainMenuEv+0x15e>
     5c0:	84 cf       	rjmp	.-248    	; 0x4ca <_ZN5Robot8mainMenuEv+0x66>
            {
                stepToGoal( finishPos );
     5c2:	91 01       	movw	r18, r2
     5c4:	2b 5f       	subi	r18, 0xFB	; 251
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	3e a7       	std	Y+46, r19	; 0x2e
     5ca:	2d a7       	std	Y+45, r18	; 0x2d
     5cc:	48 e0       	ldi	r20, 0x08	; 8
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	5e ab       	std	Y+54, r21	; 0x36
     5d2:	4d ab       	std	Y+53, r20	; 0x35
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     5d4:	80 e2       	ldi	r24, 0x20	; 32
     5d6:	e4 e1       	ldi	r30, 0x14	; 20
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	ab a9       	ldd	r26, Y+51	; 0x33
     5dc:	bc a9       	ldd	r27, Y+52	; 0x34
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	8a 95       	dec	r24
     5e4:	e1 f7       	brne	.-8      	; 0x5de <_ZN5Robot8mainMenuEv+0x17a>
            short	minDist					= getDist( from, to );
     5e6:	6d a5       	ldd	r22, Y+45	; 0x2d
     5e8:	7e a5       	ldd	r23, Y+46	; 0x2e
     5ea:	8f a9       	ldd	r24, Y+55	; 0x37
     5ec:	98 ad       	ldd	r25, Y+56	; 0x38
     5ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     5f2:	5c 01       	movw	r10, r24
            Point2D	minPos( from );
     5f4:	d1 01       	movw	r26, r2
     5f6:	4d 90       	ld	r4, X+
     5f8:	5d 90       	ld	r5, X+
     5fa:	6d 90       	ld	r6, X+
     5fc:	7c 90       	ld	r7, X
     5fe:	8e 01       	movw	r16, r28
     600:	0f 5f       	subi	r16, 0xFF	; 255
     602:	1f 4f       	sbci	r17, 0xFF	; 255

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     604:	f1 01       	movw	r30, r2
     606:	c2 80       	ldd	r12, Z+2	; 0x02
     608:	d3 80       	ldd	r13, Z+3	; 0x03
     60a:	f8 01       	movw	r30, r16
     60c:	80 89       	ldd	r24, Z+16	; 0x10
     60e:	91 89       	ldd	r25, Z+17	; 0x11
     610:	8c 0d       	add	r24, r12
     612:	9d 1d       	adc	r25, r13
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
     614:	d1 01       	movw	r26, r2
     616:	ed 90       	ld	r14, X+
     618:	fc 90       	ld	r15, X
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     61a:	20 81       	ld	r18, Z
     61c:	31 81       	ldd	r19, Z+1	; 0x01
     61e:	0e 5f       	subi	r16, 0xFE	; 254
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	2e 0d       	add	r18, r14
     624:	3f 1d       	adc	r19, r15
     626:	3a a3       	std	Y+34, r19	; 0x22
     628:	29 a3       	std	Y+33, r18	; 0x21
     62a:	9c a3       	std	Y+36, r25	; 0x24
     62c:	8b a3       	std	Y+35, r24	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     62e:	6d a5       	ldd	r22, Y+45	; 0x2d
     630:	7e a5       	ldd	r23, Y+46	; 0x2e
     632:	8f a5       	ldd	r24, Y+47	; 0x2f
     634:	98 a9       	ldd	r25, Y+48	; 0x30
     636:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>

                if ( currDist < minDist )
     63a:	8a 15       	cp	r24, r10
     63c:	9b 05       	cpc	r25, r11
     63e:	2c f4       	brge	.+10     	; 0x64a <_ZN5Robot8mainMenuEv+0x1e6>
                {
                    minDist = currDist;
                    minPos	= currPos;
     640:	49 a0       	ldd	r4, Y+33	; 0x21
     642:	5a a0       	ldd	r5, Y+34	; 0x22
     644:	6b a0       	ldd	r6, Y+35	; 0x23
     646:	7c a0       	ldd	r7, Y+36	; 0x24
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     648:	5c 01       	movw	r10, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     64a:	08 15       	cp	r16, r8
     64c:	19 05       	cpc	r17, r9
     64e:	d1 f6       	brne	.-76     	; 0x604 <_ZN5Robot8mainMenuEv+0x1a0>
     650:	5a aa       	std	Y+50, r5	; 0x32
     652:	49 aa       	std	Y+49, r4	; 0x31
     654:	53 01       	movw	r10, r6
            , y ( inY )
        {}

        bool operator==( const Point2D& pt ) const
        {
            return x == pt.x && y == pt.y;
     656:	e4 14       	cp	r14, r4
     658:	f5 04       	cpc	r15, r5
     65a:	71 f5       	brne	.+92     	; 0x6b8 <_ZN5Robot8mainMenuEv+0x254>
     65c:	c6 14       	cp	r12, r6
     65e:	d7 04       	cpc	r13, r7
     660:	59 f5       	brne	.+86     	; 0x6b8 <_ZN5Robot8mainMenuEv+0x254>
     662:	34 c4       	rjmp	.+2152   	; 0xecc <__stack+0x5cd>
     664:	f8 01       	movw	r30, r16
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     666:	d1 01       	movw	r26, r2
     668:	12 96       	adiw	r26, 0x02	; 2
     66a:	2d 91       	ld	r18, X+
     66c:	3c 91       	ld	r19, X
     66e:	13 97       	sbiw	r26, 0x03	; 3
     670:	80 89       	ldd	r24, Z+16	; 0x10
     672:	91 89       	ldd	r25, Z+17	; 0x11
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     678:	4d 91       	ld	r20, X+
     67a:	5c 91       	ld	r21, X
     67c:	20 81       	ld	r18, Z
     67e:	31 81       	ldd	r19, Z+1	; 0x01
     680:	0e 5f       	subi	r16, 0xFE	; 254
     682:	1f 4f       	sbci	r17, 0xFF	; 255
     684:	24 0f       	add	r18, r20
     686:	35 1f       	adc	r19, r21
     688:	3a a3       	std	Y+34, r19	; 0x22
     68a:	29 a3       	std	Y+33, r18	; 0x21
     68c:	9c a3       	std	Y+36, r25	; 0x24
     68e:	8b a3       	std	Y+35, r24	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     690:	6d 2d       	mov	r22, r13
     692:	7c 2d       	mov	r23, r12
     694:	8b 2d       	mov	r24, r11
     696:	9a 2d       	mov	r25, r10
     698:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>

                if ( currDist < minDist )
     69c:	8e 15       	cp	r24, r14
     69e:	9f 05       	cpc	r25, r15
     6a0:	2c f4       	brge	.+10     	; 0x6ac <_ZN5Robot8mainMenuEv+0x248>
                {
                    minDist = currDist;
                    minPos	= currPos;
     6a2:	49 a0       	ldd	r4, Y+33	; 0x21
     6a4:	5a a0       	ldd	r5, Y+34	; 0x22
     6a6:	6b a0       	ldd	r6, Y+35	; 0x23
     6a8:	7c a0       	ldd	r7, Y+36	; 0x24
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     6aa:	7c 01       	movw	r14, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     6ac:	08 15       	cp	r16, r8
     6ae:	19 05       	cpc	r17, r9
     6b0:	c9 f6       	brne	.-78     	; 0x664 <_ZN5Robot8mainMenuEv+0x200>
     6b2:	5a aa       	std	Y+50, r5	; 0x32
     6b4:	49 aa       	std	Y+49, r4	; 0x31
     6b6:	53 01       	movw	r10, r6
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     6b8:	f1 01       	movw	r30, r2
     6ba:	80 81       	ld	r24, Z
     6bc:	91 81       	ldd	r25, Z+1	; 0x01
     6be:	c9 a8       	ldd	r12, Y+49	; 0x31
     6c0:	da a8       	ldd	r13, Y+50	; 0x32
     6c2:	c8 1a       	sub	r12, r24
     6c4:	d9 0a       	sbc	r13, r25
            short	y			= -startPoint.y + endPoint.y;
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	93 81       	ldd	r25, Z+3	; 0x03
     6ca:	95 01       	movw	r18, r10
     6cc:	28 1b       	sub	r18, r24
     6ce:	39 0b       	sbc	r19, r25
     6d0:	c9 01       	movw	r24, r18
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
     6d2:	44 81       	ldd	r20, Z+4	; 0x04
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	48 30       	cpi	r20, 0x08	; 8
     6d8:	51 05       	cpc	r21, r1
     6da:	b8 f4       	brcc	.+46     	; 0x70a <_ZN5Robot8mainMenuEv+0x2a6>
     6dc:	fa 01       	movw	r30, r20
     6de:	ec 5c       	subi	r30, 0xCC	; 204
     6e0:	ff 4f       	sbci	r31, 0xFF	; 255
     6e2:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
     6e6:	03 ed       	ldi	r16, 0xD3	; 211
     6e8:	1f ef       	ldi	r17, 0xFF	; 255
     6ea:	14 c0       	rjmp	.+40     	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>

                case EOrientation::East:
                    return 0;
     6ec:	00 e0       	ldi	r16, 0x00	; 0
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	11 c0       	rjmp	.+34     	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>

                case EOrientation::NorthEast:
                    return 45;
     6f2:	0d e2       	ldi	r16, 0x2D	; 45
     6f4:	10 e0       	ldi	r17, 0x00	; 0
     6f6:	0e c0       	rjmp	.+28     	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>

                case EOrientation::North:
                    return 90;
     6f8:	0a e5       	ldi	r16, 0x5A	; 90
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	0b c0       	rjmp	.+22     	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>

                case EOrientation::NorthWest:
                    return 135;
     6fe:	07 e8       	ldi	r16, 0x87	; 135
     700:	10 e0       	ldi	r17, 0x00	; 0
     702:	08 c0       	rjmp	.+16     	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>

                case EOrientation::West:
                    return 180;
     704:	04 eb       	ldi	r16, 0xB4	; 180
     706:	10 e0       	ldi	r17, 0x00	; 0
     708:	05 c0       	rjmp	.+10     	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>

                case EOrientation::SouthWest:
                default:
                    return 225;
     70a:	01 ee       	ldi	r16, 0xE1	; 225
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <_ZN5Robot8mainMenuEv+0x2b0>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
     710:	06 ea       	ldi	r16, 0xA6	; 166
     712:	1f ef       	ldi	r17, 0xFF	; 255
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     714:	c1 14       	cp	r12, r1
     716:	d1 04       	cpc	r13, r1
     718:	61 f4       	brne	.+24     	; 0x732 <_ZN5Robot8mainMenuEv+0x2ce>
            {
                if ( y > 0 )
     71a:	18 16       	cp	r1, r24
     71c:	19 06       	cpc	r1, r25
     71e:	4c f1       	brlt	.+82     	; 0x772 <_ZN5Robot8mainMenuEv+0x30e>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     720:	99 23       	and	r25, r25
     722:	6c f5       	brge	.+90     	; 0x77e <_ZN5Robot8mainMenuEv+0x31a>
                {
                    angle = -90;
     724:	0f 2e       	mov	r0, r31
     726:	f6 ea       	ldi	r31, 0xA6	; 166
     728:	ef 2e       	mov	r14, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	ff 24       	eor	r15, r15
     72e:	fa 94       	dec	r15
     730:	28 c0       	rjmp	.+80     	; 0x782 <_ZN5Robot8mainMenuEv+0x31e>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     732:	b6 01       	movw	r22, r12
     734:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     738:	07 2e       	mov	r0, r23
     73a:	00 0c       	add	r0, r0
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 ef 08 	call	0x11de	; 0x11de <__floatsisf>
     744:	0e 94 16 08 	call	0x102c	; 0x102c <atan>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	44 e3       	ldi	r20, 0x34	; 52
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	0e 94 aa 09 	call	0x1354	; 0x1354 <__mulsf3>
     754:	2b ed       	ldi	r18, 0xDB	; 219
     756:	3f e0       	ldi	r19, 0x0F	; 15
     758:	49 e4       	ldi	r20, 0x49	; 73
     75a:	50 e4       	ldi	r21, 0x40	; 64
     75c:	0e 94 45 08 	call	0x108a	; 0x108a <__divsf3>
     760:	0e 94 b7 08 	call	0x116e	; 0x116e <__fixsfsi>
     764:	7b 01       	movw	r14, r22

                if ( x < 0 )
     766:	dd 20       	and	r13, r13
     768:	64 f4       	brge	.+24     	; 0x782 <_ZN5Robot8mainMenuEv+0x31e>
                {
                    angle += 180;
     76a:	34 eb       	ldi	r19, 0xB4	; 180
     76c:	e3 0e       	add	r14, r19
     76e:	f1 1c       	adc	r15, r1
     770:	08 c0       	rjmp	.+16     	; 0x782 <_ZN5Robot8mainMenuEv+0x31e>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     772:	0f 2e       	mov	r0, r31
     774:	fa e5       	ldi	r31, 0x5A	; 90
     776:	ef 2e       	mov	r14, r31
     778:	f1 2c       	mov	r15, r1
     77a:	f0 2d       	mov	r31, r0
     77c:	02 c0       	rjmp	.+4      	; 0x782 <_ZN5Robot8mainMenuEv+0x31e>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     77e:	e1 2c       	mov	r14, r1
     780:	f1 2c       	mov	r15, r1
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     782:	c8 01       	movw	r24, r16
     784:	8e 19       	sub	r24, r14
     786:	9f 09       	sbc	r25, r15
     788:	6d e2       	ldi	r22, 0x2D	; 45
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     790:	07 2e       	mov	r0, r23
     792:	00 0c       	add	r0, r0
     794:	88 0b       	sbc	r24, r24
     796:	99 0b       	sbc	r25, r25
     798:	0e 94 ef 08 	call	0x11de	; 0x11de <__floatsisf>
     79c:	0e 94 17 0a 	call	0x142e	; 0x142e <round>
     7a0:	0e 94 b7 08 	call	0x116e	; 0x116e <__fixsfsi>
     7a4:	8b 01       	movw	r16, r22

            if ( direction > 4 )
     7a6:	65 30       	cpi	r22, 0x05	; 5
     7a8:	71 05       	cpc	r23, r1
     7aa:	14 f0       	brlt	.+4      	; 0x7b0 <_ZN5Robot8mainMenuEv+0x34c>
            {
                direction = -8 + direction;
     7ac:	08 50       	subi	r16, 0x08	; 8
     7ae:	11 09       	sbc	r17, r1
            }

            if ( direction < -4 )
     7b0:	0c 3f       	cpi	r16, 0xFC	; 252
     7b2:	4f ef       	ldi	r20, 0xFF	; 255
     7b4:	14 07       	cpc	r17, r20
     7b6:	14 f4       	brge	.+4      	; 0x7bc <_ZN5Robot8mainMenuEv+0x358>
            {
                direction = 8 + direction;
     7b8:	08 5f       	subi	r16, 0xF8	; 248
     7ba:	1f 4f       	sbci	r17, 0xFF	; 255
            }

            clear();
     7bc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            print_long( direction );
     7c0:	b8 01       	movw	r22, r16
     7c2:	01 2e       	mov	r0, r17
     7c4:	00 0c       	add	r0, r0
     7c6:	88 0b       	sbc	r24, r24
     7c8:	99 0b       	sbc	r25, r25
     7ca:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            lcd_goto_xy( 0, 1 );
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 47 10 	call	0x208e	; 0x208e <lcd_goto_xy>
            print_long( angle );
     7d6:	b7 01       	movw	r22, r14
     7d8:	0f 2c       	mov	r0, r15
     7da:	00 0c       	add	r0, r0
     7dc:	88 0b       	sbc	r24, r24
     7de:	99 0b       	sbc	r25, r25
     7e0:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     7e4:	5d e2       	ldi	r21, 0x2D	; 45
     7e6:	e5 16       	cp	r14, r21
     7e8:	f1 04       	cpc	r15, r1
     7ea:	81 f1       	breq	.+96     	; 0x84c <_ZN5Robot8mainMenuEv+0x3e8>
     7ec:	74 f4       	brge	.+28     	; 0x80a <_ZN5Robot8mainMenuEv+0x3a6>
     7ee:	73 ed       	ldi	r23, 0xD3	; 211
     7f0:	e7 16       	cp	r14, r23
     7f2:	7f ef       	ldi	r23, 0xFF	; 255
     7f4:	f7 06       	cpc	r15, r23
     7f6:	09 f1       	breq	.+66     	; 0x83a <_ZN5Robot8mainMenuEv+0x3d6>
     7f8:	e1 14       	cp	r14, r1
     7fa:	f1 04       	cpc	r15, r1
     7fc:	11 f1       	breq	.+68     	; 0x842 <_ZN5Robot8mainMenuEv+0x3de>
     7fe:	86 ea       	ldi	r24, 0xA6	; 166
     800:	e8 16       	cp	r14, r24
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	f8 06       	cpc	r15, r24
     806:	b9 f5       	brne	.+110    	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
     808:	13 c0       	rjmp	.+38     	; 0x830 <_ZN5Robot8mainMenuEv+0x3cc>
     80a:	97 e8       	ldi	r25, 0x87	; 135
     80c:	e9 16       	cp	r14, r25
     80e:	f1 04       	cpc	r15, r1
     810:	29 f1       	breq	.+74     	; 0x85c <_ZN5Robot8mainMenuEv+0x3f8>
     812:	2c f4       	brge	.+10     	; 0x81e <_ZN5Robot8mainMenuEv+0x3ba>
     814:	ba e5       	ldi	r27, 0x5A	; 90
     816:	eb 16       	cp	r14, r27
     818:	f1 04       	cpc	r15, r1
     81a:	e1 f0       	breq	.+56     	; 0x854 <_ZN5Robot8mainMenuEv+0x3f0>
     81c:	2c c0       	rjmp	.+88     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
     81e:	e4 eb       	ldi	r30, 0xB4	; 180
     820:	ee 16       	cp	r14, r30
     822:	f1 04       	cpc	r15, r1
     824:	f9 f0       	breq	.+62     	; 0x864 <_ZN5Robot8mainMenuEv+0x400>
     826:	f1 ee       	ldi	r31, 0xE1	; 225
     828:	ef 16       	cp	r14, r31
     82a:	f1 04       	cpc	r15, r1
     82c:	01 f1       	breq	.+64     	; 0x86e <_ZN5Robot8mainMenuEv+0x40a>
     82e:	23 c0       	rjmp	.+70     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
            {
                case -90:
                    orientation = EOrientation::South;
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	d1 01       	movw	r26, r2
     834:	14 96       	adiw	r26, 0x04	; 4
     836:	8c 93       	st	X, r24
     838:	1e c0       	rjmp	.+60     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	f1 01       	movw	r30, r2
     83e:	84 83       	std	Z+4, r24	; 0x04
     840:	1a c0       	rjmp	.+52     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case 0:
                    orientation = EOrientation::East;
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	d1 01       	movw	r26, r2
     846:	14 96       	adiw	r26, 0x04	; 4
     848:	8c 93       	st	X, r24
     84a:	15 c0       	rjmp	.+42     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	f1 01       	movw	r30, r2
     850:	84 83       	std	Z+4, r24	; 0x04
     852:	11 c0       	rjmp	.+34     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case 90:
                    orientation = EOrientation::North;
     854:	d1 01       	movw	r26, r2
     856:	14 96       	adiw	r26, 0x04	; 4
     858:	1c 92       	st	X, r1
     85a:	0d c0       	rjmp	.+26     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     85c:	27 e0       	ldi	r18, 0x07	; 7
     85e:	f1 01       	movw	r30, r2
     860:	24 83       	std	Z+4, r18	; 0x04
     862:	09 c0       	rjmp	.+18     	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case 180:
                    orientation = EOrientation::West;
     864:	e6 e0       	ldi	r30, 0x06	; 6
     866:	d1 01       	movw	r26, r2
     868:	14 96       	adiw	r26, 0x04	; 4
     86a:	ec 93       	st	X, r30
     86c:	04 c0       	rjmp	.+8      	; 0x876 <_ZN5Robot8mainMenuEv+0x412>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	d1 01       	movw	r26, r2
     872:	14 96       	adiw	r26, 0x04	; 4
     874:	8c 93       	st	X, r24
            print_long( angle );
            //delay_ms(1000);

            setDeviceOrientation( angle );

            if ( direction < 0 )
     876:	11 23       	and	r17, r17
     878:	ec f4       	brge	.+58     	; 0x8b4 <_ZN5Robot8mainMenuEv+0x450>
        }

    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     87a:	6a e2       	ldi	r22, 0x2A	; 42
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	86 ed       	ldi	r24, 0xD6	; 214
     880:	9f ef       	ldi	r25, 0xFF	; 255
     882:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>

            delay_ms( 200 * turns );
     886:	c8 01       	movw	r24, r16
     888:	99 23       	and	r25, r25
     88a:	24 f4       	brge	.+8      	; 0x894 <_ZN5Robot8mainMenuEv+0x430>
     88c:	88 27       	eor	r24, r24
     88e:	99 27       	eor	r25, r25
     890:	80 1b       	sub	r24, r16
     892:	91 0b       	sbc	r25, r17
     894:	28 ec       	ldi	r18, 0xC8	; 200
     896:	fc 01       	movw	r30, r24
     898:	2e 9f       	mul	r18, r30
     89a:	c0 01       	movw	r24, r0
     89c:	2f 9f       	mul	r18, r31
     89e:	90 0d       	add	r25, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>

            set_motors( 0, 0 );
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>
     8b2:	1f c0       	rjmp	.+62     	; 0x8f2 <_ZN5Robot8mainMenuEv+0x48e>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     8b4:	10 16       	cp	r1, r16
     8b6:	11 06       	cpc	r1, r17
     8b8:	e4 f4       	brge	.+56     	; 0x8f2 <_ZN5Robot8mainMenuEv+0x48e>
        }

    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     8ba:	66 ed       	ldi	r22, 0xD6	; 214
     8bc:	7f ef       	ldi	r23, 0xFF	; 255
     8be:	8a e2       	ldi	r24, 0x2A	; 42
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>

            delay_ms( 200 * turns );
     8c6:	c8 01       	movw	r24, r16
     8c8:	99 23       	and	r25, r25
     8ca:	24 f4       	brge	.+8      	; 0x8d4 <_ZN5Robot8mainMenuEv+0x470>
     8cc:	88 27       	eor	r24, r24
     8ce:	99 27       	eor	r25, r25
     8d0:	80 1b       	sub	r24, r16
     8d2:	91 0b       	sbc	r25, r17
     8d4:	28 ec       	ldi	r18, 0xC8	; 200
     8d6:	ac 01       	movw	r20, r24
     8d8:	24 9f       	mul	r18, r20
     8da:	c0 01       	movw	r24, r0
     8dc:	25 9f       	mul	r18, r21
     8de:	90 0d       	add	r25, r0
     8e0:	11 24       	eor	r1, r1
     8e2:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>

            set_motors( 0, 0 );
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensors[ 5 ];
            read_line_sensors( sensors, IR_EMITTERS_ON );
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	8b a9       	ldd	r24, Y+51	; 0x33
     902:	9c a9       	ldd	r25, Y+52	; 0x34
     904:	0e 94 c7 11 	call	0x238e	; 0x238e <read_line_sensors>

            if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	81 3b       	cpi	r24, 0xB1	; 177
     90e:	94 40       	sbci	r25, 0x04	; 4
     910:	50 f4       	brcc	.+20     	; 0x926 <__stack+0x27>
     912:	8d 81       	ldd	r24, Y+5	; 0x05
     914:	9e 81       	ldd	r25, Y+6	; 0x06
     916:	81 3b       	cpi	r24, 0xB1	; 177
     918:	94 40       	sbci	r25, 0x04	; 4
     91a:	28 f4       	brcc	.+10     	; 0x926 <__stack+0x27>
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	98 85       	ldd	r25, Y+8	; 0x08
     920:	81 3b       	cpi	r24, 0xB1	; 177
     922:	94 40       	sbci	r25, 0x04	; 4
     924:	48 f1       	brcs	.+82     	; 0x978 <__stack+0x79>
            {
                clear();
     926:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
                print( "!OBS!" );
     92a:	88 e7       	ldi	r24, 0x78	; 120
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
                delay_ms( 2000 );
     932:	80 ed       	ldi	r24, 0xD0	; 208
     934:	97 e0       	ldi	r25, 0x07	; 7
     936:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     93a:	95 01       	movw	r18, r10
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	2a 0d       	add	r18, r10
     942:	3b 1d       	adc	r19, r11
     944:	22 0f       	add	r18, r18
     946:	33 1f       	adc	r19, r19
     948:	4a e5       	ldi	r20, 0x5A	; 90
     94a:	a9 a9       	ldd	r26, Y+49	; 0x31
     94c:	ba a9       	ldd	r27, Y+50	; 0x32
     94e:	4a 9f       	mul	r20, r26
     950:	c0 01       	movw	r24, r0
     952:	4b 9f       	mul	r20, r27
     954:	90 0d       	add	r25, r0
     956:	11 24       	eor	r1, r1
     958:	82 0f       	add	r24, r18
     95a:	93 1f       	adc	r25, r19
     95c:	fc 01       	movw	r30, r24
     95e:	e3 51       	subi	r30, 0x13	; 19
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	84 83       	std	Z+4, r24	; 0x04
     966:	ed a9       	ldd	r30, Y+53	; 0x35
     968:	fe a9       	ldd	r31, Y+54	; 0x36
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	fe ab       	std	Y+54, r31	; 0x36
     96e:	ed ab       	std	Y+53, r30	; 0x35
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     970:	ef 2b       	or	r30, r31
     972:	09 f0       	breq	.+2      	; 0x976 <__stack+0x77>
     974:	2f ce       	rjmp	.-930    	; 0x5d4 <_ZN5Robot8mainMenuEv+0x170>
     976:	0a c0       	rjmp	.+20     	; 0x98c <__stack+0x8d>
                print( "!OBS!" );
                delay_ms( 2000 );
                return false;
            }

            clear();
     978:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            print( "NOT OBS" );
     97c:	8e e7       	ldi	r24, 0x7E	; 126
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            delay_ms( 2000 );
     984:	80 ed       	ldi	r24, 0xD0	; 208
     986:	97 e0       	ldi	r25, 0x07	; 7
     988:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     98c:	29 a9       	ldd	r18, Y+49	; 0x31
     98e:	3a a9       	ldd	r19, Y+50	; 0x32
     990:	3e a3       	std	Y+38, r19	; 0x26
     992:	2d a3       	std	Y+37, r18	; 0x25
     994:	b8 a6       	std	Y+40, r11	; 0x28
     996:	af a2       	std	Y+39, r10	; 0x27

            printPos( nextPos.x, nextPos.y );
     998:	85 01       	movw	r16, r10

        }

        void printPos( short x, short y )
        {
            clear();
     99a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            print( "(" );
     99e:	81 e5       	ldi	r24, 0x51	; 81
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            print_long( x );
     9a6:	e9 a8       	ldd	r14, Y+49	; 0x31
     9a8:	fa a8       	ldd	r15, Y+50	; 0x32
     9aa:	b7 01       	movw	r22, r14
     9ac:	ff 0c       	add	r15, r15
     9ae:	88 0b       	sbc	r24, r24
     9b0:	99 0b       	sbc	r25, r25
     9b2:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            print( ", " );
     9b6:	83 e5       	ldi	r24, 0x53	; 83
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            print_long( y );
     9be:	b5 01       	movw	r22, r10
     9c0:	0b 2c       	mov	r0, r11
     9c2:	00 0c       	add	r0, r0
     9c4:	88 0b       	sbc	r24, r24
     9c6:	99 0b       	sbc	r25, r25
     9c8:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            print( ")" );
     9cc:	86 e5       	ldi	r24, 0x56	; 86
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );

            printPos( nextPos.x, nextPos.y );
            delay_ms( 2000 );
     9d4:	80 ed       	ldi	r24, 0xD0	; 208
     9d6:	97 e0       	ldi	r25, 0x07	; 7
     9d8:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     9dc:	c5 01       	movw	r24, r10
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	8a 0d       	add	r24, r10
     9e4:	9b 1d       	adc	r25, r11
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	4a e5       	ldi	r20, 0x5A	; 90
     9ec:	e9 a8       	ldd	r14, Y+49	; 0x31
     9ee:	fa a8       	ldd	r15, Y+50	; 0x32
     9f0:	4e 9d       	mul	r20, r14
     9f2:	90 01       	movw	r18, r0
     9f4:	4f 9d       	mul	r20, r15
     9f6:	30 0d       	add	r19, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	fc 01       	movw	r30, r24
     a00:	e3 51       	subi	r30, 0x13	; 19
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	85 81       	ldd	r24, Z+5	; 0x05
     a06:	81 11       	cpse	r24, r1
     a08:	a2 c0       	rjmp	.+324    	; 0xb4e <__stack+0x24f>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     a0a:	80 e2       	ldi	r24, 0x20	; 32
     a0c:	e4 e1       	ldi	r30, 0x14	; 20
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	ab a9       	ldd	r26, Y+51	; 0x33
     a12:	bc a9       	ldd	r27, Y+52	; 0x34
     a14:	01 90       	ld	r0, Z+
     a16:	0d 92       	st	X+, r0
     a18:	8a 95       	dec	r24
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <__stack+0x115>
            short	minDist					= getDist( from, to );
     a1c:	be 01       	movw	r22, r28
     a1e:	6b 5d       	subi	r22, 0xDB	; 219
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	cb 01       	movw	r24, r22
     a24:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     a28:	5c 01       	movw	r10, r24
            Point2D	minPos( from );
     a2a:	4d a0       	ldd	r4, Y+37	; 0x25
     a2c:	5e a0       	ldd	r5, Y+38	; 0x26
     a2e:	6f a0       	ldd	r6, Y+39	; 0x27
     a30:	78 a4       	ldd	r7, Y+40	; 0x28
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	6a 01       	movw	r12, r20
     a3a:	f6 01       	movw	r30, r12

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     a3c:	80 89       	ldd	r24, Z+16	; 0x10
     a3e:	91 89       	ldd	r25, Z+17	; 0x11
     a40:	80 0f       	add	r24, r16
     a42:	91 1f       	adc	r25, r17
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     a44:	20 81       	ld	r18, Z
     a46:	31 81       	ldd	r19, Z+1	; 0x01
     a48:	52 e0       	ldi	r21, 0x02	; 2
     a4a:	c5 0e       	add	r12, r21
     a4c:	d1 1c       	adc	r13, r1
     a4e:	2e 0d       	add	r18, r14
     a50:	3f 1d       	adc	r19, r15
     a52:	3a a3       	std	Y+34, r19	; 0x22
     a54:	29 a3       	std	Y+33, r18	; 0x21
     a56:	9c a3       	std	Y+36, r25	; 0x24
     a58:	8b a3       	std	Y+35, r24	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     a5a:	be 01       	movw	r22, r28
     a5c:	6b 5d       	subi	r22, 0xDB	; 219
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	ce 01       	movw	r24, r28
     a62:	81 96       	adiw	r24, 0x21	; 33
     a64:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>

                if ( currDist < minDist )
     a68:	8a 15       	cp	r24, r10
     a6a:	9b 05       	cpc	r25, r11
     a6c:	2c f4       	brge	.+10     	; 0xa78 <__stack+0x179>
                {
                    minDist = currDist;
                    minPos	= currPos;
     a6e:	49 a0       	ldd	r4, Y+33	; 0x21
     a70:	5a a0       	ldd	r5, Y+34	; 0x22
     a72:	6b a0       	ldd	r6, Y+35	; 0x23
     a74:	7c a0       	ldd	r7, Y+36	; 0x24
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     a76:	5c 01       	movw	r10, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     a78:	c8 14       	cp	r12, r8
     a7a:	d9 04       	cpc	r13, r9
     a7c:	f1 f6       	brne	.-68     	; 0xa3a <__stack+0x13b>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     a7e:	98 01       	movw	r18, r16
     a80:	22 0f       	add	r18, r18
     a82:	33 1f       	adc	r19, r19
     a84:	20 0f       	add	r18, r16
     a86:	31 1f       	adc	r19, r17
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	aa e5       	ldi	r26, 0x5A	; 90
     a8e:	ae 9d       	mul	r26, r14
     a90:	c0 01       	movw	r24, r0
     a92:	af 9d       	mul	r26, r15
     a94:	90 0d       	add	r25, r0
     a96:	11 24       	eor	r1, r1
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	fc 01       	movw	r30, r24
     a9e:	e3 51       	subi	r30, 0x13	; 19
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	60 81       	ld	r22, Z
     aa4:	71 81       	ldd	r23, Z+1	; 0x01
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     aa6:	93 01       	movw	r18, r6
     aa8:	22 0f       	add	r18, r18
     aaa:	33 1f       	adc	r19, r19
     aac:	26 0d       	add	r18, r6
     aae:	37 1d       	adc	r19, r7
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	a4 9d       	mul	r26, r4
     ab6:	c0 01       	movw	r24, r0
     ab8:	a5 9d       	mul	r26, r5
     aba:	90 0d       	add	r25, r0
     abc:	11 24       	eor	r1, r1
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	fc 01       	movw	r30, r24
     ac4:	e3 51       	subi	r30, 0x13	; 19
     ac6:	fe 4f       	sbci	r31, 0xFE	; 254
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     acc:	e4 14       	cp	r14, r4
     ace:	f5 04       	cpc	r15, r5
     ad0:	31 f0       	breq	.+12     	; 0xade <__stack+0x1df>
     ad2:	06 15       	cp	r16, r6
     ad4:	17 05       	cpc	r17, r7
     ad6:	49 f4       	brne	.+18     	; 0xaea <__stack+0x1eb>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     ad8:	22 e0       	ldi	r18, 0x02	; 2
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	0b c0       	rjmp	.+22     	; 0xaf4 <__stack+0x1f5>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     ade:	06 15       	cp	r16, r6
     ae0:	17 05       	cpc	r17, r7
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <__stack+0x1f1>
            {
                distance = 2;
     ae4:	22 e0       	ldi	r18, 0x02	; 2
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <__stack+0x1f5>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     aea:	23 e0       	ldi	r18, 0x03	; 3
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__stack+0x1f5>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     af4:	82 0f       	add	r24, r18
     af6:	93 1f       	adc	r25, r19

                if ( savedDist > currDist )
     af8:	86 17       	cp	r24, r22
     afa:	97 07       	cpc	r25, r23
     afc:	a4 f4       	brge	.+40     	; 0xb26 <__stack+0x227>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     afe:	a8 01       	movw	r20, r16
     b00:	44 0f       	add	r20, r20
     b02:	55 1f       	adc	r21, r21
     b04:	40 0f       	add	r20, r16
     b06:	51 1f       	adc	r21, r17
     b08:	44 0f       	add	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	6a e5       	ldi	r22, 0x5A	; 90
     b0e:	6e 9d       	mul	r22, r14
     b10:	90 01       	movw	r18, r0
     b12:	6f 9d       	mul	r22, r15
     b14:	30 0d       	add	r19, r0
     b16:	11 24       	eor	r1, r1
     b18:	24 0f       	add	r18, r20
     b1a:	35 1f       	adc	r19, r21
     b1c:	f9 01       	movw	r30, r18
     b1e:	e3 51       	subi	r30, 0x13	; 19
     b20:	fe 4f       	sbci	r31, 0xFE	; 254
     b22:	91 83       	std	Z+1, r25	; 0x01
     b24:	80 83       	st	Z, r24
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     b26:	c8 01       	movw	r24, r16
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	80 0f       	add	r24, r16
     b2e:	91 1f       	adc	r25, r17
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	2a e5       	ldi	r18, 0x5A	; 90
     b36:	2e 9d       	mul	r18, r14
     b38:	f0 01       	movw	r30, r0
     b3a:	2f 9d       	mul	r18, r15
     b3c:	f0 0d       	add	r31, r0
     b3e:	11 24       	eor	r1, r1
     b40:	8e 0f       	add	r24, r30
     b42:	9f 1f       	adc	r25, r31
     b44:	fc 01       	movw	r30, r24
     b46:	e3 51       	subi	r30, 0x13	; 19
     b48:	fe 4f       	sbci	r31, 0xFE	; 254
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	85 83       	std	Z+5, r24	; 0x05
            }

            // Move until stepping on the goal position
            if ( position.x != goalPos.x || position.y != goalPos.y )
     b4e:	d1 01       	movw	r26, r2
     b50:	2d 91       	ld	r18, X+
     b52:	3c 91       	ld	r19, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	15 96       	adiw	r26, 0x05	; 5
     b58:	8d 91       	ld	r24, X+
     b5a:	9c 91       	ld	r25, X
     b5c:	16 97       	sbiw	r26, 0x06	; 6
     b5e:	28 17       	cp	r18, r24
     b60:	39 07       	cpc	r19, r25
     b62:	59 f4       	brne	.+22     	; 0xb7a <__stack+0x27b>
     b64:	12 96       	adiw	r26, 0x02	; 2
     b66:	2d 91       	ld	r18, X+
     b68:	3c 91       	ld	r19, X
     b6a:	13 97       	sbiw	r26, 0x03	; 3
     b6c:	17 96       	adiw	r26, 0x07	; 7
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	18 97       	sbiw	r26, 0x08	; 8
     b74:	28 17       	cp	r18, r24
     b76:	39 07       	cpc	r19, r25
     b78:	e1 f1       	breq	.+120    	; 0xbf2 <__stack+0x2f3>
            {
                position = nextPos;
     b7a:	8d a1       	ldd	r24, Y+37	; 0x25
     b7c:	9e a1       	ldd	r25, Y+38	; 0x26
     b7e:	af a1       	ldd	r26, Y+39	; 0x27
     b80:	b8 a5       	ldd	r27, Y+40	; 0x28
     b82:	f1 01       	movw	r30, r2
     b84:	80 83       	st	Z, r24
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	a2 83       	std	Z+2, r26	; 0x02
     b8a:	b3 83       	std	Z+3, r27	; 0x03
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 19, 19 );
     b8c:	63 e1       	ldi	r22, 0x13	; 19
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	83 e1       	ldi	r24, 0x13	; 19
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	89 ad       	ldd	r24, Y+57	; 0x39
     b9c:	9a ad       	ldd	r25, Y+58	; 0x3a
     b9e:	0e 94 c7 11 	call	0x238e	; 0x238e <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     ba2:	d1 01       	movw	r26, r2
     ba4:	1b 96       	adiw	r26, 0x0b	; 11
     ba6:	8d 91       	ld	r24, X+
     ba8:	9c 91       	ld	r25, X
     baa:	1c 97       	sbiw	r26, 0x0c	; 12
     bac:	81 3b       	cpi	r24, 0xB1	; 177
     bae:	b4 e0       	ldi	r27, 0x04	; 4
     bb0:	9b 07       	cpc	r25, r27
     bb2:	88 f4       	brcc	.+34     	; 0xbd6 <__stack+0x2d7>
     bb4:	f1 01       	movw	r30, r2
     bb6:	25 85       	ldd	r18, Z+13	; 0x0d
     bb8:	36 85       	ldd	r19, Z+14	; 0x0e
            {
                return true;
            }
            else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     bba:	8f 35       	cpi	r24, 0x5F	; 95
     bbc:	91 40       	sbci	r25, 0x01	; 1
     bbe:	58 f4       	brcc	.+22     	; 0xbd6 <__stack+0x2d7>
     bc0:	2f 35       	cpi	r18, 0x5F	; 95
     bc2:	31 40       	sbci	r19, 0x01	; 1
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__stack+0x2d7>

        void moveForward()
        {
            set_motors( 19, 19 );

            while ( !isOnMarker() ) {}
     bc6:	d1 01       	movw	r26, r2
     bc8:	1f 96       	adiw	r26, 0x0f	; 15
     bca:	8d 91       	ld	r24, X+
     bcc:	9c 91       	ld	r25, X
     bce:	50 97       	sbiw	r26, 0x10	; 16
     bd0:	8f 35       	cpi	r24, 0x5F	; 95
     bd2:	91 40       	sbci	r25, 0x01	; 1
     bd4:	08 f3       	brcs	.-62     	; 0xb98 <__stack+0x299>

            play( ">>a32" );
     bd6:	82 e7       	ldi	r24, 0x72	; 114
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <play>
            delay_ms( 900 );
     bde:	84 e8       	ldi	r24, 0x84	; 132
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
            set_motors( 0, 0 );
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>

            while ( position.x != finishPos.x || position.y != finishPos.y )
            {
                stepToGoal( finishPos );

                if ( position.x == finishPos.x && position.y == finishPos.y )
     bf2:	f1 01       	movw	r30, r2
     bf4:	20 81       	ld	r18, Z
     bf6:	31 81       	ldd	r19, Z+1	; 0x01
     bf8:	85 81       	ldd	r24, Z+5	; 0x05
     bfa:	96 81       	ldd	r25, Z+6	; 0x06
     bfc:	28 17       	cp	r18, r24
     bfe:	39 07       	cpc	r19, r25
     c00:	09 f0       	breq	.+2      	; 0xc04 <__stack+0x305>
     c02:	cf cc       	rjmp	.-1634   	; 0x5a2 <_ZN5Robot8mainMenuEv+0x13e>
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	47 81       	ldd	r20, Z+7	; 0x07
     c0a:	50 85       	ldd	r21, Z+8	; 0x08
     c0c:	84 17       	cp	r24, r20
     c0e:	95 07       	cpc	r25, r21
     c10:	09 f0       	breq	.+2      	; 0xc14 <__stack+0x315>
     c12:	c7 cc       	rjmp	.-1650   	; 0x5a2 <_ZN5Robot8mainMenuEv+0x13e>
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
     c14:	ac 01       	movw	r20, r24
     c16:	44 0f       	add	r20, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	84 0f       	add	r24, r20
     c1c:	95 1f       	adc	r25, r21
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	4a e5       	ldi	r20, 0x5A	; 90
     c24:	42 9f       	mul	r20, r18
     c26:	f0 01       	movw	r30, r0
     c28:	43 9f       	mul	r20, r19
     c2a:	f0 0d       	add	r31, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	8e 0f       	add	r24, r30
     c30:	9f 1f       	adc	r25, r31
     c32:	fc 01       	movw	r30, r24
     c34:	e3 51       	subi	r30, 0x13	; 19
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	13 82       	std	Z+3, r1	; 0x03
     c3a:	12 82       	std	Z+2, r1	; 0x02
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
     c3c:	d1 01       	movw	r26, r2
     c3e:	15 96       	adiw	r26, 0x05	; 5
     c40:	0d 91       	ld	r16, X+
     c42:	1d 91       	ld	r17, X+
     c44:	2d 91       	ld	r18, X+
     c46:	3c 91       	ld	r19, X
     c48:	18 97       	sbiw	r26, 0x08	; 8
     c4a:	a0 2f       	mov	r26, r16
     c4c:	51 2f       	mov	r21, r17
     c4e:	0d a3       	std	Y+37, r16	; 0x25
     c50:	1e a3       	std	Y+38, r17	; 0x26
     c52:	2f a3       	std	Y+39, r18	; 0x27
     c54:	38 a7       	std	Y+40, r19	; 0x28
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
     c56:	f1 01       	movw	r30, r2
     c58:	87 81       	ldd	r24, Z+7	; 0x07
     c5a:	90 85       	ldd	r25, Z+8	; 0x08
     c5c:	25 81       	ldd	r18, Z+5	; 0x05
     c5e:	36 81       	ldd	r19, Z+6	; 0x06
     c60:	bc 01       	movw	r22, r24
     c62:	66 0f       	add	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	86 0f       	add	r24, r22
     c68:	97 1f       	adc	r25, r23
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	42 9f       	mul	r20, r18
     c70:	b0 01       	movw	r22, r0
     c72:	43 9f       	mul	r20, r19
     c74:	70 0d       	add	r23, r0
     c76:	11 24       	eor	r1, r1
     c78:	86 0f       	add	r24, r22
     c7a:	97 1f       	adc	r25, r23
     c7c:	fc 01       	movw	r30, r24
     c7e:	e3 51       	subi	r30, 0x13	; 19
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	c0 80       	ld	r12, Z
     c84:	d1 80       	ldd	r13, Z+1	; 0x01

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     c86:	aa 2e       	mov	r10, r26
     c88:	b5 2e       	mov	r11, r21
     c8a:	0f a1       	ldd	r16, Y+39	; 0x27
     c8c:	18 a5       	ldd	r17, Y+40	; 0x28
     c8e:	98 01       	movw	r18, r16
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	20 0f       	add	r18, r16
     c96:	31 1f       	adc	r19, r17
     c98:	22 0f       	add	r18, r18
     c9a:	33 1f       	adc	r19, r19
     c9c:	4a 9d       	mul	r20, r10
     c9e:	c0 01       	movw	r24, r0
     ca0:	4b 9d       	mul	r20, r11
     ca2:	90 0d       	add	r25, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	82 0f       	add	r24, r18
     ca8:	93 1f       	adc	r25, r19
     caa:	fc 01       	movw	r30, r24
     cac:	e3 51       	subi	r30, 0x13	; 19
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	09 f4       	brne	.+2      	; 0xcba <__stack+0x3bb>
     cb8:	87 c0       	rjmp	.+270    	; 0xdc8 <__stack+0x4c9>
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
     cba:	96 01       	movw	r18, r12
     cbc:	28 1b       	sub	r18, r24
     cbe:	39 0b       	sbc	r19, r25
     cc0:	f8 01       	movw	r30, r16
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e0 0f       	add	r30, r16
     cc8:	f1 1f       	adc	r31, r17
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	4a e5       	ldi	r20, 0x5A	; 90
     cd0:	4a 9d       	mul	r20, r10
     cd2:	c0 01       	movw	r24, r0
     cd4:	4b 9d       	mul	r20, r11
     cd6:	90 0d       	add	r25, r0
     cd8:	11 24       	eor	r1, r1
     cda:	e8 0f       	add	r30, r24
     cdc:	f9 1f       	adc	r31, r25
     cde:	e3 51       	subi	r30, 0x13	; 19
     ce0:	fe 4f       	sbci	r31, 0xFE	; 254
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	82 17       	cp	r24, r18
     ce8:	93 07       	cpc	r25, r19
     cea:	94 f4       	brge	.+36     	; 0xd10 <__stack+0x411>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     cec:	f8 01       	movw	r30, r16
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	4a 9d       	mul	r20, r10
     cfc:	c0 01       	movw	r24, r0
     cfe:	4b 9d       	mul	r20, r11
     d00:	90 0d       	add	r25, r0
     d02:	11 24       	eor	r1, r1
     d04:	e8 0f       	add	r30, r24
     d06:	f9 1f       	adc	r31, r25
     d08:	e3 51       	subi	r30, 0x13	; 19
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	33 83       	std	Z+3, r19	; 0x03
     d0e:	22 83       	std	Z+2, r18	; 0x02
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     d10:	80 e2       	ldi	r24, 0x20	; 32
     d12:	e4 e1       	ldi	r30, 0x14	; 20
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	ab a9       	ldd	r26, Y+51	; 0x33
     d18:	bc a9       	ldd	r27, Y+52	; 0x34
     d1a:	01 90       	ld	r0, Z+
     d1c:	0d 92       	st	X+, r0
     d1e:	8a 95       	dec	r24
     d20:	e1 f7       	brne	.-8      	; 0xd1a <__stack+0x41b>
            short	minDist					= getDist( from, to );
     d22:	be 01       	movw	r22, r28
     d24:	6b 5d       	subi	r22, 0xDB	; 219
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	cb 01       	movw	r24, r22
     d2a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     d2e:	9e a7       	std	Y+46, r25	; 0x2e
     d30:	8d a7       	std	Y+45, r24	; 0x2d
            Point2D	minPos( from );
     d32:	4d a0       	ldd	r4, Y+37	; 0x25
     d34:	5e a0       	ldd	r5, Y+38	; 0x26
     d36:	6f a0       	ldd	r6, Y+39	; 0x27
     d38:	78 a4       	ldd	r7, Y+40	; 0x28
     d3a:	be 01       	movw	r22, r28
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	7b 01       	movw	r14, r22
     d42:	f7 01       	movw	r30, r14

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     d44:	80 89       	ldd	r24, Z+16	; 0x10
     d46:	91 89       	ldd	r25, Z+17	; 0x11
     d48:	80 0f       	add	r24, r16
     d4a:	91 1f       	adc	r25, r17
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     d4c:	20 81       	ld	r18, Z
     d4e:	31 81       	ldd	r19, Z+1	; 0x01
     d50:	72 e0       	ldi	r23, 0x02	; 2
     d52:	e7 0e       	add	r14, r23
     d54:	f1 1c       	adc	r15, r1
     d56:	2a 0d       	add	r18, r10
     d58:	3b 1d       	adc	r19, r11
     d5a:	3a a3       	std	Y+34, r19	; 0x22
     d5c:	29 a3       	std	Y+33, r18	; 0x21
     d5e:	9c a3       	std	Y+36, r25	; 0x24
     d60:	8b a3       	std	Y+35, r24	; 0x23

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     d62:	be 01       	movw	r22, r28
     d64:	6b 5d       	subi	r22, 0xDB	; 219
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	8f a5       	ldd	r24, Y+47	; 0x2f
     d6a:	98 a9       	ldd	r25, Y+48	; 0x30
     d6c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>

                if ( currDist < minDist )
     d70:	ad a5       	ldd	r26, Y+45	; 0x2d
     d72:	be a5       	ldd	r27, Y+46	; 0x2e
     d74:	8a 17       	cp	r24, r26
     d76:	9b 07       	cpc	r25, r27
     d78:	34 f4       	brge	.+12     	; 0xd86 <__stack+0x487>
                {
                    minDist = currDist;
                    minPos	= currPos;
     d7a:	49 a0       	ldd	r4, Y+33	; 0x21
     d7c:	5a a0       	ldd	r5, Y+34	; 0x22
     d7e:	6b a0       	ldd	r6, Y+35	; 0x23
     d80:	7c a0       	ldd	r7, Y+36	; 0x24
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     d82:	9e a7       	std	Y+46, r25	; 0x2e
     d84:	8d a7       	std	Y+45, r24	; 0x2d
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     d86:	8e 14       	cp	r8, r14
     d88:	9f 04       	cpc	r9, r15
     d8a:	d9 f6       	brne	.-74     	; 0xd42 <__stack+0x443>
                if ( currCell.distToFinish < dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
     d8c:	4d a2       	std	Y+37, r4	; 0x25
     d8e:	5e a2       	std	Y+38, r5	; 0x26
     d90:	6f a2       	std	Y+39, r6	; 0x27
     d92:	78 a6       	std	Y+40, r7	; 0x28
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     d94:	a4 2c       	mov	r10, r4
     d96:	b5 2c       	mov	r11, r5
     d98:	0f a1       	ldd	r16, Y+39	; 0x27
     d9a:	18 a5       	ldd	r17, Y+40	; 0x28
     d9c:	f8 01       	movw	r30, r16
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	e0 0f       	add	r30, r16
     da4:	f1 1f       	adc	r31, r17
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	ba e5       	ldi	r27, 0x5A	; 90
     dac:	ba 9d       	mul	r27, r10
     dae:	c0 01       	movw	r24, r0
     db0:	bb 9d       	mul	r27, r11
     db2:	90 0d       	add	r25, r0
     db4:	11 24       	eor	r1, r1
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	e3 51       	subi	r30, 0x13	; 19
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <__stack+0x4c9>
     dc6:	79 cf       	rjmp	.-270    	; 0xcba <__stack+0x3bb>
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish < dist - currCell.distToStart )
     dc8:	98 01       	movw	r18, r16
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	20 0f       	add	r18, r16
     dd0:	31 1f       	adc	r19, r17
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	4a e5       	ldi	r20, 0x5A	; 90
     dd8:	4a 9d       	mul	r20, r10
     dda:	c0 01       	movw	r24, r0
     ddc:	4b 9d       	mul	r20, r11
     dde:	90 0d       	add	r25, r0
     de0:	11 24       	eor	r1, r1
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	fc 01       	movw	r30, r24
     de8:	e3 51       	subi	r30, 0x13	; 19
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	8c 15       	cp	r24, r12
     df2:	9d 05       	cpc	r25, r13
     df4:	74 f4       	brge	.+28     	; 0xe12 <__stack+0x513>
            {
                currCell.distToFinish = dist - currCell.distToStart;
     df6:	c9 01       	movw	r24, r18
     df8:	2a e5       	ldi	r18, 0x5A	; 90
     dfa:	2a 9d       	mul	r18, r10
     dfc:	f0 01       	movw	r30, r0
     dfe:	2b 9d       	mul	r18, r11
     e00:	f0 0d       	add	r31, r0
     e02:	11 24       	eor	r1, r1
     e04:	8e 0f       	add	r24, r30
     e06:	9f 1f       	adc	r25, r31
     e08:	fc 01       	movw	r30, r24
     e0a:	e3 51       	subi	r30, 0x13	; 19
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	d3 82       	std	Z+3, r13	; 0x03
     e10:	c2 82       	std	Z+2, r12	; 0x02

        void reverseDirection()
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );
     e12:	f1 01       	movw	r30, r2
     e14:	c5 80       	ldd	r12, Z+5	; 0x05
     e16:	d6 80       	ldd	r13, Z+6	; 0x06
     e18:	e7 80       	ldd	r14, Z+7	; 0x07
     e1a:	f0 84       	ldd	r15, Z+8	; 0x08
     e1c:	4d ee       	ldi	r20, 0xED	; 237
     e1e:	51 e0       	ldi	r21, 0x01	; 1

            for ( short i = 0; i < MAX_ROWS; i++ )
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	fa 01       	movw	r30, r20
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
     e2a:	72 2e       	mov	r7, r18
     e2c:	03 2f       	mov	r16, r19
     e2e:	df 01       	movw	r26, r30

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
     e30:	65 81       	ldd	r22, Z+5	; 0x05
     e32:	66 23       	and	r22, r22
     e34:	b1 f0       	breq	.+44     	; 0xe62 <__stack+0x563>
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
     e36:	a0 80       	ld	r10, Z
     e38:	b1 80       	ldd	r11, Z+1	; 0x01
     e3a:	a1 14       	cp	r10, r1
     e3c:	b1 04       	cpc	r11, r1
     e3e:	21 f4       	brne	.+8      	; 0xe48 <__stack+0x549>
     e40:	e8 2e       	mov	r14, r24
     e42:	f9 2e       	mov	r15, r25
     e44:	c7 2c       	mov	r12, r7
     e46:	d0 2e       	mov	r13, r16
                        {
                            // Save the start position.
                            startPos = Point2D( i, j );
                        }

                        short tmp						= matrix[ i ][ j ].distToFinish;
     e48:	12 96       	adiw	r26, 0x02	; 2
     e4a:	6d 91       	ld	r22, X+
     e4c:	7c 91       	ld	r23, X
     e4e:	13 97       	sbiw	r26, 0x03	; 3
                        matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
     e50:	13 96       	adiw	r26, 0x03	; 3
     e52:	bc 92       	st	X, r11
     e54:	ae 92       	st	-X, r10
     e56:	12 97       	sbiw	r26, 0x02	; 2
                        matrix[ i ][ j ].distToStart	= tmp;
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	7c 93       	st	X, r23
     e5c:	6e 93       	st	-X, r22
                        matrix[ i ][ j ].isVisited		= false;
     e5e:	15 96       	adiw	r26, 0x05	; 5
     e60:	1c 92       	st	X, r1
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	36 96       	adiw	r30, 0x06	; 6
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
     e66:	8f 30       	cpi	r24, 0x0F	; 15
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f7       	brne	.-62     	; 0xe2e <__stack+0x52f>
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	46 5a       	subi	r20, 0xA6	; 166
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
     e74:	2f 30       	cpi	r18, 0x0F	; 15
     e76:	31 05       	cpc	r19, r1
     e78:	a9 f6       	brne	.-86     	; 0xe24 <__stack+0x525>
                    }
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
     e7a:	d1 01       	movw	r26, r2
     e7c:	15 96       	adiw	r26, 0x05	; 5
     e7e:	cc 92       	st	X, r12
     e80:	15 97       	sbiw	r26, 0x05	; 5
     e82:	16 96       	adiw	r26, 0x06	; 6
     e84:	dc 92       	st	X, r13
     e86:	16 97       	sbiw	r26, 0x06	; 6
     e88:	17 96       	adiw	r26, 0x07	; 7
     e8a:	ec 92       	st	X, r14
     e8c:	17 97       	sbiw	r26, 0x07	; 7
     e8e:	18 96       	adiw	r26, 0x08	; 8
     e90:	fc 92       	st	X, r15
     e92:	18 97       	sbiw	r26, 0x08	; 8

                if ( position.x == finishPos.x && position.y == finishPos.y )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
                    this->reverseDirection();
                    matrix[ position.x ][ position.y ].isVisited	= true;
     e94:	2d 91       	ld	r18, X+
     e96:	3c 91       	ld	r19, X
     e98:	11 97       	sbiw	r26, 0x01	; 1
     e9a:	12 96       	adiw	r26, 0x02	; 2
     e9c:	8d 91       	ld	r24, X+
     e9e:	9c 91       	ld	r25, X
     ea0:	13 97       	sbiw	r26, 0x03	; 3
     ea2:	ac 01       	movw	r20, r24
     ea4:	44 0f       	add	r20, r20
     ea6:	55 1f       	adc	r21, r21
     ea8:	84 0f       	add	r24, r20
     eaa:	95 1f       	adc	r25, r21
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	4a e5       	ldi	r20, 0x5A	; 90
     eb2:	42 9f       	mul	r20, r18
     eb4:	f0 01       	movw	r30, r0
     eb6:	43 9f       	mul	r20, r19
     eb8:	f0 0d       	add	r31, r0
     eba:	11 24       	eor	r1, r1
     ebc:	8e 0f       	add	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	fc 01       	movw	r30, r24
     ec2:	e3 51       	subi	r30, 0x13	; 19
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	85 83       	std	Z+5, r24	; 0x05
     eca:	6b cb       	rjmp	.-2346   	; 0x5a2 <_ZN5Robot8mainMenuEv+0x13e>
            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );

            if ( nextPos == position )
            {
                clear();
     ecc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
                print( "here" );
     ed0:	86 e8       	ldi	r24, 0x86	; 134
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
                clear();
     ed8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	e4 e1       	ldi	r30, 0x14	; 20
     ee0:	f1 e0       	ldi	r31, 0x01	; 1
     ee2:	ab a9       	ldd	r26, Y+51	; 0x33
     ee4:	bc a9       	ldd	r27, Y+52	; 0x34
     ee6:	01 90       	ld	r0, Z+
     ee8:	0d 92       	st	X+, r0
     eea:	8a 95       	dec	r24
     eec:	e1 f7       	brne	.-8      	; 0xee6 <__stack+0x5e7>
            short	minDist					= getDist( from, to );
     eee:	6f a9       	ldd	r22, Y+55	; 0x37
     ef0:	78 ad       	ldd	r23, Y+56	; 0x38
     ef2:	86 2f       	mov	r24, r22
     ef4:	97 2f       	mov	r25, r23
     ef6:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
     efa:	7c 01       	movw	r14, r24
            Point2D	minPos( from );
     efc:	f1 01       	movw	r30, r2
     efe:	40 80       	ld	r4, Z
     f00:	51 80       	ldd	r5, Z+1	; 0x01
     f02:	62 80       	ldd	r6, Z+2	; 0x02
     f04:	73 80       	ldd	r7, Z+3	; 0x03
     f06:	8e 01       	movw	r16, r28
     f08:	0f 5f       	subi	r16, 0xFF	; 255
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	df a8       	ldd	r13, Y+55	; 0x37
     f0e:	c8 ac       	ldd	r12, Y+56	; 0x38
     f10:	bf a4       	ldd	r11, Y+47	; 0x2f
     f12:	a8 a8       	ldd	r10, Y+48	; 0x30
     f14:	a7 cb       	rjmp	.-2226   	; 0x664 <_ZN5Robot8mainMenuEv+0x200>

00000f16 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     f16:	fb 01       	movw	r30, r22
     f18:	40 81       	ld	r20, Z
     f1a:	51 81       	ldd	r21, Z+1	; 0x01
     f1c:	4f 30       	cpi	r20, 0x0F	; 15
     f1e:	51 05       	cpc	r21, r1
     f20:	e8 f4       	brcc	.+58     	; 0xf5c <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x46>
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	8f 30       	cpi	r24, 0x0F	; 15
     f28:	91 05       	cpc	r25, r1
     f2a:	d8 f0       	brcs	.+54     	; 0xf62 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x4c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f e7       	ldi	r25, 0x7F	; 127
     f30:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
     f32:	9c 01       	movw	r18, r24
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	2a e5       	ldi	r18, 0x5A	; 90
     f42:	24 9f       	mul	r18, r20
     f44:	f0 01       	movw	r30, r0
     f46:	25 9f       	mul	r18, r21
     f48:	f0 0d       	add	r31, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	8e 0f       	add	r24, r30
     f4e:	9f 1f       	adc	r25, r31
     f50:	fc 01       	movw	r30, r24
     f52:	e3 51       	subi	r30, 0x13	; 19
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f e7       	ldi	r25, 0x7F	; 127
     f60:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
     f62:	fc 01       	movw	r30, r24
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	6a e5       	ldi	r22, 0x5A	; 90
     f72:	64 9f       	mul	r22, r20
     f74:	90 01       	movw	r18, r0
     f76:	65 9f       	mul	r22, r21
     f78:	30 0d       	add	r19, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	e3 51       	subi	r30, 0x13	; 19
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	25 81       	ldd	r18, Z+5	; 0x05
     f86:	21 11       	cpse	r18, r1
     f88:	d4 cf       	rjmp	.-88     	; 0xf32 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x1c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9f e7       	ldi	r25, 0x7F	; 127
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
     f8e:	08 95       	ret

00000f90 <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	63 97       	sbiw	r28, 0x13	; 19
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     fa4:	85 e0       	ldi	r24, 0x05	; 5
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	1c 82       	std	Y+4, r1	; 0x04
     fae:	1b 82       	std	Y+3, r1	; 0x03

    public:
        Robot()
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
     fb0:	1d 82       	std	Y+5, r1	; 0x05
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     fb2:	9f 83       	std	Y+7, r25	; 0x07
     fb4:	8e 83       	std	Y+6, r24	; 0x06
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	99 87       	std	Y+9, r25	; 0x09
     fbc:	88 87       	std	Y+8, r24	; 0x08
        {}

        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
     fbe:	80 ed       	ldi	r24, 0xD0	; 208
     fc0:	97 e0       	ldi	r25, 0x07	; 7
     fc2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <pololu_3pi_init>

            set_motors( 0, 0 );
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 fd 10 	call	0x21fa	; 0x21fa <set_motors>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     fd2:	0e 94 9f 0b 	call	0x173e	; 0x173e <read_battery_millivolts_3pi>
     fd6:	8c 01       	movw	r16, r24

            // Display battery voltage and wait two seconds
            unsigned short bat = read_battery_millivolts();
            clear();
     fd8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <clear>
            print_long( bat );
     fdc:	b8 01       	movw	r22, r16
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 24 10 	call	0x2048	; 0x2048 <print_long>
            print( "mV" );
     fe6:	8b e8       	ldi	r24, 0x8B	; 139
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <print>
            delay_ms( 2000 );
     fee:	80 ed       	ldi	r24, 0xD0	; 208
     ff0:	97 e0       	ldi	r25, 0x07	; 7
     ff2:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>

            this->mainMenu();
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	0e 94 32 02 	call	0x464	; 0x464 <_ZN5Robot8mainMenuEv>

00000ffe <_GLOBAL__sub_I_matrix>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
     ffe:	4d ee       	ldi	r20, 0xED	; 237
    1000:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( SHRT_MAX )
            , distToFinish( SHRT_MAX )
            , isObstacle( false )
            , isVisited( false )
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f e7       	ldi	r25, 0x7F	; 127
    1006:	fa 01       	movw	r30, r20
    1008:	46 5a       	subi	r20, 0xA6	; 166
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	9a 01       	movw	r18, r20
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	80 83       	st	Z, r24
    1012:	93 83       	std	Z+3, r25	; 0x03
    1014:	82 83       	std	Z+2, r24	; 0x02
    1016:	14 82       	std	Z+4, r1	; 0x04
    1018:	15 82       	std	Z+5, r1	; 0x05
    101a:	36 96       	adiw	r30, 0x06	; 6
            isObstacle		= other.isObstacle;
        }
};

typedef short ( *getDistFunc )( const Point2D&, const Point2D& );
Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    101c:	e2 17       	cp	r30, r18
    101e:	f3 07       	cpc	r31, r19
    1020:	b1 f7       	brne	.-20     	; 0x100e <_GLOBAL__sub_I_matrix+0x10>
    1022:	27 e0       	ldi	r18, 0x07	; 7
    1024:	43 33       	cpi	r20, 0x33	; 51
    1026:	52 07       	cpc	r21, r18
    1028:	71 f7       	brne	.-36     	; 0x1006 <_GLOBAL__sub_I_matrix+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    102a:	08 95       	ret

0000102c <atan>:
    102c:	df 93       	push	r29
    102e:	dd 27       	eor	r29, r29
    1030:	b9 2f       	mov	r27, r25
    1032:	bf 77       	andi	r27, 0x7F	; 127
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	16 16       	cp	r1, r22
    103a:	17 06       	cpc	r1, r23
    103c:	48 07       	cpc	r20, r24
    103e:	5b 07       	cpc	r21, r27
    1040:	18 f4       	brcc	.+6      	; 0x1048 <atan+0x1c>
    1042:	d9 2f       	mov	r29, r25
    1044:	0e 94 a2 09 	call	0x1344	; 0x1344 <inverse>
    1048:	9f 93       	push	r25
    104a:	8f 93       	push	r24
    104c:	7f 93       	push	r23
    104e:	6f 93       	push	r22
    1050:	0e 94 3b 0a 	call	0x1476	; 0x1476 <square>
    1054:	e8 e7       	ldi	r30, 0x78	; 120
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_powser>
    105c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_round>
    1060:	2f 91       	pop	r18
    1062:	3f 91       	pop	r19
    1064:	4f 91       	pop	r20
    1066:	5f 91       	pop	r21
    1068:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3x>
    106c:	dd 23       	and	r29, r29
    106e:	51 f0       	breq	.+20     	; 0x1084 <atan+0x58>
    1070:	90 58       	subi	r25, 0x80	; 128
    1072:	a2 ea       	ldi	r26, 0xA2	; 162
    1074:	2a ed       	ldi	r18, 0xDA	; 218
    1076:	3f e0       	ldi	r19, 0x0F	; 15
    1078:	49 ec       	ldi	r20, 0xC9	; 201
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	d0 78       	andi	r29, 0x80	; 128
    107e:	5d 27       	eor	r21, r29
    1080:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__addsf3x>
    1084:	df 91       	pop	r29
    1086:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_round>

0000108a <__divsf3>:
    108a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__divsf3x>
    108e:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_round>
    1092:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_pscB>
    1096:	58 f0       	brcs	.+22     	; 0x10ae <__divsf3+0x24>
    1098:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_pscA>
    109c:	40 f0       	brcs	.+16     	; 0x10ae <__divsf3+0x24>
    109e:	29 f4       	brne	.+10     	; 0x10aa <__divsf3+0x20>
    10a0:	5f 3f       	cpi	r21, 0xFF	; 255
    10a2:	29 f0       	breq	.+10     	; 0x10ae <__divsf3+0x24>
    10a4:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_inf>
    10a8:	51 11       	cpse	r21, r1
    10aa:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_szero>
    10ae:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_nan>

000010b2 <__divsf3x>:
    10b2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fp_split3>
    10b6:	68 f3       	brcs	.-38     	; 0x1092 <__divsf3+0x8>

000010b8 <__divsf3_pse>:
    10b8:	99 23       	and	r25, r25
    10ba:	b1 f3       	breq	.-20     	; 0x10a8 <__divsf3+0x1e>
    10bc:	55 23       	and	r21, r21
    10be:	91 f3       	breq	.-28     	; 0x10a4 <__divsf3+0x1a>
    10c0:	95 1b       	sub	r25, r21
    10c2:	55 0b       	sbc	r21, r21
    10c4:	bb 27       	eor	r27, r27
    10c6:	aa 27       	eor	r26, r26
    10c8:	62 17       	cp	r22, r18
    10ca:	73 07       	cpc	r23, r19
    10cc:	84 07       	cpc	r24, r20
    10ce:	38 f0       	brcs	.+14     	; 0x10de <__divsf3_pse+0x26>
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	44 1f       	adc	r20, r20
    10da:	aa 1f       	adc	r26, r26
    10dc:	a9 f3       	breq	.-22     	; 0x10c8 <__divsf3_pse+0x10>
    10de:	35 d0       	rcall	.+106    	; 0x114a <__divsf3_pse+0x92>
    10e0:	0e 2e       	mov	r0, r30
    10e2:	3a f0       	brmi	.+14     	; 0x10f2 <__divsf3_pse+0x3a>
    10e4:	e0 e8       	ldi	r30, 0x80	; 128
    10e6:	32 d0       	rcall	.+100    	; 0x114c <__divsf3_pse+0x94>
    10e8:	91 50       	subi	r25, 0x01	; 1
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	e6 95       	lsr	r30
    10ee:	00 1c       	adc	r0, r0
    10f0:	ca f7       	brpl	.-14     	; 0x10e4 <__divsf3_pse+0x2c>
    10f2:	2b d0       	rcall	.+86     	; 0x114a <__divsf3_pse+0x92>
    10f4:	fe 2f       	mov	r31, r30
    10f6:	29 d0       	rcall	.+82     	; 0x114a <__divsf3_pse+0x92>
    10f8:	66 0f       	add	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	bb 1f       	adc	r27, r27
    1100:	26 17       	cp	r18, r22
    1102:	37 07       	cpc	r19, r23
    1104:	48 07       	cpc	r20, r24
    1106:	ab 07       	cpc	r26, r27
    1108:	b0 e8       	ldi	r27, 0x80	; 128
    110a:	09 f0       	breq	.+2      	; 0x110e <__divsf3_pse+0x56>
    110c:	bb 0b       	sbc	r27, r27
    110e:	80 2d       	mov	r24, r0
    1110:	bf 01       	movw	r22, r30
    1112:	ff 27       	eor	r31, r31
    1114:	93 58       	subi	r25, 0x83	; 131
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	3a f0       	brmi	.+14     	; 0x1128 <__divsf3_pse+0x70>
    111a:	9e 3f       	cpi	r25, 0xFE	; 254
    111c:	51 05       	cpc	r21, r1
    111e:	78 f0       	brcs	.+30     	; 0x113e <__divsf3_pse+0x86>
    1120:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_inf>
    1124:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_szero>
    1128:	5f 3f       	cpi	r21, 0xFF	; 255
    112a:	e4 f3       	brlt	.-8      	; 0x1124 <__divsf3_pse+0x6c>
    112c:	98 3e       	cpi	r25, 0xE8	; 232
    112e:	d4 f3       	brlt	.-12     	; 0x1124 <__divsf3_pse+0x6c>
    1130:	86 95       	lsr	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f7 95       	ror	r31
    113a:	9f 5f       	subi	r25, 0xFF	; 255
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__divsf3_pse+0x78>
    113e:	88 0f       	add	r24, r24
    1140:	91 1d       	adc	r25, r1
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret
    114a:	e1 e0       	ldi	r30, 0x01	; 1
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	bb 1f       	adc	r27, r27
    1154:	62 17       	cp	r22, r18
    1156:	73 07       	cpc	r23, r19
    1158:	84 07       	cpc	r24, r20
    115a:	ba 07       	cpc	r27, r26
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__divsf3_pse+0xae>
    115e:	62 1b       	sub	r22, r18
    1160:	73 0b       	sbc	r23, r19
    1162:	84 0b       	sbc	r24, r20
    1164:	ba 0b       	sbc	r27, r26
    1166:	ee 1f       	adc	r30, r30
    1168:	88 f7       	brcc	.-30     	; 0x114c <__divsf3_pse+0x94>
    116a:	e0 95       	com	r30
    116c:	08 95       	ret

0000116e <__fixsfsi>:
    116e:	0e 94 be 08 	call	0x117c	; 0x117c <__fixunssfsi>
    1172:	68 94       	set
    1174:	b1 11       	cpse	r27, r1
    1176:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_szero>
    117a:	08 95       	ret

0000117c <__fixunssfsi>:
    117c:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_splitA>
    1180:	88 f0       	brcs	.+34     	; 0x11a4 <__fixunssfsi+0x28>
    1182:	9f 57       	subi	r25, 0x7F	; 127
    1184:	98 f0       	brcs	.+38     	; 0x11ac <__fixunssfsi+0x30>
    1186:	b9 2f       	mov	r27, r25
    1188:	99 27       	eor	r25, r25
    118a:	b7 51       	subi	r27, 0x17	; 23
    118c:	b0 f0       	brcs	.+44     	; 0x11ba <__fixunssfsi+0x3e>
    118e:	e1 f0       	breq	.+56     	; 0x11c8 <__fixunssfsi+0x4c>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	1a f0       	brmi	.+6      	; 0x11a0 <__fixunssfsi+0x24>
    119a:	ba 95       	dec	r27
    119c:	c9 f7       	brne	.-14     	; 0x1190 <__fixunssfsi+0x14>
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <__fixunssfsi+0x4c>
    11a0:	b1 30       	cpi	r27, 0x01	; 1
    11a2:	91 f0       	breq	.+36     	; 0x11c8 <__fixunssfsi+0x4c>
    11a4:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_zero>
    11a8:	b1 e0       	ldi	r27, 0x01	; 1
    11aa:	08 95       	ret
    11ac:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_zero>
    11b0:	67 2f       	mov	r22, r23
    11b2:	78 2f       	mov	r23, r24
    11b4:	88 27       	eor	r24, r24
    11b6:	b8 5f       	subi	r27, 0xF8	; 248
    11b8:	39 f0       	breq	.+14     	; 0x11c8 <__fixunssfsi+0x4c>
    11ba:	b9 3f       	cpi	r27, 0xF9	; 249
    11bc:	cc f3       	brlt	.-14     	; 0x11b0 <__fixunssfsi+0x34>
    11be:	86 95       	lsr	r24
    11c0:	77 95       	ror	r23
    11c2:	67 95       	ror	r22
    11c4:	b3 95       	inc	r27
    11c6:	d9 f7       	brne	.-10     	; 0x11be <__fixunssfsi+0x42>
    11c8:	3e f4       	brtc	.+14     	; 0x11d8 <__fixunssfsi+0x5c>
    11ca:	90 95       	com	r25
    11cc:	80 95       	com	r24
    11ce:	70 95       	com	r23
    11d0:	61 95       	neg	r22
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	8f 4f       	sbci	r24, 0xFF	; 255
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	08 95       	ret

000011da <__floatunsisf>:
    11da:	e8 94       	clt
    11dc:	09 c0       	rjmp	.+18     	; 0x11f0 <__floatsisf+0x12>

000011de <__floatsisf>:
    11de:	97 fb       	bst	r25, 7
    11e0:	3e f4       	brtc	.+14     	; 0x11f0 <__floatsisf+0x12>
    11e2:	90 95       	com	r25
    11e4:	80 95       	com	r24
    11e6:	70 95       	com	r23
    11e8:	61 95       	neg	r22
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	8f 4f       	sbci	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	99 23       	and	r25, r25
    11f2:	a9 f0       	breq	.+42     	; 0x121e <__floatsisf+0x40>
    11f4:	f9 2f       	mov	r31, r25
    11f6:	96 e9       	ldi	r25, 0x96	; 150
    11f8:	bb 27       	eor	r27, r27
    11fa:	93 95       	inc	r25
    11fc:	f6 95       	lsr	r31
    11fe:	87 95       	ror	r24
    1200:	77 95       	ror	r23
    1202:	67 95       	ror	r22
    1204:	b7 95       	ror	r27
    1206:	f1 11       	cpse	r31, r1
    1208:	f8 cf       	rjmp	.-16     	; 0x11fa <__floatsisf+0x1c>
    120a:	fa f4       	brpl	.+62     	; 0x124a <__floatsisf+0x6c>
    120c:	bb 0f       	add	r27, r27
    120e:	11 f4       	brne	.+4      	; 0x1214 <__floatsisf+0x36>
    1210:	60 ff       	sbrs	r22, 0
    1212:	1b c0       	rjmp	.+54     	; 0x124a <__floatsisf+0x6c>
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	16 c0       	rjmp	.+44     	; 0x124a <__floatsisf+0x6c>
    121e:	88 23       	and	r24, r24
    1220:	11 f0       	breq	.+4      	; 0x1226 <__floatsisf+0x48>
    1222:	96 e9       	ldi	r25, 0x96	; 150
    1224:	11 c0       	rjmp	.+34     	; 0x1248 <__floatsisf+0x6a>
    1226:	77 23       	and	r23, r23
    1228:	21 f0       	breq	.+8      	; 0x1232 <__floatsisf+0x54>
    122a:	9e e8       	ldi	r25, 0x8E	; 142
    122c:	87 2f       	mov	r24, r23
    122e:	76 2f       	mov	r23, r22
    1230:	05 c0       	rjmp	.+10     	; 0x123c <__floatsisf+0x5e>
    1232:	66 23       	and	r22, r22
    1234:	71 f0       	breq	.+28     	; 0x1252 <__floatsisf+0x74>
    1236:	96 e8       	ldi	r25, 0x86	; 134
    1238:	86 2f       	mov	r24, r22
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	2a f0       	brmi	.+10     	; 0x124a <__floatsisf+0x6c>
    1240:	9a 95       	dec	r25
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	da f7       	brpl	.-10     	; 0x1240 <__floatsisf+0x62>
    124a:	88 0f       	add	r24, r24
    124c:	96 95       	lsr	r25
    124e:	87 95       	ror	r24
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__fp_inf>:
    1254:	97 f9       	bld	r25, 7
    1256:	9f 67       	ori	r25, 0x7F	; 127
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	08 95       	ret

00001260 <__fp_nan>:
    1260:	9f ef       	ldi	r25, 0xFF	; 255
    1262:	80 ec       	ldi	r24, 0xC0	; 192
    1264:	08 95       	ret

00001266 <__fp_powser>:
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	1f 93       	push	r17
    126c:	0f 93       	push	r16
    126e:	ff 92       	push	r15
    1270:	ef 92       	push	r14
    1272:	df 92       	push	r13
    1274:	7b 01       	movw	r14, r22
    1276:	8c 01       	movw	r16, r24
    1278:	68 94       	set
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <__fp_powser+0x22>
    127c:	da 2e       	mov	r13, r26
    127e:	ef 01       	movw	r28, r30
    1280:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3x>
    1284:	fe 01       	movw	r30, r28
    1286:	e8 94       	clt
    1288:	a5 91       	lpm	r26, Z+
    128a:	25 91       	lpm	r18, Z+
    128c:	35 91       	lpm	r19, Z+
    128e:	45 91       	lpm	r20, Z+
    1290:	55 91       	lpm	r21, Z+
    1292:	a6 f3       	brts	.-24     	; 0x127c <__fp_powser+0x16>
    1294:	ef 01       	movw	r28, r30
    1296:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__addsf3x>
    129a:	fe 01       	movw	r30, r28
    129c:	97 01       	movw	r18, r14
    129e:	a8 01       	movw	r20, r16
    12a0:	da 94       	dec	r13
    12a2:	69 f7       	brne	.-38     	; 0x127e <__fp_powser+0x18>
    12a4:	df 90       	pop	r13
    12a6:	ef 90       	pop	r14
    12a8:	ff 90       	pop	r15
    12aa:	0f 91       	pop	r16
    12ac:	1f 91       	pop	r17
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <__fp_pscA>:
    12b4:	00 24       	eor	r0, r0
    12b6:	0a 94       	dec	r0
    12b8:	16 16       	cp	r1, r22
    12ba:	17 06       	cpc	r1, r23
    12bc:	18 06       	cpc	r1, r24
    12be:	09 06       	cpc	r0, r25
    12c0:	08 95       	ret

000012c2 <__fp_pscB>:
    12c2:	00 24       	eor	r0, r0
    12c4:	0a 94       	dec	r0
    12c6:	12 16       	cp	r1, r18
    12c8:	13 06       	cpc	r1, r19
    12ca:	14 06       	cpc	r1, r20
    12cc:	05 06       	cpc	r0, r21
    12ce:	08 95       	ret

000012d0 <__fp_round>:
    12d0:	09 2e       	mov	r0, r25
    12d2:	03 94       	inc	r0
    12d4:	00 0c       	add	r0, r0
    12d6:	11 f4       	brne	.+4      	; 0x12dc <__fp_round+0xc>
    12d8:	88 23       	and	r24, r24
    12da:	52 f0       	brmi	.+20     	; 0x12f0 <__fp_round+0x20>
    12dc:	bb 0f       	add	r27, r27
    12de:	40 f4       	brcc	.+16     	; 0x12f0 <__fp_round+0x20>
    12e0:	bf 2b       	or	r27, r31
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <__fp_round+0x18>
    12e4:	60 ff       	sbrs	r22, 0
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <__fp_round+0x20>
    12e8:	6f 5f       	subi	r22, 0xFF	; 255
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	08 95       	ret

000012f2 <__fp_split3>:
    12f2:	57 fd       	sbrc	r21, 7
    12f4:	90 58       	subi	r25, 0x80	; 128
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	59 f0       	breq	.+22     	; 0x1312 <__fp_splitA+0x10>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	71 f0       	breq	.+28     	; 0x131c <__fp_splitA+0x1a>
    1300:	47 95       	ror	r20

00001302 <__fp_splitA>:
    1302:	88 0f       	add	r24, r24
    1304:	97 fb       	bst	r25, 7
    1306:	99 1f       	adc	r25, r25
    1308:	61 f0       	breq	.+24     	; 0x1322 <__fp_splitA+0x20>
    130a:	9f 3f       	cpi	r25, 0xFF	; 255
    130c:	79 f0       	breq	.+30     	; 0x132c <__fp_splitA+0x2a>
    130e:	87 95       	ror	r24
    1310:	08 95       	ret
    1312:	12 16       	cp	r1, r18
    1314:	13 06       	cpc	r1, r19
    1316:	14 06       	cpc	r1, r20
    1318:	55 1f       	adc	r21, r21
    131a:	f2 cf       	rjmp	.-28     	; 0x1300 <__fp_split3+0xe>
    131c:	46 95       	lsr	r20
    131e:	f1 df       	rcall	.-30     	; 0x1302 <__fp_splitA>
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <__fp_splitA+0x30>
    1322:	16 16       	cp	r1, r22
    1324:	17 06       	cpc	r1, r23
    1326:	18 06       	cpc	r1, r24
    1328:	99 1f       	adc	r25, r25
    132a:	f1 cf       	rjmp	.-30     	; 0x130e <__fp_splitA+0xc>
    132c:	86 95       	lsr	r24
    132e:	71 05       	cpc	r23, r1
    1330:	61 05       	cpc	r22, r1
    1332:	08 94       	sec
    1334:	08 95       	ret

00001336 <__fp_zero>:
    1336:	e8 94       	clt

00001338 <__fp_szero>:
    1338:	bb 27       	eor	r27, r27
    133a:	66 27       	eor	r22, r22
    133c:	77 27       	eor	r23, r23
    133e:	cb 01       	movw	r24, r22
    1340:	97 f9       	bld	r25, 7
    1342:	08 95       	ret

00001344 <inverse>:
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	9f e3       	ldi	r25, 0x3F	; 63
    1350:	0c 94 45 08 	jmp	0x108a	; 0x108a <__divsf3>

00001354 <__mulsf3>:
    1354:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3x>
    1358:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_round>
    135c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_pscA>
    1360:	38 f0       	brcs	.+14     	; 0x1370 <__mulsf3+0x1c>
    1362:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_pscB>
    1366:	20 f0       	brcs	.+8      	; 0x1370 <__mulsf3+0x1c>
    1368:	95 23       	and	r25, r21
    136a:	11 f0       	breq	.+4      	; 0x1370 <__mulsf3+0x1c>
    136c:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_inf>
    1370:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_nan>
    1374:	11 24       	eor	r1, r1
    1376:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_szero>

0000137a <__mulsf3x>:
    137a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fp_split3>
    137e:	70 f3       	brcs	.-36     	; 0x135c <__mulsf3+0x8>

00001380 <__mulsf3_pse>:
    1380:	95 9f       	mul	r25, r21
    1382:	c1 f3       	breq	.-16     	; 0x1374 <__mulsf3+0x20>
    1384:	95 0f       	add	r25, r21
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	55 1f       	adc	r21, r21
    138a:	62 9f       	mul	r22, r18
    138c:	f0 01       	movw	r30, r0
    138e:	72 9f       	mul	r23, r18
    1390:	bb 27       	eor	r27, r27
    1392:	f0 0d       	add	r31, r0
    1394:	b1 1d       	adc	r27, r1
    1396:	63 9f       	mul	r22, r19
    1398:	aa 27       	eor	r26, r26
    139a:	f0 0d       	add	r31, r0
    139c:	b1 1d       	adc	r27, r1
    139e:	aa 1f       	adc	r26, r26
    13a0:	64 9f       	mul	r22, r20
    13a2:	66 27       	eor	r22, r22
    13a4:	b0 0d       	add	r27, r0
    13a6:	a1 1d       	adc	r26, r1
    13a8:	66 1f       	adc	r22, r22
    13aa:	82 9f       	mul	r24, r18
    13ac:	22 27       	eor	r18, r18
    13ae:	b0 0d       	add	r27, r0
    13b0:	a1 1d       	adc	r26, r1
    13b2:	62 1f       	adc	r22, r18
    13b4:	73 9f       	mul	r23, r19
    13b6:	b0 0d       	add	r27, r0
    13b8:	a1 1d       	adc	r26, r1
    13ba:	62 1f       	adc	r22, r18
    13bc:	83 9f       	mul	r24, r19
    13be:	a0 0d       	add	r26, r0
    13c0:	61 1d       	adc	r22, r1
    13c2:	22 1f       	adc	r18, r18
    13c4:	74 9f       	mul	r23, r20
    13c6:	33 27       	eor	r19, r19
    13c8:	a0 0d       	add	r26, r0
    13ca:	61 1d       	adc	r22, r1
    13cc:	23 1f       	adc	r18, r19
    13ce:	84 9f       	mul	r24, r20
    13d0:	60 0d       	add	r22, r0
    13d2:	21 1d       	adc	r18, r1
    13d4:	82 2f       	mov	r24, r18
    13d6:	76 2f       	mov	r23, r22
    13d8:	6a 2f       	mov	r22, r26
    13da:	11 24       	eor	r1, r1
    13dc:	9f 57       	subi	r25, 0x7F	; 127
    13de:	50 40       	sbci	r21, 0x00	; 0
    13e0:	9a f0       	brmi	.+38     	; 0x1408 <__mulsf3_pse+0x88>
    13e2:	f1 f0       	breq	.+60     	; 0x1420 <__mulsf3_pse+0xa0>
    13e4:	88 23       	and	r24, r24
    13e6:	4a f0       	brmi	.+18     	; 0x13fa <__mulsf3_pse+0x7a>
    13e8:	ee 0f       	add	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	bb 1f       	adc	r27, r27
    13ee:	66 1f       	adc	r22, r22
    13f0:	77 1f       	adc	r23, r23
    13f2:	88 1f       	adc	r24, r24
    13f4:	91 50       	subi	r25, 0x01	; 1
    13f6:	50 40       	sbci	r21, 0x00	; 0
    13f8:	a9 f7       	brne	.-22     	; 0x13e4 <__mulsf3_pse+0x64>
    13fa:	9e 3f       	cpi	r25, 0xFE	; 254
    13fc:	51 05       	cpc	r21, r1
    13fe:	80 f0       	brcs	.+32     	; 0x1420 <__mulsf3_pse+0xa0>
    1400:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_inf>
    1404:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_szero>
    1408:	5f 3f       	cpi	r21, 0xFF	; 255
    140a:	e4 f3       	brlt	.-8      	; 0x1404 <__mulsf3_pse+0x84>
    140c:	98 3e       	cpi	r25, 0xE8	; 232
    140e:	d4 f3       	brlt	.-12     	; 0x1404 <__mulsf3_pse+0x84>
    1410:	86 95       	lsr	r24
    1412:	77 95       	ror	r23
    1414:	67 95       	ror	r22
    1416:	b7 95       	ror	r27
    1418:	f7 95       	ror	r31
    141a:	e7 95       	ror	r30
    141c:	9f 5f       	subi	r25, 0xFF	; 255
    141e:	c1 f7       	brne	.-16     	; 0x1410 <__mulsf3_pse+0x90>
    1420:	fe 2b       	or	r31, r30
    1422:	88 0f       	add	r24, r24
    1424:	91 1d       	adc	r25, r1
    1426:	96 95       	lsr	r25
    1428:	87 95       	ror	r24
    142a:	97 f9       	bld	r25, 7
    142c:	08 95       	ret

0000142e <round>:
    142e:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_splitA>
    1432:	e8 f0       	brcs	.+58     	; 0x146e <round+0x40>
    1434:	9e 37       	cpi	r25, 0x7E	; 126
    1436:	e8 f0       	brcs	.+58     	; 0x1472 <round+0x44>
    1438:	96 39       	cpi	r25, 0x96	; 150
    143a:	b8 f4       	brcc	.+46     	; 0x146a <round+0x3c>
    143c:	9e 38       	cpi	r25, 0x8E	; 142
    143e:	48 f4       	brcc	.+18     	; 0x1452 <round+0x24>
    1440:	67 2f       	mov	r22, r23
    1442:	78 2f       	mov	r23, r24
    1444:	88 27       	eor	r24, r24
    1446:	98 5f       	subi	r25, 0xF8	; 248
    1448:	f9 cf       	rjmp	.-14     	; 0x143c <round+0xe>
    144a:	86 95       	lsr	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	93 95       	inc	r25
    1452:	95 39       	cpi	r25, 0x95	; 149
    1454:	d0 f3       	brcs	.-12     	; 0x144a <round+0x1c>
    1456:	b6 2f       	mov	r27, r22
    1458:	b1 70       	andi	r27, 0x01	; 1
    145a:	6b 0f       	add	r22, r27
    145c:	71 1d       	adc	r23, r1
    145e:	81 1d       	adc	r24, r1
    1460:	20 f4       	brcc	.+8      	; 0x146a <round+0x3c>
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	93 95       	inc	r25
    146a:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_mintl>
    146e:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_mpack>
    1472:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_szero>

00001476 <square>:
    1476:	9b 01       	movw	r18, r22
    1478:	ac 01       	movw	r20, r24
    147a:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__mulsf3>
    147e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fp_pscA>
    1482:	38 f0       	brcs	.+14     	; 0x1492 <square+0x1c>
    1484:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_pscB>
    1488:	20 f0       	brcs	.+8      	; 0x1492 <square+0x1c>
    148a:	39 f4       	brne	.+14     	; 0x149a <square+0x24>
    148c:	9f 3f       	cpi	r25, 0xFF	; 255
    148e:	19 f4       	brne	.+6      	; 0x1496 <square+0x20>
    1490:	26 f4       	brtc	.+8      	; 0x149a <square+0x24>
    1492:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_nan>
    1496:	0e f4       	brtc	.+2      	; 0x149a <square+0x24>
    1498:	e0 95       	com	r30
    149a:	e7 fb       	bst	r30, 7
    149c:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__fp_inf>

000014a0 <__addsf3x>:
    14a0:	e9 2f       	mov	r30, r25
    14a2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fp_split3>
    14a6:	58 f3       	brcs	.-42     	; 0x147e <square+0x8>
    14a8:	ba 17       	cp	r27, r26
    14aa:	62 07       	cpc	r22, r18
    14ac:	73 07       	cpc	r23, r19
    14ae:	84 07       	cpc	r24, r20
    14b0:	95 07       	cpc	r25, r21
    14b2:	20 f0       	brcs	.+8      	; 0x14bc <__addsf3x+0x1c>
    14b4:	79 f4       	brne	.+30     	; 0x14d4 <__addsf3x+0x34>
    14b6:	a6 f5       	brtc	.+104    	; 0x1520 <__addsf3x+0x80>
    14b8:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_zero>
    14bc:	0e f4       	brtc	.+2      	; 0x14c0 <__addsf3x+0x20>
    14be:	e0 95       	com	r30
    14c0:	0b 2e       	mov	r0, r27
    14c2:	ba 2f       	mov	r27, r26
    14c4:	a0 2d       	mov	r26, r0
    14c6:	0b 01       	movw	r0, r22
    14c8:	b9 01       	movw	r22, r18
    14ca:	90 01       	movw	r18, r0
    14cc:	0c 01       	movw	r0, r24
    14ce:	ca 01       	movw	r24, r20
    14d0:	a0 01       	movw	r20, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	ff 27       	eor	r31, r31
    14d6:	59 1b       	sub	r21, r25
    14d8:	99 f0       	breq	.+38     	; 0x1500 <__addsf3x+0x60>
    14da:	59 3f       	cpi	r21, 0xF9	; 249
    14dc:	50 f4       	brcc	.+20     	; 0x14f2 <__addsf3x+0x52>
    14de:	50 3e       	cpi	r21, 0xE0	; 224
    14e0:	68 f1       	brcs	.+90     	; 0x153c <__addsf3x+0x9c>
    14e2:	1a 16       	cp	r1, r26
    14e4:	f0 40       	sbci	r31, 0x00	; 0
    14e6:	a2 2f       	mov	r26, r18
    14e8:	23 2f       	mov	r18, r19
    14ea:	34 2f       	mov	r19, r20
    14ec:	44 27       	eor	r20, r20
    14ee:	58 5f       	subi	r21, 0xF8	; 248
    14f0:	f3 cf       	rjmp	.-26     	; 0x14d8 <__addsf3x+0x38>
    14f2:	46 95       	lsr	r20
    14f4:	37 95       	ror	r19
    14f6:	27 95       	ror	r18
    14f8:	a7 95       	ror	r26
    14fa:	f0 40       	sbci	r31, 0x00	; 0
    14fc:	53 95       	inc	r21
    14fe:	c9 f7       	brne	.-14     	; 0x14f2 <__addsf3x+0x52>
    1500:	7e f4       	brtc	.+30     	; 0x1520 <__addsf3x+0x80>
    1502:	1f 16       	cp	r1, r31
    1504:	ba 0b       	sbc	r27, r26
    1506:	62 0b       	sbc	r22, r18
    1508:	73 0b       	sbc	r23, r19
    150a:	84 0b       	sbc	r24, r20
    150c:	ba f0       	brmi	.+46     	; 0x153c <__addsf3x+0x9c>
    150e:	91 50       	subi	r25, 0x01	; 1
    1510:	a1 f0       	breq	.+40     	; 0x153a <__addsf3x+0x9a>
    1512:	ff 0f       	add	r31, r31
    1514:	bb 1f       	adc	r27, r27
    1516:	66 1f       	adc	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	c2 f7       	brpl	.-16     	; 0x150e <__addsf3x+0x6e>
    151e:	0e c0       	rjmp	.+28     	; 0x153c <__addsf3x+0x9c>
    1520:	ba 0f       	add	r27, r26
    1522:	62 1f       	adc	r22, r18
    1524:	73 1f       	adc	r23, r19
    1526:	84 1f       	adc	r24, r20
    1528:	48 f4       	brcc	.+18     	; 0x153c <__addsf3x+0x9c>
    152a:	87 95       	ror	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b7 95       	ror	r27
    1532:	f7 95       	ror	r31
    1534:	9e 3f       	cpi	r25, 0xFE	; 254
    1536:	08 f0       	brcs	.+2      	; 0x153a <__addsf3x+0x9a>
    1538:	b0 cf       	rjmp	.-160    	; 0x149a <square+0x24>
    153a:	93 95       	inc	r25
    153c:	88 0f       	add	r24, r24
    153e:	08 f0       	brcs	.+2      	; 0x1542 <__addsf3x+0xa2>
    1540:	99 27       	eor	r25, r25
    1542:	ee 0f       	add	r30, r30
    1544:	97 95       	ror	r25
    1546:	87 95       	ror	r24
    1548:	08 95       	ret

0000154a <__fp_mintl>:
    154a:	88 23       	and	r24, r24
    154c:	71 f4       	brne	.+28     	; 0x156a <__fp_mintl+0x20>
    154e:	77 23       	and	r23, r23
    1550:	21 f0       	breq	.+8      	; 0x155a <__fp_mintl+0x10>
    1552:	98 50       	subi	r25, 0x08	; 8
    1554:	87 2b       	or	r24, r23
    1556:	76 2f       	mov	r23, r22
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <__fp_mintl+0x1e>
    155a:	66 23       	and	r22, r22
    155c:	11 f4       	brne	.+4      	; 0x1562 <__fp_mintl+0x18>
    155e:	99 27       	eor	r25, r25
    1560:	0d c0       	rjmp	.+26     	; 0x157c <__fp_mintl+0x32>
    1562:	90 51       	subi	r25, 0x10	; 16
    1564:	86 2b       	or	r24, r22
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	2a f0       	brmi	.+10     	; 0x1576 <__fp_mintl+0x2c>
    156c:	9a 95       	dec	r25
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	da f7       	brpl	.-10     	; 0x156c <__fp_mintl+0x22>
    1576:	88 0f       	add	r24, r24
    1578:	96 95       	lsr	r25
    157a:	87 95       	ror	r24
    157c:	97 f9       	bld	r25, 7
    157e:	08 95       	ret

00001580 <__fp_mpack>:
    1580:	9f 3f       	cpi	r25, 0xFF	; 255
    1582:	31 f0       	breq	.+12     	; 0x1590 <__fp_mpack_finite+0xc>

00001584 <__fp_mpack_finite>:
    1584:	91 50       	subi	r25, 0x01	; 1
    1586:	20 f4       	brcc	.+8      	; 0x1590 <__fp_mpack_finite+0xc>
    1588:	87 95       	ror	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	88 0f       	add	r24, r24
    1592:	91 1d       	adc	r25, r1
    1594:	96 95       	lsr	r25
    1596:	87 95       	ror	r24
    1598:	97 f9       	bld	r25, 7
    159a:	08 95       	ret

0000159c <_ZN15OrangutanAnalog7setModeEh.part.0>:
    159c:	ec e7       	ldi	r30, 0x7C	; 124
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 7d       	andi	r24, 0xDF	; 223
    15a4:	80 83       	st	Z, r24
    15a6:	08 95       	ret

000015a8 <_ZN15OrangutanAnalog7setModeEh>:
    15a8:	81 11       	cpse	r24, r1
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <_ZN15OrangutanAnalog7setModeEh+0xa>
    15ac:	0e 94 ce 0a 	call	0x159c	; 0x159c <_ZN15OrangutanAnalog7setModeEh.part.0>
    15b0:	08 95       	ret
    15b2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    15b6:	80 62       	ori	r24, 0x20	; 32
    15b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    15bc:	08 95       	ret

000015be <_ZN15OrangutanAnalog7getModeEv>:
    15be:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    15c2:	85 fb       	bst	r24, 5
    15c4:	88 27       	eor	r24, r24
    15c6:	80 f9       	bld	r24, 0
    15c8:	08 95       	ret

000015ca <_ZN15OrangutanAnalog16conversionResultEv>:
    15ca:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN15OrangutanAnalog7getModeEv>
    15ce:	88 23       	and	r24, r24
    15d0:	21 f0       	breq	.+8      	; 0x15da <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    15d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	08 95       	ret
    15da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    15de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    15e2:	08 95       	ret

000015e4 <_ZN15OrangutanAnalog15startConversionEhh>:
    15e4:	80 32       	cpi	r24, 0x20	; 32
    15e6:	a0 f4       	brcc	.+40     	; 0x1610 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    15e8:	97 e8       	ldi	r25, 0x87	; 135
    15ea:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    15ee:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    15f2:	66 23       	and	r22, r22
    15f4:	11 f0       	breq	.+4      	; 0x15fa <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    15f6:	90 6c       	ori	r25, 0xC0	; 192
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    15fa:	9f 77       	andi	r25, 0x7F	; 127
    15fc:	90 64       	ori	r25, 0x40	; 64
    15fe:	90 7e       	andi	r25, 0xE0	; 224
    1600:	98 2b       	or	r25, r24
    1602:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1606:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    160a:	80 64       	ori	r24, 0x40	; 64
    160c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1610:	08 95       	ret

00001612 <_ZN15OrangutanAnalog11readAverageEhj>:
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ef e0       	ldi	r30, 0x0F	; 15
    1618:	fb e0       	ldi	r31, 0x0B	; 11
    161a:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__prologue_saves__+0x14>
    161e:	eb 01       	movw	r28, r22
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN15OrangutanAnalog15startConversionEhh>
    1626:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    162a:	86 fd       	sbrc	r24, 6
    162c:	fc cf       	rjmp	.-8      	; 0x1626 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    162e:	8e 01       	movw	r16, r28
    1630:	c1 2c       	mov	r12, r1
    1632:	d1 2c       	mov	r13, r1
    1634:	76 01       	movw	r14, r12
    1636:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    163a:	80 64       	ori	r24, 0x40	; 64
    163c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1640:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1644:	86 fd       	sbrc	r24, 6
    1646:	fc cf       	rjmp	.-8      	; 0x1640 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1648:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN15OrangutanAnalog16conversionResultEv>
    164c:	c8 0e       	add	r12, r24
    164e:	d9 1e       	adc	r13, r25
    1650:	e1 1c       	adc	r14, r1
    1652:	f1 1c       	adc	r15, r1
    1654:	01 50       	subi	r16, 0x01	; 1
    1656:	11 09       	sbc	r17, r1
    1658:	01 15       	cp	r16, r1
    165a:	11 05       	cpc	r17, r1
    165c:	61 f7       	brne	.-40     	; 0x1636 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    165e:	ce 01       	movw	r24, r28
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	c0 34       	cpi	r28, 0x40	; 64
    1666:	d1 05       	cpc	r29, r1
    1668:	38 f4       	brcc	.+14     	; 0x1678 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    166a:	8c 0d       	add	r24, r12
    166c:	9d 1d       	adc	r25, r13
    166e:	be 01       	movw	r22, r28
    1670:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    1674:	cb 01       	movw	r24, r22
    1676:	0e c0       	rjmp	.+28     	; 0x1694 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1678:	a7 01       	movw	r20, r14
    167a:	96 01       	movw	r18, r12
    167c:	28 0f       	add	r18, r24
    167e:	39 1f       	adc	r19, r25
    1680:	41 1d       	adc	r20, r1
    1682:	51 1d       	adc	r21, r1
    1684:	ca 01       	movw	r24, r20
    1686:	b9 01       	movw	r22, r18
    1688:	9e 01       	movw	r18, r28
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__udivmodsi4>
    1692:	c9 01       	movw	r24, r18
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	e8 e0       	ldi	r30, 0x08	; 8
    169a:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__epilogue_restores__+0x14>

0000169e <_ZN15OrangutanAnalog12toMillivoltsEj>:
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    16aa:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    16ae:	9c 01       	movw	r18, r24
    16b0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__umulhisi3>
    16b4:	6b 01       	movw	r12, r22
    16b6:	7c 01       	movw	r14, r24
    16b8:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN15OrangutanAnalog7getModeEv>
    16bc:	88 23       	and	r24, r24
    16be:	59 f0       	breq	.+22     	; 0x16d6 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    16c0:	c7 01       	movw	r24, r14
    16c2:	b6 01       	movw	r22, r12
    16c4:	61 58       	subi	r22, 0x81	; 129
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	2f ef       	ldi	r18, 0xFF	; 255
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	0a c0       	rjmp	.+20     	; 0x16ea <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    16d6:	c7 01       	movw	r24, r14
    16d8:	b6 01       	movw	r22, r12
    16da:	61 50       	subi	r22, 0x01	; 1
    16dc:	7e 4f       	sbci	r23, 0xFE	; 254
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	33 e0       	ldi	r19, 0x03	; 3
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__udivmodsi4>
    16ee:	c9 01       	movw	r24, r18
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	cf 90       	pop	r12
    16f8:	08 95       	ret

000016fa <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    16fa:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN15OrangutanAnalog11readAverageEhj>
    16fe:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZN15OrangutanAnalog12toMillivoltsEj>
    1702:	08 95       	ret

00001704 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN15OrangutanAnalog7getModeEv>
    170e:	18 2f       	mov	r17, r24
    1710:	0e 94 ce 0a 	call	0x159c	; 0x159c <_ZN15OrangutanAnalog7setModeEh.part.0>
    1714:	6a e0       	ldi	r22, 0x0A	; 10
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	86 e0       	ldi	r24, 0x06	; 6
    171a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    171e:	ec 01       	movw	r28, r24
    1720:	81 2f       	mov	r24, r17
    1722:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN15OrangutanAnalog7setModeEh>
    1726:	ce 01       	movw	r24, r28
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	8c 0f       	add	r24, r28
    172e:	9d 1f       	adc	r25, r29
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	96 95       	lsr	r25
    1734:	87 95       	ror	r24
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	08 95       	ret

0000173e <read_battery_millivolts_3pi>:
    173e:	0e 94 82 0b 	call	0x1704	; 0x1704 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1742:	08 95       	ret

00001744 <_ZL16currentCharacterv>:
    1744:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_ZL17use_program_space>
    1748:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__data_end>
    174c:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <__data_end+0x1>
    1750:	99 23       	and	r25, r25
    1752:	11 f0       	breq	.+4      	; 0x1758 <_ZL16currentCharacterv+0x14>
    1754:	84 91       	lpm	r24, Z
    1756:	01 c0       	rjmp	.+2      	; 0x175a <_ZL16currentCharacterv+0x16>
    1758:	80 81       	ld	r24, Z
    175a:	2f eb       	ldi	r18, 0xBF	; 191
    175c:	28 0f       	add	r18, r24
    175e:	2a 31       	cpi	r18, 0x1A	; 26
    1760:	10 f4       	brcc	.+4      	; 0x1766 <_ZL16currentCharacterv+0x22>
    1762:	80 5e       	subi	r24, 0xE0	; 224
    1764:	08 95       	ret
    1766:	80 32       	cpi	r24, 0x20	; 32
    1768:	49 f4       	brne	.+18     	; 0x177c <_ZL16currentCharacterv+0x38>
    176a:	9f 01       	movw	r18, r30
    176c:	2f 5f       	subi	r18, 0xFF	; 255
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1774:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1778:	ef 2b       	or	r30, r31
    177a:	31 f7       	brne	.-52     	; 0x1748 <_ZL16currentCharacterv+0x4>
    177c:	08 95       	ret

0000177e <_ZL9getNumberv>:
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    1788:	c0 e0       	ldi	r28, 0x00	; 0
    178a:	d0 e0       	ldi	r29, 0x00	; 0
    178c:	1a e0       	ldi	r17, 0x0A	; 10
    178e:	90 ed       	ldi	r25, 0xD0	; 208
    1790:	98 0f       	add	r25, r24
    1792:	9a 30       	cpi	r25, 0x0A	; 10
    1794:	b8 f4       	brcc	.+46     	; 0x17c4 <_ZL9getNumberv+0x46>
    1796:	9e 01       	movw	r18, r28
    1798:	12 9f       	mul	r17, r18
    179a:	e0 01       	movw	r28, r0
    179c:	13 9f       	mul	r17, r19
    179e:	d0 0d       	add	r29, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	c8 0f       	add	r28, r24
    17a4:	d1 1d       	adc	r29, r1
    17a6:	87 fd       	sbrc	r24, 7
    17a8:	da 95       	dec	r29
    17aa:	e0 97       	sbiw	r28, 0x30	; 48
    17ac:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
    17b0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <__data_end+0x1>
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__data_end+0x1>
    17ba:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
    17be:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    17c2:	e5 cf       	rjmp	.-54     	; 0x178e <_ZL9getNumberv+0x10>
    17c4:	ce 01       	movw	r24, r28
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	08 95       	ret

000017ce <_ZN15OrangutanBuzzer5init2Ev>:
    17ce:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    17d2:	83 e2       	ldi	r24, 0x23	; 35
    17d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    17d8:	81 e1       	ldi	r24, 0x11	; 17
    17da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    17de:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    17e2:	80 e1       	ldi	r24, 0x10	; 16
    17e4:	97 e2       	ldi	r25, 0x27	; 39
    17e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    17ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    17ee:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    17f2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    17f6:	22 9a       	sbi	0x04, 2	; 4
    17f8:	78 94       	sei
    17fa:	08 95       	ret

000017fc <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	5c 01       	movw	r10, r24
    1814:	8b 01       	movw	r16, r22
    1816:	d4 2e       	mov	r13, r20
    1818:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <buzzerInitialized>
    181c:	81 11       	cpse	r24, r1
    181e:	05 c0       	rjmp	.+10     	; 0x182a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <buzzerInitialized>
    1826:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN15OrangutanBuzzer5init2Ev>
    182a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    182e:	b7 fe       	sbrs	r11, 7
    1830:	05 c0       	rjmp	.+10     	; 0x183c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1832:	e8 94       	clt
    1834:	b7 f8       	bld	r11, 7
    1836:	2a e0       	ldi	r18, 0x0A	; 10
    1838:	f2 2e       	mov	r15, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    183c:	ff 24       	eor	r15, r15
    183e:	f3 94       	inc	r15
    1840:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1844:	2e 2d       	mov	r18, r14
    1846:	28 7f       	andi	r18, 0xF8	; 248
    1848:	e2 2e       	mov	r14, r18
    184a:	48 ec       	ldi	r20, 0xC8	; 200
    184c:	f4 9e       	mul	r15, r20
    184e:	c0 01       	movw	r24, r0
    1850:	11 24       	eor	r1, r1
    1852:	8a 15       	cp	r24, r10
    1854:	9b 05       	cpc	r25, r11
    1856:	e0 f4       	brcc	.+56     	; 0x1890 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1858:	e5 01       	movw	r28, r10
    185a:	51 e1       	ldi	r21, 0x11	; 17
    185c:	a5 16       	cp	r10, r21
    185e:	57 e2       	ldi	r21, 0x27	; 39
    1860:	b5 06       	cpc	r11, r21
    1862:	10 f0       	brcs	.+4      	; 0x1868 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1864:	c0 e1       	ldi	r28, 0x10	; 16
    1866:	d7 e2       	ldi	r29, 0x27	; 39
    1868:	be 01       	movw	r22, r28
    186a:	76 95       	lsr	r23
    186c:	67 95       	ror	r22
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	60 58       	subi	r22, 0x80	; 128
    1874:	79 46       	sbci	r23, 0x69	; 105
    1876:	87 46       	sbci	r24, 0x67	; 103
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	4e 01       	movw	r8, r28
    187c:	a1 2c       	mov	r10, r1
    187e:	b1 2c       	mov	r11, r1
    1880:	a5 01       	movw	r20, r10
    1882:	94 01       	movw	r18, r8
    1884:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__udivmodsi4>
    1888:	59 01       	movw	r10, r18
    188a:	8e 2d       	mov	r24, r14
    188c:	81 60       	ori	r24, 0x01	; 1
    188e:	24 c0       	rjmp	.+72     	; 0x18d8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1890:	c8 e2       	ldi	r28, 0x28	; 40
    1892:	fc 9e       	mul	r15, r28
    1894:	c0 2d       	mov	r28, r0
    1896:	11 24       	eor	r1, r1
    1898:	d0 e0       	ldi	r29, 0x00	; 0
    189a:	ca 15       	cp	r28, r10
    189c:	db 05       	cpc	r29, r11
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    18a0:	e5 01       	movw	r28, r10
    18a2:	be 01       	movw	r22, r28
    18a4:	76 95       	lsr	r23
    18a6:	67 95       	ror	r22
    18a8:	9e 01       	movw	r18, r28
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	8a e0       	ldi	r24, 0x0A	; 10
    18b0:	f8 12       	cpse	r15, r24
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	60 5e       	subi	r22, 0xE0	; 224
    18ba:	73 44       	sbci	r23, 0x43	; 67
    18bc:	81 44       	sbci	r24, 0x41	; 65
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	60 53       	subi	r22, 0x30	; 48
    18c8:	7d 4e       	sbci	r23, 0xED	; 237
    18ca:	8c 4e       	sbci	r24, 0xEC	; 236
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__udivmodsi4>
    18d2:	59 01       	movw	r10, r18
    18d4:	8e 2d       	mov	r24, r14
    18d6:	82 60       	ori	r24, 0x02	; 2
    18d8:	88 2e       	mov	r8, r24
    18da:	2a e0       	ldi	r18, 0x0A	; 10
    18dc:	f2 12       	cpse	r15, r18
    18de:	07 c0       	rjmp	.+14     	; 0x18ee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    18e0:	ce 01       	movw	r24, r28
    18e2:	05 96       	adiw	r24, 0x05	; 5
    18e4:	6a e0       	ldi	r22, 0x0A	; 10
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    18ec:	eb 01       	movw	r28, r22
    18ee:	c8 3e       	cpi	r28, 0xE8	; 232
    18f0:	43 e0       	ldi	r20, 0x03	; 3
    18f2:	d4 07       	cpc	r29, r20
    18f4:	59 f0       	breq	.+22     	; 0x190c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    18f6:	98 01       	movw	r18, r16
    18f8:	de 01       	movw	r26, r28
    18fa:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__umulhisi3>
    18fe:	28 ee       	ldi	r18, 0xE8	; 232
    1900:	33 e0       	ldi	r19, 0x03	; 3
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__divmodsi4>
    190a:	89 01       	movw	r16, r18
    190c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1910:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1914:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1918:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    191c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1920:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1924:	4d 2d       	mov	r20, r13
    1926:	40 31       	cpi	r20, 0x10	; 16
    1928:	08 f0       	brcs	.+2      	; 0x192c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    192a:	4f e0       	ldi	r20, 0x0F	; 15
    192c:	80 e1       	ldi	r24, 0x10	; 16
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	84 1b       	sub	r24, r20
    1932:	91 09       	sbc	r25, r1
    1934:	a9 01       	movw	r20, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1938:	56 95       	lsr	r21
    193a:	47 95       	ror	r20
    193c:	8a 95       	dec	r24
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1940:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1944:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1948:	10 93 96 01 	sts	0x0196, r17	; 0x800196 <_ZL13buzzerTimeout+0x1>
    194c:	00 93 95 01 	sts	0x0195, r16	; 0x800195 <_ZL13buzzerTimeout>
    1950:	86 b3       	in	r24, 0x16	; 22
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	86 bb       	out	0x16, r24	; 22
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	bf 90       	pop	r11
    196c:	af 90       	pop	r10
    196e:	9f 90       	pop	r9
    1970:	8f 90       	pop	r8
    1972:	08 95       	ret

00001974 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	eb 01       	movw	r28, r22
    197a:	8f 3f       	cpi	r24, 0xFF	; 255
    197c:	11 f0       	breq	.+4      	; 0x1982 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    197e:	41 11       	cpse	r20, r1
    1980:	05 c0       	rjmp	.+10     	; 0x198c <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	be 01       	movw	r22, r28
    1986:	88 ee       	ldi	r24, 0xE8	; 232
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	43 c0       	rjmp	.+134    	; 0x1a12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    198c:	81 31       	cpi	r24, 0x11	; 17
    198e:	30 f0       	brcs	.+12     	; 0x199c <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1990:	50 ef       	ldi	r21, 0xF0	; 240
    1992:	58 0f       	add	r21, r24
    1994:	50 36       	cpi	r21, 0x60	; 96
    1996:	18 f0       	brcs	.+6      	; 0x199e <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1998:	5f e5       	ldi	r21, 0x5F	; 95
    199a:	01 c0       	rjmp	.+2      	; 0x199e <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	85 2f       	mov	r24, r21
    19a0:	6c e0       	ldi	r22, 0x0C	; 12
    19a2:	0e 94 c5 14 	call	0x298a	; 0x298a <__udivmodqi4>
    19a6:	68 2f       	mov	r22, r24
    19a8:	74 ef       	ldi	r23, 0xF4	; 244
    19aa:	76 03       	mulsu	r23, r22
    19ac:	90 01       	movw	r18, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	25 0f       	add	r18, r21
    19b2:	31 1d       	adc	r19, r1
    19b4:	2c 30       	cpi	r18, 0x0C	; 12
    19b6:	31 05       	cpc	r19, r1
    19b8:	40 f4       	brcc	.+16     	; 0x19ca <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    19ba:	f9 01       	movw	r30, r18
    19bc:	ee 0f       	add	r30, r30
    19be:	ff 1f       	adc	r31, r31
    19c0:	ec 5c       	subi	r30, 0xCC	; 204
    19c2:	fe 4f       	sbci	r31, 0xFE	; 254
    19c4:	20 81       	ld	r18, Z
    19c6:	31 81       	ldd	r19, Z+1	; 0x01
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	87 30       	cpi	r24, 0x07	; 7
    19d0:	81 f0       	breq	.+32     	; 0x19f2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    19d2:	08 2e       	mov	r0, r24
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	28 f0       	brcs	.+10     	; 0x19ec <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    19e2:	c9 01       	movw	r24, r18
    19e4:	05 96       	adiw	r24, 0x05	; 5
    19e6:	6a e0       	ldi	r22, 0x0A	; 10
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    19ec:	c9 01       	movw	r24, r18
    19ee:	90 58       	subi	r25, 0x80	; 128
    19f0:	0c c0       	rjmp	.+24     	; 0x1a0a <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    19f2:	c9 01       	movw	r24, r18
    19f4:	36 e0       	ldi	r19, 0x06	; 6
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	3a 95       	dec	r19
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    19fe:	02 96       	adiw	r24, 0x02	; 2
    1a00:	65 e0       	ldi	r22, 0x05	; 5
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    1a08:	cb 01       	movw	r24, r22
    1a0a:	40 31       	cpi	r20, 0x10	; 16
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1a0e:	4f e0       	ldi	r20, 0x0F	; 15
    1a10:	be 01       	movw	r22, r28
    1a12:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <_ZL8nextNotev>:
    1a1c:	a2 e0       	ldi	r26, 0x02	; 2
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e4 e1       	ldi	r30, 0x14	; 20
    1a22:	fd e0       	ldi	r31, 0x0D	; 13
    1a24:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x4>
    1a28:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1a2c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL8staccato>
    1a30:	88 23       	and	r24, r24
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <_ZL8nextNotev+0x20>
    1a34:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <_ZL22staccato_rest_duration>
    1a38:	61 11       	cpse	r22, r1
    1a3a:	17 c0       	rjmp	.+46     	; 0x1a6a <_ZL8nextNotev+0x4e>
    1a3c:	77 24       	eor	r7, r7
    1a3e:	73 94       	inc	r7
    1a40:	b0 ec       	ldi	r27, 0xC0	; 192
    1a42:	ab 2e       	mov	r10, r27
    1a44:	bd e5       	ldi	r27, 0x5D	; 93
    1a46:	bb 2e       	mov	r11, r27
    1a48:	1a e0       	ldi	r17, 0x0A	; 10
    1a4a:	61 2e       	mov	r6, r17
    1a4c:	04 e0       	ldi	r16, 0x04	; 4
    1a4e:	80 2e       	mov	r8, r16
    1a50:	80 ed       	ldi	r24, 0xD0	; 208
    1a52:	c8 2e       	mov	r12, r24
    1a54:	87 e0       	ldi	r24, 0x07	; 7
    1a56:	d8 2e       	mov	r13, r24
    1a58:	94 e0       	ldi	r25, 0x04	; 4
    1a5a:	e9 2e       	mov	r14, r25
    1a5c:	f1 2c       	mov	r15, r1
    1a5e:	04 ef       	ldi	r16, 0xF4	; 244
    1a60:	11 e0       	ldi	r17, 0x01	; 1
    1a62:	2f e0       	ldi	r18, 0x0F	; 15
    1a64:	42 2e       	mov	r4, r18
    1a66:	51 2c       	mov	r5, r1
    1a68:	15 c0       	rjmp	.+42     	; 0x1a94 <_ZL8nextNotev+0x78>
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	88 ee       	ldi	r24, 0xE8	; 232
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1a76:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL22staccato_rest_duration>
    1a7a:	17 c1       	rjmp	.+558    	; 0x1caa <_ZL8nextNotev+0x28e>
    1a7c:	86 36       	cpi	r24, 0x66	; 102
    1a7e:	d4 f5       	brge	.+116    	; 0x1af4 <_ZL8nextNotev+0xd8>
    1a80:	81 36       	cpi	r24, 0x61	; 97
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <_ZL8nextNotev+0x6a>
    1a84:	a9 c0       	rjmp	.+338    	; 0x1bd8 <_ZL8nextNotev+0x1bc>
    1a86:	7c f5       	brge	.+94     	; 0x1ae6 <_ZL8nextNotev+0xca>
    1a88:	8c 33       	cpi	r24, 0x3C	; 60
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <_ZL8nextNotev+0x72>
    1a8c:	60 c0       	rjmp	.+192    	; 0x1b4e <_ZL8nextNotev+0x132>
    1a8e:	8e 33       	cpi	r24, 0x3E	; 62
    1a90:	81 f4       	brne	.+32     	; 0x1ab2 <_ZL8nextNotev+0x96>
    1a92:	93 94       	inc	r9
    1a94:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    1a98:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1a9c:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1aa0:	2f 5f       	subi	r18, 0xFF	; 255
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1aa8:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1aac:	85 36       	cpi	r24, 0x65	; 101
    1aae:	31 f7       	brne	.-52     	; 0x1a7c <_ZL8nextNotev+0x60>
    1ab0:	52 c0       	rjmp	.+164    	; 0x1b56 <_ZL8nextNotev+0x13a>
    1ab2:	81 32       	cpi	r24, 0x21	; 33
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <_ZL8nextNotev+0x9c>
    1ab6:	8b c0       	rjmp	.+278    	; 0x1bce <_ZL8nextNotev+0x1b2>
    1ab8:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1abc:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1ac0:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1ac4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1ac8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1acc:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1ad0:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1ad4:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1ad8:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1adc:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL8staccato>
    1ae0:	a4 e0       	ldi	r26, 0x04	; 4
    1ae2:	9a 2e       	mov	r9, r26
    1ae4:	d7 cf       	rjmp	.-82     	; 0x1a94 <_ZL8nextNotev+0x78>
    1ae6:	83 36       	cpi	r24, 0x63	; 99
    1ae8:	a1 f1       	breq	.+104    	; 0x1b52 <_ZL8nextNotev+0x136>
    1aea:	0c f4       	brge	.+2      	; 0x1aee <_ZL8nextNotev+0xd2>
    1aec:	78 c0       	rjmp	.+240    	; 0x1bde <_ZL8nextNotev+0x1c2>
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	77 c0       	rjmp	.+238    	; 0x1be2 <_ZL8nextNotev+0x1c6>
    1af4:	8d 36       	cpi	r24, 0x6D	; 109
    1af6:	c1 f1       	breq	.+112    	; 0x1b68 <_ZL8nextNotev+0x14c>
    1af8:	94 f4       	brge	.+36     	; 0x1b1e <_ZL8nextNotev+0x102>
    1afa:	87 36       	cpi	r24, 0x67	; 103
    1afc:	91 f1       	breq	.+100    	; 0x1b62 <_ZL8nextNotev+0x146>
    1afe:	74 f1       	brlt	.+92     	; 0x1b5c <_ZL8nextNotev+0x140>
    1b00:	8c 36       	cpi	r24, 0x6C	; 108
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_ZL8nextNotev+0xea>
    1b04:	64 c0       	rjmp	.+200    	; 0x1bce <_ZL8nextNotev+0x1b2>
    1b06:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZL9getNumberv>
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1b10:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1b14:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1b18:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1b1c:	51 c0       	rjmp	.+162    	; 0x1bc0 <_ZL8nextNotev+0x1a4>
    1b1e:	82 37       	cpi	r24, 0x72	; 114
    1b20:	c9 f1       	breq	.+114    	; 0x1b94 <_ZL8nextNotev+0x178>
    1b22:	4c f4       	brge	.+18     	; 0x1b36 <_ZL8nextNotev+0x11a>
    1b24:	8f 36       	cpi	r24, 0x6F	; 111
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <_ZL8nextNotev+0x10e>
    1b28:	52 c0       	rjmp	.+164    	; 0x1bce <_ZL8nextNotev+0x1b2>
    1b2a:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZL9getNumberv>
    1b2e:	98 2e       	mov	r9, r24
    1b30:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1b34:	af cf       	rjmp	.-162    	; 0x1a94 <_ZL8nextNotev+0x78>
    1b36:	84 37       	cpi	r24, 0x74	; 116
    1b38:	81 f1       	breq	.+96     	; 0x1b9a <_ZL8nextNotev+0x17e>
    1b3a:	86 37       	cpi	r24, 0x76	; 118
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <_ZL8nextNotev+0x124>
    1b3e:	47 c0       	rjmp	.+142    	; 0x1bce <_ZL8nextNotev+0x1b2>
    1b40:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZL9getNumberv>
    1b44:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1b48:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1b4c:	a3 cf       	rjmp	.-186    	; 0x1a94 <_ZL8nextNotev+0x78>
    1b4e:	9a 94       	dec	r9
    1b50:	a1 cf       	rjmp	.-190    	; 0x1a94 <_ZL8nextNotev+0x78>
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	20 c0       	rjmp	.+64     	; 0x1b96 <_ZL8nextNotev+0x17a>
    1b56:	10 e0       	ldi	r17, 0x00	; 0
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	43 c0       	rjmp	.+134    	; 0x1be2 <_ZL8nextNotev+0x1c6>
    1b5c:	10 e0       	ldi	r17, 0x00	; 0
    1b5e:	85 e0       	ldi	r24, 0x05	; 5
    1b60:	40 c0       	rjmp	.+128    	; 0x1be2 <_ZL8nextNotev+0x1c6>
    1b62:	10 e0       	ldi	r17, 0x00	; 0
    1b64:	87 e0       	ldi	r24, 0x07	; 7
    1b66:	3d c0       	rjmp	.+122    	; 0x1be2 <_ZL8nextNotev+0x1c6>
    1b68:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    1b6c:	8c 36       	cpi	r24, 0x6C	; 108
    1b6e:	19 f4       	brne	.+6      	; 0x1b76 <_ZL8nextNotev+0x15a>
    1b70:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL8staccato>
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <_ZL8nextNotev+0x162>
    1b76:	70 92 92 01 	sts	0x0192, r7	; 0x800192 <_ZL8staccato>
    1b7a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL22staccato_rest_duration>
    1b7e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1b82:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1b8e:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1b92:	80 cf       	rjmp	.-256    	; 0x1a94 <_ZL8nextNotev+0x78>
    1b94:	11 e0       	ldi	r17, 0x01	; 1
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	24 c0       	rjmp	.+72     	; 0x1be2 <_ZL8nextNotev+0x1c6>
    1b9a:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZL9getNumberv>
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    1ba6:	66 9e       	mul	r6, r22
    1ba8:	c0 01       	movw	r24, r0
    1baa:	67 9e       	mul	r6, r23
    1bac:	90 0d       	add	r25, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1bb4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1bb8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1bbc:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1bc0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    1bc4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1bc8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1bcc:	63 cf       	rjmp	.-314    	; 0x1a94 <_ZL8nextNotev+0x78>
    1bce:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <__data_end+0x1>
    1bd2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
    1bd6:	69 c0       	rjmp	.+210    	; 0x1caa <_ZL8nextNotev+0x28e>
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	89 e0       	ldi	r24, 0x09	; 9
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <_ZL8nextNotev+0x1c6>
    1bde:	10 e0       	ldi	r17, 0x00	; 0
    1be0:	8b e0       	ldi	r24, 0x0B	; 11
    1be2:	08 2f       	mov	r16, r24
    1be4:	9c e0       	ldi	r25, 0x0C	; 12
    1be6:	99 9e       	mul	r9, r25
    1be8:	00 0d       	add	r16, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	97 7f       	andi	r25, 0xF7	; 247
    1bf4:	93 32       	cpi	r25, 0x23	; 35
    1bf6:	61 f4       	brne	.+24     	; 0x1c10 <_ZL8nextNotev+0x1f4>
    1bf8:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1bfc:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1c08:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1c0c:	0f 5f       	subi	r16, 0xFF	; 255
    1c0e:	ee cf       	rjmp	.-36     	; 0x1bec <_ZL8nextNotev+0x1d0>
    1c10:	8d 32       	cpi	r24, 0x2D	; 45
    1c12:	71 f4       	brne	.+28     	; 0x1c30 <_ZL8nextNotev+0x214>
    1c14:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1c18:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1c1c:	2f 5f       	subi	r18, 0xFF	; 255
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1c24:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1c28:	01 50       	subi	r16, 0x01	; 1
    1c2a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    1c2e:	f0 cf       	rjmp	.-32     	; 0x1c10 <_ZL8nextNotev+0x1f4>
    1c30:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1c34:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1c38:	81 53       	subi	r24, 0x31	; 49
    1c3a:	88 30       	cpi	r24, 0x08	; 8
    1c3c:	50 f4       	brcc	.+20     	; 0x1c52 <_ZL8nextNotev+0x236>
    1c3e:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1c42:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1c46:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZL9getNumberv>
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    1c52:	7b 01       	movw	r14, r22
    1c54:	f6 94       	lsr	r15
    1c56:	e7 94       	ror	r14
    1c58:	69 83       	std	Y+1, r22	; 0x01
    1c5a:	7a 83       	std	Y+2, r23	; 0x02
    1c5c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZL16currentCharacterv>
    1c60:	69 81       	ldd	r22, Y+1	; 0x01
    1c62:	7a 81       	ldd	r23, Y+2	; 0x02
    1c64:	8e 32       	cpi	r24, 0x2E	; 46
    1c66:	69 f4       	brne	.+26     	; 0x1c82 <_ZL8nextNotev+0x266>
    1c68:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1c6c:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1c70:	2f 5f       	subi	r18, 0xFF	; 255
    1c72:	3f 4f       	sbci	r19, 0xFF	; 255
    1c74:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1c78:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1c7c:	6e 0d       	add	r22, r14
    1c7e:	7f 1d       	adc	r23, r15
    1c80:	e9 cf       	rjmp	.-46     	; 0x1c54 <_ZL8nextNotev+0x238>
    1c82:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL8staccato>
    1c86:	88 23       	and	r24, r24
    1c88:	39 f0       	breq	.+14     	; 0x1c98 <_ZL8nextNotev+0x27c>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	36 95       	lsr	r19
    1c8e:	27 95       	ror	r18
    1c90:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <_ZL22staccato_rest_duration>
    1c94:	62 1b       	sub	r22, r18
    1c96:	71 09       	sbc	r23, r1
    1c98:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1c9c:	11 23       	and	r17, r17
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <_ZL8nextNotev+0x288>
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <_ZL8nextNotev+0x28a>
    1ca4:	80 2f       	mov	r24, r16
    1ca6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1caa:	22 96       	adiw	r28, 0x02	; 2
    1cac:	e0 e1       	ldi	r30, 0x10	; 16
    1cae:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x4>

00001cb2 <__vector_13>:
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	2f 93       	push	r18
    1cbe:	3f 93       	push	r19
    1cc0:	4f 93       	push	r20
    1cc2:	5f 93       	push	r21
    1cc4:	6f 93       	push	r22
    1cc6:	7f 93       	push	r23
    1cc8:	8f 93       	push	r24
    1cca:	9f 93       	push	r25
    1ccc:	af 93       	push	r26
    1cce:	bf 93       	push	r27
    1cd0:	ef 93       	push	r30
    1cd2:	ff 93       	push	r31
    1cd4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <_ZL13buzzerTimeout>
    1cd8:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <_ZL13buzzerTimeout+0x1>
    1cdc:	9c 01       	movw	r18, r24
    1cde:	21 50       	subi	r18, 0x01	; 1
    1ce0:	31 09       	sbc	r19, r1
    1ce2:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <_ZL13buzzerTimeout+0x1>
    1ce6:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <_ZL13buzzerTimeout>
    1cea:	89 2b       	or	r24, r25
    1cec:	11 f5       	brne	.+68     	; 0x1d32 <__vector_13+0x80>
    1cee:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1cf2:	78 94       	sei
    1cf4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1cf8:	88 7f       	andi	r24, 0xF8	; 248
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1d00:	80 e1       	ldi	r24, 0x10	; 16
    1d02:	97 e2       	ldi	r25, 0x27	; 39
    1d04:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d08:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d0c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1d10:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1d1a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
    1d1e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <__data_end+0x1>
    1d22:	89 2b       	or	r24, r25
    1d24:	31 f0       	breq	.+12     	; 0x1d32 <__vector_13+0x80>
    1d26:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <_ZL17play_mode_setting>
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <__vector_13+0x80>
    1d2e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZL8nextNotev>
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	0f 90       	pop	r0
    1d50:	1f 90       	pop	r1
    1d52:	18 95       	reti

00001d54 <_ZN15OrangutanBuzzer4playEPKc>:
    1d54:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d58:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__data_end+0x1>
    1d5c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
    1d60:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <_ZL17use_program_space>
    1d64:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL22staccato_rest_duration>
    1d68:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZL8nextNotev>
    1d6c:	08 95       	ret

00001d6e <play>:
    1d6e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN15OrangutanBuzzer4playEPKc>
    1d72:	08 95       	ret

00001d74 <delay_us.constprop.0>:
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	6f 93       	push	r22
    1d7a:	64 e0       	ldi	r22, 0x04	; 4
    1d7c:	6a 95       	dec	r22
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <delay_us.constprop.0+0x8>
    1d80:	6f 91       	pop	r22
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <delay_us.constprop.0+0x4>
    1d86:	08 95       	ret

00001d88 <_ZN12OrangutanLCD8busyWaitEv>:
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	1a b1       	in	r17, 0x0a	; 10
    1d92:	57 98       	cbi	0x0a, 7	; 10
    1d94:	5a 98       	cbi	0x0b, 2	; 11
    1d96:	28 9a       	sbi	0x05, 0	; 5
    1d98:	c0 e0       	ldi	r28, 0x00	; 0
    1d9a:	d0 e0       	ldi	r29, 0x00	; 0
    1d9c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <delay_us.constprop.0>
    1da0:	5c 9a       	sbi	0x0b, 4	; 11
    1da2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <delay_us.constprop.0>
    1da6:	09 b1       	in	r16, 0x09	; 9
    1da8:	5c 98       	cbi	0x0b, 4	; 11
    1daa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <delay_us.constprop.0>
    1dae:	5c 9a       	sbi	0x0b, 4	; 11
    1db0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <delay_us.constprop.0>
    1db4:	5c 98       	cbi	0x0b, 4	; 11
    1db6:	24 96       	adiw	r28, 0x04	; 4
    1db8:	07 ff       	sbrs	r16, 7
    1dba:	10 c0       	rjmp	.+32     	; 0x1ddc <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1dbc:	ae 01       	movw	r20, r28
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <lcdTimeout>
    1dc6:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <lcdTimeout+0x1>
    1dca:	a0 91 99 01 	lds	r26, 0x0199	; 0x800199 <lcdTimeout+0x2>
    1dce:	b0 91 9a 01 	lds	r27, 0x019A	; 0x80019a <lcdTimeout+0x3>
    1dd2:	48 17       	cp	r20, r24
    1dd4:	59 07       	cpc	r21, r25
    1dd6:	6a 07       	cpc	r22, r26
    1dd8:	7b 07       	cpc	r23, r27
    1dda:	00 f3       	brcs	.-64     	; 0x1d9c <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1ddc:	1a b9       	out	0x0a, r17	; 10
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <_ZN12OrangutanLCD8sendDataEh>:
    1de8:	95 b1       	in	r25, 0x05	; 5
    1dea:	28 2f       	mov	r18, r24
    1dec:	21 70       	andi	r18, 0x01	; 1
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	22 0f       	add	r18, r18
    1df2:	33 1f       	adc	r19, r19
    1df4:	48 2f       	mov	r20, r24
    1df6:	46 70       	andi	r20, 0x06	; 6
    1df8:	68 e0       	ldi	r22, 0x08	; 8
    1dfa:	46 9f       	mul	r20, r22
    1dfc:	a0 01       	movw	r20, r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	24 2b       	or	r18, r20
    1e02:	9d 7c       	andi	r25, 0xCD	; 205
    1e04:	29 2b       	or	r18, r25
    1e06:	25 b9       	out	0x05, r18	; 5
    1e08:	9b b1       	in	r25, 0x0b	; 11
    1e0a:	88 70       	andi	r24, 0x08	; 8
    1e0c:	82 95       	swap	r24
    1e0e:	80 7f       	andi	r24, 0xF0	; 240
    1e10:	9f 77       	andi	r25, 0x7F	; 127
    1e12:	89 2b       	or	r24, r25
    1e14:	8b b9       	out	0x0b, r24	; 11
    1e16:	5c 9a       	sbi	0x0b, 4	; 11
    1e18:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <delay_us.constprop.0>
    1e1c:	5c 98       	cbi	0x0b, 4	; 11
    1e1e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <delay_us.constprop.0>
    1e22:	08 95       	ret

00001e24 <_ZN12OrangutanLCD4sendEhhh>:
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e8 e1       	ldi	r30, 0x18	; 24
    1e2a:	ff e0       	ldi	r31, 0x0F	; 15
    1e2c:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x16>
    1e30:	c8 2f       	mov	r28, r24
    1e32:	d6 2e       	mov	r13, r22
    1e34:	e4 2e       	mov	r14, r20
    1e36:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <_ZZN12OrangutanLCD4initEvE11initialized>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <_ZZN12OrangutanLCD4initEvE11initialized>
    1e44:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN12OrangutanLCD5init2Ev>
    1e48:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <_ZN12OrangutanLCD8busyWaitEv>
    1e4c:	14 b1       	in	r17, 0x04	; 4
    1e4e:	d5 b1       	in	r29, 0x05	; 5
    1e50:	fa b0       	in	r15, 0x0a	; 10
    1e52:	0b b1       	in	r16, 0x0b	; 11
    1e54:	28 98       	cbi	0x05, 0	; 5
    1e56:	dd 20       	and	r13, r13
    1e58:	11 f0       	breq	.+4      	; 0x1e5e <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1e5a:	5a 9a       	sbi	0x0b, 2	; 11
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1e5e:	5a 98       	cbi	0x0b, 2	; 11
    1e60:	94 b1       	in	r25, 0x04	; 4
    1e62:	92 63       	ori	r25, 0x32	; 50
    1e64:	94 b9       	out	0x04, r25	; 4
    1e66:	57 9a       	sbi	0x0a, 7	; 10
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	e8 16       	cp	r14, r24
    1e6c:	29 f0       	breq	.+10     	; 0x1e78 <_ZN12OrangutanLCD4sendEhhh+0x54>
    1e6e:	8c 2f       	mov	r24, r28
    1e70:	82 95       	swap	r24
    1e72:	8f 70       	andi	r24, 0x0F	; 15
    1e74:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN12OrangutanLCD8sendDataEh>
    1e78:	8c 2f       	mov	r24, r28
    1e7a:	8f 70       	andi	r24, 0x0F	; 15
    1e7c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN12OrangutanLCD8sendDataEh>
    1e80:	fa b8       	out	0x0a, r15	; 10
    1e82:	0b b9       	out	0x0b, r16	; 11
    1e84:	14 b9       	out	0x04, r17	; 4
    1e86:	d5 b9       	out	0x05, r29	; 5
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	e7 e0       	ldi	r30, 0x07	; 7
    1e8e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x16>

00001e92 <_ZN12OrangutanLCD8send_cmdEh>:
    1e92:	42 e0       	ldi	r20, 0x02	; 2
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN12OrangutanLCD4sendEhhh>
    1e9a:	08 95       	ret

00001e9c <_ZN12OrangutanLCD9send_dataEh>:
    1e9c:	42 e0       	ldi	r20, 0x02	; 2
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN12OrangutanLCD4sendEhhh>
    1ea4:	08 95       	ret

00001ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN12OrangutanLCD4sendEhhh>
    1eae:	08 95       	ret

00001eb0 <_ZN12OrangutanLCD5init2Ev>:
    1eb0:	80 e1       	ldi	r24, 0x10	; 16
    1eb2:	97 e2       	ldi	r25, 0x27	; 39
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <lcdTimeout>
    1ebc:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <lcdTimeout+0x1>
    1ec0:	a0 93 99 01 	sts	0x0199, r26	; 0x800199 <lcdTimeout+0x2>
    1ec4:	b0 93 9a 01 	sts	0x019A, r27	; 0x80019a <lcdTimeout+0x3>
    1ec8:	52 9a       	sbi	0x0a, 2	; 10
    1eca:	20 9a       	sbi	0x04, 0	; 4
    1ecc:	54 9a       	sbi	0x0a, 4	; 10
    1ece:	8e e1       	ldi	r24, 0x1E	; 30
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1edc:	86 e0       	ldi	r24, 0x06	; 6
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
    1f0e:	88 e2       	ldi	r24, 0x28	; 40
    1f10:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    1f14:	88 e0       	ldi	r24, 0x08	; 8
    1f16:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    1f20:	86 e0       	ldi	r24, 0x06	; 6
    1f22:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    1f26:	8c e0       	ldi	r24, 0x0C	; 12
    1f28:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    1f2c:	08 95       	ret

00001f2e <_ZN12OrangutanLCD5clearEv>:
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    1f34:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <printf_chars>
    1f38:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <printf_chars+0x1>
    1f3c:	89 2b       	or	r24, r25
    1f3e:	f9 f0       	breq	.+62     	; 0x1f7e <_ZN12OrangutanLCD5clearEv+0x50>
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	a0 e2       	ldi	r26, 0x20	; 32
    1f44:	26 2f       	mov	r18, r22
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    1f4c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	78 9f       	mul	r23, r24
    1f56:	a0 01       	movw	r20, r0
    1f58:	79 9f       	mul	r23, r25
    1f5a:	50 0d       	add	r21, r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	24 17       	cp	r18, r20
    1f60:	35 07       	cpc	r19, r21
    1f62:	4c f4       	brge	.+18     	; 0x1f76 <_ZN12OrangutanLCD5clearEv+0x48>
    1f64:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <printf_chars>
    1f68:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <printf_chars+0x1>
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	a0 83       	st	Z, r26
    1f72:	6f 5f       	subi	r22, 0xFF	; 255
    1f74:	e7 cf       	rjmp	.-50     	; 0x1f44 <_ZN12OrangutanLCD5clearEv+0x16>
    1f76:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <col>
    1f7a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <row>
    1f7e:	08 95       	ret

00001f80 <clear>:
    1f80:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN12OrangutanLCD5clearEv>
    1f84:	08 95       	ret

00001f86 <_ZN12OrangutanLCD5printEPKc>:
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	ec 01       	movw	r28, r24
    1f8c:	89 91       	ld	r24, Y+
    1f8e:	88 23       	and	r24, r24
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <_ZN12OrangutanLCD5printEPKc+0x12>
    1f92:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN12OrangutanLCD9send_dataEh>
    1f96:	fa cf       	rjmp	.-12     	; 0x1f8c <_ZN12OrangutanLCD5printEPKc+0x6>
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <print>:
    1f9e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN12OrangutanLCD5printEPKc>
    1fa2:	08 95       	ret

00001fa4 <_ZN12OrangutanLCD5printEm>:
    1fa4:	aa e0       	ldi	r26, 0x0A	; 10
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e8 ed       	ldi	r30, 0xD8	; 216
    1faa:	ff e0       	ldi	r31, 0x0F	; 15
    1fac:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__prologue_saves__+0x14>
    1fb0:	1a e0       	ldi	r17, 0x0A	; 10
    1fb2:	5a e0       	ldi	r21, 0x0A	; 10
    1fb4:	c5 2e       	mov	r12, r21
    1fb6:	d1 2c       	mov	r13, r1
    1fb8:	e1 2c       	mov	r14, r1
    1fba:	f1 2c       	mov	r15, r1
    1fbc:	06 2f       	mov	r16, r22
    1fbe:	a7 01       	movw	r20, r14
    1fc0:	96 01       	movw	r18, r12
    1fc2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__udivmodsi4>
    1fc6:	ca 01       	movw	r24, r20
    1fc8:	b9 01       	movw	r22, r18
    1fca:	11 50       	subi	r17, 0x01	; 1
    1fcc:	e1 e0       	ldi	r30, 0x01	; 1
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	ec 0f       	add	r30, r28
    1fd2:	fd 1f       	adc	r31, r29
    1fd4:	e1 0f       	add	r30, r17
    1fd6:	f1 1d       	adc	r31, r1
    1fd8:	00 5d       	subi	r16, 0xD0	; 208
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	62 9f       	mul	r22, r18
    1fde:	00 19       	sub	r16, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	00 83       	st	Z, r16
    1fe4:	61 15       	cp	r22, r1
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	81 05       	cpc	r24, r1
    1fea:	91 05       	cpc	r25, r1
    1fec:	39 f7       	brne	.-50     	; 0x1fbc <_ZN12OrangutanLCD5printEm+0x18>
    1fee:	1a 30       	cpi	r17, 0x0A	; 10
    1ff0:	58 f4       	brcc	.+22     	; 0x2008 <_ZN12OrangutanLCD5printEm+0x64>
    1ff2:	e1 e0       	ldi	r30, 0x01	; 1
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	ec 0f       	add	r30, r28
    1ff8:	fd 1f       	adc	r31, r29
    1ffa:	e1 0f       	add	r30, r17
    1ffc:	f1 1d       	adc	r31, r1
    1ffe:	80 81       	ld	r24, Z
    2000:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN12OrangutanLCD9send_dataEh>
    2004:	1f 5f       	subi	r17, 0xFF	; 255
    2006:	f3 cf       	rjmp	.-26     	; 0x1fee <_ZN12OrangutanLCD5printEm+0x4a>
    2008:	2a 96       	adiw	r28, 0x0a	; 10
    200a:	e8 e0       	ldi	r30, 0x08	; 8
    200c:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__epilogue_restores__+0x14>

00002010 <_ZN12OrangutanLCD5printEl>:
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	6b 01       	movw	r12, r22
    201a:	7c 01       	movw	r14, r24
    201c:	97 ff       	sbrs	r25, 7
    201e:	0b c0       	rjmp	.+22     	; 0x2036 <_ZN12OrangutanLCD5printEl+0x26>
    2020:	f0 94       	com	r15
    2022:	e0 94       	com	r14
    2024:	d0 94       	com	r13
    2026:	c0 94       	com	r12
    2028:	c1 1c       	adc	r12, r1
    202a:	d1 1c       	adc	r13, r1
    202c:	e1 1c       	adc	r14, r1
    202e:	f1 1c       	adc	r15, r1
    2030:	8d e2       	ldi	r24, 0x2D	; 45
    2032:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN12OrangutanLCD9send_dataEh>
    2036:	c7 01       	movw	r24, r14
    2038:	b6 01       	movw	r22, r12
    203a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN12OrangutanLCD5printEm>
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	df 90       	pop	r13
    2044:	cf 90       	pop	r12
    2046:	08 95       	ret

00002048 <print_long>:
    2048:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN12OrangutanLCD5printEl>
    204c:	08 95       	ret

0000204e <_ZN12OrangutanLCD6gotoXYEhh>:
    204e:	a5 e0       	ldi	r26, 0x05	; 5
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	ed e2       	ldi	r30, 0x2D	; 45
    2054:	f0 e1       	ldi	r31, 0x10	; 16
    2056:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x1e>
    205a:	18 2f       	mov	r17, r24
    205c:	80 e8       	ldi	r24, 0x80	; 128
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	80 ec       	ldi	r24, 0xC0	; 192
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	84 e9       	ldi	r24, 0x94	; 148
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	84 ed       	ldi	r24, 0xD4	; 212
    206a:	8c 83       	std	Y+4, r24	; 0x04
    206c:	fe 01       	movw	r30, r28
    206e:	e6 0f       	add	r30, r22
    2070:	f1 1d       	adc	r31, r1
    2072:	81 81       	ldd	r24, Z+1	; 0x01
    2074:	81 0f       	add	r24, r17
    2076:	6d 83       	std	Y+5, r22	; 0x05
    2078:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN12OrangutanLCD8send_cmdEh>
    207c:	10 93 9b 01 	sts	0x019B, r17	; 0x80019b <col>
    2080:	6d 81       	ldd	r22, Y+5	; 0x05
    2082:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <row>
    2086:	25 96       	adiw	r28, 0x05	; 5
    2088:	e3 e0       	ldi	r30, 0x03	; 3
    208a:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x1e>

0000208e <lcd_goto_xy>:
    208e:	0e 94 27 10 	call	0x204e	; 0x204e <_ZN12OrangutanLCD6gotoXYEhh>
    2092:	08 95       	ret

00002094 <_ZN16OrangutanDigital9setOutputEhh>:
    2094:	88 30       	cpi	r24, 0x08	; 8
    2096:	58 f4       	brcc	.+22     	; 0x20ae <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	01 c0       	rjmp	.+2      	; 0x209e <_ZN16OrangutanDigital9setOutputEhh+0xa>
    209c:	99 0f       	add	r25, r25
    209e:	8a 95       	dec	r24
    20a0:	ea f7       	brpl	.-6      	; 0x209c <_ZN16OrangutanDigital9setOutputEhh+0x8>
    20a2:	89 2f       	mov	r24, r25
    20a4:	aa e2       	ldi	r26, 0x2A	; 42
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	eb e2       	ldi	r30, 0x2B	; 43
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	21 c0       	rjmp	.+66     	; 0x20f0 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    20ae:	8e 30       	cpi	r24, 0x0E	; 14
    20b0:	60 f4       	brcc	.+24     	; 0x20ca <_ZN16OrangutanDigital9setOutputEhh+0x36>
    20b2:	98 ef       	ldi	r25, 0xF8	; 248
    20b4:	98 0f       	add	r25, r24
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <_ZN16OrangutanDigital9setOutputEhh+0x28>
    20ba:	88 0f       	add	r24, r24
    20bc:	9a 95       	dec	r25
    20be:	ea f7       	brpl	.-6      	; 0x20ba <_ZN16OrangutanDigital9setOutputEhh+0x26>
    20c0:	a4 e2       	ldi	r26, 0x24	; 36
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e2       	ldi	r30, 0x25	; 37
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	13 c0       	rjmp	.+38     	; 0x20f0 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    20ca:	85 31       	cpi	r24, 0x15	; 21
    20cc:	60 f4       	brcc	.+24     	; 0x20e6 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    20ce:	92 ef       	ldi	r25, 0xF2	; 242
    20d0:	98 0f       	add	r25, r24
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    20d6:	88 0f       	add	r24, r24
    20d8:	9a 95       	dec	r25
    20da:	ea f7       	brpl	.-6      	; 0x20d6 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    20dc:	a7 e2       	ldi	r26, 0x27	; 39
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e8 e2       	ldi	r30, 0x28	; 40
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	a0 e0       	ldi	r26, 0x00	; 0
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e0 e0       	ldi	r30, 0x00	; 0
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	6f 3f       	cpi	r22, 0xFF	; 255
    20f2:	19 f4       	brne	.+6      	; 0x20fa <_ZN16OrangutanDigital9setOutputEhh+0x66>
    20f4:	90 81       	ld	r25, Z
    20f6:	98 27       	eor	r25, r24
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <_ZN16OrangutanDigital9setOutputEhh+0x78>
    20fa:	66 23       	and	r22, r22
    20fc:	19 f0       	breq	.+6      	; 0x2104 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    20fe:	90 81       	ld	r25, Z
    2100:	98 2b       	or	r25, r24
    2102:	04 c0       	rjmp	.+8      	; 0x210c <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2104:	20 81       	ld	r18, Z
    2106:	98 2f       	mov	r25, r24
    2108:	90 95       	com	r25
    210a:	92 23       	and	r25, r18
    210c:	90 83       	st	Z, r25
    210e:	9c 91       	ld	r25, X
    2110:	98 2b       	or	r25, r24
    2112:	9c 93       	st	X, r25
    2114:	08 95       	ret

00002116 <_ZN15OrangutanMotors5init2Ev>:
    2116:	83 ef       	ldi	r24, 0xF3	; 243
    2118:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    211c:	84 bd       	out	0x24, r24	; 36
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2124:	85 bd       	out	0x25, r24	; 37
    2126:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    212a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    212e:	18 bc       	out	0x28, r1	; 40
    2130:	17 bc       	out	0x27, r1	; 39
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	86 e0       	ldi	r24, 0x06	; 6
    2136:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZN16OrangutanDigital9setOutputEhh>
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	85 e0       	ldi	r24, 0x05	; 5
    213e:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZN16OrangutanDigital9setOutputEhh>
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	8b e0       	ldi	r24, 0x0B	; 11
    2146:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZN16OrangutanDigital9setOutputEhh>
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	83 e0       	ldi	r24, 0x03	; 3
    214e:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZN16OrangutanDigital9setOutputEhh>
    2152:	08 95       	ret

00002154 <_ZN15OrangutanMotors4initEv>:
    2154:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <_ZZN15OrangutanMotors4initEvE11initialized>
    2158:	81 11       	cpse	r24, r1
    215a:	05 c0       	rjmp	.+10     	; 0x2166 <_ZN15OrangutanMotors4initEv+0x12>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <_ZZN15OrangutanMotors4initEvE11initialized>
    2162:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN15OrangutanMotors5init2Ev>
    2166:	08 95       	ret

00002168 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	0e 94 aa 10 	call	0x2154	; 0x2154 <_ZN15OrangutanMotors4initEv>
    2172:	d7 ff       	sbrs	r29, 7
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2176:	d1 95       	neg	r29
    2178:	c1 95       	neg	r28
    217a:	d1 09       	sbc	r29, r1
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	cf 3f       	cpi	r28, 0xFF	; 255
    2184:	d1 05       	cpc	r29, r1
    2186:	19 f0       	breq	.+6      	; 0x218e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2188:	14 f0       	brlt	.+4      	; 0x218e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    218a:	cf ef       	ldi	r28, 0xFF	; 255
    218c:	d0 e0       	ldi	r29, 0x00	; 0
    218e:	88 23       	and	r24, r24
    2190:	19 f0       	breq	.+6      	; 0x2198 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2192:	18 bc       	out	0x28, r1	; 40
    2194:	c7 bd       	out	0x27, r28	; 39
    2196:	02 c0       	rjmp	.+4      	; 0x219c <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    2198:	c8 bd       	out	0x28, r28	; 40
    219a:	17 bc       	out	0x27, r1	; 39
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	08 95       	ret

000021a2 <_ZN15OrangutanMotors10setM2SpeedEi>:
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	ec 01       	movw	r28, r24
    21a8:	0e 94 aa 10 	call	0x2154	; 0x2154 <_ZN15OrangutanMotors4initEv>
    21ac:	d7 ff       	sbrs	r29, 7
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    21b0:	d1 95       	neg	r29
    21b2:	c1 95       	neg	r28
    21b4:	d1 09       	sbc	r29, r1
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	cf 3f       	cpi	r28, 0xFF	; 255
    21be:	d1 05       	cpc	r29, r1
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    21c2:	14 f0       	brlt	.+4      	; 0x21c8 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    21c4:	cf ef       	ldi	r28, 0xFF	; 255
    21c6:	d0 e0       	ldi	r29, 0x00	; 0
    21c8:	88 23       	and	r24, r24
    21ca:	29 f0       	breq	.+10     	; 0x21d6 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    21cc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    21d0:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    21d6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    21da:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <_ZN15OrangutanMotors9setSpeedsEii>:
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	eb 01       	movw	r28, r22
    21ea:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN15OrangutanMotors10setM1SpeedEi>
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN15OrangutanMotors10setM2SpeedEi>
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	08 95       	ret

000021fa <set_motors>:
    21fa:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN15OrangutanMotors9setSpeedsEii>
    21fe:	08 95       	ret

00002200 <_ZN20OrangutanPushbuttons5init2Ev>:
    2200:	84 b1       	in	r24, 0x04	; 4
    2202:	8d 7c       	andi	r24, 0xCD	; 205
    2204:	84 b9       	out	0x04, r24	; 4
    2206:	85 b1       	in	r24, 0x05	; 5
    2208:	82 63       	ori	r24, 0x32	; 50
    220a:	85 b9       	out	0x05, r24	; 5
    220c:	85 e0       	ldi	r24, 0x05	; 5
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	6f 93       	push	r22
    2212:	64 e0       	ldi	r22, 0x04	; 4
    2214:	6a 95       	dec	r22
    2216:	f1 f7       	brne	.-4      	; 0x2214 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2218:	6f 91       	pop	r22
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	c9 f7       	brne	.-14     	; 0x2210 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    221e:	08 95       	ret

00002220 <_ZN20OrangutanPushbuttons4initEv>:
    2220:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2224:	81 11       	cpse	r24, r1
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <_ZN20OrangutanPushbuttons4initEv+0x12>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    222e:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN20OrangutanPushbuttons5init2Ev>
    2232:	08 95       	ret

00002234 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2234:	cf 93       	push	r28
    2236:	c8 2f       	mov	r28, r24
    2238:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN20OrangutanPushbuttons4initEv>
    223c:	83 b1       	in	r24, 0x03	; 3
    223e:	8c 23       	and	r24, r28
    2240:	e9 f3       	breq	.-6      	; 0x223c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2242:	8a e0       	ldi	r24, 0x0A	; 10
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 8b 11 	call	0x2316	; 0x2316 <delay_ms>
    224a:	83 b1       	in	r24, 0x03	; 3
    224c:	8c 23       	and	r24, r28
    224e:	b1 f3       	breq	.-20     	; 0x223c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2250:	83 b1       	in	r24, 0x03	; 3
    2252:	8c 23       	and	r24, r28
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <wait_for_button_release>:
    2258:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    225c:	08 95       	ret

0000225e <_ZN20OrangutanPushbuttons9isPressedEh>:
    225e:	a1 e0       	ldi	r26, 0x01	; 1
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e5 e3       	ldi	r30, 0x35	; 53
    2264:	f1 e1       	ldi	r31, 0x11	; 17
    2266:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x20>
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN20OrangutanPushbuttons4initEv>
    2270:	93 b1       	in	r25, 0x03	; 3
    2272:	90 95       	com	r25
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	89 23       	and	r24, r25
    2278:	21 96       	adiw	r28, 0x01	; 1
    227a:	e2 e0       	ldi	r30, 0x02	; 2
    227c:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x20>

00002280 <button_is_pressed>:
    2280:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN20OrangutanPushbuttons9isPressedEh>
    2284:	08 95       	ret

00002286 <__vector_9>:
    2286:	2f 92       	push	r2
    2288:	8f 93       	push	r24
    228a:	9f 93       	push	r25
    228c:	2f b6       	in	r2, 0x3f	; 63
    228e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <tickCount+0x1>
    2292:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <tickCount+0x2>
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <tickCount+0x1>
    229c:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <tickCount+0x2>
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <tickCount+0x3>
    22a6:	89 1f       	adc	r24, r25
    22a8:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <tickCount+0x3>
    22ac:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <us_over_10+0x1>
    22b0:	9c 5f       	subi	r25, 0xFC	; 252
    22b2:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <us_over_10+0x1>
    22b6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <us_over_10>
    22ba:	80 51       	subi	r24, 0x10	; 16
    22bc:	97 42       	sbci	r25, 0x27	; 39
    22be:	c0 f0       	brcs	.+48     	; 0x22f0 <end>
    22c0:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <us_over_10+0x1>
    22c4:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <us_over_10>
    22c8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <msCounter>
    22cc:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <msCounter+0x1>
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <msCounter>
    22d6:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <msCounter+0x1>
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <msCounter+0x2>
    22e0:	89 1f       	adc	r24, r25
    22e2:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <msCounter+0x2>
    22e6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <msCounter+0x3>
    22ea:	89 1f       	adc	r24, r25
    22ec:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <msCounter+0x3>

000022f0 <end>:
    22f0:	2f be       	out	0x3f, r2	; 63
    22f2:	9f 91       	pop	r25
    22f4:	8f 91       	pop	r24
    22f6:	2f 90       	pop	r2
    22f8:	18 95       	reti

000022fa <_ZN13OrangutanTime17delayMillisecondsEj>:
    22fa:	28 ee       	ldi	r18, 0xE8	; 232
    22fc:	33 e0       	ldi	r19, 0x03	; 3
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	48 f0       	brcs	.+18     	; 0x2314 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2302:	f9 01       	movw	r30, r18
    2304:	6f 93       	push	r22
    2306:	64 e0       	ldi	r22, 0x04	; 4
    2308:	6a 95       	dec	r22
    230a:	f1 f7       	brne	.-4      	; 0x2308 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    230c:	6f 91       	pop	r22
    230e:	31 97       	sbiw	r30, 0x01	; 1
    2310:	c9 f7       	brne	.-14     	; 0x2304 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2312:	f5 cf       	rjmp	.-22     	; 0x22fe <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2314:	08 95       	ret

00002316 <delay_ms>:
    2316:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN13OrangutanTime17delayMillisecondsEj>
    231a:	08 95       	ret

0000231c <_ZN13OrangutanTime5init2Ev>:
    231c:	e0 e7       	ldi	r30, 0x70	; 112
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8e 7f       	andi	r24, 0xFE	; 254
    2324:	80 83       	st	Z, r24
    2326:	a0 eb       	ldi	r26, 0xB0	; 176
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	8c 91       	ld	r24, X
    232c:	83 60       	ori	r24, 0x03	; 3
    232e:	8c 93       	st	X, r24
    2330:	a1 eb       	ldi	r26, 0xB1	; 177
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	8c 91       	ld	r24, X
    2336:	80 7f       	andi	r24, 0xF0	; 240
    2338:	8c 93       	st	X, r24
    233a:	8c 91       	ld	r24, X
    233c:	82 60       	ori	r24, 0x02	; 2
    233e:	8c 93       	st	X, r24
    2340:	b8 9a       	sbi	0x17, 0	; 23
    2342:	80 81       	ld	r24, Z
    2344:	81 60       	ori	r24, 0x01	; 1
    2346:	80 83       	st	Z, r24
    2348:	78 94       	sei
    234a:	08 95       	ret

0000234c <_ZN13OrangutanTime4initEv>:
    234c:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <_ZZN13OrangutanTime4initEvE11initialized>
    2350:	81 11       	cpse	r24, r1
    2352:	05 c0       	rjmp	.+10     	; 0x235e <_ZN13OrangutanTime4initEv+0x12>
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <_ZZN13OrangutanTime4initEvE11initialized>
    235a:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN13OrangutanTime5init2Ev>
    235e:	08 95       	ret

00002360 <_ZN13OrangutanTime5resetEv>:
    2360:	0e 94 a6 11 	call	0x234c	; 0x234c <_ZN13OrangutanTime4initEv>
    2364:	e0 e7       	ldi	r30, 0x70	; 112
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8e 7f       	andi	r24, 0xFE	; 254
    236c:	80 83       	st	Z, r24
    236e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msCounter>
    2372:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <msCounter+0x1>
    2376:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <msCounter+0x2>
    237a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <msCounter+0x3>
    237e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <us_over_10+0x1>
    2382:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <us_over_10>
    2386:	80 81       	ld	r24, Z
    2388:	81 60       	ori	r24, 0x01	; 1
    238a:	80 83       	st	Z, r24
    238c:	08 95       	ret

0000238e <read_line_sensors>:
    238e:	46 2f       	mov	r20, r22
    2390:	bc 01       	movw	r22, r24
    2392:	89 ea       	ldi	r24, 0xA9	; 169
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN16PololuQTRSensors4readEPjh>
    239a:	08 95       	ret

0000239c <_ZN9Pololu3pi4initEjh>:
    239c:	0f 93       	push	r16
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <_ZN9Pololu3pi4initEjh+0x8>
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <_ZN9Pololu3pi4initEjh+0xa>
    23a6:	1f 92       	push	r1
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9c 01       	movw	r18, r24
    23ae:	85 e0       	ldi	r24, 0x05	; 5
    23b0:	ec e4       	ldi	r30, 0x4C	; 76
    23b2:	f1 e0       	ldi	r31, 0x01	; 1
    23b4:	de 01       	movw	r26, r28
    23b6:	11 96       	adiw	r26, 0x01	; 1
    23b8:	01 90       	ld	r0, Z+
    23ba:	0d 92       	st	X+, r0
    23bc:	8a 95       	dec	r24
    23be:	e1 f7       	brne	.-8      	; 0x23b8 <_ZN9Pololu3pi4initEjh+0x1c>
    23c0:	66 23       	and	r22, r22
    23c2:	11 f0       	breq	.+4      	; 0x23c8 <_ZN9Pololu3pi4initEjh+0x2c>
    23c4:	0f ef       	ldi	r16, 0xFF	; 255
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <_ZN9Pololu3pi4initEjh+0x2e>
    23c8:	03 e1       	ldi	r16, 0x13	; 19
    23ca:	45 e0       	ldi	r20, 0x05	; 5
    23cc:	be 01       	movw	r22, r28
    23ce:	6f 5f       	subi	r22, 0xFF	; 255
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	89 ea       	ldi	r24, 0xA9	; 169
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    23da:	89 ea       	ldi	r24, 0xA9	; 169
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN16PololuQTRSensors11emittersOffEv>
    23e2:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN13OrangutanTime5resetEv>
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	0f 91       	pop	r16
    23f6:	08 95       	ret

000023f8 <pololu_3pi_init>:
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	0e 94 ce 11 	call	0x239c	; 0x239c <_ZN9Pololu3pi4initEjh>
    23fe:	08 95       	ret

00002400 <_GLOBAL__sub_D_pololu_3pi_init>:
    2400:	89 ea       	ldi	r24, 0xA9	; 169
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN16PololuQTRSensorsD1Ev>
    2408:	08 95       	ret

0000240a <delay_us>:
    240a:	6f 93       	push	r22
    240c:	64 e0       	ldi	r22, 0x04	; 4
    240e:	6a 95       	dec	r22
    2410:	f1 f7       	brne	.-4      	; 0x240e <delay_us+0x4>
    2412:	6f 91       	pop	r22
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	c9 f7       	brne	.-14     	; 0x240a <delay_us>
    2418:	08 95       	ret

0000241a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    241a:	fc 01       	movw	r30, r24
    241c:	11 82       	std	Z+1, r1	; 0x01
    241e:	10 82       	st	Z, r1
    2420:	13 82       	std	Z+3, r1	; 0x03
    2422:	12 82       	std	Z+2, r1	; 0x02
    2424:	15 82       	std	Z+5, r1	; 0x05
    2426:	14 82       	std	Z+4, r1	; 0x04
    2428:	16 82       	std	Z+6, r1	; 0x06
    242a:	68 30       	cpi	r22, 0x08	; 8
    242c:	68 f4       	brcc	.+26     	; 0x2448 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    242e:	89 e2       	ldi	r24, 0x29	; 41
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	8b e2       	ldi	r24, 0x2B	; 43
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	93 83       	std	Z+3, r25	; 0x03
    243c:	82 83       	std	Z+2, r24	; 0x02
    243e:	8a e2       	ldi	r24, 0x2A	; 42
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	95 83       	std	Z+5, r25	; 0x05
    2444:	84 83       	std	Z+4, r24	; 0x04
    2446:	1f c0       	rjmp	.+62     	; 0x2486 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2448:	6e 30       	cpi	r22, 0x0E	; 14
    244a:	70 f4       	brcc	.+28     	; 0x2468 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    244c:	83 e2       	ldi	r24, 0x23	; 35
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
    2454:	85 e2       	ldi	r24, 0x25	; 37
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	93 83       	std	Z+3, r25	; 0x03
    245a:	82 83       	std	Z+2, r24	; 0x02
    245c:	84 e2       	ldi	r24, 0x24	; 36
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	95 83       	std	Z+5, r25	; 0x05
    2462:	84 83       	std	Z+4, r24	; 0x04
    2464:	68 50       	subi	r22, 0x08	; 8
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2468:	65 31       	cpi	r22, 0x15	; 21
    246a:	98 f4       	brcc	.+38     	; 0x2492 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    246c:	86 e2       	ldi	r24, 0x26	; 38
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	88 e2       	ldi	r24, 0x28	; 40
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	93 83       	std	Z+3, r25	; 0x03
    247a:	82 83       	std	Z+2, r24	; 0x02
    247c:	87 e2       	ldi	r24, 0x27	; 39
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	95 83       	std	Z+5, r25	; 0x05
    2482:	84 83       	std	Z+4, r24	; 0x04
    2484:	6e 50       	subi	r22, 0x0E	; 14
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	01 c0       	rjmp	.+2      	; 0x248c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    248a:	88 0f       	add	r24, r24
    248c:	6a 95       	dec	r22
    248e:	ea f7       	brpl	.-6      	; 0x248a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2490:	86 83       	std	Z+6, r24	; 0x06
    2492:	08 95       	ret

00002494 <_ZN16PololuQTRSensors4initEhhh>:
    2494:	a7 e0       	ldi	r26, 0x07	; 7
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e0 e5       	ldi	r30, 0x50	; 80
    249a:	f2 e1       	ldi	r31, 0x12	; 18
    249c:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__prologue_saves__+0x1c>
    24a0:	8c 01       	movw	r16, r24
    24a2:	fc 01       	movw	r30, r24
    24a4:	11 82       	std	Z+1, r1	; 0x01
    24a6:	10 82       	st	Z, r1
    24a8:	13 82       	std	Z+3, r1	; 0x03
    24aa:	12 82       	std	Z+2, r1	; 0x02
    24ac:	15 82       	std	Z+5, r1	; 0x05
    24ae:	14 82       	std	Z+4, r1	; 0x04
    24b0:	17 82       	std	Z+7, r1	; 0x07
    24b2:	16 82       	std	Z+6, r1	; 0x06
    24b4:	61 31       	cpi	r22, 0x11	; 17
    24b6:	18 f0       	brcs	.+6      	; 0x24be <_ZN16PololuQTRSensors4initEhhh+0x2a>
    24b8:	80 e1       	ldi	r24, 0x10	; 16
    24ba:	80 87       	std	Z+8, r24	; 0x08
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    24be:	fc 01       	movw	r30, r24
    24c0:	60 87       	std	Z+8, r22	; 0x08
    24c2:	f8 01       	movw	r30, r16
    24c4:	20 8b       	std	Z+16, r18	; 0x10
    24c6:	64 2f       	mov	r22, r20
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    24d0:	8f 81       	ldd	r24, Y+7	; 0x07
    24d2:	f8 01       	movw	r30, r16
    24d4:	81 87       	std	Z+9, r24	; 0x09
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	93 87       	std	Z+11, r25	; 0x0b
    24dc:	82 87       	std	Z+10, r24	; 0x0a
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	95 87       	std	Z+13, r25	; 0x0d
    24e4:	84 87       	std	Z+12, r24	; 0x0c
    24e6:	27 96       	adiw	r28, 0x07	; 7
    24e8:	e4 e0       	ldi	r30, 0x04	; 4
    24ea:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__epilogue_restores__+0x1c>

000024ee <_ZN16PololuQTRSensors11emittersOffEv>:
    24ee:	fc 01       	movw	r30, r24
    24f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    24f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    24f4:	10 97       	sbiw	r26, 0x00	; 0
    24f6:	79 f0       	breq	.+30     	; 0x2516 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    24f8:	8c 91       	ld	r24, X
    24fa:	91 85       	ldd	r25, Z+9	; 0x09
    24fc:	89 2b       	or	r24, r25
    24fe:	8c 93       	st	X, r24
    2500:	a2 85       	ldd	r26, Z+10	; 0x0a
    2502:	b3 85       	ldd	r27, Z+11	; 0x0b
    2504:	9c 91       	ld	r25, X
    2506:	81 85       	ldd	r24, Z+9	; 0x09
    2508:	80 95       	com	r24
    250a:	89 23       	and	r24, r25
    250c:	8c 93       	st	X, r24
    250e:	88 ec       	ldi	r24, 0xC8	; 200
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 05 12 	call	0x240a	; 0x240a <delay_us>
    2516:	08 95       	ret

00002518 <_ZN16PololuQTRSensors10emittersOnEv>:
    2518:	fc 01       	movw	r30, r24
    251a:	a4 85       	ldd	r26, Z+12	; 0x0c
    251c:	b5 85       	ldd	r27, Z+13	; 0x0d
    251e:	10 97       	sbiw	r26, 0x00	; 0
    2520:	71 f0       	breq	.+28     	; 0x253e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2522:	8c 91       	ld	r24, X
    2524:	91 85       	ldd	r25, Z+9	; 0x09
    2526:	89 2b       	or	r24, r25
    2528:	8c 93       	st	X, r24
    252a:	a2 85       	ldd	r26, Z+10	; 0x0a
    252c:	b3 85       	ldd	r27, Z+11	; 0x0b
    252e:	8c 91       	ld	r24, X
    2530:	91 85       	ldd	r25, Z+9	; 0x09
    2532:	89 2b       	or	r24, r25
    2534:	8c 93       	st	X, r24
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 05 12 	call	0x240a	; 0x240a <delay_us>
    253e:	08 95       	ret

00002540 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2540:	a7 e0       	ldi	r26, 0x07	; 7
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e6 ea       	ldi	r30, 0xA6	; 166
    2546:	f2 e1       	ldi	r31, 0x12	; 18
    2548:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x6>
    254c:	7c 01       	movw	r14, r24
    254e:	4b 01       	movw	r8, r22
    2550:	64 2f       	mov	r22, r20
    2552:	39 01       	movw	r6, r18
    2554:	40 2f       	mov	r20, r16
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	0e 94 4a 12 	call	0x2494	; 0x2494 <_ZN16PololuQTRSensors4initEhhh>
    255c:	87 01       	movw	r16, r14
    255e:	0f 5b       	subi	r16, 0xBF	; 191
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	f8 01       	movw	r30, r16
    2564:	10 82       	st	Z, r1
    2566:	67 01       	movw	r12, r14
    2568:	f2 e4       	ldi	r31, 0x42	; 66
    256a:	cf 0e       	add	r12, r31
    256c:	d1 1c       	adc	r13, r1
    256e:	f6 01       	movw	r30, r12
    2570:	10 82       	st	Z, r1
    2572:	57 01       	movw	r10, r14
    2574:	f3 e4       	ldi	r31, 0x43	; 67
    2576:	af 0e       	add	r10, r31
    2578:	b1 1c       	adc	r11, r1
    257a:	f5 01       	movw	r30, r10
    257c:	10 82       	st	Z, r1
    257e:	f7 01       	movw	r30, r14
    2580:	77 86       	std	Z+15, r7	; 0x0f
    2582:	66 86       	std	Z+14, r6	; 0x0e
    2584:	51 2c       	mov	r5, r1
    2586:	f7 01       	movw	r30, r14
    2588:	80 85       	ldd	r24, Z+8	; 0x08
    258a:	58 16       	cp	r5, r24
    258c:	50 f5       	brcc	.+84     	; 0x25e2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    258e:	65 2c       	mov	r6, r5
    2590:	71 2c       	mov	r7, r1
    2592:	f4 01       	movw	r30, r8
    2594:	e6 0d       	add	r30, r6
    2596:	f7 1d       	adc	r31, r7
    2598:	60 81       	ld	r22, Z
    259a:	ce 01       	movw	r24, r28
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    25a2:	2f 81       	ldd	r18, Y+7	; 0x07
    25a4:	f7 01       	movw	r30, r14
    25a6:	e6 0d       	add	r30, r6
    25a8:	f7 1d       	adc	r31, r7
    25aa:	21 8b       	std	Z+17, r18	; 0x11
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	f3 01       	movw	r30, r6
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	ee 0d       	add	r30, r14
    25b8:	ff 1d       	adc	r31, r15
    25ba:	92 a3       	std	Z+34, r25	; 0x22
    25bc:	81 a3       	std	Z+33, r24	; 0x21
    25be:	83 32       	cpi	r24, 0x23	; 35
    25c0:	91 05       	cpc	r25, r1
    25c2:	11 f4       	brne	.+4      	; 0x25c8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    25c4:	f8 01       	movw	r30, r16
    25c6:	08 c0       	rjmp	.+16     	; 0x25d8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    25c8:	86 32       	cpi	r24, 0x26	; 38
    25ca:	91 05       	cpc	r25, r1
    25cc:	11 f4       	brne	.+4      	; 0x25d2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    25ce:	f6 01       	movw	r30, r12
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    25d2:	89 97       	sbiw	r24, 0x29	; 41
    25d4:	21 f4       	brne	.+8      	; 0x25de <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    25d6:	f5 01       	movw	r30, r10
    25d8:	80 81       	ld	r24, Z
    25da:	82 2b       	or	r24, r18
    25dc:	80 83       	st	Z, r24
    25de:	53 94       	inc	r5
    25e0:	d2 cf       	rjmp	.-92     	; 0x2586 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    25e2:	27 96       	adiw	r28, 0x07	; 7
    25e4:	ef e0       	ldi	r30, 0x0F	; 15
    25e6:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x6>

000025ea <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	eb ef       	ldi	r30, 0xFB	; 251
    25f0:	f2 e1       	ldi	r31, 0x12	; 18
    25f2:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__+0xa>
    25f6:	ec 01       	movw	r28, r24
    25f8:	5b 01       	movw	r10, r22
    25fa:	6c 01       	movw	r12, r24
    25fc:	81 e4       	ldi	r24, 0x41	; 65
    25fe:	c8 0e       	add	r12, r24
    2600:	d1 1c       	adc	r13, r1
    2602:	f6 01       	movw	r30, r12
    2604:	80 80       	ld	r8, Z
    2606:	7e 01       	movw	r14, r28
    2608:	f2 e4       	ldi	r31, 0x42	; 66
    260a:	ef 0e       	add	r14, r31
    260c:	f1 1c       	adc	r15, r1
    260e:	f7 01       	movw	r30, r14
    2610:	70 80       	ld	r7, Z
    2612:	8e 01       	movw	r16, r28
    2614:	0d 5b       	subi	r16, 0xBD	; 189
    2616:	1f 4f       	sbci	r17, 0xFF	; 255
    2618:	f8 01       	movw	r30, r16
    261a:	90 80       	ld	r9, Z
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	98 85       	ldd	r25, Y+8	; 0x08
    2620:	89 17       	cp	r24, r25
    2622:	48 f4       	brcc	.+18     	; 0x2636 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2624:	f5 01       	movw	r30, r10
    2626:	e8 0f       	add	r30, r24
    2628:	f1 1d       	adc	r31, r1
    262a:	e8 0f       	add	r30, r24
    262c:	f1 1d       	adc	r31, r1
    262e:	11 82       	std	Z+1, r1	; 0x01
    2630:	10 82       	st	Z, r1
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	f4 cf       	rjmp	.-24     	; 0x261e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2636:	84 b1       	in	r24, 0x04	; 4
    2638:	f6 01       	movw	r30, r12
    263a:	90 81       	ld	r25, Z
    263c:	89 2b       	or	r24, r25
    263e:	84 b9       	out	0x04, r24	; 4
    2640:	87 b1       	in	r24, 0x07	; 7
    2642:	f7 01       	movw	r30, r14
    2644:	90 81       	ld	r25, Z
    2646:	89 2b       	or	r24, r25
    2648:	87 b9       	out	0x07, r24	; 7
    264a:	8a b1       	in	r24, 0x0a	; 10
    264c:	f8 01       	movw	r30, r16
    264e:	90 81       	ld	r25, Z
    2650:	89 2b       	or	r24, r25
    2652:	8a b9       	out	0x0a, r24	; 10
    2654:	85 b1       	in	r24, 0x05	; 5
    2656:	f6 01       	movw	r30, r12
    2658:	90 81       	ld	r25, Z
    265a:	89 2b       	or	r24, r25
    265c:	85 b9       	out	0x05, r24	; 5
    265e:	88 b1       	in	r24, 0x08	; 8
    2660:	f7 01       	movw	r30, r14
    2662:	90 81       	ld	r25, Z
    2664:	89 2b       	or	r24, r25
    2666:	88 b9       	out	0x08, r24	; 8
    2668:	8b b1       	in	r24, 0x0b	; 11
    266a:	f8 01       	movw	r30, r16
    266c:	90 81       	ld	r25, Z
    266e:	89 2b       	or	r24, r25
    2670:	8b b9       	out	0x0b, r24	; 11
    2672:	8a e0       	ldi	r24, 0x0A	; 10
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 05 12 	call	0x240a	; 0x240a <delay_us>
    267a:	94 b1       	in	r25, 0x04	; 4
    267c:	f6 01       	movw	r30, r12
    267e:	80 81       	ld	r24, Z
    2680:	80 95       	com	r24
    2682:	89 23       	and	r24, r25
    2684:	84 b9       	out	0x04, r24	; 4
    2686:	97 b1       	in	r25, 0x07	; 7
    2688:	f7 01       	movw	r30, r14
    268a:	80 81       	ld	r24, Z
    268c:	80 95       	com	r24
    268e:	89 23       	and	r24, r25
    2690:	87 b9       	out	0x07, r24	; 7
    2692:	9a b1       	in	r25, 0x0a	; 10
    2694:	f8 01       	movw	r30, r16
    2696:	80 81       	ld	r24, Z
    2698:	80 95       	com	r24
    269a:	89 23       	and	r24, r25
    269c:	8a b9       	out	0x0a, r24	; 10
    269e:	95 b1       	in	r25, 0x05	; 5
    26a0:	f6 01       	movw	r30, r12
    26a2:	80 81       	ld	r24, Z
    26a4:	80 95       	com	r24
    26a6:	89 23       	and	r24, r25
    26a8:	85 b9       	out	0x05, r24	; 5
    26aa:	98 b1       	in	r25, 0x08	; 8
    26ac:	f7 01       	movw	r30, r14
    26ae:	80 81       	ld	r24, Z
    26b0:	80 95       	com	r24
    26b2:	89 23       	and	r24, r25
    26b4:	88 b9       	out	0x08, r24	; 8
    26b6:	9b b1       	in	r25, 0x0b	; 11
    26b8:	f8 01       	movw	r30, r16
    26ba:	80 81       	ld	r24, Z
    26bc:	80 95       	com	r24
    26be:	89 23       	and	r24, r25
    26c0:	8b b9       	out	0x0b, r24	; 11
    26c2:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26c6:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26ce:	83 60       	ori	r24, 0x03	; 3
    26d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26da:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	2e 85       	ldd	r18, Y+14	; 0x0e
    26e4:	3f 85       	ldd	r19, Y+15	; 0x0f
    26e6:	82 17       	cp	r24, r18
    26e8:	93 07       	cpc	r25, r19
    26ea:	20 f5       	brcc	.+72     	; 0x2734 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    26ec:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    26f0:	2c 2d       	mov	r18, r12
    26f2:	24 1b       	sub	r18, r20
    26f4:	82 0f       	add	r24, r18
    26f6:	91 1d       	adc	r25, r1
    26f8:	03 b1       	in	r16, 0x03	; 3
    26fa:	08 11       	cpse	r16, r8
    26fc:	32 c0       	rjmp	.+100    	; 0x2762 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    26fe:	f6 b0       	in	r15, 0x06	; 6
    2700:	f7 10       	cpse	r15, r7
    2702:	2f c0       	rjmp	.+94     	; 0x2762 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2704:	29 b1       	in	r18, 0x09	; 9
    2706:	29 11       	cpse	r18, r9
    2708:	2c c0       	rjmp	.+88     	; 0x2762 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    270a:	10 c0       	rjmp	.+32     	; 0x272c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    270c:	21 2f       	mov	r18, r17
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	a9 01       	movw	r20, r18
    2712:	44 0f       	add	r20, r20
    2714:	55 1f       	adc	r21, r21
    2716:	f5 01       	movw	r30, r10
    2718:	e4 0f       	add	r30, r20
    271a:	f5 1f       	adc	r31, r21
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	67 2b       	or	r22, r23
    2722:	21 f1       	breq	.+72     	; 0x276c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2724:	1f 5f       	subi	r17, 0xFF	; 255
    2726:	28 85       	ldd	r18, Y+8	; 0x08
    2728:	12 17       	cp	r17, r18
    272a:	80 f3       	brcs	.-32     	; 0x270c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    272c:	7f 2c       	mov	r7, r15
    272e:	80 2e       	mov	r8, r16
    2730:	4c 2d       	mov	r20, r12
    2732:	d7 cf       	rjmp	.-82     	; 0x26e2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2734:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2738:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	88 85       	ldd	r24, Y+8	; 0x08
    2740:	28 17       	cp	r18, r24
    2742:	30 f5       	brcc	.+76     	; 0x2790 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2744:	f5 01       	movw	r30, r10
    2746:	e2 0f       	add	r30, r18
    2748:	f1 1d       	adc	r31, r1
    274a:	e2 0f       	add	r30, r18
    274c:	f1 1d       	adc	r31, r1
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	89 2b       	or	r24, r25
    2754:	21 f4       	brne	.+8      	; 0x275e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2756:	8e 85       	ldd	r24, Y+14	; 0x0e
    2758:	9f 85       	ldd	r25, Y+15	; 0x0f
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
    275e:	2f 5f       	subi	r18, 0xFF	; 255
    2760:	ee cf       	rjmp	.-36     	; 0x273e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2762:	03 b1       	in	r16, 0x03	; 3
    2764:	f6 b0       	in	r15, 0x06	; 6
    2766:	99 b0       	in	r9, 0x09	; 9
    2768:	10 e0       	ldi	r17, 0x00	; 0
    276a:	dd cf       	rjmp	.-70     	; 0x2726 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    276c:	de 01       	movw	r26, r28
    276e:	a4 0f       	add	r26, r20
    2770:	b5 1f       	adc	r27, r21
    2772:	91 96       	adiw	r26, 0x21	; 33
    2774:	0d 90       	ld	r0, X+
    2776:	bc 91       	ld	r27, X
    2778:	a0 2d       	mov	r26, r0
    277a:	4c 91       	ld	r20, X
    277c:	de 01       	movw	r26, r28
    277e:	a2 0f       	add	r26, r18
    2780:	b3 1f       	adc	r27, r19
    2782:	51 96       	adiw	r26, 0x11	; 17
    2784:	2c 91       	ld	r18, X
    2786:	42 23       	and	r20, r18
    2788:	69 f6       	brne	.-102    	; 0x2724 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	ca cf       	rjmp	.-108    	; 0x2724 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	ed e0       	ldi	r30, 0x0D	; 13
    2796:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__+0xa>

0000279a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	fc 01       	movw	r30, r24
    27a8:	9b 01       	movw	r18, r22
    27aa:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    27ae:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27b2:	47 b1       	in	r20, 0x07	; 7
    27b4:	18 b1       	in	r17, 0x08	; 8
    27b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27ba:	86 fd       	sbrc	r24, 6
    27bc:	fc cf       	rjmp	.-8      	; 0x27b6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 85       	ldd	r25, Z+8	; 0x08
    27c2:	89 17       	cp	r24, r25
    27c4:	48 f4       	brcc	.+18     	; 0x27d8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    27c6:	d9 01       	movw	r26, r18
    27c8:	a8 0f       	add	r26, r24
    27ca:	b1 1d       	adc	r27, r1
    27cc:	a8 0f       	add	r26, r24
    27ce:	b1 1d       	adc	r27, r1
    27d0:	1d 92       	st	X+, r1
    27d2:	1c 92       	st	X, r1
    27d4:	8f 5f       	subi	r24, 0xFF	; 255
    27d6:	f4 cf       	rjmp	.-24     	; 0x27c0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    27d8:	97 b1       	in	r25, 0x07	; 7
    27da:	82 a1       	ldd	r24, Z+34	; 0x22
    27dc:	80 95       	com	r24
    27de:	89 23       	and	r24, r25
    27e0:	87 b9       	out	0x07, r24	; 7
    27e2:	98 b1       	in	r25, 0x08	; 8
    27e4:	82 a1       	ldd	r24, Z+34	; 0x22
    27e6:	80 95       	com	r24
    27e8:	89 23       	and	r24, r25
    27ea:	88 b9       	out	0x08, r24	; 8
    27ec:	87 e8       	ldi	r24, 0x87	; 135
    27ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27f2:	e1 2c       	mov	r14, r1
    27f4:	81 a1       	ldd	r24, Z+33	; 0x21
    27f6:	e8 16       	cp	r14, r24
    27f8:	10 f0       	brcs	.+4      	; 0x27fe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    27fa:	e1 2c       	mov	r14, r1
    27fc:	29 c0       	rjmp	.+82     	; 0x2850 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	80 85       	ldd	r24, Z+8	; 0x08
    2802:	58 17       	cp	r21, r24
    2804:	18 f5       	brcc	.+70     	; 0x284c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2806:	a5 2f       	mov	r26, r21
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ef 01       	movw	r28, r30
    280c:	ca 0f       	add	r28, r26
    280e:	db 1f       	adc	r29, r27
    2810:	89 89       	ldd	r24, Y+17	; 0x11
    2812:	80 64       	ori	r24, 0x40	; 64
    2814:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2818:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    281c:	80 64       	ori	r24, 0x40	; 64
    281e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2822:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2826:	86 fd       	sbrc	r24, 6
    2828:	fc cf       	rjmp	.-8      	; 0x2822 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    282a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    282e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2832:	aa 0f       	add	r26, r26
    2834:	bb 1f       	adc	r27, r27
    2836:	a2 0f       	add	r26, r18
    2838:	b3 1f       	adc	r27, r19
    283a:	8d 91       	ld	r24, X+
    283c:	9c 91       	ld	r25, X
    283e:	11 97       	sbiw	r26, 0x01	; 1
    2840:	86 0f       	add	r24, r22
    2842:	97 1f       	adc	r25, r23
    2844:	8d 93       	st	X+, r24
    2846:	9c 93       	st	X, r25
    2848:	5f 5f       	subi	r21, 0xFF	; 255
    284a:	da cf       	rjmp	.-76     	; 0x2800 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    284c:	e3 94       	inc	r14
    284e:	d2 cf       	rjmp	.-92     	; 0x27f4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2850:	80 85       	ldd	r24, Z+8	; 0x08
    2852:	e8 16       	cp	r14, r24
    2854:	a0 f4       	brcc	.+40     	; 0x287e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2856:	e9 01       	movw	r28, r18
    2858:	ce 0d       	add	r28, r14
    285a:	d1 1d       	adc	r29, r1
    285c:	ce 0d       	add	r28, r14
    285e:	d1 1d       	adc	r29, r1
    2860:	61 a1       	ldd	r22, Z+33	; 0x21
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	cb 01       	movw	r24, r22
    2866:	95 95       	asr	r25
    2868:	87 95       	ror	r24
    286a:	a8 81       	ld	r26, Y
    286c:	b9 81       	ldd	r27, Y+1	; 0x01
    286e:	8a 0f       	add	r24, r26
    2870:	9b 1f       	adc	r25, r27
    2872:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    2876:	79 83       	std	Y+1, r23	; 0x01
    2878:	68 83       	st	Y, r22
    287a:	e3 94       	inc	r14
    287c:	e9 cf       	rjmp	.-46     	; 0x2850 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    287e:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2882:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2886:	18 b9       	out	0x08, r17	; 8
    2888:	47 b9       	out	0x07, r20	; 7
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	e6 e0       	ldi	r30, 0x06	; 6
    2890:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

00002894 <_ZN16PololuQTRSensors4readEPjh>:
    2894:	a0 e2       	ldi	r26, 0x20	; 32
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e0 e5       	ldi	r30, 0x50	; 80
    289a:	f4 e1       	ldi	r31, 0x14	; 20
    289c:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x16>
    28a0:	8c 01       	movw	r16, r24
    28a2:	7b 01       	movw	r14, r22
    28a4:	d4 2e       	mov	r13, r20
    28a6:	8f ef       	ldi	r24, 0xFF	; 255
    28a8:	84 0f       	add	r24, r20
    28aa:	82 30       	cpi	r24, 0x02	; 2
    28ac:	18 f4       	brcc	.+6      	; 0x28b4 <_ZN16PololuQTRSensors4readEPjh+0x20>
    28ae:	c8 01       	movw	r24, r16
    28b0:	0e 94 8c 12 	call	0x2518	; 0x2518 <_ZN16PololuQTRSensors10emittersOnEv>
    28b4:	d8 01       	movw	r26, r16
    28b6:	50 96       	adiw	r26, 0x10	; 16
    28b8:	8c 91       	ld	r24, X
    28ba:	b7 01       	movw	r22, r14
    28bc:	81 11       	cpse	r24, r1
    28be:	10 c0       	rjmp	.+32     	; 0x28e0 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    28c0:	c8 01       	movw	r24, r16
    28c2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    28c6:	c8 01       	movw	r24, r16
    28c8:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN16PololuQTRSensors11emittersOffEv>
    28cc:	b2 e0       	ldi	r27, 0x02	; 2
    28ce:	db 12       	cpse	r13, r27
    28d0:	3a c0       	rjmp	.+116    	; 0x2946 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    28d2:	be 01       	movw	r22, r28
    28d4:	6f 5f       	subi	r22, 0xFF	; 255
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	c8 01       	movw	r24, r16
    28da:	0e 94 f5 12 	call	0x25ea	; 0x25ea <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <_ZN16PololuQTRSensors4readEPjh+0x6a>
    28e0:	c8 01       	movw	r24, r16
    28e2:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    28e6:	c8 01       	movw	r24, r16
    28e8:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN16PololuQTRSensors11emittersOffEv>
    28ec:	e2 e0       	ldi	r30, 0x02	; 2
    28ee:	de 12       	cpse	r13, r30
    28f0:	2a c0       	rjmp	.+84     	; 0x2946 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    28f2:	be 01       	movw	r22, r28
    28f4:	6f 5f       	subi	r22, 0xFF	; 255
    28f6:	7f 4f       	sbci	r23, 0xFF	; 255
    28f8:	c8 01       	movw	r24, r16
    28fa:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	f8 01       	movw	r30, r16
    2902:	80 85       	ldd	r24, Z+8	; 0x08
    2904:	48 17       	cp	r20, r24
    2906:	f8 f4       	brcc	.+62     	; 0x2946 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2908:	84 2f       	mov	r24, r20
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	f7 01       	movw	r30, r14
    2912:	e8 0f       	add	r30, r24
    2914:	f9 1f       	adc	r31, r25
    2916:	21 e0       	ldi	r18, 0x01	; 1
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	2c 0f       	add	r18, r28
    291c:	3d 1f       	adc	r19, r29
    291e:	82 0f       	add	r24, r18
    2920:	93 1f       	adc	r25, r19
    2922:	d8 01       	movw	r26, r16
    2924:	1e 96       	adiw	r26, 0x0e	; 14
    2926:	2d 91       	ld	r18, X+
    2928:	3c 91       	ld	r19, X
    292a:	1f 97       	sbiw	r26, 0x0f	; 15
    292c:	dc 01       	movw	r26, r24
    292e:	8d 91       	ld	r24, X+
    2930:	9c 91       	ld	r25, X
    2932:	28 1b       	sub	r18, r24
    2934:	39 0b       	sbc	r19, r25
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	82 0f       	add	r24, r18
    293c:	93 1f       	adc	r25, r19
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	4f 5f       	subi	r20, 0xFF	; 255
    2944:	dd cf       	rjmp	.-70     	; 0x2900 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2946:	a0 96       	adiw	r28, 0x20	; 32
    2948:	e7 e0       	ldi	r30, 0x07	; 7
    294a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x16>

0000294e <_ZN16PololuQTRSensorsD1Ev>:
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	ec 01       	movw	r28, r24
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	9b 81       	ldd	r25, Y+3	; 0x03
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	11 f0       	breq	.+4      	; 0x2960 <_ZN16PololuQTRSensorsD1Ev+0x12>
    295c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <free>
    2960:	8e 81       	ldd	r24, Y+6	; 0x06
    2962:	9f 81       	ldd	r25, Y+7	; 0x07
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	11 f0       	breq	.+4      	; 0x296c <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2968:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <free>
    296c:	88 81       	ld	r24, Y
    296e:	99 81       	ldd	r25, Y+1	; 0x01
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	11 f0       	breq	.+4      	; 0x2978 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2974:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <free>
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	9d 81       	ldd	r25, Y+5	; 0x05
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	11 f0       	breq	.+4      	; 0x2984 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2980:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <free>
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	08 95       	ret

0000298a <__udivmodqi4>:
    298a:	99 1b       	sub	r25, r25
    298c:	79 e0       	ldi	r23, 0x09	; 9
    298e:	04 c0       	rjmp	.+8      	; 0x2998 <__udivmodqi4_ep>

00002990 <__udivmodqi4_loop>:
    2990:	99 1f       	adc	r25, r25
    2992:	96 17       	cp	r25, r22
    2994:	08 f0       	brcs	.+2      	; 0x2998 <__udivmodqi4_ep>
    2996:	96 1b       	sub	r25, r22

00002998 <__udivmodqi4_ep>:
    2998:	88 1f       	adc	r24, r24
    299a:	7a 95       	dec	r23
    299c:	c9 f7       	brne	.-14     	; 0x2990 <__udivmodqi4_loop>
    299e:	80 95       	com	r24
    29a0:	08 95       	ret

000029a2 <__udivmodhi4>:
    29a2:	aa 1b       	sub	r26, r26
    29a4:	bb 1b       	sub	r27, r27
    29a6:	51 e1       	ldi	r21, 0x11	; 17
    29a8:	07 c0       	rjmp	.+14     	; 0x29b8 <__udivmodhi4_ep>

000029aa <__udivmodhi4_loop>:
    29aa:	aa 1f       	adc	r26, r26
    29ac:	bb 1f       	adc	r27, r27
    29ae:	a6 17       	cp	r26, r22
    29b0:	b7 07       	cpc	r27, r23
    29b2:	10 f0       	brcs	.+4      	; 0x29b8 <__udivmodhi4_ep>
    29b4:	a6 1b       	sub	r26, r22
    29b6:	b7 0b       	sbc	r27, r23

000029b8 <__udivmodhi4_ep>:
    29b8:	88 1f       	adc	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	5a 95       	dec	r21
    29be:	a9 f7       	brne	.-22     	; 0x29aa <__udivmodhi4_loop>
    29c0:	80 95       	com	r24
    29c2:	90 95       	com	r25
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	08 95       	ret

000029ca <__divmodhi4>:
    29ca:	97 fb       	bst	r25, 7
    29cc:	07 2e       	mov	r0, r23
    29ce:	16 f4       	brtc	.+4      	; 0x29d4 <__divmodhi4+0xa>
    29d0:	00 94       	com	r0
    29d2:	07 d0       	rcall	.+14     	; 0x29e2 <__divmodhi4_neg1>
    29d4:	77 fd       	sbrc	r23, 7
    29d6:	09 d0       	rcall	.+18     	; 0x29ea <__divmodhi4_neg2>
    29d8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__udivmodhi4>
    29dc:	07 fc       	sbrc	r0, 7
    29de:	05 d0       	rcall	.+10     	; 0x29ea <__divmodhi4_neg2>
    29e0:	3e f4       	brtc	.+14     	; 0x29f0 <__divmodhi4_exit>

000029e2 <__divmodhi4_neg1>:
    29e2:	90 95       	com	r25
    29e4:	81 95       	neg	r24
    29e6:	9f 4f       	sbci	r25, 0xFF	; 255
    29e8:	08 95       	ret

000029ea <__divmodhi4_neg2>:
    29ea:	70 95       	com	r23
    29ec:	61 95       	neg	r22
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255

000029f0 <__divmodhi4_exit>:
    29f0:	08 95       	ret

000029f2 <__udivmodsi4>:
    29f2:	a1 e2       	ldi	r26, 0x21	; 33
    29f4:	1a 2e       	mov	r1, r26
    29f6:	aa 1b       	sub	r26, r26
    29f8:	bb 1b       	sub	r27, r27
    29fa:	fd 01       	movw	r30, r26
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__udivmodsi4_ep>

000029fe <__udivmodsi4_loop>:
    29fe:	aa 1f       	adc	r26, r26
    2a00:	bb 1f       	adc	r27, r27
    2a02:	ee 1f       	adc	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	a2 17       	cp	r26, r18
    2a08:	b3 07       	cpc	r27, r19
    2a0a:	e4 07       	cpc	r30, r20
    2a0c:	f5 07       	cpc	r31, r21
    2a0e:	20 f0       	brcs	.+8      	; 0x2a18 <__udivmodsi4_ep>
    2a10:	a2 1b       	sub	r26, r18
    2a12:	b3 0b       	sbc	r27, r19
    2a14:	e4 0b       	sbc	r30, r20
    2a16:	f5 0b       	sbc	r31, r21

00002a18 <__udivmodsi4_ep>:
    2a18:	66 1f       	adc	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	1a 94       	dec	r1
    2a22:	69 f7       	brne	.-38     	; 0x29fe <__udivmodsi4_loop>
    2a24:	60 95       	com	r22
    2a26:	70 95       	com	r23
    2a28:	80 95       	com	r24
    2a2a:	90 95       	com	r25
    2a2c:	9b 01       	movw	r18, r22
    2a2e:	ac 01       	movw	r20, r24
    2a30:	bd 01       	movw	r22, r26
    2a32:	cf 01       	movw	r24, r30
    2a34:	08 95       	ret

00002a36 <__divmodsi4>:
    2a36:	05 2e       	mov	r0, r21
    2a38:	97 fb       	bst	r25, 7
    2a3a:	1e f4       	brtc	.+6      	; 0x2a42 <__divmodsi4+0xc>
    2a3c:	00 94       	com	r0
    2a3e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__negsi2>
    2a42:	57 fd       	sbrc	r21, 7
    2a44:	07 d0       	rcall	.+14     	; 0x2a54 <__divmodsi4_neg2>
    2a46:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__udivmodsi4>
    2a4a:	07 fc       	sbrc	r0, 7
    2a4c:	03 d0       	rcall	.+6      	; 0x2a54 <__divmodsi4_neg2>
    2a4e:	4e f4       	brtc	.+18     	; 0x2a62 <__divmodsi4_exit>
    2a50:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__negsi2>

00002a54 <__divmodsi4_neg2>:
    2a54:	50 95       	com	r21
    2a56:	40 95       	com	r20
    2a58:	30 95       	com	r19
    2a5a:	21 95       	neg	r18
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a60:	5f 4f       	sbci	r21, 0xFF	; 255

00002a62 <__divmodsi4_exit>:
    2a62:	08 95       	ret

00002a64 <__negsi2>:
    2a64:	90 95       	com	r25
    2a66:	80 95       	com	r24
    2a68:	70 95       	com	r23
    2a6a:	61 95       	neg	r22
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a70:	9f 4f       	sbci	r25, 0xFF	; 255
    2a72:	08 95       	ret

00002a74 <__tablejump2__>:
    2a74:	ee 0f       	add	r30, r30
    2a76:	ff 1f       	adc	r31, r31
    2a78:	05 90       	lpm	r0, Z+
    2a7a:	f4 91       	lpm	r31, Z
    2a7c:	e0 2d       	mov	r30, r0
    2a7e:	09 94       	ijmp

00002a80 <__umulhisi3>:
    2a80:	a2 9f       	mul	r26, r18
    2a82:	b0 01       	movw	r22, r0
    2a84:	b3 9f       	mul	r27, r19
    2a86:	c0 01       	movw	r24, r0
    2a88:	a3 9f       	mul	r26, r19
    2a8a:	70 0d       	add	r23, r0
    2a8c:	81 1d       	adc	r24, r1
    2a8e:	11 24       	eor	r1, r1
    2a90:	91 1d       	adc	r25, r1
    2a92:	b2 9f       	mul	r27, r18
    2a94:	70 0d       	add	r23, r0
    2a96:	81 1d       	adc	r24, r1
    2a98:	11 24       	eor	r1, r1
    2a9a:	91 1d       	adc	r25, r1
    2a9c:	08 95       	ret

00002a9e <__prologue_saves__>:
    2a9e:	2f 92       	push	r2
    2aa0:	3f 92       	push	r3
    2aa2:	4f 92       	push	r4
    2aa4:	5f 92       	push	r5
    2aa6:	6f 92       	push	r6
    2aa8:	7f 92       	push	r7
    2aaa:	8f 92       	push	r8
    2aac:	9f 92       	push	r9
    2aae:	af 92       	push	r10
    2ab0:	bf 92       	push	r11
    2ab2:	cf 92       	push	r12
    2ab4:	df 92       	push	r13
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	ca 1b       	sub	r28, r26
    2ac8:	db 0b       	sbc	r29, r27
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	09 94       	ijmp

00002ad6 <__epilogue_restores__>:
    2ad6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad8:	39 88       	ldd	r3, Y+17	; 0x11
    2ada:	48 88       	ldd	r4, Y+16	; 0x10
    2adc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ade:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ae4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae8:	b9 84       	ldd	r11, Y+9	; 0x09
    2aea:	c8 84       	ldd	r12, Y+8	; 0x08
    2aec:	df 80       	ldd	r13, Y+7	; 0x07
    2aee:	ee 80       	ldd	r14, Y+6	; 0x06
    2af0:	fd 80       	ldd	r15, Y+5	; 0x05
    2af2:	0c 81       	ldd	r16, Y+4	; 0x04
    2af4:	1b 81       	ldd	r17, Y+3	; 0x03
    2af6:	aa 81       	ldd	r26, Y+2	; 0x02
    2af8:	b9 81       	ldd	r27, Y+1	; 0x01
    2afa:	ce 0f       	add	r28, r30
    2afc:	d1 1d       	adc	r29, r1
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	ed 01       	movw	r28, r26
    2b0a:	08 95       	ret

00002b0c <malloc>:
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	91 05       	cpc	r25, r1
    2b18:	10 f4       	brcc	.+4      	; 0x2b1e <malloc+0x12>
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	e0 91 39 07 	lds	r30, 0x0739	; 0x800739 <__flp>
    2b22:	f0 91 3a 07 	lds	r31, 0x073A	; 0x80073a <__flp+0x1>
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	30 97       	sbiw	r30, 0x00	; 0
    2b30:	19 f1       	breq	.+70     	; 0x2b78 <malloc+0x6c>
    2b32:	40 81       	ld	r20, Z
    2b34:	51 81       	ldd	r21, Z+1	; 0x01
    2b36:	02 81       	ldd	r16, Z+2	; 0x02
    2b38:	13 81       	ldd	r17, Z+3	; 0x03
    2b3a:	48 17       	cp	r20, r24
    2b3c:	59 07       	cpc	r21, r25
    2b3e:	c8 f0       	brcs	.+50     	; 0x2b72 <malloc+0x66>
    2b40:	84 17       	cp	r24, r20
    2b42:	95 07       	cpc	r25, r21
    2b44:	69 f4       	brne	.+26     	; 0x2b60 <malloc+0x54>
    2b46:	10 97       	sbiw	r26, 0x00	; 0
    2b48:	31 f0       	breq	.+12     	; 0x2b56 <malloc+0x4a>
    2b4a:	12 96       	adiw	r26, 0x02	; 2
    2b4c:	0c 93       	st	X, r16
    2b4e:	12 97       	sbiw	r26, 0x02	; 2
    2b50:	13 96       	adiw	r26, 0x03	; 3
    2b52:	1c 93       	st	X, r17
    2b54:	27 c0       	rjmp	.+78     	; 0x2ba4 <malloc+0x98>
    2b56:	00 93 39 07 	sts	0x0739, r16	; 0x800739 <__flp>
    2b5a:	10 93 3a 07 	sts	0x073A, r17	; 0x80073a <__flp+0x1>
    2b5e:	22 c0       	rjmp	.+68     	; 0x2ba4 <malloc+0x98>
    2b60:	21 15       	cp	r18, r1
    2b62:	31 05       	cpc	r19, r1
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <malloc+0x60>
    2b66:	42 17       	cp	r20, r18
    2b68:	53 07       	cpc	r21, r19
    2b6a:	18 f4       	brcc	.+6      	; 0x2b72 <malloc+0x66>
    2b6c:	9a 01       	movw	r18, r20
    2b6e:	bd 01       	movw	r22, r26
    2b70:	ef 01       	movw	r28, r30
    2b72:	df 01       	movw	r26, r30
    2b74:	f8 01       	movw	r30, r16
    2b76:	db cf       	rjmp	.-74     	; 0x2b2e <malloc+0x22>
    2b78:	21 15       	cp	r18, r1
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	f9 f0       	breq	.+62     	; 0x2bbc <malloc+0xb0>
    2b7e:	28 1b       	sub	r18, r24
    2b80:	39 0b       	sbc	r19, r25
    2b82:	24 30       	cpi	r18, 0x04	; 4
    2b84:	31 05       	cpc	r19, r1
    2b86:	80 f4       	brcc	.+32     	; 0x2ba8 <malloc+0x9c>
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8c:	61 15       	cp	r22, r1
    2b8e:	71 05       	cpc	r23, r1
    2b90:	21 f0       	breq	.+8      	; 0x2b9a <malloc+0x8e>
    2b92:	fb 01       	movw	r30, r22
    2b94:	93 83       	std	Z+3, r25	; 0x03
    2b96:	82 83       	std	Z+2, r24	; 0x02
    2b98:	04 c0       	rjmp	.+8      	; 0x2ba2 <malloc+0x96>
    2b9a:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <__flp+0x1>
    2b9e:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <__flp>
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	32 96       	adiw	r30, 0x02	; 2
    2ba6:	44 c0       	rjmp	.+136    	; 0x2c30 <malloc+0x124>
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e2 0f       	add	r30, r18
    2bac:	f3 1f       	adc	r31, r19
    2bae:	81 93       	st	Z+, r24
    2bb0:	91 93       	st	Z+, r25
    2bb2:	22 50       	subi	r18, 0x02	; 2
    2bb4:	31 09       	sbc	r19, r1
    2bb6:	39 83       	std	Y+1, r19	; 0x01
    2bb8:	28 83       	st	Y, r18
    2bba:	3a c0       	rjmp	.+116    	; 0x2c30 <malloc+0x124>
    2bbc:	20 91 37 07 	lds	r18, 0x0737	; 0x800737 <__brkval>
    2bc0:	30 91 38 07 	lds	r19, 0x0738	; 0x800738 <__brkval+0x1>
    2bc4:	23 2b       	or	r18, r19
    2bc6:	41 f4       	brne	.+16     	; 0x2bd8 <malloc+0xcc>
    2bc8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    2bcc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    2bd0:	30 93 38 07 	sts	0x0738, r19	; 0x800738 <__brkval+0x1>
    2bd4:	20 93 37 07 	sts	0x0737, r18	; 0x800737 <__brkval>
    2bd8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    2bdc:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    2be0:	21 15       	cp	r18, r1
    2be2:	31 05       	cpc	r19, r1
    2be4:	41 f4       	brne	.+16     	; 0x2bf6 <malloc+0xea>
    2be6:	2d b7       	in	r18, 0x3d	; 61
    2be8:	3e b7       	in	r19, 0x3e	; 62
    2bea:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    2bee:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    2bf2:	24 1b       	sub	r18, r20
    2bf4:	35 0b       	sbc	r19, r21
    2bf6:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <__brkval>
    2bfa:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <__brkval+0x1>
    2bfe:	e2 17       	cp	r30, r18
    2c00:	f3 07       	cpc	r31, r19
    2c02:	a0 f4       	brcc	.+40     	; 0x2c2c <malloc+0x120>
    2c04:	2e 1b       	sub	r18, r30
    2c06:	3f 0b       	sbc	r19, r31
    2c08:	28 17       	cp	r18, r24
    2c0a:	39 07       	cpc	r19, r25
    2c0c:	78 f0       	brcs	.+30     	; 0x2c2c <malloc+0x120>
    2c0e:	ac 01       	movw	r20, r24
    2c10:	4e 5f       	subi	r20, 0xFE	; 254
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	24 17       	cp	r18, r20
    2c16:	35 07       	cpc	r19, r21
    2c18:	48 f0       	brcs	.+18     	; 0x2c2c <malloc+0x120>
    2c1a:	4e 0f       	add	r20, r30
    2c1c:	5f 1f       	adc	r21, r31
    2c1e:	50 93 38 07 	sts	0x0738, r21	; 0x800738 <__brkval+0x1>
    2c22:	40 93 37 07 	sts	0x0737, r20	; 0x800737 <__brkval>
    2c26:	81 93       	st	Z+, r24
    2c28:	91 93       	st	Z+, r25
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <malloc+0x124>
    2c2c:	e0 e0       	ldi	r30, 0x00	; 0
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	cf 01       	movw	r24, r30
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	08 95       	ret

00002c3c <free>:
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <free+0xa>
    2c44:	81 c0       	rjmp	.+258    	; 0x2d48 <free+0x10c>
    2c46:	fc 01       	movw	r30, r24
    2c48:	32 97       	sbiw	r30, 0x02	; 2
    2c4a:	13 82       	std	Z+3, r1	; 0x03
    2c4c:	12 82       	std	Z+2, r1	; 0x02
    2c4e:	a0 91 39 07 	lds	r26, 0x0739	; 0x800739 <__flp>
    2c52:	b0 91 3a 07 	lds	r27, 0x073A	; 0x80073a <__flp+0x1>
    2c56:	10 97       	sbiw	r26, 0x00	; 0
    2c58:	81 f4       	brne	.+32     	; 0x2c7a <free+0x3e>
    2c5a:	20 81       	ld	r18, Z
    2c5c:	31 81       	ldd	r19, Z+1	; 0x01
    2c5e:	82 0f       	add	r24, r18
    2c60:	93 1f       	adc	r25, r19
    2c62:	20 91 37 07 	lds	r18, 0x0737	; 0x800737 <__brkval>
    2c66:	30 91 38 07 	lds	r19, 0x0738	; 0x800738 <__brkval+0x1>
    2c6a:	28 17       	cp	r18, r24
    2c6c:	39 07       	cpc	r19, r25
    2c6e:	51 f5       	brne	.+84     	; 0x2cc4 <free+0x88>
    2c70:	f0 93 38 07 	sts	0x0738, r31	; 0x800738 <__brkval+0x1>
    2c74:	e0 93 37 07 	sts	0x0737, r30	; 0x800737 <__brkval>
    2c78:	67 c0       	rjmp	.+206    	; 0x2d48 <free+0x10c>
    2c7a:	ed 01       	movw	r28, r26
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	ce 17       	cp	r28, r30
    2c82:	df 07       	cpc	r29, r31
    2c84:	40 f4       	brcc	.+16     	; 0x2c96 <free+0x5a>
    2c86:	4a 81       	ldd	r20, Y+2	; 0x02
    2c88:	5b 81       	ldd	r21, Y+3	; 0x03
    2c8a:	9e 01       	movw	r18, r28
    2c8c:	41 15       	cp	r20, r1
    2c8e:	51 05       	cpc	r21, r1
    2c90:	f1 f0       	breq	.+60     	; 0x2cce <free+0x92>
    2c92:	ea 01       	movw	r28, r20
    2c94:	f5 cf       	rjmp	.-22     	; 0x2c80 <free+0x44>
    2c96:	d3 83       	std	Z+3, r29	; 0x03
    2c98:	c2 83       	std	Z+2, r28	; 0x02
    2c9a:	40 81       	ld	r20, Z
    2c9c:	51 81       	ldd	r21, Z+1	; 0x01
    2c9e:	84 0f       	add	r24, r20
    2ca0:	95 1f       	adc	r25, r21
    2ca2:	c8 17       	cp	r28, r24
    2ca4:	d9 07       	cpc	r29, r25
    2ca6:	59 f4       	brne	.+22     	; 0x2cbe <free+0x82>
    2ca8:	88 81       	ld	r24, Y
    2caa:	99 81       	ldd	r25, Y+1	; 0x01
    2cac:	84 0f       	add	r24, r20
    2cae:	95 1f       	adc	r25, r21
    2cb0:	02 96       	adiw	r24, 0x02	; 2
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cba:	93 83       	std	Z+3, r25	; 0x03
    2cbc:	82 83       	std	Z+2, r24	; 0x02
    2cbe:	21 15       	cp	r18, r1
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	29 f4       	brne	.+10     	; 0x2cce <free+0x92>
    2cc4:	f0 93 3a 07 	sts	0x073A, r31	; 0x80073a <__flp+0x1>
    2cc8:	e0 93 39 07 	sts	0x0739, r30	; 0x800739 <__flp>
    2ccc:	3d c0       	rjmp	.+122    	; 0x2d48 <free+0x10c>
    2cce:	e9 01       	movw	r28, r18
    2cd0:	fb 83       	std	Y+3, r31	; 0x03
    2cd2:	ea 83       	std	Y+2, r30	; 0x02
    2cd4:	49 91       	ld	r20, Y+
    2cd6:	59 91       	ld	r21, Y+
    2cd8:	c4 0f       	add	r28, r20
    2cda:	d5 1f       	adc	r29, r21
    2cdc:	ec 17       	cp	r30, r28
    2cde:	fd 07       	cpc	r31, r29
    2ce0:	61 f4       	brne	.+24     	; 0x2cfa <free+0xbe>
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	84 0f       	add	r24, r20
    2ce8:	95 1f       	adc	r25, r21
    2cea:	02 96       	adiw	r24, 0x02	; 2
    2cec:	e9 01       	movw	r28, r18
    2cee:	99 83       	std	Y+1, r25	; 0x01
    2cf0:	88 83       	st	Y, r24
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	9b 83       	std	Y+3, r25	; 0x03
    2cf8:	8a 83       	std	Y+2, r24	; 0x02
    2cfa:	e0 e0       	ldi	r30, 0x00	; 0
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	12 96       	adiw	r26, 0x02	; 2
    2d00:	8d 91       	ld	r24, X+
    2d02:	9c 91       	ld	r25, X
    2d04:	13 97       	sbiw	r26, 0x03	; 3
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <free+0xd4>
    2d0a:	fd 01       	movw	r30, r26
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	f7 cf       	rjmp	.-18     	; 0x2cfe <free+0xc2>
    2d10:	8d 91       	ld	r24, X+
    2d12:	9c 91       	ld	r25, X
    2d14:	11 97       	sbiw	r26, 0x01	; 1
    2d16:	9d 01       	movw	r18, r26
    2d18:	2e 5f       	subi	r18, 0xFE	; 254
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	82 0f       	add	r24, r18
    2d1e:	93 1f       	adc	r25, r19
    2d20:	20 91 37 07 	lds	r18, 0x0737	; 0x800737 <__brkval>
    2d24:	30 91 38 07 	lds	r19, 0x0738	; 0x800738 <__brkval+0x1>
    2d28:	28 17       	cp	r18, r24
    2d2a:	39 07       	cpc	r19, r25
    2d2c:	69 f4       	brne	.+26     	; 0x2d48 <free+0x10c>
    2d2e:	30 97       	sbiw	r30, 0x00	; 0
    2d30:	29 f4       	brne	.+10     	; 0x2d3c <free+0x100>
    2d32:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <__flp+0x1>
    2d36:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <__flp>
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <free+0x104>
    2d3c:	13 82       	std	Z+3, r1	; 0x03
    2d3e:	12 82       	std	Z+2, r1	; 0x02
    2d40:	b0 93 38 07 	sts	0x0738, r27	; 0x800738 <__brkval+0x1>
    2d44:	a0 93 37 07 	sts	0x0737, r26	; 0x800737 <__brkval>
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <__do_global_dtors>:
    2d4e:	10 e0       	ldi	r17, 0x00	; 0
    2d50:	c4 e5       	ldi	r28, 0x54	; 84
    2d52:	d0 e0       	ldi	r29, 0x00	; 0
    2d54:	04 c0       	rjmp	.+8      	; 0x2d5e <__do_global_dtors+0x10>
    2d56:	fe 01       	movw	r30, r28
    2d58:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__tablejump2__>
    2d5c:	21 96       	adiw	r28, 0x01	; 1
    2d5e:	c5 35       	cpi	r28, 0x55	; 85
    2d60:	d1 07       	cpc	r29, r17
    2d62:	c9 f7       	brne	.-14     	; 0x2d56 <__do_global_dtors+0x8>
    2d64:	f8 94       	cli

00002d66 <__stop_program>:
    2d66:	ff cf       	rjmp	.-2      	; 0x2d66 <__stop_program>
