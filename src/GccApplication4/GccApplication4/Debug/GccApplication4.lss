
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00002a72  00002b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000076f  00800172  00800172  00002b78  2**0
                  ALLOC
  3 .stab         000058bc  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007fad  00000000  00000000  00008434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000103e1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00010424  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000060  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002731  00000000  00000000  000104c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a25  00000000  00000000  00012bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b54  00000000  00000000  0001361a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000b4  00000000  00000000  00014170  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001155  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000010d4  00000000  00000000  00015379  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d0  00000000  00000000  0001644d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	56 03       	mulsu	r21, r22
      6a:	50 03       	mulsu	r21, r16
      6c:	4d 03       	fmul	r20, r21
      6e:	46 03       	mulsu	r20, r22
      70:	6e 03       	fmul	r22, r22
      72:	68 03       	fmul	r22, r16
      74:	62 03       	mulsu	r22, r18
      76:	5c 03       	fmul	r21, r20
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	58 07       	cpc	r21, r24

000000a8 <__ctors_end>:
      a8:	85 10       	cpse	r8, r5

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e2 e7       	ldi	r30, 0x72	; 114
      be:	fa e2       	ldi	r31, 0x2A	; 42
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a2 37       	cpi	r26, 0x72	; 114
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	28 e0       	ldi	r18, 0x08	; 8
      ce:	a2 e7       	ldi	r26, 0x72	; 114
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a1 3e       	cpi	r26, 0xE1	; 225
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 bf 13 	call	0x277e	; 0x277e <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
      f6:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	40 f4       	brcc	.+16     	; 0x11a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x1c>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	30 f0       	brcs	.+12     	; 0x120 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x22>
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	9f e7       	ldi	r25, 0x7F	; 127
     118:	08 95       	ret
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	9f e7       	ldi	r25, 0x7F	; 127
     11e:	08 95       	ret
     120:	4f e0       	ldi	r20, 0x0F	; 15
     122:	42 9f       	mul	r20, r18
     124:	f0 01       	movw	r30, r0
     126:	43 9f       	mul	r20, r19
     128:	f0 0d       	add	r31, r0
     12a:	11 24       	eor	r1, r1
     12c:	e8 0f       	add	r30, r24
     12e:	f9 1f       	adc	r31, r25
     130:	ee 0f       	add	r30, r30
     132:	ff 1f       	adc	r31, r31
     134:	ee 0f       	add	r30, r30
     136:	ff 1f       	adc	r31, r31
     138:	ee 0f       	add	r30, r30
     13a:	ff 1f       	adc	r31, r31
     13c:	ef 52       	subi	r30, 0x2F	; 47
     13e:	fe 4f       	sbci	r31, 0xFE	; 254
     140:	80 81       	ld	r24, Z
     142:	91 81       	ldd	r25, Z+1	; 0x01
     144:	08 95       	ret

00000146 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     146:	fc 01       	movw	r30, r24
     148:	20 81       	ld	r18, Z
     14a:	31 81       	ldd	r19, Z+1	; 0x01
     14c:	2f 30       	cpi	r18, 0x0F	; 15
     14e:	31 05       	cpc	r19, r1
     150:	d8 f4       	brcc	.+54     	; 0x188 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x42>
     152:	82 81       	ldd	r24, Z+2	; 0x02
     154:	93 81       	ldd	r25, Z+3	; 0x03
     156:	8f 30       	cpi	r24, 0x0F	; 15
     158:	91 05       	cpc	r25, r1
     15a:	c8 f0       	brcs	.+50     	; 0x18e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x48>
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	9f e7       	ldi	r25, 0x7F	; 127
     160:	08 95       	ret
     162:	4f e0       	ldi	r20, 0x0F	; 15
     164:	42 9f       	mul	r20, r18
     166:	f0 01       	movw	r30, r0
     168:	43 9f       	mul	r20, r19
     16a:	f0 0d       	add	r31, r0
     16c:	11 24       	eor	r1, r1
     16e:	e8 0f       	add	r30, r24
     170:	f9 1f       	adc	r31, r25
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	ef 52       	subi	r30, 0x2F	; 47
     180:	fe 4f       	sbci	r31, 0xFE	; 254
     182:	80 81       	ld	r24, Z
     184:	91 81       	ldd	r25, Z+1	; 0x01
     186:	08 95       	ret
     188:	8f ef       	ldi	r24, 0xFF	; 255
     18a:	9f e7       	ldi	r25, 0x7F	; 127
     18c:	08 95       	ret
     18e:	4f e0       	ldi	r20, 0x0F	; 15
     190:	42 9f       	mul	r20, r18
     192:	f0 01       	movw	r30, r0
     194:	43 9f       	mul	r20, r19
     196:	f0 0d       	add	r31, r0
     198:	11 24       	eor	r1, r1
     19a:	e8 0f       	add	r30, r24
     19c:	f9 1f       	adc	r31, r25
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	ee 0f       	add	r30, r30
     1a4:	ff 1f       	adc	r31, r31
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	ef 52       	subi	r30, 0x2F	; 47
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	47 81       	ldd	r20, Z+7	; 0x07
     1b0:	41 11       	cpse	r20, r1
     1b2:	d7 cf       	rjmp	.-82     	; 0x162 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x1c>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	9f e7       	ldi	r25, 0x7F	; 127
     1b8:	08 95       	ret

000001ba <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1ba:	dc 01       	movw	r26, r24
     1bc:	2d 91       	ld	r18, X+
     1be:	3c 91       	ld	r19, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	2f 30       	cpi	r18, 0x0F	; 15
     1c4:	31 05       	cpc	r19, r1
     1c6:	d0 f5       	brcc	.+116    	; 0x23c <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x82>
     1c8:	12 96       	adiw	r26, 0x02	; 2
     1ca:	4d 91       	ld	r20, X+
     1cc:	5c 91       	ld	r21, X
     1ce:	13 97       	sbiw	r26, 0x03	; 3
     1d0:	4f 30       	cpi	r20, 0x0F	; 15
     1d2:	51 05       	cpc	r21, r1
     1d4:	e0 f1       	brcs	.+120    	; 0x24e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x94>
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f e7       	ldi	r25, 0x7F	; 127
     1da:	08 95       	ret
     1dc:	8f e0       	ldi	r24, 0x0F	; 15
     1de:	82 9f       	mul	r24, r18
     1e0:	f0 01       	movw	r30, r0
     1e2:	83 9f       	mul	r24, r19
     1e4:	f0 0d       	add	r31, r0
     1e6:	11 24       	eor	r1, r1
     1e8:	e4 0f       	add	r30, r20
     1ea:	f5 1f       	adc	r31, r21
     1ec:	ee 0f       	add	r30, r30
     1ee:	ff 1f       	adc	r31, r31
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	ee 0f       	add	r30, r30
     1f6:	ff 1f       	adc	r31, r31
     1f8:	ef 52       	subi	r30, 0x2F	; 47
     1fa:	fe 4f       	sbci	r31, 0xFE	; 254
     1fc:	87 81       	ldd	r24, Z+7	; 0x07
     1fe:	81 11       	cpse	r24, r1
     200:	20 c0       	rjmp	.+64     	; 0x242 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x88>
     202:	fb 01       	movw	r30, r22
     204:	80 81       	ld	r24, Z
     206:	91 81       	ldd	r25, Z+1	; 0x01
     208:	dc 01       	movw	r26, r24
     20a:	a2 1b       	sub	r26, r18
     20c:	b3 0b       	sbc	r27, r19
     20e:	fd 01       	movw	r30, r26
     210:	22 f4       	brpl	.+8      	; 0x21a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     212:	ee 27       	eor	r30, r30
     214:	ff 27       	eor	r31, r31
     216:	ea 1b       	sub	r30, r26
     218:	fb 0b       	sbc	r31, r27
     21a:	db 01       	movw	r26, r22
     21c:	12 96       	adiw	r26, 0x02	; 2
     21e:	2d 91       	ld	r18, X+
     220:	3c 91       	ld	r19, X
     222:	13 97       	sbiw	r26, 0x03	; 3
     224:	24 1b       	sub	r18, r20
     226:	35 0b       	sbc	r19, r21
     228:	c9 01       	movw	r24, r18
     22a:	99 23       	and	r25, r25
     22c:	24 f4       	brge	.+8      	; 0x236 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x7c>
     22e:	88 27       	eor	r24, r24
     230:	99 27       	eor	r25, r25
     232:	82 1b       	sub	r24, r18
     234:	93 0b       	sbc	r25, r19
     236:	8e 0f       	add	r24, r30
     238:	9f 1f       	adc	r25, r31
     23a:	08 95       	ret
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	9f e7       	ldi	r25, 0x7F	; 127
     240:	08 95       	ret
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	9f e7       	ldi	r25, 0x7F	; 127
     246:	08 95       	ret
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	9f e7       	ldi	r25, 0x7F	; 127
     24c:	08 95       	ret
     24e:	8f e0       	ldi	r24, 0x0F	; 15
     250:	82 9f       	mul	r24, r18
     252:	f0 01       	movw	r30, r0
     254:	83 9f       	mul	r24, r19
     256:	f0 0d       	add	r31, r0
     258:	11 24       	eor	r1, r1
     25a:	e4 0f       	add	r30, r20
     25c:	f5 1f       	adc	r31, r21
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	ee 0f       	add	r30, r30
     264:	ff 1f       	adc	r31, r31
     266:	ee 0f       	add	r30, r30
     268:	ff 1f       	adc	r31, r31
     26a:	ef 52       	subi	r30, 0x2F	; 47
     26c:	fe 4f       	sbci	r31, 0xFE	; 254
     26e:	84 81       	ldd	r24, Z+4	; 0x04
     270:	81 11       	cpse	r24, r1
     272:	ea cf       	rjmp	.-44     	; 0x248 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x8e>
     274:	b3 cf       	rjmp	.-154    	; 0x1dc <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>

00000276 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     276:	db 01       	movw	r26, r22
     278:	8d 91       	ld	r24, X+
     27a:	9c 91       	ld	r25, X
     27c:	11 97       	sbiw	r26, 0x01	; 1
     27e:	8f 30       	cpi	r24, 0x0F	; 15
     280:	91 05       	cpc	r25, r1
     282:	d0 f5       	brcc	.+116    	; 0x2f8 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x82>
     284:	12 96       	adiw	r26, 0x02	; 2
     286:	2d 91       	ld	r18, X+
     288:	3c 91       	ld	r19, X
     28a:	13 97       	sbiw	r26, 0x03	; 3
     28c:	2f 30       	cpi	r18, 0x0F	; 15
     28e:	31 05       	cpc	r19, r1
     290:	e0 f1       	brcs	.+120    	; 0x30a <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x94>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     292:	8f ef       	ldi	r24, 0xFF	; 255
     294:	9f e7       	ldi	r25, 0x7F	; 127
     296:	08 95       	ret

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     298:	6f e0       	ldi	r22, 0x0F	; 15
     29a:	68 9f       	mul	r22, r24
     29c:	f0 01       	movw	r30, r0
     29e:	69 9f       	mul	r22, r25
     2a0:	f0 0d       	add	r31, r0
     2a2:	11 24       	eor	r1, r1
     2a4:	e2 0f       	add	r30, r18
     2a6:	f3 1f       	adc	r31, r19
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	ef 52       	subi	r30, 0x2F	; 47
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	67 81       	ldd	r22, Z+7	; 0x07
     2ba:	61 11       	cpse	r22, r1
     2bc:	20 c0       	rjmp	.+64     	; 0x2fe <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x88>
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
     2be:	fa 01       	movw	r30, r20
     2c0:	60 81       	ld	r22, Z
     2c2:	71 81       	ldd	r23, Z+1	; 0x01
     2c4:	68 1b       	sub	r22, r24
     2c6:	79 0b       	sbc	r23, r25
     2c8:	fb 01       	movw	r30, r22
     2ca:	ff 23       	and	r31, r31
     2cc:	24 f4       	brge	.+8      	; 0x2d6 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>
     2ce:	ee 27       	eor	r30, r30
     2d0:	ff 27       	eor	r31, r31
     2d2:	e6 1b       	sub	r30, r22
     2d4:	f7 0b       	sbc	r31, r23
     2d6:	da 01       	movw	r26, r20
     2d8:	12 96       	adiw	r26, 0x02	; 2
     2da:	4d 91       	ld	r20, X+
     2dc:	5c 91       	ld	r21, X
     2de:	13 97       	sbiw	r26, 0x03	; 3
     2e0:	ca 01       	movw	r24, r20
     2e2:	82 1b       	sub	r24, r18
     2e4:	93 0b       	sbc	r25, r19
     2e6:	9c 01       	movw	r18, r24
     2e8:	22 f4       	brpl	.+8      	; 0x2f2 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x7c>
     2ea:	88 27       	eor	r24, r24
     2ec:	99 27       	eor	r25, r25
     2ee:	82 1b       	sub	r24, r18
     2f0:	93 0b       	sbc	r25, r19
     2f2:	8e 0f       	add	r24, r30
     2f4:	9f 1f       	adc	r25, r31
     2f6:	08 95       	ret
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	9f e7       	ldi	r25, 0x7F	; 127
     2fc:	08 95       	ret
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	9f e7       	ldi	r25, 0x7F	; 127
     302:	08 95       	ret
     304:	8f ef       	ldi	r24, 0xFF	; 255
     306:	9f e7       	ldi	r25, 0x7F	; 127
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
                }

                return result;
     308:	08 95       	ret
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     30a:	6f e0       	ldi	r22, 0x0F	; 15
     30c:	68 9f       	mul	r22, r24
     30e:	f0 01       	movw	r30, r0
     310:	69 9f       	mul	r22, r25
     312:	f0 0d       	add	r31, r0
     314:	11 24       	eor	r1, r1
     316:	e2 0f       	add	r30, r18
     318:	f3 1f       	adc	r31, r19
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ef 52       	subi	r30, 0x2F	; 47
     328:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     32a:	64 81       	ldd	r22, Z+4	; 0x04
     32c:	61 11       	cpse	r22, r1
     32e:	ea cf       	rjmp	.-44     	; 0x304 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x8e>
     330:	b3 cf       	rjmp	.-154    	; 0x298 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>

00000332 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     332:	fb 01       	movw	r30, r22
     334:	20 81       	ld	r18, Z
     336:	31 81       	ldd	r19, Z+1	; 0x01
     338:	2f 30       	cpi	r18, 0x0F	; 15
     33a:	31 05       	cpc	r19, r1
     33c:	40 f4       	brcc	.+16     	; 0x34e <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x1c>
     33e:	82 81       	ldd	r24, Z+2	; 0x02
     340:	93 81       	ldd	r25, Z+3	; 0x03
     342:	8f 30       	cpi	r24, 0x0F	; 15
     344:	91 05       	cpc	r25, r1
     346:	30 f0       	brcs	.+12     	; 0x354 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x22>
            {
                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
                {
                    short result = SHRT_MAX;
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	9f e7       	ldi	r25, 0x7F	; 127
     34c:	08 95       	ret
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f e7       	ldi	r25, 0x7F	; 127
     352:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     354:	4f e0       	ldi	r20, 0x0F	; 15
     356:	42 9f       	mul	r20, r18
     358:	f0 01       	movw	r30, r0
     35a:	43 9f       	mul	r20, r19
     35c:	f0 0d       	add	r31, r0
     35e:	11 24       	eor	r1, r1
     360:	e8 0f       	add	r30, r24
     362:	f9 1f       	adc	r31, r25
     364:	ee 0f       	add	r30, r30
     366:	ff 1f       	adc	r31, r31
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ef 52       	subi	r30, 0x2F	; 47
     372:	fe 4f       	sbci	r31, 0xFE	; 254
     374:	80 81       	ld	r24, Z
     376:	91 81       	ldd	r25, Z+1	; 0x01
                    }

                    return result;
                };
     378:	08 95       	ret

0000037a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToStart );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     37a:	fb 01       	movw	r30, r22
     37c:	20 81       	ld	r18, Z
     37e:	31 81       	ldd	r19, Z+1	; 0x01
     380:	2f 30       	cpi	r18, 0x0F	; 15
     382:	31 05       	cpc	r19, r1
     384:	d8 f4       	brcc	.+54     	; 0x3bc <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x42>
     386:	82 81       	ldd	r24, Z+2	; 0x02
     388:	93 81       	ldd	r25, Z+3	; 0x03
     38a:	8f 30       	cpi	r24, 0x0F	; 15
     38c:	91 05       	cpc	r25, r1
     38e:	c8 f0       	brcs	.+50     	; 0x3c2 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x48>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	9f e7       	ldi	r25, 0x7F	; 127
     394:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
     396:	4f e0       	ldi	r20, 0x0F	; 15
     398:	42 9f       	mul	r20, r18
     39a:	f0 01       	movw	r30, r0
     39c:	43 9f       	mul	r20, r19
     39e:	f0 0d       	add	r31, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	e8 0f       	add	r30, r24
     3a4:	f9 1f       	adc	r31, r25
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ef 52       	subi	r30, 0x2F	; 47
     3b4:	fe 4f       	sbci	r31, 0xFE	; 254
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	9f e7       	ldi	r25, 0x7F	; 127
     3c0:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
     3c2:	4f e0       	ldi	r20, 0x0F	; 15
     3c4:	42 9f       	mul	r20, r18
     3c6:	f0 01       	movw	r30, r0
     3c8:	43 9f       	mul	r20, r19
     3ca:	f0 0d       	add	r31, r0
     3cc:	11 24       	eor	r1, r1
     3ce:	e8 0f       	add	r30, r24
     3d0:	f9 1f       	adc	r31, r25
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	ef 52       	subi	r30, 0x2F	; 47
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	47 81       	ldd	r20, Z+7	; 0x07
     3e4:	41 11       	cpse	r20, r1
     3e6:	d7 cf       	rjmp	.-82     	; 0x396 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x1c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9f e7       	ldi	r25, 0x7F	; 127
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
     3ec:	08 95       	ret

000003ee <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	c4 54       	subi	r28, 0x44	; 68
     3f8:	d1 09       	sbc	r29, r1
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     404:	1a 82       	std	Y+2, r1	; 0x02
     406:	19 82       	std	Y+1, r1	; 0x01
     408:	1c 82       	std	Y+4, r1	; 0x04
     40a:	1b 82       	std	Y+3, r1	; 0x03

    public:
        Robot()
            : position( 0, 0 )
            , orientation( EOrientation::North )
            , finishPos( 0, 3 )
     40c:	1d 82       	std	Y+5, r1	; 0x05
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     40e:	1f 82       	std	Y+7, r1	; 0x07
     410:	1e 82       	std	Y+6, r1	; 0x06
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	99 87       	std	Y+9, r25	; 0x09
     418:	88 87       	std	Y+8, r24	; 0x08
        {}

        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
     41a:	80 ed       	ldi	r24, 0xD0	; 208
     41c:	97 e0       	ldi	r25, 0x07	; 7
     41e:	0e 94 81 10 	call	0x2102	; 0x2102 <pololu_3pi_init>

            set_motors( 0, 0 );
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>
        {
            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     42e:	0f 2e       	mov	r0, r31
     430:	ff e0       	ldi	r31, 0x0F	; 15
     432:	ef 2e       	mov	r14, r31
     434:	f1 2c       	mov	r15, r1
     436:	f0 2d       	mov	r31, r0
            print( ")" );
        }

        void initializeMenu()
        {
            while ( !button_is_pressed( BUTTON_B ) )
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <button_is_pressed>
     43e:	81 11       	cpse	r24, r1
     440:	45 c0       	rjmp	.+138    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
            {
                if ( button_is_pressed( BUTTON_A ) )
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <button_is_pressed>
     448:	88 23       	and	r24, r24
     44a:	41 f0       	breq	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     44c:	8e 81       	ldd	r24, Y+6	; 0x06
     44e:	9f 81       	ldd	r25, Y+7	; 0x07
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	b7 01       	movw	r22, r14
     454:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__divmodhi4>
     458:	9f 83       	std	Y+7, r25	; 0x07
     45a:	8e 83       	std	Y+6, r24	; 0x06
                }

                if ( button_is_pressed( BUTTON_C ) )
     45c:	80 e2       	ldi	r24, 0x20	; 32
     45e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <button_is_pressed>
     462:	88 23       	and	r24, r24
     464:	41 f0       	breq	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     466:	88 85       	ldd	r24, Y+8	; 0x08
     468:	99 85       	ldd	r25, Y+9	; 0x09
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	b7 01       	movw	r22, r14
     46e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__divmodhi4>
     472:	99 87       	std	Y+9, r25	; 0x09
     474:	88 87       	std	Y+8, r24	; 0x08
                }

                printPos( finishPos.x, finishPos.y );
     476:	08 85       	ldd	r16, Y+8	; 0x08
     478:	19 85       	ldd	r17, Y+9	; 0x09
     47a:	ce 80       	ldd	r12, Y+6	; 0x06
     47c:	df 80       	ldd	r13, Y+7	; 0x07

        }

        void printPos( short x, short y )
        {
            clear();
     47e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear>
            print( "(" );
     482:	8f e4       	ldi	r24, 0x4F	; 79
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
            print_long( x );
     48a:	b6 01       	movw	r22, r12
     48c:	dd 0c       	add	r13, r13
     48e:	88 0b       	sbc	r24, r24
     490:	99 0b       	sbc	r25, r25
     492:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <print_long>
            print( ", " );
     496:	81 e5       	ldi	r24, 0x51	; 81
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
            print_long( y );
     49e:	b8 01       	movw	r22, r16
     4a0:	11 0f       	add	r17, r17
     4a2:	88 0b       	sbc	r24, r24
     4a4:	99 0b       	sbc	r25, r25
     4a6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <print_long>
            print( ")" );
     4aa:	84 e5       	ldi	r24, 0x54	; 84
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos.x, finishPos.y );

                lcd_goto_xy( 0, 1 );
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <lcd_goto_xy>
                print( " A B C " );
     4ba:	86 e5       	ldi	r24, 0x56	; 86
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>

                delay_ms( 100 );
     4c2:	84 e6       	ldi	r24, 0x64	; 100
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
     4ca:	b6 cf       	rjmp	.-148    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     4cc:	80 e1       	ldi	r24, 0x10	; 16
     4ce:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <wait_for_button_release>
            delay_ms( 1000 );
     4d2:	88 ee       	ldi	r24, 0xE8	; 232
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
        }

        // Main logic function
        void mainRobotLogic()
        {
            bool isLastStep	= false;
     4da:	25 96       	adiw	r28, 0x05	; 5
     4dc:	1f ae       	std	Y+63, r1	; 0x3f
     4de:	25 97       	sbiw	r28, 0x05	; 5
     4e0:	4e 01       	movw	r8, r28
     4e2:	24 e2       	ldi	r18, 0x24	; 36
     4e4:	82 0e       	add	r8, r18
     4e6:	91 1c       	adc	r9, r1

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     4e8:	ae 01       	movw	r20, r28
     4ea:	4c 5c       	subi	r20, 0xCC	; 204
     4ec:	5f 4f       	sbci	r21, 0xFF	; 255
     4ee:	5d af       	std	Y+61, r21	; 0x3d
     4f0:	4c af       	std	Y+60, r20	; 0x3c
     4f2:	2c ac       	ldd	r2, Y+60	; 0x3c
     4f4:	3d ac       	ldd	r3, Y+61	; 0x3d
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     4f6:	83 2d       	mov	r24, r3
     4f8:	32 2c       	mov	r3, r2
     4fa:	28 2e       	mov	r2, r24
        // Main logic function
        void mainRobotLogic()
        {
            bool isLastStep	= false;

            while ( position.x != finishPos.x || position.y != finishPos.y || isLastStep )
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	3a 81       	ldd	r19, Y+2	; 0x02
     500:	8e 81       	ldd	r24, Y+6	; 0x06
     502:	9f 81       	ldd	r25, Y+7	; 0x07
     504:	28 17       	cp	r18, r24
     506:	39 07       	cpc	r19, r25
     508:	91 f4       	brne	.+36     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     50a:	2b 81       	ldd	r18, Y+3	; 0x03
     50c:	3c 81       	ldd	r19, Y+4	; 0x04
     50e:	88 85       	ldd	r24, Y+8	; 0x08
     510:	99 85       	ldd	r25, Y+9	; 0x09
     512:	28 17       	cp	r18, r24
     514:	39 07       	cpc	r19, r25
     516:	81 f4       	brne	.+32     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     518:	25 96       	adiw	r28, 0x05	; 5
     51a:	5f ad       	ldd	r21, Y+63	; 0x3f
     51c:	25 97       	sbiw	r28, 0x05	; 5
     51e:	55 23       	and	r21, r21
     520:	09 f4       	brne	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	a1 c4       	rjmp	.+2370   	; 0xe66 <__stack+0x567>
     524:	88 e0       	ldi	r24, 0x08	; 8
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9f af       	std	Y+63, r25	; 0x3f
     52a:	8e af       	std	Y+62, r24	; 0x3e
     52c:	09 c0       	rjmp	.+18     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     52e:	a8 e0       	ldi	r26, 0x08	; 8
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	bf af       	std	Y+63, r27	; 0x3f
     534:	ae af       	std	Y+62, r26	; 0x3e
     536:	04 c0       	rjmp	.+8      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     538:	e8 e0       	ldi	r30, 0x08	; 8
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ff af       	std	Y+63, r31	; 0x3f
     53e:	ee af       	std	Y+62, r30	; 0x3e
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
     540:	21 96       	adiw	r28, 0x01	; 1
     542:	3f ae       	std	Y+63, r3	; 0x3f
     544:	21 97       	sbiw	r28, 0x01	; 1
     546:	23 96       	adiw	r28, 0x03	; 3
     548:	2f ae       	std	Y+63, r2	; 0x3f
     54a:	23 97       	sbiw	r28, 0x03	; 3
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     54c:	80 e2       	ldi	r24, 0x20	; 32
     54e:	e2 e1       	ldi	r30, 0x12	; 18
     550:	f1 e0       	ldi	r31, 0x01	; 1
     552:	de 01       	movw	r26, r28
     554:	54 96       	adiw	r26, 0x14	; 20
     556:	01 90       	ld	r0, Z+
     558:	0d 92       	st	X+, r0
     55a:	8a 95       	dec	r24
     55c:	e1 f7       	brne	.-8      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
            short	minDist					= getDist( from, to );
     55e:	be 01       	movw	r22, r28
     560:	6a 5f       	subi	r22, 0xFA	; 250
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     56c:	6c 01       	movw	r12, r24
            Point2D	minPos( from );
     56e:	49 80       	ldd	r4, Y+1	; 0x01
     570:	5a 80       	ldd	r5, Y+2	; 0x02
     572:	6b 80       	ldd	r6, Y+3	; 0x03
     574:	7c 80       	ldd	r7, Y+4	; 0x04
     576:	8e 01       	movw	r16, r28
     578:	0c 5e       	subi	r16, 0xEC	; 236
     57a:	1f 4f       	sbci	r17, 0xFF	; 255
     57c:	21 96       	adiw	r28, 0x01	; 1
     57e:	bf ac       	ldd	r11, Y+63	; 0x3f
     580:	21 97       	sbiw	r28, 0x01	; 1
     582:	23 96       	adiw	r28, 0x03	; 3
     584:	af ac       	ldd	r10, Y+63	; 0x3f
     586:	23 97       	sbiw	r28, 0x03	; 3

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     588:	2b 80       	ldd	r2, Y+3	; 0x03
     58a:	3c 80       	ldd	r3, Y+4	; 0x04
     58c:	f8 01       	movw	r30, r16
     58e:	80 89       	ldd	r24, Z+16	; 0x10
     590:	91 89       	ldd	r25, Z+17	; 0x11
     592:	82 0d       	add	r24, r2
     594:	93 1d       	adc	r25, r3
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
     596:	e9 80       	ldd	r14, Y+1	; 0x01
     598:	fa 80       	ldd	r15, Y+2	; 0x02
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     59a:	20 81       	ld	r18, Z
     59c:	31 81       	ldd	r19, Z+1	; 0x01
     59e:	0e 5f       	subi	r16, 0xFE	; 254
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	2e 0d       	add	r18, r14
     5a4:	3f 1d       	adc	r19, r15
     5a6:	3d ab       	std	Y+53, r19	; 0x35
     5a8:	2c ab       	std	Y+52, r18	; 0x34
     5aa:	9f ab       	std	Y+55, r25	; 0x37
     5ac:	8e ab       	std	Y+54, r24	; 0x36

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     5ae:	be 01       	movw	r22, r28
     5b0:	6a 5f       	subi	r22, 0xFA	; 250
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	8b 2d       	mov	r24, r11
     5b6:	9a 2d       	mov	r25, r10
     5b8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>

                if ( currDist < minDist )
     5bc:	8c 15       	cp	r24, r12
     5be:	9d 05       	cpc	r25, r13
     5c0:	2c f4       	brge	.+10     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
                {
                    minDist = currDist;
                    minPos	= currPos;
     5c2:	4c a8       	ldd	r4, Y+52	; 0x34
     5c4:	5d a8       	ldd	r5, Y+53	; 0x35
     5c6:	6e a8       	ldd	r6, Y+54	; 0x36
     5c8:	7f a8       	ldd	r7, Y+55	; 0x37
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     5ca:	6c 01       	movw	r12, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     5cc:	08 15       	cp	r16, r8
     5ce:	19 05       	cpc	r17, r9
     5d0:	d9 f6       	brne	.-74     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     5d2:	52 01       	movw	r10, r4
            , y ( inY )
        {}

        bool operator==( const Point2D& pt ) const
        {
            return x == pt.x && y == pt.y;
     5d4:	e4 14       	cp	r14, r4
     5d6:	f5 04       	cpc	r15, r5
     5d8:	31 f5       	brne	.+76     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     5da:	26 14       	cp	r2, r6
     5dc:	37 04       	cpc	r3, r7
     5de:	19 f5       	brne	.+70     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     5e0:	49 c4       	rjmp	.+2194   	; 0xe74 <__stack+0x575>
     5e2:	f8 01       	movw	r30, r16
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     5e4:	80 89       	ldd	r24, Z+16	; 0x10
     5e6:	91 89       	ldd	r25, Z+17	; 0x11
     5e8:	82 0d       	add	r24, r2
     5ea:	93 1d       	adc	r25, r3
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     5ec:	20 81       	ld	r18, Z
     5ee:	31 81       	ldd	r19, Z+1	; 0x01
     5f0:	0e 5f       	subi	r16, 0xFE	; 254
     5f2:	1f 4f       	sbci	r17, 0xFF	; 255
     5f4:	2e 0d       	add	r18, r14
     5f6:	3f 1d       	adc	r19, r15
     5f8:	3d ab       	std	Y+53, r19	; 0x35
     5fa:	2c ab       	std	Y+52, r18	; 0x34
     5fc:	9f ab       	std	Y+55, r25	; 0x37
     5fe:	8e ab       	std	Y+54, r24	; 0x36

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     600:	be 01       	movw	r22, r28
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	8b 2d       	mov	r24, r11
     608:	9a 2d       	mov	r25, r10
     60a:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>

                if ( currDist < minDist )
     60e:	8c 15       	cp	r24, r12
     610:	9d 05       	cpc	r25, r13
     612:	2c f4       	brge	.+10     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
                {
                    minDist = currDist;
                    minPos	= currPos;
     614:	4c a8       	ldd	r4, Y+52	; 0x34
     616:	5d a8       	ldd	r5, Y+53	; 0x35
     618:	6e a8       	ldd	r6, Y+54	; 0x36
     61a:	7f a8       	ldd	r7, Y+55	; 0x37
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     61c:	6c 01       	movw	r12, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     61e:	08 15       	cp	r16, r8
     620:	19 05       	cpc	r17, r9
     622:	f9 f6       	brne	.-66     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     624:	52 01       	movw	r10, r4
            {
                count++;
                nextPos = this->getNextPos( goalPos );

                // There isn't an appropriate next node
                if ( nextPos.x == -1 )
     626:	ff ef       	ldi	r31, 0xFF	; 255
     628:	af 16       	cp	r10, r31
     62a:	bf 06       	cpc	r11, r31
     62c:	c9 f4       	brne	.+50     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
                {
                    // If prevPos == NULL, we are at the beginning, print impassable matrix
                    nextPos = *matrix[ position.x ][ position.y ].parent;
     62e:	2f e0       	ldi	r18, 0x0F	; 15
     630:	2e 9d       	mul	r18, r14
     632:	f0 01       	movw	r30, r0
     634:	2f 9d       	mul	r18, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	e8 0f       	add	r30, r24
     640:	f9 1f       	adc	r31, r25
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ef 52       	subi	r30, 0x2F	; 47
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	05 80       	ldd	r0, Z+5	; 0x05
     654:	f6 81       	ldd	r31, Z+6	; 0x06
     656:	e0 2d       	mov	r30, r0
     658:	a0 80       	ld	r10, Z
     65a:	b1 80       	ldd	r11, Z+1	; 0x01
     65c:	62 80       	ldd	r6, Z+2	; 0x02
     65e:	73 80       	ldd	r7, Z+3	; 0x03
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	85 01       	movw	r16, r10
     666:	08 1b       	sub	r16, r24
     668:	19 0b       	sbc	r17, r25
            short	y			= -startPoint.y + endPoint.y;
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	9c 81       	ldd	r25, Y+4	; 0x04
     66e:	a3 01       	movw	r20, r6
     670:	48 1b       	sub	r20, r24
     672:	59 0b       	sbc	r21, r25
     674:	ca 01       	movw	r24, r20
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
     676:	ed 81       	ldd	r30, Y+5	; 0x05
     678:	4e 2f       	mov	r20, r30
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	48 30       	cpi	r20, 0x08	; 8
     67e:	51 05       	cpc	r21, r1
     680:	38 f5       	brcc	.+78     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     682:	fa 01       	movw	r30, r20
     684:	ec 5c       	subi	r30, 0xCC	; 204
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
     68c:	0f 2e       	mov	r0, r31
     68e:	f3 ed       	ldi	r31, 0xD3	; 211
     690:	cf 2e       	mov	r12, r31
     692:	f0 2d       	mov	r31, r0
     694:	dd 24       	eor	r13, r13
     696:	da 94       	dec	r13
     698:	27 c0       	rjmp	.+78     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>

                case EOrientation::East:
                    return 0;
     69a:	c1 2c       	mov	r12, r1
     69c:	d1 2c       	mov	r13, r1
     69e:	24 c0       	rjmp	.+72     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>

                case EOrientation::NorthEast:
                    return 45;
     6a0:	0f 2e       	mov	r0, r31
     6a2:	fd e2       	ldi	r31, 0x2D	; 45
     6a4:	cf 2e       	mov	r12, r31
     6a6:	d1 2c       	mov	r13, r1
     6a8:	f0 2d       	mov	r31, r0
     6aa:	1e c0       	rjmp	.+60     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>

                case EOrientation::North:
                    return 90;
     6ac:	0f 2e       	mov	r0, r31
     6ae:	fa e5       	ldi	r31, 0x5A	; 90
     6b0:	cf 2e       	mov	r12, r31
     6b2:	d1 2c       	mov	r13, r1
     6b4:	f0 2d       	mov	r31, r0
     6b6:	18 c0       	rjmp	.+48     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>

                case EOrientation::NorthWest:
                    return 135;
     6b8:	0f 2e       	mov	r0, r31
     6ba:	f7 e8       	ldi	r31, 0x87	; 135
     6bc:	cf 2e       	mov	r12, r31
     6be:	f0 2d       	mov	r31, r0
     6c0:	d1 2c       	mov	r13, r1
     6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>

                case EOrientation::West:
                    return 180;
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f4 eb       	ldi	r31, 0xB4	; 180
     6c8:	cf 2e       	mov	r12, r31
     6ca:	f0 2d       	mov	r31, r0
     6cc:	d1 2c       	mov	r13, r1
     6ce:	0c c0       	rjmp	.+24     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>

                case EOrientation::SouthWest:
                default:
                    return 225;
     6d0:	0f 2e       	mov	r0, r31
     6d2:	f1 ee       	ldi	r31, 0xE1	; 225
     6d4:	cf 2e       	mov	r12, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	d1 2c       	mov	r13, r1
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
     6dc:	0f 2e       	mov	r0, r31
     6de:	f6 ea       	ldi	r31, 0xA6	; 166
     6e0:	cf 2e       	mov	r12, r31
     6e2:	f0 2d       	mov	r31, r0
     6e4:	dd 24       	eor	r13, r13
     6e6:	da 94       	dec	r13
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     6e8:	01 15       	cp	r16, r1
     6ea:	11 05       	cpc	r17, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
            {
                if ( y > 0 )
     6ee:	18 16       	cp	r1, r24
     6f0:	19 06       	cpc	r1, r25
     6f2:	4c f1       	brlt	.+82     	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     6f4:	99 23       	and	r25, r25
     6f6:	6c f5       	brge	.+90     	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
                {
                    angle = -90;
     6f8:	0f 2e       	mov	r0, r31
     6fa:	f6 ea       	ldi	r31, 0xA6	; 166
     6fc:	ef 2e       	mov	r14, r31
     6fe:	f0 2d       	mov	r31, r0
     700:	ff 24       	eor	r15, r15
     702:	fa 94       	dec	r15
     704:	28 c0       	rjmp	.+80     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     706:	b8 01       	movw	r22, r16
     708:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__divmodhi4>
     70c:	07 2e       	mov	r0, r23
     70e:	00 0c       	add	r0, r0
     710:	88 0b       	sbc	r24, r24
     712:	99 0b       	sbc	r25, r25
     714:	0e 94 48 08 	call	0x1090	; 0x1090 <__floatsisf>
     718:	0e 94 6f 07 	call	0xede	; 0xede <atan>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	44 e3       	ldi	r20, 0x34	; 52
     722:	53 e4       	ldi	r21, 0x43	; 67
     724:	0e 94 03 09 	call	0x1206	; 0x1206 <__mulsf3>
     728:	2b ed       	ldi	r18, 0xDB	; 219
     72a:	3f e0       	ldi	r19, 0x0F	; 15
     72c:	49 e4       	ldi	r20, 0x49	; 73
     72e:	50 e4       	ldi	r21, 0x40	; 64
     730:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__divsf3>
     734:	0e 94 10 08 	call	0x1020	; 0x1020 <__fixsfsi>
     738:	7b 01       	movw	r14, r22

                if ( x < 0 )
     73a:	11 23       	and	r17, r17
     73c:	64 f4       	brge	.+24     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
                {
                    angle += 180;
     73e:	54 eb       	ldi	r21, 0xB4	; 180
     740:	e5 0e       	add	r14, r21
     742:	f1 1c       	adc	r15, r1
     744:	08 c0       	rjmp	.+16     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     746:	0f 2e       	mov	r0, r31
     748:	fa e5       	ldi	r31, 0x5A	; 90
     74a:	ef 2e       	mov	r14, r31
     74c:	f1 2c       	mov	r15, r1
     74e:	f0 2d       	mov	r31, r0
     750:	02 c0       	rjmp	.+4      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     752:	e1 2c       	mov	r14, r1
     754:	f1 2c       	mov	r15, r1
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     756:	c6 01       	movw	r24, r12
     758:	8e 19       	sub	r24, r14
     75a:	9f 09       	sbc	r25, r15
     75c:	6d e2       	ldi	r22, 0x2D	; 45
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__divmodhi4>
     764:	07 2e       	mov	r0, r23
     766:	00 0c       	add	r0, r0
     768:	88 0b       	sbc	r24, r24
     76a:	99 0b       	sbc	r25, r25
     76c:	0e 94 48 08 	call	0x1090	; 0x1090 <__floatsisf>
     770:	0e 94 70 09 	call	0x12e0	; 0x12e0 <round>
     774:	0e 94 10 08 	call	0x1020	; 0x1020 <__fixsfsi>
     778:	8b 01       	movw	r16, r22

            if ( direction > 4 )
     77a:	65 30       	cpi	r22, 0x05	; 5
     77c:	71 05       	cpc	r23, r1
     77e:	14 f0       	brlt	.+4      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
            {
                direction = -8 + direction;
     780:	08 50       	subi	r16, 0x08	; 8
     782:	11 09       	sbc	r17, r1
            }

            if ( direction < -4 )
     784:	0c 3f       	cpi	r16, 0xFC	; 252
     786:	6f ef       	ldi	r22, 0xFF	; 255
     788:	16 07       	cpc	r17, r22
     78a:	14 f4       	brge	.+4      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
            {
                direction = 8 + direction;
     78c:	08 5f       	subi	r16, 0xF8	; 248
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
            }

            clear();
     790:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear>
            print_long( direction );
     794:	b8 01       	movw	r22, r16
     796:	01 2e       	mov	r0, r17
     798:	00 0c       	add	r0, r0
     79a:	88 0b       	sbc	r24, r24
     79c:	99 0b       	sbc	r25, r25
     79e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <print_long>
            lcd_goto_xy( 0, 1 );
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <lcd_goto_xy>
            print_long( angle );
     7aa:	b7 01       	movw	r22, r14
     7ac:	0f 2c       	mov	r0, r15
     7ae:	00 0c       	add	r0, r0
     7b0:	88 0b       	sbc	r24, r24
     7b2:	99 0b       	sbc	r25, r25
     7b4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <print_long>
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     7b8:	8d e2       	ldi	r24, 0x2D	; 45
     7ba:	e8 16       	cp	r14, r24
     7bc:	f1 04       	cpc	r15, r1
     7be:	59 f1       	breq	.+86     	; 0x816 <__LOCK_REGION_LENGTH__+0x416>
     7c0:	74 f4       	brge	.+28     	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
     7c2:	a3 ed       	ldi	r26, 0xD3	; 211
     7c4:	ea 16       	cp	r14, r26
     7c6:	af ef       	ldi	r26, 0xFF	; 255
     7c8:	fa 06       	cpc	r15, r26
     7ca:	f9 f0       	breq	.+62     	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
     7cc:	e1 14       	cp	r14, r1
     7ce:	f1 04       	cpc	r15, r1
     7d0:	f9 f0       	breq	.+62     	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     7d2:	b6 ea       	ldi	r27, 0xA6	; 166
     7d4:	eb 16       	cp	r14, r27
     7d6:	bf ef       	ldi	r27, 0xFF	; 255
     7d8:	fb 06       	cpc	r15, r27
     7da:	51 f5       	brne	.+84     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
     7dc:	13 c0       	rjmp	.+38     	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
     7de:	e7 e8       	ldi	r30, 0x87	; 135
     7e0:	ee 16       	cp	r14, r30
     7e2:	f1 04       	cpc	r15, r1
     7e4:	e9 f0       	breq	.+58     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     7e6:	2c f4       	brge	.+10     	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
     7e8:	2a e5       	ldi	r18, 0x5A	; 90
     7ea:	e2 16       	cp	r14, r18
     7ec:	f1 04       	cpc	r15, r1
     7ee:	b1 f0       	breq	.+44     	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
     7f0:	1f c0       	rjmp	.+62     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
     7f2:	34 eb       	ldi	r19, 0xB4	; 180
     7f4:	e3 16       	cp	r14, r19
     7f6:	f1 04       	cpc	r15, r1
     7f8:	b1 f0       	breq	.+44     	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
     7fa:	41 ee       	ldi	r20, 0xE1	; 225
     7fc:	e4 16       	cp	r14, r20
     7fe:	f1 04       	cpc	r15, r1
     800:	a9 f0       	breq	.+42     	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
     802:	16 c0       	rjmp	.+44     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
            {
                case -90:
                    orientation = EOrientation::South;
     804:	84 e0       	ldi	r24, 0x04	; 4
     806:	8d 83       	std	Y+5, r24	; 0x05
     808:	13 c0       	rjmp	.+38     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	8d 83       	std	Y+5, r24	; 0x05
     80e:	10 c0       	rjmp	.+32     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case 0:
                    orientation = EOrientation::East;
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	8d 83       	std	Y+5, r24	; 0x05
     814:	0d c0       	rjmp	.+26     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	8d 83       	std	Y+5, r24	; 0x05
     81a:	0a c0       	rjmp	.+20     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case 90:
                    orientation = EOrientation::North;
     81c:	1d 82       	std	Y+5, r1	; 0x05
     81e:	08 c0       	rjmp	.+16     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     820:	87 e0       	ldi	r24, 0x07	; 7
     822:	8d 83       	std	Y+5, r24	; 0x05
     824:	05 c0       	rjmp	.+10     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case 180:
                    orientation = EOrientation::West;
     826:	86 e0       	ldi	r24, 0x06	; 6
     828:	8d 83       	std	Y+5, r24	; 0x05
     82a:	02 c0       	rjmp	.+4      	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	8d 83       	std	Y+5, r24	; 0x05
            print_long( angle );
            //delay_ms(1000);

            setDeviceOrientation( angle );

            if ( direction < 0 )
     830:	11 23       	and	r17, r17
     832:	ec f4       	brge	.+58     	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
        }

    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     834:	6a e2       	ldi	r22, 0x2A	; 42
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	86 ed       	ldi	r24, 0xD6	; 214
     83a:	9f ef       	ldi	r25, 0xFF	; 255
     83c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>

            delay_ms( 200 * turns );
     840:	c8 01       	movw	r24, r16
     842:	99 23       	and	r25, r25
     844:	24 f4       	brge	.+8      	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
     846:	88 27       	eor	r24, r24
     848:	99 27       	eor	r25, r25
     84a:	80 1b       	sub	r24, r16
     84c:	91 0b       	sbc	r25, r17
     84e:	28 ec       	ldi	r18, 0xC8	; 200
     850:	dc 01       	movw	r26, r24
     852:	2a 9f       	mul	r18, r26
     854:	c0 01       	movw	r24, r0
     856:	2b 9f       	mul	r18, r27
     858:	90 0d       	add	r25, r0
     85a:	11 24       	eor	r1, r1
     85c:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>

            set_motors( 0, 0 );
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>
     86c:	1f c0       	rjmp	.+62     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     86e:	10 16       	cp	r1, r16
     870:	11 06       	cpc	r1, r17
     872:	e4 f4       	brge	.+56     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
        }

    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     874:	66 ed       	ldi	r22, 0xD6	; 214
     876:	7f ef       	ldi	r23, 0xFF	; 255
     878:	8a e2       	ldi	r24, 0x2A	; 42
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>

            delay_ms( 200 * turns );
     880:	c8 01       	movw	r24, r16
     882:	99 23       	and	r25, r25
     884:	24 f4       	brge	.+8      	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
     886:	88 27       	eor	r24, r24
     888:	99 27       	eor	r25, r25
     88a:	80 1b       	sub	r24, r16
     88c:	91 0b       	sbc	r25, r17
     88e:	28 ec       	ldi	r18, 0xC8	; 200
     890:	fc 01       	movw	r30, r24
     892:	2e 9f       	mul	r18, r30
     894:	c0 01       	movw	r24, r0
     896:	2f 9f       	mul	r18, r31
     898:	90 0d       	add	r25, r0
     89a:	11 24       	eor	r1, r1
     89c:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>

            set_motors( 0, 0 );
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensors[ 5 ];
            read_line_sensors( sensors, IR_EMITTERS_ON );
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	ce 01       	movw	r24, r28
     8bc:	44 96       	adiw	r24, 0x14	; 20
     8be:	0e 94 4c 10 	call	0x2098	; 0x2098 <read_line_sensors>

            if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     8c2:	8e 89       	ldd	r24, Y+22	; 0x16
     8c4:	9f 89       	ldd	r25, Y+23	; 0x17
     8c6:	81 3b       	cpi	r24, 0xB1	; 177
     8c8:	94 40       	sbci	r25, 0x04	; 4
     8ca:	50 f4       	brcc	.+20     	; 0x8e0 <__LOCK_REGION_LENGTH__+0x4e0>
     8cc:	88 8d       	ldd	r24, Y+24	; 0x18
     8ce:	99 8d       	ldd	r25, Y+25	; 0x19
     8d0:	81 3b       	cpi	r24, 0xB1	; 177
     8d2:	94 40       	sbci	r25, 0x04	; 4
     8d4:	28 f4       	brcc	.+10     	; 0x8e0 <__LOCK_REGION_LENGTH__+0x4e0>
     8d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8da:	81 3b       	cpi	r24, 0xB1	; 177
     8dc:	94 40       	sbci	r25, 0x04	; 4
     8de:	58 f1       	brcs	.+86     	; 0x936 <__stack+0x37>
            {
                clear();
     8e0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear>
                print( "!OBS!" );
     8e4:	8e e5       	ldi	r24, 0x5E	; 94
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
                delay_ms( 2000 );
     8ec:	80 ed       	ldi	r24, 0xD0	; 208
     8ee:	97 e0       	ldi	r25, 0x07	; 7
     8f0:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     8f4:	4f e0       	ldi	r20, 0x0F	; 15
     8f6:	4a 9d       	mul	r20, r10
     8f8:	f0 01       	movw	r30, r0
     8fa:	4b 9d       	mul	r20, r11
     8fc:	f0 0d       	add	r31, r0
     8fe:	11 24       	eor	r1, r1
     900:	e6 0d       	add	r30, r6
     902:	f7 1d       	adc	r31, r7
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ef 52       	subi	r30, 0x2F	; 47
     912:	fe 4f       	sbci	r31, 0xFE	; 254
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	84 83       	std	Z+4, r24	; 0x04
     918:	8e ad       	ldd	r24, Y+62	; 0x3e
     91a:	9f ad       	ldd	r25, Y+63	; 0x3f
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	9f af       	std	Y+63, r25	; 0x3f
     920:	8e af       	std	Y+62, r24	; 0x3e
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     922:	89 2b       	or	r24, r25
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
     926:	12 ce       	rjmp	.-988    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	3f ac       	ldd	r3, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	23 96       	adiw	r28, 0x03	; 3
     930:	2f ac       	ldd	r2, Y+63	; 0x3f
     932:	23 97       	sbiw	r28, 0x03	; 3
     934:	10 c0       	rjmp	.+32     	; 0x956 <__stack+0x57>
     936:	21 96       	adiw	r28, 0x01	; 1
     938:	3f ac       	ldd	r3, Y+63	; 0x3f
     93a:	21 97       	sbiw	r28, 0x01	; 1
     93c:	23 96       	adiw	r28, 0x03	; 3
     93e:	2f ac       	ldd	r2, Y+63	; 0x3f
     940:	23 97       	sbiw	r28, 0x03	; 3
                print( "!OBS!" );
                delay_ms( 2000 );
                return false;
            }

            clear();
     942:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear>
            print( "NOT OBS" );
     946:	84 e6       	ldi	r24, 0x64	; 100
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
            delay_ms( 2000 );
     94e:	80 ed       	ldi	r24, 0xD0	; 208
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     956:	b9 ae       	std	Y+57, r11	; 0x39
     958:	a8 ae       	std	Y+56, r10	; 0x38
     95a:	7b ae       	std	Y+59, r7	; 0x3b
     95c:	6a ae       	std	Y+58, r6	; 0x3a
            *matrix[nextPos.x][nextPos.y].parent = position;
     95e:	65 01       	movw	r12, r10
     960:	73 01       	movw	r14, r6
     962:	8f e0       	ldi	r24, 0x0F	; 15
     964:	8a 9d       	mul	r24, r10
     966:	80 01       	movw	r16, r0
     968:	8b 9d       	mul	r24, r11
     96a:	10 0d       	add	r17, r0
     96c:	11 24       	eor	r1, r1
     96e:	06 0d       	add	r16, r6
     970:	17 1d       	adc	r17, r7
     972:	00 0f       	add	r16, r16
     974:	11 1f       	adc	r17, r17
     976:	00 0f       	add	r16, r16
     978:	11 1f       	adc	r17, r17
     97a:	00 0f       	add	r16, r16
     97c:	11 1f       	adc	r17, r17
     97e:	0f 52       	subi	r16, 0x2F	; 47
     980:	1e 4f       	sbci	r17, 0xFE	; 254
     982:	d8 01       	movw	r26, r16
     984:	15 96       	adiw	r26, 0x05	; 5
     986:	ed 91       	ld	r30, X+
     988:	fc 91       	ld	r31, X
     98a:	16 97       	sbiw	r26, 0x06	; 6
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	ab 81       	ldd	r26, Y+3	; 0x03
     992:	bc 81       	ldd	r27, Y+4	; 0x04
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	a2 83       	std	Z+2, r26	; 0x02
     99a:	b3 83       	std	Z+3, r27	; 0x03

        }

        void printPos( short x, short y )
        {
            clear();
     99c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <clear>
            print( "(" );
     9a0:	8f e4       	ldi	r24, 0x4F	; 79
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
            print_long( x );
     9a8:	b5 01       	movw	r22, r10
     9aa:	bb 0c       	add	r11, r11
     9ac:	88 0b       	sbc	r24, r24
     9ae:	99 0b       	sbc	r25, r25
     9b0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <print_long>
            print( ", " );
     9b4:	81 e5       	ldi	r24, 0x51	; 81
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
            print_long( y );
     9bc:	b3 01       	movw	r22, r6
     9be:	77 0c       	add	r7, r7
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <print_long>
            print( ")" );
     9c8:	84 e5       	ldi	r24, 0x54	; 84
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <print>
        {
            Point2D nextPos = nextStepToFinish( goalPos );
            *matrix[nextPos.x][nextPos.y].parent = position;

            printPos( nextPos.x, nextPos.y );
            delay_ms( 2000 );
     9d0:	80 ed       	ldi	r24, 0xD0	; 208
     9d2:	97 e0       	ldi	r25, 0x07	; 7
     9d4:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
            // delay_ms(1000);

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     9d8:	f8 01       	movw	r30, r16
     9da:	87 81       	ldd	r24, Z+7	; 0x07
     9dc:	81 11       	cpse	r24, r1
     9de:	98 c0       	rjmp	.+304    	; 0xb10 <__stack+0x211>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     9e0:	80 e2       	ldi	r24, 0x20	; 32
     9e2:	e2 e1       	ldi	r30, 0x12	; 18
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	de 01       	movw	r26, r28
     9e8:	54 96       	adiw	r26, 0x14	; 20
     9ea:	01 90       	ld	r0, Z+
     9ec:	0d 92       	st	X+, r0
     9ee:	8a 95       	dec	r24
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <__stack+0xeb>
            short	minDist					= getDist( from, to );
     9f2:	be 01       	movw	r22, r28
     9f4:	68 5c       	subi	r22, 0xC8	; 200
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	cb 01       	movw	r24, r22
     9fa:	0e 94 a3 00 	call	0x146	; 0x146 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     9fe:	5c 01       	movw	r10, r24
            Point2D	minPos( from );
     a00:	48 ac       	ldd	r4, Y+56	; 0x38
     a02:	59 ac       	ldd	r5, Y+57	; 0x39
     a04:	6a ac       	ldd	r6, Y+58	; 0x3a
     a06:	7b ac       	ldd	r7, Y+59	; 0x3b
     a08:	8e 01       	movw	r16, r28
     a0a:	0c 5e       	subi	r16, 0xEC	; 236
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	f8 01       	movw	r30, r16

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     a10:	80 89       	ldd	r24, Z+16	; 0x10
     a12:	91 89       	ldd	r25, Z+17	; 0x11
     a14:	8e 0d       	add	r24, r14
     a16:	9f 1d       	adc	r25, r15
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     a18:	20 81       	ld	r18, Z
     a1a:	31 81       	ldd	r19, Z+1	; 0x01
     a1c:	0e 5f       	subi	r16, 0xFE	; 254
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	2c 0d       	add	r18, r12
     a22:	3d 1d       	adc	r19, r13
     a24:	3d ab       	std	Y+53, r19	; 0x35
     a26:	2c ab       	std	Y+52, r18	; 0x34
     a28:	9f ab       	std	Y+55, r25	; 0x37
     a2a:	8e ab       	std	Y+54, r24	; 0x36

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     a2c:	be 01       	movw	r22, r28
     a2e:	68 5c       	subi	r22, 0xC8	; 200
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	ce 01       	movw	r24, r28
     a34:	c4 96       	adiw	r24, 0x34	; 52
     a36:	0e 94 a3 00 	call	0x146	; 0x146 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>

                if ( currDist < minDist )
     a3a:	8a 15       	cp	r24, r10
     a3c:	9b 05       	cpc	r25, r11
     a3e:	2c f4       	brge	.+10     	; 0xa4a <__stack+0x14b>
                {
                    minDist = currDist;
                    minPos	= currPos;
     a40:	4c a8       	ldd	r4, Y+52	; 0x34
     a42:	5d a8       	ldd	r5, Y+53	; 0x35
     a44:	6e a8       	ldd	r6, Y+54	; 0x36
     a46:	7f a8       	ldd	r7, Y+55	; 0x37
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     a48:	5c 01       	movw	r10, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     a4a:	08 15       	cp	r16, r8
     a4c:	19 05       	cpc	r17, r9
     a4e:	f9 f6       	brne	.-66     	; 0xa0e <__stack+0x10f>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     a50:	4f e0       	ldi	r20, 0x0F	; 15
     a52:	4c 9d       	mul	r20, r12
     a54:	f0 01       	movw	r30, r0
     a56:	4d 9d       	mul	r20, r13
     a58:	f0 0d       	add	r31, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	ee 0d       	add	r30, r14
     a5e:	ff 1d       	adc	r31, r15
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	ef 52       	subi	r30, 0x2F	; 47
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	80 81       	ld	r24, Z
     a72:	91 81       	ldd	r25, Z+1	; 0x01
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     a74:	44 9d       	mul	r20, r4
     a76:	f0 01       	movw	r30, r0
     a78:	45 9d       	mul	r20, r5
     a7a:	f0 0d       	add	r31, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	e6 0d       	add	r30, r6
     a80:	f7 1d       	adc	r31, r7
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	ef 52       	subi	r30, 0x2F	; 47
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	40 81       	ld	r20, Z
     a94:	51 81       	ldd	r21, Z+1	; 0x01
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     a96:	c4 14       	cp	r12, r4
     a98:	d5 04       	cpc	r13, r5
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <__stack+0x1a9>
     a9c:	e6 14       	cp	r14, r6
     a9e:	f7 04       	cpc	r15, r7
     aa0:	49 f4       	brne	.+18     	; 0xab4 <__stack+0x1b5>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     aa2:	22 e0       	ldi	r18, 0x02	; 2
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	0b c0       	rjmp	.+22     	; 0xabe <__stack+0x1bf>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     aa8:	e6 14       	cp	r14, r6
     aaa:	f7 04       	cpc	r15, r7
     aac:	31 f0       	breq	.+12     	; 0xaba <__stack+0x1bb>
            {
                distance = 2;
     aae:	22 e0       	ldi	r18, 0x02	; 2
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__stack+0x1bf>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     ab4:	23 e0       	ldi	r18, 0x03	; 3
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <__stack+0x1bf>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     abe:	42 0f       	add	r20, r18
     ac0:	53 1f       	adc	r21, r19

                if ( savedDist > currDist )
     ac2:	48 17       	cp	r20, r24
     ac4:	59 07       	cpc	r21, r25
     ac6:	94 f4       	brge	.+36     	; 0xaec <__stack+0x1ed>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     ac8:	8f e0       	ldi	r24, 0x0F	; 15
     aca:	8c 9d       	mul	r24, r12
     acc:	f0 01       	movw	r30, r0
     ace:	8d 9d       	mul	r24, r13
     ad0:	f0 0d       	add	r31, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	ee 0d       	add	r30, r14
     ad6:	ff 1d       	adc	r31, r15
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ef 52       	subi	r30, 0x2F	; 47
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	51 83       	std	Z+1, r21	; 0x01
     aea:	40 83       	st	Z, r20
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     aec:	8f e0       	ldi	r24, 0x0F	; 15
     aee:	8c 9d       	mul	r24, r12
     af0:	f0 01       	movw	r30, r0
     af2:	8d 9d       	mul	r24, r13
     af4:	f0 0d       	add	r31, r0
     af6:	11 24       	eor	r1, r1
     af8:	ee 0d       	add	r30, r14
     afa:	ff 1d       	adc	r31, r15
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ef 52       	subi	r30, 0x2F	; 47
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	87 83       	std	Z+7, r24	; 0x07
            }

            // Move until stepping on the goal position
            if ( position.x != goalPos.x || position.y != goalPos.y )
     b10:	29 81       	ldd	r18, Y+1	; 0x01
     b12:	3a 81       	ldd	r19, Y+2	; 0x02
     b14:	8e 81       	ldd	r24, Y+6	; 0x06
     b16:	9f 81       	ldd	r25, Y+7	; 0x07
     b18:	28 17       	cp	r18, r24
     b1a:	39 07       	cpc	r19, r25
     b1c:	41 f4       	brne	.+16     	; 0xb2e <__stack+0x22f>
     b1e:	2b 81       	ldd	r18, Y+3	; 0x03
     b20:	3c 81       	ldd	r19, Y+4	; 0x04
     b22:	88 85       	ldd	r24, Y+8	; 0x08
     b24:	99 85       	ldd	r25, Y+9	; 0x09
     b26:	28 17       	cp	r18, r24
     b28:	39 07       	cpc	r19, r25
     b2a:	09 f4       	brne	.+2      	; 0xb2e <__stack+0x22f>
     b2c:	53 c0       	rjmp	.+166    	; 0xbd4 <__stack+0x2d5>
            {
                position = nextPos;
     b2e:	88 ad       	ldd	r24, Y+56	; 0x38
     b30:	99 ad       	ldd	r25, Y+57	; 0x39
     b32:	aa ad       	ldd	r26, Y+58	; 0x3a
     b34:	bb ad       	ldd	r27, Y+59	; 0x3b
     b36:	89 83       	std	Y+1, r24	; 0x01
     b38:	9a 83       	std	Y+2, r25	; 0x02
     b3a:	ab 83       	std	Y+3, r26	; 0x03
     b3c:	bc 83       	std	Y+4, r27	; 0x04
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 20, 20 );
     b3e:	64 e1       	ldi	r22, 0x14	; 20
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	84 e1       	ldi	r24, 0x14	; 20
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	ce 01       	movw	r24, r28
     b4e:	0a 96       	adiw	r24, 0x0a	; 10
     b50:	0e 94 4c 10 	call	0x2098	; 0x2098 <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     b54:	8c 85       	ldd	r24, Y+12	; 0x0c
     b56:	9d 85       	ldd	r25, Y+13	; 0x0d
     b58:	81 3b       	cpi	r24, 0xB1	; 177
     b5a:	f4 e0       	ldi	r31, 0x04	; 4
     b5c:	9f 07       	cpc	r25, r31
     b5e:	60 f4       	brcc	.+24     	; 0xb78 <__stack+0x279>
     b60:	2e 85       	ldd	r18, Y+14	; 0x0e
     b62:	3f 85       	ldd	r19, Y+15	; 0x0f
     b64:	21 3b       	cpi	r18, 0xB1	; 177
     b66:	44 e0       	ldi	r20, 0x04	; 4
     b68:	34 07       	cpc	r19, r20
     b6a:	30 f4       	brcc	.+12     	; 0xb78 <__stack+0x279>
     b6c:	48 89       	ldd	r20, Y+16	; 0x10
     b6e:	59 89       	ldd	r21, Y+17	; 0x11
     b70:	41 3b       	cpi	r20, 0xB1	; 177
     b72:	64 e0       	ldi	r22, 0x04	; 4
     b74:	56 07       	cpc	r21, r22
     b76:	b8 f0       	brcs	.+46     	; 0xba6 <__stack+0x2a7>
            {
                matrix[ position.x ][ position.y ].isObstacle = true;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	2f e0       	ldi	r18, 0x0F	; 15
     b7e:	28 9f       	mul	r18, r24
     b80:	f0 01       	movw	r30, r0
     b82:	29 9f       	mul	r18, r25
     b84:	f0 0d       	add	r31, r0
     b86:	11 24       	eor	r1, r1
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	e8 0f       	add	r30, r24
     b8e:	f9 1f       	adc	r31, r25
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ef 52       	subi	r30, 0x2F	; 47
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	84 83       	std	Z+4, r24	; 0x04
     ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <__stack+0x2b9>
                return true;
            }
            else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     ba6:	8f 35       	cpi	r24, 0x5F	; 95
     ba8:	91 40       	sbci	r25, 0x01	; 1
     baa:	30 f4       	brcc	.+12     	; 0xbb8 <__stack+0x2b9>
     bac:	2f 35       	cpi	r18, 0x5F	; 95
     bae:	31 40       	sbci	r19, 0x01	; 1
     bb0:	18 f4       	brcc	.+6      	; 0xbb8 <__stack+0x2b9>

        void moveForward()
        {
            set_motors( 20, 20 );

            while ( !isOnMarker() ) {}
     bb2:	4f 35       	cpi	r20, 0x5F	; 95
     bb4:	51 40       	sbci	r21, 0x01	; 1
     bb6:	48 f2       	brcs	.-110    	; 0xb4a <__stack+0x24b>

            play( ">>a32" );
     bb8:	8c e6       	ldi	r24, 0x6C	; 108
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <play>
            delay_ms( 900 );
     bc0:	84 e8       	ldi	r24, 0x84	; 132
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
            set_motors( 0, 0 );
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>

            while ( position.x != finishPos.x || position.y != finishPos.y || isLastStep )
            {
                stepToGoal( finishPos );

                if ( isLastStep )
     bd4:	25 96       	adiw	r28, 0x05	; 5
     bd6:	ff ad       	ldd	r31, Y+63	; 0x3f
     bd8:	25 97       	sbiw	r28, 0x05	; 5
     bda:	ff 23       	and	r31, r31
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <__stack+0x2e1>
     bde:	2b c1       	rjmp	.+598    	; 0xe36 <__stack+0x537>
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
     be0:	8e 81       	ldd	r24, Y+6	; 0x06
     be2:	9f 81       	ldd	r25, Y+7	; 0x07
     be4:	a8 85       	ldd	r26, Y+8	; 0x08
     be6:	b9 85       	ldd	r27, Y+9	; 0x09
     be8:	38 2f       	mov	r19, r24
     bea:	29 2f       	mov	r18, r25
     bec:	88 af       	std	Y+56, r24	; 0x38
     bee:	99 af       	std	Y+57, r25	; 0x39
     bf0:	aa af       	std	Y+58, r26	; 0x3a
     bf2:	bb af       	std	Y+59, r27	; 0x3b
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
     bf4:	4e 81       	ldd	r20, Y+6	; 0x06
     bf6:	5f 81       	ldd	r21, Y+7	; 0x07
     bf8:	22 96       	adiw	r28, 0x02	; 2
     bfa:	5f af       	std	Y+63, r21	; 0x3f
     bfc:	4e af       	std	Y+62, r20	; 0x3e
     bfe:	22 97       	sbiw	r28, 0x02	; 2
     c00:	88 85       	ldd	r24, Y+8	; 0x08
     c02:	99 85       	ldd	r25, Y+9	; 0x09
     c04:	24 96       	adiw	r28, 0x04	; 4
     c06:	9f af       	std	Y+63, r25	; 0x3f
     c08:	8e af       	std	Y+62, r24	; 0x3e
     c0a:	24 97       	sbiw	r28, 0x04	; 4
     c0c:	8f e0       	ldi	r24, 0x0F	; 15
     c0e:	84 9f       	mul	r24, r20
     c10:	f0 01       	movw	r30, r0
     c12:	85 9f       	mul	r24, r21
     c14:	f0 0d       	add	r31, r0
     c16:	11 24       	eor	r1, r1
     c18:	24 96       	adiw	r28, 0x04	; 4
     c1a:	ae ad       	ldd	r26, Y+62	; 0x3e
     c1c:	bf ad       	ldd	r27, Y+63	; 0x3f
     c1e:	24 97       	sbiw	r28, 0x04	; 4
     c20:	ea 0f       	add	r30, r26
     c22:	fb 1f       	adc	r31, r27
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ef 52       	subi	r30, 0x2F	; 47
     c32:	fe 4f       	sbci	r31, 0xFE	; 254
     c34:	40 81       	ld	r20, Z
     c36:	51 81       	ldd	r21, Z+1	; 0x01
     c38:	5f af       	std	Y+63, r21	; 0x3f
     c3a:	4e af       	std	Y+62, r20	; 0x3e

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     c3c:	e3 2e       	mov	r14, r19
     c3e:	f2 2e       	mov	r15, r18
     c40:	aa ac       	ldd	r10, Y+58	; 0x3a
     c42:	bb ac       	ldd	r11, Y+59	; 0x3b
     c44:	8e 9d       	mul	r24, r14
     c46:	f0 01       	movw	r30, r0
     c48:	8f 9d       	mul	r24, r15
     c4a:	f0 0d       	add	r31, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	ea 0d       	add	r30, r10
     c50:	fb 1d       	adc	r31, r11
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	ef 52       	subi	r30, 0x2F	; 47
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	09 f4       	brne	.+2      	; 0xc6c <__stack+0x36d>
     c6a:	80 c0       	rjmp	.+256    	; 0xd6c <__stack+0x46d>
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
     c6c:	ae ad       	ldd	r26, Y+62	; 0x3e
     c6e:	bf ad       	ldd	r27, Y+63	; 0x3f
     c70:	a8 1b       	sub	r26, r24
     c72:	b9 0b       	sbc	r27, r25
     c74:	cd 01       	movw	r24, r26
     c76:	bf e0       	ldi	r27, 0x0F	; 15
     c78:	be 9d       	mul	r27, r14
     c7a:	f0 01       	movw	r30, r0
     c7c:	bf 9d       	mul	r27, r15
     c7e:	f0 0d       	add	r31, r0
     c80:	11 24       	eor	r1, r1
     c82:	ea 0d       	add	r30, r10
     c84:	fb 1d       	adc	r31, r11
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	ef 52       	subi	r30, 0x2F	; 47
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	22 81       	ldd	r18, Z+2	; 0x02
     c98:	33 81       	ldd	r19, Z+3	; 0x03
     c9a:	28 17       	cp	r18, r24
     c9c:	39 07       	cpc	r19, r25
     c9e:	8c f4       	brge	.+34     	; 0xcc2 <__stack+0x3c3>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     ca0:	be 9d       	mul	r27, r14
     ca2:	f0 01       	movw	r30, r0
     ca4:	bf 9d       	mul	r27, r15
     ca6:	f0 0d       	add	r31, r0
     ca8:	11 24       	eor	r1, r1
     caa:	ea 0d       	add	r30, r10
     cac:	fb 1d       	adc	r31, r11
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ef 52       	subi	r30, 0x2F	; 47
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	93 83       	std	Z+3, r25	; 0x03
     cc0:	82 83       	std	Z+2, r24	; 0x02
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     cc2:	80 e2       	ldi	r24, 0x20	; 32
     cc4:	e2 e1       	ldi	r30, 0x12	; 18
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	de 01       	movw	r26, r28
     cca:	54 96       	adiw	r26, 0x14	; 20
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	8a 95       	dec	r24
     cd2:	e1 f7       	brne	.-8      	; 0xccc <__stack+0x3cd>
            short	minDist					= getDist( from, to );
     cd4:	be 01       	movw	r22, r28
     cd6:	68 5c       	subi	r22, 0xC8	; 200
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	cb 01       	movw	r24, r22
     cdc:	0e 94 a3 00 	call	0x146	; 0x146 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     ce0:	6c 01       	movw	r12, r24
            Point2D	minPos( from );
     ce2:	48 ac       	ldd	r4, Y+56	; 0x38
     ce4:	59 ac       	ldd	r5, Y+57	; 0x39
     ce6:	6a ac       	ldd	r6, Y+58	; 0x3a
     ce8:	7b ac       	ldd	r7, Y+59	; 0x3b
     cea:	8e 01       	movw	r16, r28
     cec:	0c 5e       	subi	r16, 0xEC	; 236
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	f8 01       	movw	r30, r16

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
     cf2:	80 89       	ldd	r24, Z+16	; 0x10
     cf4:	91 89       	ldd	r25, Z+17	; 0x11
     cf6:	8a 0d       	add	r24, r10
     cf8:	9b 1d       	adc	r25, r11
        short x;
        short y;

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
     cfa:	20 81       	ld	r18, Z
     cfc:	31 81       	ldd	r19, Z+1	; 0x01
     cfe:	0e 5f       	subi	r16, 0xFE	; 254
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	2e 0d       	add	r18, r14
     d04:	3f 1d       	adc	r19, r15
     d06:	3d ab       	std	Y+53, r19	; 0x35
     d08:	2c ab       	std	Y+52, r18	; 0x34
     d0a:	9f ab       	std	Y+55, r25	; 0x37
     d0c:	8e ab       	std	Y+54, r24	; 0x36

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos( from.x + adjacentOffsets[ 0 ][ i ],
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );
     d0e:	be 01       	movw	r22, r28
     d10:	68 5c       	subi	r22, 0xC8	; 200
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	83 2d       	mov	r24, r3
     d16:	92 2d       	mov	r25, r2
     d18:	0e 94 a3 00 	call	0x146	; 0x146 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>

                if ( currDist < minDist )
     d1c:	8c 15       	cp	r24, r12
     d1e:	9d 05       	cpc	r25, r13
     d20:	2c f4       	brge	.+10     	; 0xd2c <__stack+0x42d>
                {
                    minDist = currDist;
                    minPos	= currPos;
     d22:	4c a8       	ldd	r4, Y+52	; 0x34
     d24:	5d a8       	ldd	r5, Y+53	; 0x35
     d26:	6e a8       	ldd	r6, Y+54	; 0x36
     d28:	7f a8       	ldd	r7, Y+55	; 0x37
                                 from.y + adjacentOffsets[ 1 ][ i ] );
                short	currDist = getDist( currPos, to );

                if ( currDist < minDist )
                {
                    minDist = currDist;
     d2a:	6c 01       	movw	r12, r24
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
            short	minDist					= getDist( from, to );
            Point2D	minPos( from );

            for ( short i = 0; i < 8; i++ )
     d2c:	08 15       	cp	r16, r8
     d2e:	19 05       	cpc	r17, r9
     d30:	f9 f6       	brne	.-66     	; 0xcf0 <__stack+0x3f1>
                if ( currCell.distToFinish < dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
     d32:	48 ae       	std	Y+56, r4	; 0x38
     d34:	59 ae       	std	Y+57, r5	; 0x39
     d36:	6a ae       	std	Y+58, r6	; 0x3a
     d38:	7b ae       	std	Y+59, r7	; 0x3b
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     d3a:	e4 2c       	mov	r14, r4
     d3c:	f5 2c       	mov	r15, r5
     d3e:	aa ac       	ldd	r10, Y+58	; 0x3a
     d40:	bb ac       	ldd	r11, Y+59	; 0x3b
     d42:	2f e0       	ldi	r18, 0x0F	; 15
     d44:	2e 9d       	mul	r18, r14
     d46:	f0 01       	movw	r30, r0
     d48:	2f 9d       	mul	r18, r15
     d4a:	f0 0d       	add	r31, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	ea 0d       	add	r30, r10
     d50:	fb 1d       	adc	r31, r11
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	ef 52       	subi	r30, 0x2F	; 47
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	09 f0       	breq	.+2      	; 0xd6c <__stack+0x46d>
     d6a:	80 cf       	rjmp	.-256    	; 0xc6c <__stack+0x36d>
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish < dist - currCell.distToStart )
     d6c:	8f e0       	ldi	r24, 0x0F	; 15
     d6e:	8e 9d       	mul	r24, r14
     d70:	f0 01       	movw	r30, r0
     d72:	8f 9d       	mul	r24, r15
     d74:	f0 0d       	add	r31, r0
     d76:	11 24       	eor	r1, r1
     d78:	ea 0d       	add	r30, r10
     d7a:	fb 1d       	adc	r31, r11
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ef 52       	subi	r30, 0x2F	; 47
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	4e ad       	ldd	r20, Y+62	; 0x3e
     d92:	5f ad       	ldd	r21, Y+63	; 0x3f
     d94:	84 17       	cp	r24, r20
     d96:	95 07       	cpc	r25, r21
     d98:	94 f4       	brge	.+36     	; 0xdbe <__stack+0x4bf>
            {
                currCell.distToFinish = dist - currCell.distToStart;
     d9a:	8f e0       	ldi	r24, 0x0F	; 15
     d9c:	8e 9d       	mul	r24, r14
     d9e:	f0 01       	movw	r30, r0
     da0:	8f 9d       	mul	r24, r15
     da2:	f0 0d       	add	r31, r0
     da4:	11 24       	eor	r1, r1
     da6:	ea 0d       	add	r30, r10
     da8:	fb 1d       	adc	r31, r11
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	ef 52       	subi	r30, 0x2F	; 47
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	53 83       	std	Z+3, r21	; 0x03
     dbc:	42 83       	std	Z+2, r20	; 0x02
     dbe:	01 ed       	ldi	r16, 0xD1	; 209
     dc0:	11 e0       	ldi	r17, 0x01	; 1
            this->calculateDistToFinish();

            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	22 96       	adiw	r28, 0x02	; 2
     dc8:	2e ad       	ldd	r18, Y+62	; 0x3e
     dca:	3f ad       	ldd	r19, Y+63	; 0x3f
     dcc:	22 97       	sbiw	r28, 0x02	; 2
     dce:	24 96       	adiw	r28, 0x04	; 4
     dd0:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd2:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd4:	24 97       	sbiw	r28, 0x04	; 4
     dd6:	f8 01       	movw	r30, r16
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
     ddc:	a6 2e       	mov	r10, r22
     dde:	b7 2e       	mov	r11, r23
     de0:	df 01       	movw	r26, r30

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
     de2:	f7 80       	ldd	r15, Z+7	; 0x07
     de4:	ff 20       	and	r15, r15
     de6:	99 f0       	breq	.+38     	; 0xe0e <__stack+0x50f>
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
     de8:	e0 80       	ld	r14, Z
     dea:	f1 80       	ldd	r15, Z+1	; 0x01
     dec:	e1 14       	cp	r14, r1
     dee:	f1 04       	cpc	r15, r1
     df0:	21 f4       	brne	.+8      	; 0xdfa <__stack+0x4fb>
     df2:	48 2f       	mov	r20, r24
     df4:	59 2f       	mov	r21, r25
     df6:	2a 2d       	mov	r18, r10
     df8:	3b 2d       	mov	r19, r11
                        {
                            // Save the start position.
                            startPos = Point2D( i, j );
                        }

                        short tmp						= matrix[ i ][ j ].distToFinish;
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	cd 90       	ld	r12, X+
     dfe:	dc 90       	ld	r13, X
     e00:	13 97       	sbiw	r26, 0x03	; 3
                        matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
     e02:	13 96       	adiw	r26, 0x03	; 3
     e04:	fc 92       	st	X, r15
     e06:	ee 92       	st	-X, r14
     e08:	12 97       	sbiw	r26, 0x02	; 2
                        matrix[ i ][ j ].distToStart	= tmp;
     e0a:	cd 92       	st	X+, r12
     e0c:	dc 92       	st	X, r13
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	38 96       	adiw	r30, 0x08	; 8
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
     e12:	8f 30       	cpi	r24, 0x0F	; 15
     e14:	91 05       	cpc	r25, r1
     e16:	21 f7       	brne	.-56     	; 0xde0 <__stack+0x4e1>
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	08 58       	subi	r16, 0x88	; 136
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
            this->calculateDistToFinish();

            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
     e20:	6f 30       	cpi	r22, 0x0F	; 15
     e22:	71 05       	cpc	r23, r1
     e24:	c1 f6       	brne	.-80     	; 0xdd6 <__stack+0x4d7>
                    }
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
     e26:	3f 83       	std	Y+7, r19	; 0x07
     e28:	2e 83       	std	Y+6, r18	; 0x06
     e2a:	59 87       	std	Y+9, r21	; 0x09
     e2c:	48 87       	std	Y+8, r20	; 0x08
            {
                stepToGoal( finishPos );

                if ( isLastStep )
                {
                    isLastStep = false;
     e2e:	25 96       	adiw	r28, 0x05	; 5
     e30:	1f ae       	std	Y+63, r1	; 0x3f
     e32:	25 97       	sbiw	r28, 0x05	; 5
     e34:	63 cb       	rjmp	.-2362   	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>

                    this->reverseDirection();
                }
                else if ( position.x == finishPos.x && position.y == finishPos.y )
     e36:	29 81       	ldd	r18, Y+1	; 0x01
     e38:	3a 81       	ldd	r19, Y+2	; 0x02
     e3a:	8e 81       	ldd	r24, Y+6	; 0x06
     e3c:	9f 81       	ldd	r25, Y+7	; 0x07
     e3e:	28 17       	cp	r18, r24
     e40:	39 07       	cpc	r19, r25
     e42:	09 f0       	breq	.+2      	; 0xe46 <__stack+0x547>
     e44:	5b cb       	rjmp	.-2378   	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     e46:	51 e0       	ldi	r21, 0x01	; 1
     e48:	25 96       	adiw	r28, 0x05	; 5
     e4a:	5f af       	std	Y+63, r21	; 0x3f
     e4c:	25 97       	sbiw	r28, 0x05	; 5
     e4e:	2b 81       	ldd	r18, Y+3	; 0x03
     e50:	3c 81       	ldd	r19, Y+4	; 0x04
     e52:	88 85       	ldd	r24, Y+8	; 0x08
     e54:	99 85       	ldd	r25, Y+9	; 0x09
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	09 f4       	brne	.+2      	; 0xe5e <__stack+0x55f>
     e5c:	4f cb       	rjmp	.-2402   	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     e5e:	25 96       	adiw	r28, 0x05	; 5
     e60:	1f ae       	std	Y+63, r1	; 0x3f
     e62:	25 97       	sbiw	r28, 0x05	; 5
     e64:	4b cb       	rjmp	.-2410   	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
    // Set up the 3pi
    robot.initialize();

    robot.mainRobotLogic();

    set_motors( 0, 0 );
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <set_motors>
     e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stack+0x573>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	adjacentOffsets [2][8]	= {{1, 1, 1, 0, 0, -1, -1, -1}, {0, -1, 1, 1, -1, 0, 1, -1}};
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	e2 e1       	ldi	r30, 0x12	; 18
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	de 01       	movw	r26, r28
     e7c:	54 96       	adiw	r26, 0x14	; 20
     e7e:	01 90       	ld	r0, Z+
     e80:	0d 92       	st	X+, r0
     e82:	8a 95       	dec	r24
     e84:	e1 f7       	brne	.-8      	; 0xe7e <__stack+0x57f>
            short	minDist					= getDist( from, to );
     e86:	be 01       	movw	r22, r28
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	cb 01       	movw	r24, r22
     e8e:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
     e92:	6c 01       	movw	r12, r24
            Point2D	minPos( from );
     e94:	49 80       	ldd	r4, Y+1	; 0x01
     e96:	5a 80       	ldd	r5, Y+2	; 0x02
     e98:	6b 80       	ldd	r6, Y+3	; 0x03
     e9a:	7c 80       	ldd	r7, Y+4	; 0x04
     e9c:	8e 01       	movw	r16, r28
     e9e:	0c 5e       	subi	r16, 0xEC	; 236
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	21 96       	adiw	r28, 0x01	; 1
     ea4:	bf ac       	ldd	r11, Y+63	; 0x3f
     ea6:	21 97       	sbiw	r28, 0x01	; 1
     ea8:	23 96       	adiw	r28, 0x03	; 3
     eaa:	af ac       	ldd	r10, Y+63	; 0x3f
     eac:	23 97       	sbiw	r28, 0x03	; 3
     eae:	99 cb       	rjmp	.-2254   	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>

00000eb0 <_GLOBAL__sub_I_matrix>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
     eb0:	41 ed       	ldi	r20, 0xD1	; 209
     eb2:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( INT_MAX )
            , distToFinish( INT_MAX )
            , isObstacle( false )
            , isVisited( false )
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	9f e7       	ldi	r25, 0x7F	; 127
     eb8:	fa 01       	movw	r30, r20
     eba:	48 58       	subi	r20, 0x88	; 136
     ebc:	5f 4f       	sbci	r21, 0xFF	; 255
     ebe:	9a 01       	movw	r18, r20
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
     ec4:	93 83       	std	Z+3, r25	; 0x03
     ec6:	82 83       	std	Z+2, r24	; 0x02
     ec8:	14 82       	std	Z+4, r1	; 0x04
     eca:	17 82       	std	Z+7, r1	; 0x07
     ecc:	38 96       	adiw	r30, 0x08	; 8
            isObstacle		= other.isObstacle;
        }
};

typedef short ( *getDistFunc )( const Point2D&, const Point2D& );
Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
     ece:	e2 17       	cp	r30, r18
     ed0:	f3 07       	cpc	r31, r19
     ed2:	b1 f7       	brne	.-20     	; 0xec0 <_GLOBAL__sub_I_matrix+0x10>
     ed4:	28 e0       	ldi	r18, 0x08	; 8
     ed6:	49 3d       	cpi	r20, 0xD9	; 217
     ed8:	52 07       	cpc	r21, r18
     eda:	71 f7       	brne	.-36     	; 0xeb8 <_GLOBAL__sub_I_matrix+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
     edc:	08 95       	ret

00000ede <atan>:
     ede:	df 93       	push	r29
     ee0:	dd 27       	eor	r29, r29
     ee2:	b9 2f       	mov	r27, r25
     ee4:	bf 77       	andi	r27, 0x7F	; 127
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	16 16       	cp	r1, r22
     eec:	17 06       	cpc	r1, r23
     eee:	48 07       	cpc	r20, r24
     ef0:	5b 07       	cpc	r21, r27
     ef2:	18 f4       	brcc	.+6      	; 0xefa <atan+0x1c>
     ef4:	d9 2f       	mov	r29, r25
     ef6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <inverse>
     efa:	9f 93       	push	r25
     efc:	8f 93       	push	r24
     efe:	7f 93       	push	r23
     f00:	6f 93       	push	r22
     f02:	0e 94 94 09 	call	0x1328	; 0x1328 <square>
     f06:	e8 e7       	ldi	r30, 0x78	; 120
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_powser>
     f0e:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_round>
     f12:	2f 91       	pop	r18
     f14:	3f 91       	pop	r19
     f16:	4f 91       	pop	r20
     f18:	5f 91       	pop	r21
     f1a:	0e 94 16 09 	call	0x122c	; 0x122c <__mulsf3x>
     f1e:	dd 23       	and	r29, r29
     f20:	51 f0       	breq	.+20     	; 0xf36 <atan+0x58>
     f22:	90 58       	subi	r25, 0x80	; 128
     f24:	a2 ea       	ldi	r26, 0xA2	; 162
     f26:	2a ed       	ldi	r18, 0xDA	; 218
     f28:	3f e0       	ldi	r19, 0x0F	; 15
     f2a:	49 ec       	ldi	r20, 0xC9	; 201
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	d0 78       	andi	r29, 0x80	; 128
     f30:	5d 27       	eor	r21, r29
     f32:	0e 94 a9 09 	call	0x1352	; 0x1352 <__addsf3x>
     f36:	df 91       	pop	r29
     f38:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_round>

00000f3c <__divsf3>:
     f3c:	0e 94 b2 07 	call	0xf64	; 0xf64 <__divsf3x>
     f40:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_round>
     f44:	0e 94 ba 08 	call	0x1174	; 0x1174 <__fp_pscB>
     f48:	58 f0       	brcs	.+22     	; 0xf60 <__divsf3+0x24>
     f4a:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_pscA>
     f4e:	40 f0       	brcs	.+16     	; 0xf60 <__divsf3+0x24>
     f50:	29 f4       	brne	.+10     	; 0xf5c <__divsf3+0x20>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	29 f0       	breq	.+10     	; 0xf60 <__divsf3+0x24>
     f56:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
     f5a:	51 11       	cpse	r21, r1
     f5c:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_szero>
     f60:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_nan>

00000f64 <__divsf3x>:
     f64:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fp_split3>
     f68:	68 f3       	brcs	.-38     	; 0xf44 <__divsf3+0x8>

00000f6a <__divsf3_pse>:
     f6a:	99 23       	and	r25, r25
     f6c:	b1 f3       	breq	.-20     	; 0xf5a <__divsf3+0x1e>
     f6e:	55 23       	and	r21, r21
     f70:	91 f3       	breq	.-28     	; 0xf56 <__divsf3+0x1a>
     f72:	95 1b       	sub	r25, r21
     f74:	55 0b       	sbc	r21, r21
     f76:	bb 27       	eor	r27, r27
     f78:	aa 27       	eor	r26, r26
     f7a:	62 17       	cp	r22, r18
     f7c:	73 07       	cpc	r23, r19
     f7e:	84 07       	cpc	r24, r20
     f80:	38 f0       	brcs	.+14     	; 0xf90 <__divsf3_pse+0x26>
     f82:	9f 5f       	subi	r25, 0xFF	; 255
     f84:	5f 4f       	sbci	r21, 0xFF	; 255
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	44 1f       	adc	r20, r20
     f8c:	aa 1f       	adc	r26, r26
     f8e:	a9 f3       	breq	.-22     	; 0xf7a <__divsf3_pse+0x10>
     f90:	35 d0       	rcall	.+106    	; 0xffc <__divsf3_pse+0x92>
     f92:	0e 2e       	mov	r0, r30
     f94:	3a f0       	brmi	.+14     	; 0xfa4 <__divsf3_pse+0x3a>
     f96:	e0 e8       	ldi	r30, 0x80	; 128
     f98:	32 d0       	rcall	.+100    	; 0xffe <__divsf3_pse+0x94>
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	50 40       	sbci	r21, 0x00	; 0
     f9e:	e6 95       	lsr	r30
     fa0:	00 1c       	adc	r0, r0
     fa2:	ca f7       	brpl	.-14     	; 0xf96 <__divsf3_pse+0x2c>
     fa4:	2b d0       	rcall	.+86     	; 0xffc <__divsf3_pse+0x92>
     fa6:	fe 2f       	mov	r31, r30
     fa8:	29 d0       	rcall	.+82     	; 0xffc <__divsf3_pse+0x92>
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	bb 1f       	adc	r27, r27
     fb2:	26 17       	cp	r18, r22
     fb4:	37 07       	cpc	r19, r23
     fb6:	48 07       	cpc	r20, r24
     fb8:	ab 07       	cpc	r26, r27
     fba:	b0 e8       	ldi	r27, 0x80	; 128
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <__divsf3_pse+0x56>
     fbe:	bb 0b       	sbc	r27, r27
     fc0:	80 2d       	mov	r24, r0
     fc2:	bf 01       	movw	r22, r30
     fc4:	ff 27       	eor	r31, r31
     fc6:	93 58       	subi	r25, 0x83	; 131
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	3a f0       	brmi	.+14     	; 0xfda <__divsf3_pse+0x70>
     fcc:	9e 3f       	cpi	r25, 0xFE	; 254
     fce:	51 05       	cpc	r21, r1
     fd0:	78 f0       	brcs	.+30     	; 0xff0 <__divsf3_pse+0x86>
     fd2:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
     fd6:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_szero>
     fda:	5f 3f       	cpi	r21, 0xFF	; 255
     fdc:	e4 f3       	brlt	.-8      	; 0xfd6 <__divsf3_pse+0x6c>
     fde:	98 3e       	cpi	r25, 0xE8	; 232
     fe0:	d4 f3       	brlt	.-12     	; 0xfd6 <__divsf3_pse+0x6c>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b7 95       	ror	r27
     fea:	f7 95       	ror	r31
     fec:	9f 5f       	subi	r25, 0xFF	; 255
     fee:	c9 f7       	brne	.-14     	; 0xfe2 <__divsf3_pse+0x78>
     ff0:	88 0f       	add	r24, r24
     ff2:	91 1d       	adc	r25, r1
     ff4:	96 95       	lsr	r25
     ff6:	87 95       	ror	r24
     ff8:	97 f9       	bld	r25, 7
     ffa:	08 95       	ret
     ffc:	e1 e0       	ldi	r30, 0x01	; 1
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	bb 1f       	adc	r27, r27
    1006:	62 17       	cp	r22, r18
    1008:	73 07       	cpc	r23, r19
    100a:	84 07       	cpc	r24, r20
    100c:	ba 07       	cpc	r27, r26
    100e:	20 f0       	brcs	.+8      	; 0x1018 <__divsf3_pse+0xae>
    1010:	62 1b       	sub	r22, r18
    1012:	73 0b       	sbc	r23, r19
    1014:	84 0b       	sbc	r24, r20
    1016:	ba 0b       	sbc	r27, r26
    1018:	ee 1f       	adc	r30, r30
    101a:	88 f7       	brcc	.-30     	; 0xffe <__divsf3_pse+0x94>
    101c:	e0 95       	com	r30
    101e:	08 95       	ret

00001020 <__fixsfsi>:
    1020:	0e 94 17 08 	call	0x102e	; 0x102e <__fixunssfsi>
    1024:	68 94       	set
    1026:	b1 11       	cpse	r27, r1
    1028:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_szero>
    102c:	08 95       	ret

0000102e <__fixunssfsi>:
    102e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fp_splitA>
    1032:	88 f0       	brcs	.+34     	; 0x1056 <__fixunssfsi+0x28>
    1034:	9f 57       	subi	r25, 0x7F	; 127
    1036:	98 f0       	brcs	.+38     	; 0x105e <__fixunssfsi+0x30>
    1038:	b9 2f       	mov	r27, r25
    103a:	99 27       	eor	r25, r25
    103c:	b7 51       	subi	r27, 0x17	; 23
    103e:	b0 f0       	brcs	.+44     	; 0x106c <__fixunssfsi+0x3e>
    1040:	e1 f0       	breq	.+56     	; 0x107a <__fixunssfsi+0x4c>
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	1a f0       	brmi	.+6      	; 0x1052 <__fixunssfsi+0x24>
    104c:	ba 95       	dec	r27
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__fixunssfsi+0x14>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <__fixunssfsi+0x4c>
    1052:	b1 30       	cpi	r27, 0x01	; 1
    1054:	91 f0       	breq	.+36     	; 0x107a <__fixunssfsi+0x4c>
    1056:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__fp_zero>
    105a:	b1 e0       	ldi	r27, 0x01	; 1
    105c:	08 95       	ret
    105e:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_zero>
    1062:	67 2f       	mov	r22, r23
    1064:	78 2f       	mov	r23, r24
    1066:	88 27       	eor	r24, r24
    1068:	b8 5f       	subi	r27, 0xF8	; 248
    106a:	39 f0       	breq	.+14     	; 0x107a <__fixunssfsi+0x4c>
    106c:	b9 3f       	cpi	r27, 0xF9	; 249
    106e:	cc f3       	brlt	.-14     	; 0x1062 <__fixunssfsi+0x34>
    1070:	86 95       	lsr	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	b3 95       	inc	r27
    1078:	d9 f7       	brne	.-10     	; 0x1070 <__fixunssfsi+0x42>
    107a:	3e f4       	brtc	.+14     	; 0x108a <__fixunssfsi+0x5c>
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	08 95       	ret

0000108c <__floatunsisf>:
    108c:	e8 94       	clt
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <__floatsisf+0x12>

00001090 <__floatsisf>:
    1090:	97 fb       	bst	r25, 7
    1092:	3e f4       	brtc	.+14     	; 0x10a2 <__floatsisf+0x12>
    1094:	90 95       	com	r25
    1096:	80 95       	com	r24
    1098:	70 95       	com	r23
    109a:	61 95       	neg	r22
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	8f 4f       	sbci	r24, 0xFF	; 255
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	99 23       	and	r25, r25
    10a4:	a9 f0       	breq	.+42     	; 0x10d0 <__floatsisf+0x40>
    10a6:	f9 2f       	mov	r31, r25
    10a8:	96 e9       	ldi	r25, 0x96	; 150
    10aa:	bb 27       	eor	r27, r27
    10ac:	93 95       	inc	r25
    10ae:	f6 95       	lsr	r31
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b7 95       	ror	r27
    10b8:	f1 11       	cpse	r31, r1
    10ba:	f8 cf       	rjmp	.-16     	; 0x10ac <__floatsisf+0x1c>
    10bc:	fa f4       	brpl	.+62     	; 0x10fc <__floatsisf+0x6c>
    10be:	bb 0f       	add	r27, r27
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <__floatsisf+0x36>
    10c2:	60 ff       	sbrs	r22, 0
    10c4:	1b c0       	rjmp	.+54     	; 0x10fc <__floatsisf+0x6c>
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <__floatsisf+0x6c>
    10d0:	88 23       	and	r24, r24
    10d2:	11 f0       	breq	.+4      	; 0x10d8 <__floatsisf+0x48>
    10d4:	96 e9       	ldi	r25, 0x96	; 150
    10d6:	11 c0       	rjmp	.+34     	; 0x10fa <__floatsisf+0x6a>
    10d8:	77 23       	and	r23, r23
    10da:	21 f0       	breq	.+8      	; 0x10e4 <__floatsisf+0x54>
    10dc:	9e e8       	ldi	r25, 0x8E	; 142
    10de:	87 2f       	mov	r24, r23
    10e0:	76 2f       	mov	r23, r22
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__floatsisf+0x5e>
    10e4:	66 23       	and	r22, r22
    10e6:	71 f0       	breq	.+28     	; 0x1104 <__floatsisf+0x74>
    10e8:	96 e8       	ldi	r25, 0x86	; 134
    10ea:	86 2f       	mov	r24, r22
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	2a f0       	brmi	.+10     	; 0x10fc <__floatsisf+0x6c>
    10f2:	9a 95       	dec	r25
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	da f7       	brpl	.-10     	; 0x10f2 <__floatsisf+0x62>
    10fc:	88 0f       	add	r24, r24
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret

00001106 <__fp_inf>:
    1106:	97 f9       	bld	r25, 7
    1108:	9f 67       	ori	r25, 0x7F	; 127
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	08 95       	ret

00001112 <__fp_nan>:
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	80 ec       	ldi	r24, 0xC0	; 192
    1116:	08 95       	ret

00001118 <__fp_powser>:
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	1f 93       	push	r17
    111e:	0f 93       	push	r16
    1120:	ff 92       	push	r15
    1122:	ef 92       	push	r14
    1124:	df 92       	push	r13
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
    112a:	68 94       	set
    112c:	06 c0       	rjmp	.+12     	; 0x113a <__fp_powser+0x22>
    112e:	da 2e       	mov	r13, r26
    1130:	ef 01       	movw	r28, r30
    1132:	0e 94 16 09 	call	0x122c	; 0x122c <__mulsf3x>
    1136:	fe 01       	movw	r30, r28
    1138:	e8 94       	clt
    113a:	a5 91       	lpm	r26, Z+
    113c:	25 91       	lpm	r18, Z+
    113e:	35 91       	lpm	r19, Z+
    1140:	45 91       	lpm	r20, Z+
    1142:	55 91       	lpm	r21, Z+
    1144:	a6 f3       	brts	.-24     	; 0x112e <__fp_powser+0x16>
    1146:	ef 01       	movw	r28, r30
    1148:	0e 94 a9 09 	call	0x1352	; 0x1352 <__addsf3x>
    114c:	fe 01       	movw	r30, r28
    114e:	97 01       	movw	r18, r14
    1150:	a8 01       	movw	r20, r16
    1152:	da 94       	dec	r13
    1154:	69 f7       	brne	.-38     	; 0x1130 <__fp_powser+0x18>
    1156:	df 90       	pop	r13
    1158:	ef 90       	pop	r14
    115a:	ff 90       	pop	r15
    115c:	0f 91       	pop	r16
    115e:	1f 91       	pop	r17
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <__fp_pscA>:
    1166:	00 24       	eor	r0, r0
    1168:	0a 94       	dec	r0
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	18 06       	cpc	r1, r24
    1170:	09 06       	cpc	r0, r25
    1172:	08 95       	ret

00001174 <__fp_pscB>:
    1174:	00 24       	eor	r0, r0
    1176:	0a 94       	dec	r0
    1178:	12 16       	cp	r1, r18
    117a:	13 06       	cpc	r1, r19
    117c:	14 06       	cpc	r1, r20
    117e:	05 06       	cpc	r0, r21
    1180:	08 95       	ret

00001182 <__fp_round>:
    1182:	09 2e       	mov	r0, r25
    1184:	03 94       	inc	r0
    1186:	00 0c       	add	r0, r0
    1188:	11 f4       	brne	.+4      	; 0x118e <__fp_round+0xc>
    118a:	88 23       	and	r24, r24
    118c:	52 f0       	brmi	.+20     	; 0x11a2 <__fp_round+0x20>
    118e:	bb 0f       	add	r27, r27
    1190:	40 f4       	brcc	.+16     	; 0x11a2 <__fp_round+0x20>
    1192:	bf 2b       	or	r27, r31
    1194:	11 f4       	brne	.+4      	; 0x119a <__fp_round+0x18>
    1196:	60 ff       	sbrs	r22, 0
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <__fp_round+0x20>
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	08 95       	ret

000011a4 <__fp_split3>:
    11a4:	57 fd       	sbrc	r21, 7
    11a6:	90 58       	subi	r25, 0x80	; 128
    11a8:	44 0f       	add	r20, r20
    11aa:	55 1f       	adc	r21, r21
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <__fp_splitA+0x10>
    11ae:	5f 3f       	cpi	r21, 0xFF	; 255
    11b0:	71 f0       	breq	.+28     	; 0x11ce <__fp_splitA+0x1a>
    11b2:	47 95       	ror	r20

000011b4 <__fp_splitA>:
    11b4:	88 0f       	add	r24, r24
    11b6:	97 fb       	bst	r25, 7
    11b8:	99 1f       	adc	r25, r25
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <__fp_splitA+0x20>
    11bc:	9f 3f       	cpi	r25, 0xFF	; 255
    11be:	79 f0       	breq	.+30     	; 0x11de <__fp_splitA+0x2a>
    11c0:	87 95       	ror	r24
    11c2:	08 95       	ret
    11c4:	12 16       	cp	r1, r18
    11c6:	13 06       	cpc	r1, r19
    11c8:	14 06       	cpc	r1, r20
    11ca:	55 1f       	adc	r21, r21
    11cc:	f2 cf       	rjmp	.-28     	; 0x11b2 <__fp_split3+0xe>
    11ce:	46 95       	lsr	r20
    11d0:	f1 df       	rcall	.-30     	; 0x11b4 <__fp_splitA>
    11d2:	08 c0       	rjmp	.+16     	; 0x11e4 <__fp_splitA+0x30>
    11d4:	16 16       	cp	r1, r22
    11d6:	17 06       	cpc	r1, r23
    11d8:	18 06       	cpc	r1, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	f1 cf       	rjmp	.-30     	; 0x11c0 <__fp_splitA+0xc>
    11de:	86 95       	lsr	r24
    11e0:	71 05       	cpc	r23, r1
    11e2:	61 05       	cpc	r22, r1
    11e4:	08 94       	sec
    11e6:	08 95       	ret

000011e8 <__fp_zero>:
    11e8:	e8 94       	clt

000011ea <__fp_szero>:
    11ea:	bb 27       	eor	r27, r27
    11ec:	66 27       	eor	r22, r22
    11ee:	77 27       	eor	r23, r23
    11f0:	cb 01       	movw	r24, r22
    11f2:	97 f9       	bld	r25, 7
    11f4:	08 95       	ret

000011f6 <inverse>:
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e8       	ldi	r24, 0x80	; 128
    1200:	9f e3       	ldi	r25, 0x3F	; 63
    1202:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__divsf3>

00001206 <__mulsf3>:
    1206:	0e 94 16 09 	call	0x122c	; 0x122c <__mulsf3x>
    120a:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_round>
    120e:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_pscA>
    1212:	38 f0       	brcs	.+14     	; 0x1222 <__mulsf3+0x1c>
    1214:	0e 94 ba 08 	call	0x1174	; 0x1174 <__fp_pscB>
    1218:	20 f0       	brcs	.+8      	; 0x1222 <__mulsf3+0x1c>
    121a:	95 23       	and	r25, r21
    121c:	11 f0       	breq	.+4      	; 0x1222 <__mulsf3+0x1c>
    121e:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
    1222:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_nan>
    1226:	11 24       	eor	r1, r1
    1228:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_szero>

0000122c <__mulsf3x>:
    122c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fp_split3>
    1230:	70 f3       	brcs	.-36     	; 0x120e <__mulsf3+0x8>

00001232 <__mulsf3_pse>:
    1232:	95 9f       	mul	r25, r21
    1234:	c1 f3       	breq	.-16     	; 0x1226 <__mulsf3+0x20>
    1236:	95 0f       	add	r25, r21
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	55 1f       	adc	r21, r21
    123c:	62 9f       	mul	r22, r18
    123e:	f0 01       	movw	r30, r0
    1240:	72 9f       	mul	r23, r18
    1242:	bb 27       	eor	r27, r27
    1244:	f0 0d       	add	r31, r0
    1246:	b1 1d       	adc	r27, r1
    1248:	63 9f       	mul	r22, r19
    124a:	aa 27       	eor	r26, r26
    124c:	f0 0d       	add	r31, r0
    124e:	b1 1d       	adc	r27, r1
    1250:	aa 1f       	adc	r26, r26
    1252:	64 9f       	mul	r22, r20
    1254:	66 27       	eor	r22, r22
    1256:	b0 0d       	add	r27, r0
    1258:	a1 1d       	adc	r26, r1
    125a:	66 1f       	adc	r22, r22
    125c:	82 9f       	mul	r24, r18
    125e:	22 27       	eor	r18, r18
    1260:	b0 0d       	add	r27, r0
    1262:	a1 1d       	adc	r26, r1
    1264:	62 1f       	adc	r22, r18
    1266:	73 9f       	mul	r23, r19
    1268:	b0 0d       	add	r27, r0
    126a:	a1 1d       	adc	r26, r1
    126c:	62 1f       	adc	r22, r18
    126e:	83 9f       	mul	r24, r19
    1270:	a0 0d       	add	r26, r0
    1272:	61 1d       	adc	r22, r1
    1274:	22 1f       	adc	r18, r18
    1276:	74 9f       	mul	r23, r20
    1278:	33 27       	eor	r19, r19
    127a:	a0 0d       	add	r26, r0
    127c:	61 1d       	adc	r22, r1
    127e:	23 1f       	adc	r18, r19
    1280:	84 9f       	mul	r24, r20
    1282:	60 0d       	add	r22, r0
    1284:	21 1d       	adc	r18, r1
    1286:	82 2f       	mov	r24, r18
    1288:	76 2f       	mov	r23, r22
    128a:	6a 2f       	mov	r22, r26
    128c:	11 24       	eor	r1, r1
    128e:	9f 57       	subi	r25, 0x7F	; 127
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	9a f0       	brmi	.+38     	; 0x12ba <__mulsf3_pse+0x88>
    1294:	f1 f0       	breq	.+60     	; 0x12d2 <__mulsf3_pse+0xa0>
    1296:	88 23       	and	r24, r24
    1298:	4a f0       	brmi	.+18     	; 0x12ac <__mulsf3_pse+0x7a>
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	bb 1f       	adc	r27, r27
    12a0:	66 1f       	adc	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	91 50       	subi	r25, 0x01	; 1
    12a8:	50 40       	sbci	r21, 0x00	; 0
    12aa:	a9 f7       	brne	.-22     	; 0x1296 <__mulsf3_pse+0x64>
    12ac:	9e 3f       	cpi	r25, 0xFE	; 254
    12ae:	51 05       	cpc	r21, r1
    12b0:	80 f0       	brcs	.+32     	; 0x12d2 <__mulsf3_pse+0xa0>
    12b2:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
    12b6:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_szero>
    12ba:	5f 3f       	cpi	r21, 0xFF	; 255
    12bc:	e4 f3       	brlt	.-8      	; 0x12b6 <__mulsf3_pse+0x84>
    12be:	98 3e       	cpi	r25, 0xE8	; 232
    12c0:	d4 f3       	brlt	.-12     	; 0x12b6 <__mulsf3_pse+0x84>
    12c2:	86 95       	lsr	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f7 95       	ror	r31
    12cc:	e7 95       	ror	r30
    12ce:	9f 5f       	subi	r25, 0xFF	; 255
    12d0:	c1 f7       	brne	.-16     	; 0x12c2 <__mulsf3_pse+0x90>
    12d2:	fe 2b       	or	r31, r30
    12d4:	88 0f       	add	r24, r24
    12d6:	91 1d       	adc	r25, r1
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	97 f9       	bld	r25, 7
    12de:	08 95       	ret

000012e0 <round>:
    12e0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fp_splitA>
    12e4:	e8 f0       	brcs	.+58     	; 0x1320 <round+0x40>
    12e6:	9e 37       	cpi	r25, 0x7E	; 126
    12e8:	e8 f0       	brcs	.+58     	; 0x1324 <round+0x44>
    12ea:	96 39       	cpi	r25, 0x96	; 150
    12ec:	b8 f4       	brcc	.+46     	; 0x131c <round+0x3c>
    12ee:	9e 38       	cpi	r25, 0x8E	; 142
    12f0:	48 f4       	brcc	.+18     	; 0x1304 <round+0x24>
    12f2:	67 2f       	mov	r22, r23
    12f4:	78 2f       	mov	r23, r24
    12f6:	88 27       	eor	r24, r24
    12f8:	98 5f       	subi	r25, 0xF8	; 248
    12fa:	f9 cf       	rjmp	.-14     	; 0x12ee <round+0xe>
    12fc:	86 95       	lsr	r24
    12fe:	77 95       	ror	r23
    1300:	67 95       	ror	r22
    1302:	93 95       	inc	r25
    1304:	95 39       	cpi	r25, 0x95	; 149
    1306:	d0 f3       	brcs	.-12     	; 0x12fc <round+0x1c>
    1308:	b6 2f       	mov	r27, r22
    130a:	b1 70       	andi	r27, 0x01	; 1
    130c:	6b 0f       	add	r22, r27
    130e:	71 1d       	adc	r23, r1
    1310:	81 1d       	adc	r24, r1
    1312:	20 f4       	brcc	.+8      	; 0x131c <round+0x3c>
    1314:	87 95       	ror	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	93 95       	inc	r25
    131c:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_mintl>
    1320:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_mpack>
    1324:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_szero>

00001328 <square>:
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__mulsf3>
    1330:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_pscA>
    1334:	38 f0       	brcs	.+14     	; 0x1344 <square+0x1c>
    1336:	0e 94 ba 08 	call	0x1174	; 0x1174 <__fp_pscB>
    133a:	20 f0       	brcs	.+8      	; 0x1344 <square+0x1c>
    133c:	39 f4       	brne	.+14     	; 0x134c <square+0x24>
    133e:	9f 3f       	cpi	r25, 0xFF	; 255
    1340:	19 f4       	brne	.+6      	; 0x1348 <square+0x20>
    1342:	26 f4       	brtc	.+8      	; 0x134c <square+0x24>
    1344:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_nan>
    1348:	0e f4       	brtc	.+2      	; 0x134c <square+0x24>
    134a:	e0 95       	com	r30
    134c:	e7 fb       	bst	r30, 7
    134e:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>

00001352 <__addsf3x>:
    1352:	e9 2f       	mov	r30, r25
    1354:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fp_split3>
    1358:	58 f3       	brcs	.-42     	; 0x1330 <square+0x8>
    135a:	ba 17       	cp	r27, r26
    135c:	62 07       	cpc	r22, r18
    135e:	73 07       	cpc	r23, r19
    1360:	84 07       	cpc	r24, r20
    1362:	95 07       	cpc	r25, r21
    1364:	20 f0       	brcs	.+8      	; 0x136e <__addsf3x+0x1c>
    1366:	79 f4       	brne	.+30     	; 0x1386 <__addsf3x+0x34>
    1368:	a6 f5       	brtc	.+104    	; 0x13d2 <__addsf3x+0x80>
    136a:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_zero>
    136e:	0e f4       	brtc	.+2      	; 0x1372 <__addsf3x+0x20>
    1370:	e0 95       	com	r30
    1372:	0b 2e       	mov	r0, r27
    1374:	ba 2f       	mov	r27, r26
    1376:	a0 2d       	mov	r26, r0
    1378:	0b 01       	movw	r0, r22
    137a:	b9 01       	movw	r22, r18
    137c:	90 01       	movw	r18, r0
    137e:	0c 01       	movw	r0, r24
    1380:	ca 01       	movw	r24, r20
    1382:	a0 01       	movw	r20, r0
    1384:	11 24       	eor	r1, r1
    1386:	ff 27       	eor	r31, r31
    1388:	59 1b       	sub	r21, r25
    138a:	99 f0       	breq	.+38     	; 0x13b2 <__addsf3x+0x60>
    138c:	59 3f       	cpi	r21, 0xF9	; 249
    138e:	50 f4       	brcc	.+20     	; 0x13a4 <__addsf3x+0x52>
    1390:	50 3e       	cpi	r21, 0xE0	; 224
    1392:	68 f1       	brcs	.+90     	; 0x13ee <__addsf3x+0x9c>
    1394:	1a 16       	cp	r1, r26
    1396:	f0 40       	sbci	r31, 0x00	; 0
    1398:	a2 2f       	mov	r26, r18
    139a:	23 2f       	mov	r18, r19
    139c:	34 2f       	mov	r19, r20
    139e:	44 27       	eor	r20, r20
    13a0:	58 5f       	subi	r21, 0xF8	; 248
    13a2:	f3 cf       	rjmp	.-26     	; 0x138a <__addsf3x+0x38>
    13a4:	46 95       	lsr	r20
    13a6:	37 95       	ror	r19
    13a8:	27 95       	ror	r18
    13aa:	a7 95       	ror	r26
    13ac:	f0 40       	sbci	r31, 0x00	; 0
    13ae:	53 95       	inc	r21
    13b0:	c9 f7       	brne	.-14     	; 0x13a4 <__addsf3x+0x52>
    13b2:	7e f4       	brtc	.+30     	; 0x13d2 <__addsf3x+0x80>
    13b4:	1f 16       	cp	r1, r31
    13b6:	ba 0b       	sbc	r27, r26
    13b8:	62 0b       	sbc	r22, r18
    13ba:	73 0b       	sbc	r23, r19
    13bc:	84 0b       	sbc	r24, r20
    13be:	ba f0       	brmi	.+46     	; 0x13ee <__addsf3x+0x9c>
    13c0:	91 50       	subi	r25, 0x01	; 1
    13c2:	a1 f0       	breq	.+40     	; 0x13ec <__addsf3x+0x9a>
    13c4:	ff 0f       	add	r31, r31
    13c6:	bb 1f       	adc	r27, r27
    13c8:	66 1f       	adc	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	c2 f7       	brpl	.-16     	; 0x13c0 <__addsf3x+0x6e>
    13d0:	0e c0       	rjmp	.+28     	; 0x13ee <__addsf3x+0x9c>
    13d2:	ba 0f       	add	r27, r26
    13d4:	62 1f       	adc	r22, r18
    13d6:	73 1f       	adc	r23, r19
    13d8:	84 1f       	adc	r24, r20
    13da:	48 f4       	brcc	.+18     	; 0x13ee <__addsf3x+0x9c>
    13dc:	87 95       	ror	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	b7 95       	ror	r27
    13e4:	f7 95       	ror	r31
    13e6:	9e 3f       	cpi	r25, 0xFE	; 254
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <__addsf3x+0x9a>
    13ea:	b0 cf       	rjmp	.-160    	; 0x134c <square+0x24>
    13ec:	93 95       	inc	r25
    13ee:	88 0f       	add	r24, r24
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <__addsf3x+0xa2>
    13f2:	99 27       	eor	r25, r25
    13f4:	ee 0f       	add	r30, r30
    13f6:	97 95       	ror	r25
    13f8:	87 95       	ror	r24
    13fa:	08 95       	ret

000013fc <__fp_mintl>:
    13fc:	88 23       	and	r24, r24
    13fe:	71 f4       	brne	.+28     	; 0x141c <__fp_mintl+0x20>
    1400:	77 23       	and	r23, r23
    1402:	21 f0       	breq	.+8      	; 0x140c <__fp_mintl+0x10>
    1404:	98 50       	subi	r25, 0x08	; 8
    1406:	87 2b       	or	r24, r23
    1408:	76 2f       	mov	r23, r22
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__fp_mintl+0x1e>
    140c:	66 23       	and	r22, r22
    140e:	11 f4       	brne	.+4      	; 0x1414 <__fp_mintl+0x18>
    1410:	99 27       	eor	r25, r25
    1412:	0d c0       	rjmp	.+26     	; 0x142e <__fp_mintl+0x32>
    1414:	90 51       	subi	r25, 0x10	; 16
    1416:	86 2b       	or	r24, r22
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	2a f0       	brmi	.+10     	; 0x1428 <__fp_mintl+0x2c>
    141e:	9a 95       	dec	r25
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	da f7       	brpl	.-10     	; 0x141e <__fp_mintl+0x22>
    1428:	88 0f       	add	r24, r24
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <__fp_mpack>:
    1432:	9f 3f       	cpi	r25, 0xFF	; 255
    1434:	31 f0       	breq	.+12     	; 0x1442 <__fp_mpack_finite+0xc>

00001436 <__fp_mpack_finite>:
    1436:	91 50       	subi	r25, 0x01	; 1
    1438:	20 f4       	brcc	.+8      	; 0x1442 <__fp_mpack_finite+0xc>
    143a:	87 95       	ror	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	88 0f       	add	r24, r24
    1444:	91 1d       	adc	r25, r1
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret

0000144e <_ZL16currentCharacterv>:
    144e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <_ZL17use_program_space>
    1452:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <__data_end>
    1456:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <__data_end+0x1>
    145a:	99 23       	and	r25, r25
    145c:	11 f0       	breq	.+4      	; 0x1462 <_ZL16currentCharacterv+0x14>
    145e:	84 91       	lpm	r24, Z
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <_ZL16currentCharacterv+0x16>
    1462:	80 81       	ld	r24, Z
    1464:	2f eb       	ldi	r18, 0xBF	; 191
    1466:	28 0f       	add	r18, r24
    1468:	2a 31       	cpi	r18, 0x1A	; 26
    146a:	10 f4       	brcc	.+4      	; 0x1470 <_ZL16currentCharacterv+0x22>
    146c:	80 5e       	subi	r24, 0xE0	; 224
    146e:	08 95       	ret
    1470:	80 32       	cpi	r24, 0x20	; 32
    1472:	49 f4       	brne	.+18     	; 0x1486 <_ZL16currentCharacterv+0x38>
    1474:	9f 01       	movw	r18, r30
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    147e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    1482:	ef 2b       	or	r30, r31
    1484:	31 f7       	brne	.-52     	; 0x1452 <_ZL16currentCharacterv+0x4>
    1486:	08 95       	ret

00001488 <_ZL9getNumberv>:
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    1492:	c0 e0       	ldi	r28, 0x00	; 0
    1494:	d0 e0       	ldi	r29, 0x00	; 0
    1496:	1a e0       	ldi	r17, 0x0A	; 10
    1498:	90 ed       	ldi	r25, 0xD0	; 208
    149a:	98 0f       	add	r25, r24
    149c:	9a 30       	cpi	r25, 0x0A	; 10
    149e:	b8 f4       	brcc	.+46     	; 0x14ce <_ZL9getNumberv+0x46>
    14a0:	9e 01       	movw	r18, r28
    14a2:	12 9f       	mul	r17, r18
    14a4:	e0 01       	movw	r28, r0
    14a6:	13 9f       	mul	r17, r19
    14a8:	d0 0d       	add	r29, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	c8 0f       	add	r28, r24
    14ae:	d1 1d       	adc	r29, r1
    14b0:	87 fd       	sbrc	r24, 7
    14b2:	da 95       	dec	r29
    14b4:	e0 97       	sbiw	r28, 0x30	; 48
    14b6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
    14ba:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
    14c4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
    14c8:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    14cc:	e5 cf       	rjmp	.-54     	; 0x1498 <_ZL9getNumberv+0x10>
    14ce:	ce 01       	movw	r24, r28
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	08 95       	ret

000014d8 <_ZN15OrangutanBuzzer5init2Ev>:
    14d8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    14dc:	83 e2       	ldi	r24, 0x23	; 35
    14de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    14e2:	81 e1       	ldi	r24, 0x11	; 17
    14e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    14e8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    14ec:	80 e1       	ldi	r24, 0x10	; 16
    14ee:	97 e2       	ldi	r25, 0x27	; 39
    14f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    14f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    14f8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    14fc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1500:	22 9a       	sbi	0x04, 2	; 4
    1502:	78 94       	sei
    1504:	08 95       	ret

00001506 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	5c 01       	movw	r10, r24
    151e:	8b 01       	movw	r16, r22
    1520:	d4 2e       	mov	r13, r20
    1522:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <buzzerInitialized>
    1526:	81 11       	cpse	r24, r1
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <buzzerInitialized>
    1530:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_ZN15OrangutanBuzzer5init2Ev>
    1534:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
    1538:	b7 fe       	sbrs	r11, 7
    153a:	05 c0       	rjmp	.+10     	; 0x1546 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    153c:	e8 94       	clt
    153e:	b7 f8       	bld	r11, 7
    1540:	2a e0       	ldi	r18, 0x0A	; 10
    1542:	f2 2e       	mov	r15, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1546:	ff 24       	eor	r15, r15
    1548:	f3 94       	inc	r15
    154a:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    154e:	2e 2d       	mov	r18, r14
    1550:	28 7f       	andi	r18, 0xF8	; 248
    1552:	e2 2e       	mov	r14, r18
    1554:	48 ec       	ldi	r20, 0xC8	; 200
    1556:	f4 9e       	mul	r15, r20
    1558:	c0 01       	movw	r24, r0
    155a:	11 24       	eor	r1, r1
    155c:	8a 15       	cp	r24, r10
    155e:	9b 05       	cpc	r25, r11
    1560:	e0 f4       	brcc	.+56     	; 0x159a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1562:	e5 01       	movw	r28, r10
    1564:	51 e1       	ldi	r21, 0x11	; 17
    1566:	a5 16       	cp	r10, r21
    1568:	57 e2       	ldi	r21, 0x27	; 39
    156a:	b5 06       	cpc	r11, r21
    156c:	10 f0       	brcs	.+4      	; 0x1572 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    156e:	c0 e1       	ldi	r28, 0x10	; 16
    1570:	d7 e2       	ldi	r29, 0x27	; 39
    1572:	be 01       	movw	r22, r28
    1574:	76 95       	lsr	r23
    1576:	67 95       	ror	r22
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	60 58       	subi	r22, 0x80	; 128
    157e:	79 46       	sbci	r23, 0x69	; 105
    1580:	87 46       	sbci	r24, 0x67	; 103
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	4e 01       	movw	r8, r28
    1586:	a1 2c       	mov	r10, r1
    1588:	b1 2c       	mov	r11, r1
    158a:	a5 01       	movw	r20, r10
    158c:	94 01       	movw	r18, r8
    158e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    1592:	59 01       	movw	r10, r18
    1594:	8e 2d       	mov	r24, r14
    1596:	81 60       	ori	r24, 0x01	; 1
    1598:	24 c0       	rjmp	.+72     	; 0x15e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    159a:	c8 e2       	ldi	r28, 0x28	; 40
    159c:	fc 9e       	mul	r15, r28
    159e:	c0 2d       	mov	r28, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	d0 e0       	ldi	r29, 0x00	; 0
    15a4:	ca 15       	cp	r28, r10
    15a6:	db 05       	cpc	r29, r11
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    15aa:	e5 01       	movw	r28, r10
    15ac:	be 01       	movw	r22, r28
    15ae:	76 95       	lsr	r23
    15b0:	67 95       	ror	r22
    15b2:	9e 01       	movw	r18, r28
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	f8 12       	cpse	r15, r24
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	60 5e       	subi	r22, 0xE0	; 224
    15c4:	73 44       	sbci	r23, 0x43	; 67
    15c6:	81 44       	sbci	r24, 0x41	; 65
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	60 53       	subi	r22, 0x30	; 48
    15d2:	7d 4e       	sbci	r23, 0xED	; 237
    15d4:	8c 4e       	sbci	r24, 0xEC	; 236
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    15dc:	59 01       	movw	r10, r18
    15de:	8e 2d       	mov	r24, r14
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	88 2e       	mov	r8, r24
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	f2 12       	cpse	r15, r18
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    15ea:	ce 01       	movw	r24, r28
    15ec:	05 96       	adiw	r24, 0x05	; 5
    15ee:	6a e0       	ldi	r22, 0x0A	; 10
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    15f6:	eb 01       	movw	r28, r22
    15f8:	c8 3e       	cpi	r28, 0xE8	; 232
    15fa:	43 e0       	ldi	r20, 0x03	; 3
    15fc:	d4 07       	cpc	r29, r20
    15fe:	59 f0       	breq	.+22     	; 0x1616 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1600:	98 01       	movw	r18, r16
    1602:	de 01       	movw	r26, r28
    1604:	0e 94 c5 13 	call	0x278a	; 0x278a <__umulhisi3>
    1608:	28 ee       	ldi	r18, 0xE8	; 232
    160a:	33 e0       	ldi	r19, 0x03	; 3
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	0e 94 a0 13 	call	0x2740	; 0x2740 <__divmodsi4>
    1614:	89 01       	movw	r16, r18
    1616:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    161a:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    161e:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1622:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1626:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    162a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    162e:	4d 2d       	mov	r20, r13
    1630:	40 31       	cpi	r20, 0x10	; 16
    1632:	08 f0       	brcs	.+2      	; 0x1636 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1634:	4f e0       	ldi	r20, 0x0F	; 15
    1636:	80 e1       	ldi	r24, 0x10	; 16
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	84 1b       	sub	r24, r20
    163c:	91 09       	sbc	r25, r1
    163e:	a9 01       	movw	r20, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1642:	56 95       	lsr	r21
    1644:	47 95       	ror	r20
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    164a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    164e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1652:	10 93 7a 01 	sts	0x017A, r17	; 0x80017a <_ZL13buzzerTimeout+0x1>
    1656:	00 93 79 01 	sts	0x0179, r16	; 0x800179 <_ZL13buzzerTimeout>
    165a:	86 b3       	in	r24, 0x16	; 22
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	86 bb       	out	0x16, r24	; 22
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	08 95       	ret

0000167e <_ZN15OrangutanBuzzer8playNoteEhjh>:
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	eb 01       	movw	r28, r22
    1684:	8f 3f       	cpi	r24, 0xFF	; 255
    1686:	11 f0       	breq	.+4      	; 0x168c <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1688:	41 11       	cpse	r20, r1
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	be 01       	movw	r22, r28
    1690:	88 ee       	ldi	r24, 0xE8	; 232
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	43 c0       	rjmp	.+134    	; 0x171c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1696:	81 31       	cpi	r24, 0x11	; 17
    1698:	30 f0       	brcs	.+12     	; 0x16a6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    169a:	50 ef       	ldi	r21, 0xF0	; 240
    169c:	58 0f       	add	r21, r24
    169e:	50 36       	cpi	r21, 0x60	; 96
    16a0:	18 f0       	brcs	.+6      	; 0x16a8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    16a2:	5f e5       	ldi	r21, 0x5F	; 95
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	85 2f       	mov	r24, r21
    16aa:	6c e0       	ldi	r22, 0x0C	; 12
    16ac:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodqi4>
    16b0:	68 2f       	mov	r22, r24
    16b2:	74 ef       	ldi	r23, 0xF4	; 244
    16b4:	76 03       	mulsu	r23, r22
    16b6:	90 01       	movw	r18, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	25 0f       	add	r18, r21
    16bc:	31 1d       	adc	r19, r1
    16be:	2c 30       	cpi	r18, 0x0C	; 12
    16c0:	31 05       	cpc	r19, r1
    16c2:	40 f4       	brcc	.+16     	; 0x16d4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    16c4:	f9 01       	movw	r30, r18
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	ee 5c       	subi	r30, 0xCE	; 206
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	20 81       	ld	r18, Z
    16d0:	31 81       	ldd	r19, Z+1	; 0x01
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	87 30       	cpi	r24, 0x07	; 7
    16da:	81 f0       	breq	.+32     	; 0x16fc <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    16dc:	08 2e       	mov	r0, r24
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	28 f0       	brcs	.+10     	; 0x16f6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    16ec:	c9 01       	movw	r24, r18
    16ee:	05 96       	adiw	r24, 0x05	; 5
    16f0:	6a e0       	ldi	r22, 0x0A	; 10
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    16f6:	c9 01       	movw	r24, r18
    16f8:	90 58       	subi	r25, 0x80	; 128
    16fa:	0c c0       	rjmp	.+24     	; 0x1714 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    16fc:	c9 01       	movw	r24, r18
    16fe:	36 e0       	ldi	r19, 0x06	; 6
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	3a 95       	dec	r19
    1706:	e1 f7       	brne	.-8      	; 0x1700 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1708:	02 96       	adiw	r24, 0x02	; 2
    170a:	65 e0       	ldi	r22, 0x05	; 5
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    1712:	cb 01       	movw	r24, r22
    1714:	40 31       	cpi	r20, 0x10	; 16
    1716:	08 f0       	brcs	.+2      	; 0x171a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1718:	4f e0       	ldi	r20, 0x0F	; 15
    171a:	be 01       	movw	r22, r28
    171c:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <_ZL8nextNotev>:
    1726:	a2 e0       	ldi	r26, 0x02	; 2
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 e9       	ldi	r30, 0x99	; 153
    172c:	fb e0       	ldi	r31, 0x0B	; 11
    172e:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__prologue_saves__+0x4>
    1732:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    1736:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZL8staccato>
    173a:	88 23       	and	r24, r24
    173c:	21 f0       	breq	.+8      	; 0x1746 <_ZL8nextNotev+0x20>
    173e:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <_ZL22staccato_rest_duration>
    1742:	61 11       	cpse	r22, r1
    1744:	17 c0       	rjmp	.+46     	; 0x1774 <_ZL8nextNotev+0x4e>
    1746:	77 24       	eor	r7, r7
    1748:	73 94       	inc	r7
    174a:	b0 ec       	ldi	r27, 0xC0	; 192
    174c:	ab 2e       	mov	r10, r27
    174e:	bd e5       	ldi	r27, 0x5D	; 93
    1750:	bb 2e       	mov	r11, r27
    1752:	1a e0       	ldi	r17, 0x0A	; 10
    1754:	61 2e       	mov	r6, r17
    1756:	04 e0       	ldi	r16, 0x04	; 4
    1758:	80 2e       	mov	r8, r16
    175a:	80 ed       	ldi	r24, 0xD0	; 208
    175c:	c8 2e       	mov	r12, r24
    175e:	87 e0       	ldi	r24, 0x07	; 7
    1760:	d8 2e       	mov	r13, r24
    1762:	94 e0       	ldi	r25, 0x04	; 4
    1764:	e9 2e       	mov	r14, r25
    1766:	f1 2c       	mov	r15, r1
    1768:	04 ef       	ldi	r16, 0xF4	; 244
    176a:	11 e0       	ldi	r17, 0x01	; 1
    176c:	2f e0       	ldi	r18, 0x0F	; 15
    176e:	42 2e       	mov	r4, r18
    1770:	51 2c       	mov	r5, r1
    1772:	15 c0       	rjmp	.+42     	; 0x179e <_ZL8nextNotev+0x78>
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	88 ee       	ldi	r24, 0xE8	; 232
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1780:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL22staccato_rest_duration>
    1784:	17 c1       	rjmp	.+558    	; 0x19b4 <_ZL8nextNotev+0x28e>
    1786:	86 36       	cpi	r24, 0x66	; 102
    1788:	d4 f5       	brge	.+116    	; 0x17fe <_ZL8nextNotev+0xd8>
    178a:	81 36       	cpi	r24, 0x61	; 97
    178c:	09 f4       	brne	.+2      	; 0x1790 <_ZL8nextNotev+0x6a>
    178e:	a9 c0       	rjmp	.+338    	; 0x18e2 <_ZL8nextNotev+0x1bc>
    1790:	7c f5       	brge	.+94     	; 0x17f0 <_ZL8nextNotev+0xca>
    1792:	8c 33       	cpi	r24, 0x3C	; 60
    1794:	09 f4       	brne	.+2      	; 0x1798 <_ZL8nextNotev+0x72>
    1796:	60 c0       	rjmp	.+192    	; 0x1858 <_ZL8nextNotev+0x132>
    1798:	8e 33       	cpi	r24, 0x3E	; 62
    179a:	81 f4       	brne	.+32     	; 0x17bc <_ZL8nextNotev+0x96>
    179c:	93 94       	inc	r9
    179e:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    17a2:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    17a6:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    17b2:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    17b6:	85 36       	cpi	r24, 0x65	; 101
    17b8:	31 f7       	brne	.-52     	; 0x1786 <_ZL8nextNotev+0x60>
    17ba:	52 c0       	rjmp	.+164    	; 0x1860 <_ZL8nextNotev+0x13a>
    17bc:	81 32       	cpi	r24, 0x21	; 33
    17be:	09 f0       	breq	.+2      	; 0x17c2 <_ZL8nextNotev+0x9c>
    17c0:	8b c0       	rjmp	.+278    	; 0x18d8 <_ZL8nextNotev+0x1b2>
    17c2:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    17c6:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    17ca:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    17ce:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    17d2:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    17d6:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    17da:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    17de:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
    17e2:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
    17e6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZL8staccato>
    17ea:	a4 e0       	ldi	r26, 0x04	; 4
    17ec:	9a 2e       	mov	r9, r26
    17ee:	d7 cf       	rjmp	.-82     	; 0x179e <_ZL8nextNotev+0x78>
    17f0:	83 36       	cpi	r24, 0x63	; 99
    17f2:	a1 f1       	breq	.+104    	; 0x185c <_ZL8nextNotev+0x136>
    17f4:	0c f4       	brge	.+2      	; 0x17f8 <_ZL8nextNotev+0xd2>
    17f6:	78 c0       	rjmp	.+240    	; 0x18e8 <_ZL8nextNotev+0x1c2>
    17f8:	10 e0       	ldi	r17, 0x00	; 0
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	77 c0       	rjmp	.+238    	; 0x18ec <_ZL8nextNotev+0x1c6>
    17fe:	8d 36       	cpi	r24, 0x6D	; 109
    1800:	c1 f1       	breq	.+112    	; 0x1872 <_ZL8nextNotev+0x14c>
    1802:	94 f4       	brge	.+36     	; 0x1828 <_ZL8nextNotev+0x102>
    1804:	87 36       	cpi	r24, 0x67	; 103
    1806:	91 f1       	breq	.+100    	; 0x186c <_ZL8nextNotev+0x146>
    1808:	74 f1       	brlt	.+92     	; 0x1866 <_ZL8nextNotev+0x140>
    180a:	8c 36       	cpi	r24, 0x6C	; 108
    180c:	09 f0       	breq	.+2      	; 0x1810 <_ZL8nextNotev+0xea>
    180e:	64 c0       	rjmp	.+200    	; 0x18d8 <_ZL8nextNotev+0x1b2>
    1810:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZL9getNumberv>
    1814:	bc 01       	movw	r22, r24
    1816:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    181a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    181e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1822:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1826:	51 c0       	rjmp	.+162    	; 0x18ca <_ZL8nextNotev+0x1a4>
    1828:	82 37       	cpi	r24, 0x72	; 114
    182a:	c9 f1       	breq	.+114    	; 0x189e <_ZL8nextNotev+0x178>
    182c:	4c f4       	brge	.+18     	; 0x1840 <_ZL8nextNotev+0x11a>
    182e:	8f 36       	cpi	r24, 0x6F	; 111
    1830:	09 f0       	breq	.+2      	; 0x1834 <_ZL8nextNotev+0x10e>
    1832:	52 c0       	rjmp	.+164    	; 0x18d8 <_ZL8nextNotev+0x1b2>
    1834:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZL9getNumberv>
    1838:	98 2e       	mov	r9, r24
    183a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    183e:	af cf       	rjmp	.-162    	; 0x179e <_ZL8nextNotev+0x78>
    1840:	84 37       	cpi	r24, 0x74	; 116
    1842:	81 f1       	breq	.+96     	; 0x18a4 <_ZL8nextNotev+0x17e>
    1844:	86 37       	cpi	r24, 0x76	; 118
    1846:	09 f0       	breq	.+2      	; 0x184a <_ZL8nextNotev+0x124>
    1848:	47 c0       	rjmp	.+142    	; 0x18d8 <_ZL8nextNotev+0x1b2>
    184a:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZL9getNumberv>
    184e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1852:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1856:	a3 cf       	rjmp	.-186    	; 0x179e <_ZL8nextNotev+0x78>
    1858:	9a 94       	dec	r9
    185a:	a1 cf       	rjmp	.-190    	; 0x179e <_ZL8nextNotev+0x78>
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	20 c0       	rjmp	.+64     	; 0x18a0 <_ZL8nextNotev+0x17a>
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	43 c0       	rjmp	.+134    	; 0x18ec <_ZL8nextNotev+0x1c6>
    1866:	10 e0       	ldi	r17, 0x00	; 0
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	40 c0       	rjmp	.+128    	; 0x18ec <_ZL8nextNotev+0x1c6>
    186c:	10 e0       	ldi	r17, 0x00	; 0
    186e:	87 e0       	ldi	r24, 0x07	; 7
    1870:	3d c0       	rjmp	.+122    	; 0x18ec <_ZL8nextNotev+0x1c6>
    1872:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    1876:	8c 36       	cpi	r24, 0x6C	; 108
    1878:	19 f4       	brne	.+6      	; 0x1880 <_ZL8nextNotev+0x15a>
    187a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZL8staccato>
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <_ZL8nextNotev+0x162>
    1880:	70 92 76 01 	sts	0x0176, r7	; 0x800176 <_ZL8staccato>
    1884:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL22staccato_rest_duration>
    1888:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    188c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    1890:	2f 5f       	subi	r18, 0xFF	; 255
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    1898:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    189c:	80 cf       	rjmp	.-256    	; 0x179e <_ZL8nextNotev+0x78>
    189e:	11 e0       	ldi	r17, 0x01	; 1
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	24 c0       	rjmp	.+72     	; 0x18ec <_ZL8nextNotev+0x1c6>
    18a4:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZL9getNumberv>
    18a8:	bc 01       	movw	r22, r24
    18aa:	c5 01       	movw	r24, r10
    18ac:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    18b0:	66 9e       	mul	r6, r22
    18b2:	c0 01       	movw	r24, r0
    18b4:	67 9e       	mul	r6, r23
    18b6:	90 0d       	add	r25, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    18be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    18c2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    18c6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    18ca:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    18ce:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    18d2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    18d6:	63 cf       	rjmp	.-314    	; 0x179e <_ZL8nextNotev+0x78>
    18d8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__data_end+0x1>
    18dc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
    18e0:	69 c0       	rjmp	.+210    	; 0x19b4 <_ZL8nextNotev+0x28e>
    18e2:	10 e0       	ldi	r17, 0x00	; 0
    18e4:	89 e0       	ldi	r24, 0x09	; 9
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <_ZL8nextNotev+0x1c6>
    18e8:	10 e0       	ldi	r17, 0x00	; 0
    18ea:	8b e0       	ldi	r24, 0x0B	; 11
    18ec:	08 2f       	mov	r16, r24
    18ee:	9c e0       	ldi	r25, 0x0C	; 12
    18f0:	99 9e       	mul	r9, r25
    18f2:	00 0d       	add	r16, r0
    18f4:	11 24       	eor	r1, r1
    18f6:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    18fa:	98 2f       	mov	r25, r24
    18fc:	97 7f       	andi	r25, 0xF7	; 247
    18fe:	93 32       	cpi	r25, 0x23	; 35
    1900:	61 f4       	brne	.+24     	; 0x191a <_ZL8nextNotev+0x1f4>
    1902:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    1906:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    190a:	2f 5f       	subi	r18, 0xFF	; 255
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    1912:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    1916:	0f 5f       	subi	r16, 0xFF	; 255
    1918:	ee cf       	rjmp	.-36     	; 0x18f6 <_ZL8nextNotev+0x1d0>
    191a:	8d 32       	cpi	r24, 0x2D	; 45
    191c:	71 f4       	brne	.+28     	; 0x193a <_ZL8nextNotev+0x214>
    191e:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    1922:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    1926:	2f 5f       	subi	r18, 0xFF	; 255
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    192e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    1932:	01 50       	subi	r16, 0x01	; 1
    1934:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    1938:	f0 cf       	rjmp	.-32     	; 0x191a <_ZL8nextNotev+0x1f4>
    193a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    193e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    1942:	81 53       	subi	r24, 0x31	; 49
    1944:	88 30       	cpi	r24, 0x08	; 8
    1946:	50 f4       	brcc	.+20     	; 0x195c <_ZL8nextNotev+0x236>
    1948:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    194c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1950:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZL9getNumberv>
    1954:	bc 01       	movw	r22, r24
    1956:	c7 01       	movw	r24, r14
    1958:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    195c:	7b 01       	movw	r14, r22
    195e:	f6 94       	lsr	r15
    1960:	e7 94       	ror	r14
    1962:	69 83       	std	Y+1, r22	; 0x01
    1964:	7a 83       	std	Y+2, r23	; 0x02
    1966:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZL16currentCharacterv>
    196a:	69 81       	ldd	r22, Y+1	; 0x01
    196c:	7a 81       	ldd	r23, Y+2	; 0x02
    196e:	8e 32       	cpi	r24, 0x2E	; 46
    1970:	69 f4       	brne	.+26     	; 0x198c <_ZL8nextNotev+0x266>
    1972:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    1976:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    1982:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    1986:	6e 0d       	add	r22, r14
    1988:	7f 1d       	adc	r23, r15
    198a:	e9 cf       	rjmp	.-46     	; 0x195e <_ZL8nextNotev+0x238>
    198c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZL8staccato>
    1990:	88 23       	and	r24, r24
    1992:	39 f0       	breq	.+14     	; 0x19a2 <_ZL8nextNotev+0x27c>
    1994:	9b 01       	movw	r18, r22
    1996:	36 95       	lsr	r19
    1998:	27 95       	ror	r18
    199a:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <_ZL22staccato_rest_duration>
    199e:	62 1b       	sub	r22, r18
    19a0:	71 09       	sbc	r23, r1
    19a2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    19a6:	11 23       	and	r17, r17
    19a8:	11 f0       	breq	.+4      	; 0x19ae <_ZL8nextNotev+0x288>
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <_ZL8nextNotev+0x28a>
    19ae:	80 2f       	mov	r24, r16
    19b0:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN15OrangutanBuzzer8playNoteEhjh>
    19b4:	22 96       	adiw	r28, 0x02	; 2
    19b6:	e0 e1       	ldi	r30, 0x10	; 16
    19b8:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__epilogue_restores__+0x4>

000019bc <__vector_13>:
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
    19de:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZL13buzzerTimeout>
    19e2:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZL13buzzerTimeout+0x1>
    19e6:	9c 01       	movw	r18, r24
    19e8:	21 50       	subi	r18, 0x01	; 1
    19ea:	31 09       	sbc	r19, r1
    19ec:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <_ZL13buzzerTimeout+0x1>
    19f0:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <_ZL13buzzerTimeout>
    19f4:	89 2b       	or	r24, r25
    19f6:	11 f5       	brne	.+68     	; 0x1a3c <__vector_13+0x80>
    19f8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    19fc:	78 94       	sei
    19fe:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a02:	88 7f       	andi	r24, 0xF8	; 248
    1a04:	81 60       	ori	r24, 0x01	; 1
    1a06:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a0a:	80 e1       	ldi	r24, 0x10	; 16
    1a0c:	97 e2       	ldi	r25, 0x27	; 39
    1a0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a16:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a1a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    1a24:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
    1a28:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
    1a2c:	89 2b       	or	r24, r25
    1a2e:	31 f0       	breq	.+12     	; 0x1a3c <__vector_13+0x80>
    1a30:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_ZL17play_mode_setting>
    1a34:	81 11       	cpse	r24, r1
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <__vector_13+0x80>
    1a38:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZL8nextNotev>
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <_ZN15OrangutanBuzzer4playEPKc>:
    1a5e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a62:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
    1a66:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
    1a6a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZL17use_program_space>
    1a6e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL22staccato_rest_duration>
    1a72:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZL8nextNotev>
    1a76:	08 95       	ret

00001a78 <play>:
    1a78:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN15OrangutanBuzzer4playEPKc>
    1a7c:	08 95       	ret

00001a7e <delay_us.constprop.0>:
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	6f 93       	push	r22
    1a84:	64 e0       	ldi	r22, 0x04	; 4
    1a86:	6a 95       	dec	r22
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <delay_us.constprop.0+0x8>
    1a8a:	6f 91       	pop	r22
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	c9 f7       	brne	.-14     	; 0x1a82 <delay_us.constprop.0+0x4>
    1a90:	08 95       	ret

00001a92 <_ZN12OrangutanLCD8busyWaitEv>:
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	1a b1       	in	r17, 0x0a	; 10
    1a9c:	57 98       	cbi	0x0a, 7	; 10
    1a9e:	5a 98       	cbi	0x0b, 2	; 11
    1aa0:	28 9a       	sbi	0x05, 0	; 5
    1aa2:	c0 e0       	ldi	r28, 0x00	; 0
    1aa4:	d0 e0       	ldi	r29, 0x00	; 0
    1aa6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <delay_us.constprop.0>
    1aaa:	5c 9a       	sbi	0x0b, 4	; 11
    1aac:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <delay_us.constprop.0>
    1ab0:	09 b1       	in	r16, 0x09	; 9
    1ab2:	5c 98       	cbi	0x0b, 4	; 11
    1ab4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <delay_us.constprop.0>
    1ab8:	5c 9a       	sbi	0x0b, 4	; 11
    1aba:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <delay_us.constprop.0>
    1abe:	5c 98       	cbi	0x0b, 4	; 11
    1ac0:	24 96       	adiw	r28, 0x04	; 4
    1ac2:	07 ff       	sbrs	r16, 7
    1ac4:	10 c0       	rjmp	.+32     	; 0x1ae6 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1ac6:	ae 01       	movw	r20, r28
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <lcdTimeout>
    1ad0:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <lcdTimeout+0x1>
    1ad4:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <lcdTimeout+0x2>
    1ad8:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <lcdTimeout+0x3>
    1adc:	48 17       	cp	r20, r24
    1ade:	59 07       	cpc	r21, r25
    1ae0:	6a 07       	cpc	r22, r26
    1ae2:	7b 07       	cpc	r23, r27
    1ae4:	00 f3       	brcs	.-64     	; 0x1aa6 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1ae6:	1a b9       	out	0x0a, r17	; 10
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <_ZN12OrangutanLCD8sendDataEh>:
    1af2:	95 b1       	in	r25, 0x05	; 5
    1af4:	28 2f       	mov	r18, r24
    1af6:	21 70       	andi	r18, 0x01	; 1
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	48 2f       	mov	r20, r24
    1b00:	46 70       	andi	r20, 0x06	; 6
    1b02:	68 e0       	ldi	r22, 0x08	; 8
    1b04:	46 9f       	mul	r20, r22
    1b06:	a0 01       	movw	r20, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	24 2b       	or	r18, r20
    1b0c:	9d 7c       	andi	r25, 0xCD	; 205
    1b0e:	29 2b       	or	r18, r25
    1b10:	25 b9       	out	0x05, r18	; 5
    1b12:	9b b1       	in	r25, 0x0b	; 11
    1b14:	88 70       	andi	r24, 0x08	; 8
    1b16:	82 95       	swap	r24
    1b18:	80 7f       	andi	r24, 0xF0	; 240
    1b1a:	9f 77       	andi	r25, 0x7F	; 127
    1b1c:	89 2b       	or	r24, r25
    1b1e:	8b b9       	out	0x0b, r24	; 11
    1b20:	5c 9a       	sbi	0x0b, 4	; 11
    1b22:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <delay_us.constprop.0>
    1b26:	5c 98       	cbi	0x0b, 4	; 11
    1b28:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <delay_us.constprop.0>
    1b2c:	08 95       	ret

00001b2e <_ZN12OrangutanLCD4sendEhhh>:
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ed e9       	ldi	r30, 0x9D	; 157
    1b34:	fd e0       	ldi	r31, 0x0D	; 13
    1b36:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x16>
    1b3a:	c8 2f       	mov	r28, r24
    1b3c:	d6 2e       	mov	r13, r22
    1b3e:	e4 2e       	mov	r14, r20
    1b40:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <_ZZN12OrangutanLCD4initEvE11initialized>
    1b44:	81 11       	cpse	r24, r1
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <_ZZN12OrangutanLCD4initEvE11initialized>
    1b4e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN12OrangutanLCD5init2Ev>
    1b52:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN12OrangutanLCD8busyWaitEv>
    1b56:	14 b1       	in	r17, 0x04	; 4
    1b58:	d5 b1       	in	r29, 0x05	; 5
    1b5a:	fa b0       	in	r15, 0x0a	; 10
    1b5c:	0b b1       	in	r16, 0x0b	; 11
    1b5e:	28 98       	cbi	0x05, 0	; 5
    1b60:	dd 20       	and	r13, r13
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1b64:	5a 9a       	sbi	0x0b, 2	; 11
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1b68:	5a 98       	cbi	0x0b, 2	; 11
    1b6a:	94 b1       	in	r25, 0x04	; 4
    1b6c:	92 63       	ori	r25, 0x32	; 50
    1b6e:	94 b9       	out	0x04, r25	; 4
    1b70:	57 9a       	sbi	0x0a, 7	; 10
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	e8 16       	cp	r14, r24
    1b76:	29 f0       	breq	.+10     	; 0x1b82 <_ZN12OrangutanLCD4sendEhhh+0x54>
    1b78:	8c 2f       	mov	r24, r28
    1b7a:	82 95       	swap	r24
    1b7c:	8f 70       	andi	r24, 0x0F	; 15
    1b7e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN12OrangutanLCD8sendDataEh>
    1b82:	8c 2f       	mov	r24, r28
    1b84:	8f 70       	andi	r24, 0x0F	; 15
    1b86:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN12OrangutanLCD8sendDataEh>
    1b8a:	fa b8       	out	0x0a, r15	; 10
    1b8c:	0b b9       	out	0x0b, r16	; 11
    1b8e:	14 b9       	out	0x04, r17	; 4
    1b90:	d5 b9       	out	0x05, r29	; 5
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	e7 e0       	ldi	r30, 0x07	; 7
    1b98:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x16>

00001b9c <_ZN12OrangutanLCD8send_cmdEh>:
    1b9c:	42 e0       	ldi	r20, 0x02	; 2
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN12OrangutanLCD4sendEhhh>
    1ba4:	08 95       	ret

00001ba6 <_ZN12OrangutanLCD9send_dataEh>:
    1ba6:	42 e0       	ldi	r20, 0x02	; 2
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN12OrangutanLCD4sendEhhh>
    1bae:	08 95       	ret

00001bb0 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN12OrangutanLCD4sendEhhh>
    1bb8:	08 95       	ret

00001bba <_ZN12OrangutanLCD5init2Ev>:
    1bba:	80 e1       	ldi	r24, 0x10	; 16
    1bbc:	97 e2       	ldi	r25, 0x27	; 39
    1bbe:	a0 e0       	ldi	r26, 0x00	; 0
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lcdTimeout>
    1bc6:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <lcdTimeout+0x1>
    1bca:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <lcdTimeout+0x2>
    1bce:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <lcdTimeout+0x3>
    1bd2:	52 9a       	sbi	0x0a, 2	; 10
    1bd4:	20 9a       	sbi	0x04, 0	; 4
    1bd6:	54 9a       	sbi	0x0a, 4	; 10
    1bd8:	8e e1       	ldi	r24, 0x1E	; 30
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1be6:	86 e0       	ldi	r24, 0x06	; 6
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
    1c18:	88 e2       	ldi	r24, 0x28	; 40
    1c1a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1c1e:	88 e0       	ldi	r24, 0x08	; 8
    1c20:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1c2a:	86 e0       	ldi	r24, 0x06	; 6
    1c2c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1c30:	8c e0       	ldi	r24, 0x0C	; 12
    1c32:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1c36:	08 95       	ret

00001c38 <_ZN12OrangutanLCD5clearEv>:
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1c3e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <printf_chars>
    1c42:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <printf_chars+0x1>
    1c46:	89 2b       	or	r24, r25
    1c48:	f9 f0       	breq	.+62     	; 0x1c88 <_ZN12OrangutanLCD5clearEv+0x50>
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	a0 e2       	ldi	r26, 0x20	; 32
    1c4e:	26 2f       	mov	r18, r22
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <numLCDCols>
    1c56:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <numLCDRows>
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	78 9f       	mul	r23, r24
    1c60:	a0 01       	movw	r20, r0
    1c62:	79 9f       	mul	r23, r25
    1c64:	50 0d       	add	r21, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	24 17       	cp	r18, r20
    1c6a:	35 07       	cpc	r19, r21
    1c6c:	4c f4       	brge	.+18     	; 0x1c80 <_ZN12OrangutanLCD5clearEv+0x48>
    1c6e:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <printf_chars>
    1c72:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <printf_chars+0x1>
    1c76:	e2 0f       	add	r30, r18
    1c78:	f3 1f       	adc	r31, r19
    1c7a:	a0 83       	st	Z, r26
    1c7c:	6f 5f       	subi	r22, 0xFF	; 255
    1c7e:	e7 cf       	rjmp	.-50     	; 0x1c4e <_ZN12OrangutanLCD5clearEv+0x16>
    1c80:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <col>
    1c84:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <row>
    1c88:	08 95       	ret

00001c8a <clear>:
    1c8a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN12OrangutanLCD5clearEv>
    1c8e:	08 95       	ret

00001c90 <_ZN12OrangutanLCD5printEPKc>:
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	ec 01       	movw	r28, r24
    1c96:	89 91       	ld	r24, Y+
    1c98:	88 23       	and	r24, r24
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <_ZN12OrangutanLCD5printEPKc+0x12>
    1c9c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN12OrangutanLCD9send_dataEh>
    1ca0:	fa cf       	rjmp	.-12     	; 0x1c96 <_ZN12OrangutanLCD5printEPKc+0x6>
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <print>:
    1ca8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZN12OrangutanLCD5printEPKc>
    1cac:	08 95       	ret

00001cae <_ZN12OrangutanLCD5printEm>:
    1cae:	aa e0       	ldi	r26, 0x0A	; 10
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ed e5       	ldi	r30, 0x5D	; 93
    1cb4:	fe e0       	ldi	r31, 0x0E	; 14
    1cb6:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x14>
    1cba:	1a e0       	ldi	r17, 0x0A	; 10
    1cbc:	5a e0       	ldi	r21, 0x0A	; 10
    1cbe:	c5 2e       	mov	r12, r21
    1cc0:	d1 2c       	mov	r13, r1
    1cc2:	e1 2c       	mov	r14, r1
    1cc4:	f1 2c       	mov	r15, r1
    1cc6:	06 2f       	mov	r16, r22
    1cc8:	a7 01       	movw	r20, r14
    1cca:	96 01       	movw	r18, r12
    1ccc:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	11 50       	subi	r17, 0x01	; 1
    1cd6:	e1 e0       	ldi	r30, 0x01	; 1
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	ec 0f       	add	r30, r28
    1cdc:	fd 1f       	adc	r31, r29
    1cde:	e1 0f       	add	r30, r17
    1ce0:	f1 1d       	adc	r31, r1
    1ce2:	00 5d       	subi	r16, 0xD0	; 208
    1ce4:	2a e0       	ldi	r18, 0x0A	; 10
    1ce6:	62 9f       	mul	r22, r18
    1ce8:	00 19       	sub	r16, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	00 83       	st	Z, r16
    1cee:	61 15       	cp	r22, r1
    1cf0:	71 05       	cpc	r23, r1
    1cf2:	81 05       	cpc	r24, r1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	39 f7       	brne	.-50     	; 0x1cc6 <_ZN12OrangutanLCD5printEm+0x18>
    1cf8:	1a 30       	cpi	r17, 0x0A	; 10
    1cfa:	58 f4       	brcc	.+22     	; 0x1d12 <_ZN12OrangutanLCD5printEm+0x64>
    1cfc:	e1 e0       	ldi	r30, 0x01	; 1
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	ec 0f       	add	r30, r28
    1d02:	fd 1f       	adc	r31, r29
    1d04:	e1 0f       	add	r30, r17
    1d06:	f1 1d       	adc	r31, r1
    1d08:	80 81       	ld	r24, Z
    1d0a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN12OrangutanLCD9send_dataEh>
    1d0e:	1f 5f       	subi	r17, 0xFF	; 255
    1d10:	f3 cf       	rjmp	.-26     	; 0x1cf8 <_ZN12OrangutanLCD5printEm+0x4a>
    1d12:	2a 96       	adiw	r28, 0x0a	; 10
    1d14:	e8 e0       	ldi	r30, 0x08	; 8
    1d16:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x14>

00001d1a <_ZN12OrangutanLCD5printEl>:
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	6b 01       	movw	r12, r22
    1d24:	7c 01       	movw	r14, r24
    1d26:	97 ff       	sbrs	r25, 7
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <_ZN12OrangutanLCD5printEl+0x26>
    1d2a:	f0 94       	com	r15
    1d2c:	e0 94       	com	r14
    1d2e:	d0 94       	com	r13
    1d30:	c0 94       	com	r12
    1d32:	c1 1c       	adc	r12, r1
    1d34:	d1 1c       	adc	r13, r1
    1d36:	e1 1c       	adc	r14, r1
    1d38:	f1 1c       	adc	r15, r1
    1d3a:	8d e2       	ldi	r24, 0x2D	; 45
    1d3c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN12OrangutanLCD9send_dataEh>
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN12OrangutanLCD5printEm>
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	08 95       	ret

00001d52 <print_long>:
    1d52:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN12OrangutanLCD5printEl>
    1d56:	08 95       	ret

00001d58 <_ZN12OrangutanLCD6gotoXYEhh>:
    1d58:	a5 e0       	ldi	r26, 0x05	; 5
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1d5e:	fe e0       	ldi	r31, 0x0E	; 14
    1d60:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x1e>
    1d64:	18 2f       	mov	r17, r24
    1d66:	80 e8       	ldi	r24, 0x80	; 128
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	80 ec       	ldi	r24, 0xC0	; 192
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	84 e9       	ldi	r24, 0x94	; 148
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	84 ed       	ldi	r24, 0xD4	; 212
    1d74:	8c 83       	std	Y+4, r24	; 0x04
    1d76:	fe 01       	movw	r30, r28
    1d78:	e6 0f       	add	r30, r22
    1d7a:	f1 1d       	adc	r31, r1
    1d7c:	81 81       	ldd	r24, Z+1	; 0x01
    1d7e:	81 0f       	add	r24, r17
    1d80:	6d 83       	std	Y+5, r22	; 0x05
    1d82:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN12OrangutanLCD8send_cmdEh>
    1d86:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <col>
    1d8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d8c:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <row>
    1d90:	25 96       	adiw	r28, 0x05	; 5
    1d92:	e3 e0       	ldi	r30, 0x03	; 3
    1d94:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x1e>

00001d98 <lcd_goto_xy>:
    1d98:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN12OrangutanLCD6gotoXYEhh>
    1d9c:	08 95       	ret

00001d9e <_ZN16OrangutanDigital9setOutputEhh>:
    1d9e:	88 30       	cpi	r24, 0x08	; 8
    1da0:	58 f4       	brcc	.+22     	; 0x1db8 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1da6:	99 0f       	add	r25, r25
    1da8:	8a 95       	dec	r24
    1daa:	ea f7       	brpl	.-6      	; 0x1da6 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1dac:	89 2f       	mov	r24, r25
    1dae:	aa e2       	ldi	r26, 0x2A	; 42
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	eb e2       	ldi	r30, 0x2B	; 43
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	21 c0       	rjmp	.+66     	; 0x1dfa <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1db8:	8e 30       	cpi	r24, 0x0E	; 14
    1dba:	60 f4       	brcc	.+24     	; 0x1dd4 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1dbc:	98 ef       	ldi	r25, 0xF8	; 248
    1dbe:	98 0f       	add	r25, r24
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	9a 95       	dec	r25
    1dc8:	ea f7       	brpl	.-6      	; 0x1dc4 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1dca:	a4 e2       	ldi	r26, 0x24	; 36
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e2       	ldi	r30, 0x25	; 37
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	13 c0       	rjmp	.+38     	; 0x1dfa <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1dd4:	85 31       	cpi	r24, 0x15	; 21
    1dd6:	60 f4       	brcc	.+24     	; 0x1df0 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1dd8:	92 ef       	ldi	r25, 0xF2	; 242
    1dda:	98 0f       	add	r25, r24
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1de0:	88 0f       	add	r24, r24
    1de2:	9a 95       	dec	r25
    1de4:	ea f7       	brpl	.-6      	; 0x1de0 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1de6:	a7 e2       	ldi	r26, 0x27	; 39
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e8 e2       	ldi	r30, 0x28	; 40
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	a0 e0       	ldi	r26, 0x00	; 0
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e0 e0       	ldi	r30, 0x00	; 0
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	6f 3f       	cpi	r22, 0xFF	; 255
    1dfc:	19 f4       	brne	.+6      	; 0x1e04 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1dfe:	90 81       	ld	r25, Z
    1e00:	98 27       	eor	r25, r24
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1e04:	66 23       	and	r22, r22
    1e06:	19 f0       	breq	.+6      	; 0x1e0e <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1e08:	90 81       	ld	r25, Z
    1e0a:	98 2b       	or	r25, r24
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1e0e:	20 81       	ld	r18, Z
    1e10:	98 2f       	mov	r25, r24
    1e12:	90 95       	com	r25
    1e14:	92 23       	and	r25, r18
    1e16:	90 83       	st	Z, r25
    1e18:	9c 91       	ld	r25, X
    1e1a:	98 2b       	or	r25, r24
    1e1c:	9c 93       	st	X, r25
    1e1e:	08 95       	ret

00001e20 <_ZN15OrangutanMotors5init2Ev>:
    1e20:	83 ef       	ldi	r24, 0xF3	; 243
    1e22:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1e26:	84 bd       	out	0x24, r24	; 36
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1e2e:	85 bd       	out	0x25, r24	; 37
    1e30:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1e34:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1e38:	18 bc       	out	0x28, r1	; 40
    1e3a:	17 bc       	out	0x27, r1	; 39
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	86 e0       	ldi	r24, 0x06	; 6
    1e40:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN16OrangutanDigital9setOutputEhh>
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	85 e0       	ldi	r24, 0x05	; 5
    1e48:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN16OrangutanDigital9setOutputEhh>
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	8b e0       	ldi	r24, 0x0B	; 11
    1e50:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN16OrangutanDigital9setOutputEhh>
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN16OrangutanDigital9setOutputEhh>
    1e5c:	08 95       	ret

00001e5e <_ZN15OrangutanMotors4initEv>:
    1e5e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <_ZZN15OrangutanMotors4initEvE11initialized>
    1e62:	81 11       	cpse	r24, r1
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <_ZN15OrangutanMotors4initEv+0x12>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <_ZZN15OrangutanMotors4initEvE11initialized>
    1e6c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN15OrangutanMotors5init2Ev>
    1e70:	08 95       	ret

00001e72 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	ec 01       	movw	r28, r24
    1e78:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN15OrangutanMotors4initEv>
    1e7c:	d7 ff       	sbrs	r29, 7
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1e80:	d1 95       	neg	r29
    1e82:	c1 95       	neg	r28
    1e84:	d1 09       	sbc	r29, r1
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	cf 3f       	cpi	r28, 0xFF	; 255
    1e8e:	d1 05       	cpc	r29, r1
    1e90:	19 f0       	breq	.+6      	; 0x1e98 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1e92:	14 f0       	brlt	.+4      	; 0x1e98 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1e94:	cf ef       	ldi	r28, 0xFF	; 255
    1e96:	d0 e0       	ldi	r29, 0x00	; 0
    1e98:	88 23       	and	r24, r24
    1e9a:	19 f0       	breq	.+6      	; 0x1ea2 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1e9c:	18 bc       	out	0x28, r1	; 40
    1e9e:	c7 bd       	out	0x27, r28	; 39
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1ea2:	c8 bd       	out	0x28, r28	; 40
    1ea4:	17 bc       	out	0x27, r1	; 39
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	08 95       	ret

00001eac <_ZN15OrangutanMotors10setM2SpeedEi>:
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	ec 01       	movw	r28, r24
    1eb2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN15OrangutanMotors4initEv>
    1eb6:	d7 ff       	sbrs	r29, 7
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1eba:	d1 95       	neg	r29
    1ebc:	c1 95       	neg	r28
    1ebe:	d1 09       	sbc	r29, r1
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	cf 3f       	cpi	r28, 0xFF	; 255
    1ec8:	d1 05       	cpc	r29, r1
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1ecc:	14 f0       	brlt	.+4      	; 0x1ed2 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1ece:	cf ef       	ldi	r28, 0xFF	; 255
    1ed0:	d0 e0       	ldi	r29, 0x00	; 0
    1ed2:	88 23       	and	r24, r24
    1ed4:	29 f0       	breq	.+10     	; 0x1ee0 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1ed6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1eda:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1ee0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1ee4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	08 95       	ret

00001eee <_ZN15OrangutanMotors9setSpeedsEii>:
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	eb 01       	movw	r28, r22
    1ef4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN15OrangutanMotors10setM1SpeedEi>
    1ef8:	ce 01       	movw	r24, r28
    1efa:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN15OrangutanMotors10setM2SpeedEi>
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <set_motors>:
    1f04:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN15OrangutanMotors9setSpeedsEii>
    1f08:	08 95       	ret

00001f0a <_ZN20OrangutanPushbuttons5init2Ev>:
    1f0a:	84 b1       	in	r24, 0x04	; 4
    1f0c:	8d 7c       	andi	r24, 0xCD	; 205
    1f0e:	84 b9       	out	0x04, r24	; 4
    1f10:	85 b1       	in	r24, 0x05	; 5
    1f12:	82 63       	ori	r24, 0x32	; 50
    1f14:	85 b9       	out	0x05, r24	; 5
    1f16:	85 e0       	ldi	r24, 0x05	; 5
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	6f 93       	push	r22
    1f1c:	64 e0       	ldi	r22, 0x04	; 4
    1f1e:	6a 95       	dec	r22
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1f22:	6f 91       	pop	r22
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1f28:	08 95       	ret

00001f2a <_ZN20OrangutanPushbuttons4initEv>:
    1f2a:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1f2e:	81 11       	cpse	r24, r1
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <_ZN20OrangutanPushbuttons4initEv+0x12>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1f38:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN20OrangutanPushbuttons5init2Ev>
    1f3c:	08 95       	ret

00001f3e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1f3e:	cf 93       	push	r28
    1f40:	c8 2f       	mov	r28, r24
    1f42:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_ZN20OrangutanPushbuttons4initEv>
    1f46:	83 b1       	in	r24, 0x03	; 3
    1f48:	8c 23       	and	r24, r28
    1f4a:	e9 f3       	breq	.-6      	; 0x1f46 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1f4c:	8a e0       	ldi	r24, 0x0A	; 10
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 10 10 	call	0x2020	; 0x2020 <delay_ms>
    1f54:	83 b1       	in	r24, 0x03	; 3
    1f56:	8c 23       	and	r24, r28
    1f58:	b1 f3       	breq	.-20     	; 0x1f46 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1f5a:	83 b1       	in	r24, 0x03	; 3
    1f5c:	8c 23       	and	r24, r28
    1f5e:	cf 91       	pop	r28
    1f60:	08 95       	ret

00001f62 <wait_for_button_release>:
    1f62:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1f66:	08 95       	ret

00001f68 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1f68:	a1 e0       	ldi	r26, 0x01	; 1
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	ea eb       	ldi	r30, 0xBA	; 186
    1f6e:	ff e0       	ldi	r31, 0x0F	; 15
    1f70:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__+0x20>
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_ZN20OrangutanPushbuttons4initEv>
    1f7a:	93 b1       	in	r25, 0x03	; 3
    1f7c:	90 95       	com	r25
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	89 23       	and	r24, r25
    1f82:	21 96       	adiw	r28, 0x01	; 1
    1f84:	e2 e0       	ldi	r30, 0x02	; 2
    1f86:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__+0x20>

00001f8a <button_is_pressed>:
    1f8a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_ZN20OrangutanPushbuttons9isPressedEh>
    1f8e:	08 95       	ret

00001f90 <__vector_9>:
    1f90:	2f 92       	push	r2
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	2f b6       	in	r2, 0x3f	; 63
    1f98:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tickCount+0x1>
    1f9c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <tickCount+0x2>
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <tickCount+0x1>
    1fa6:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <tickCount+0x2>
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tickCount+0x3>
    1fb0:	89 1f       	adc	r24, r25
    1fb2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tickCount+0x3>
    1fb6:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <us_over_10+0x1>
    1fba:	9c 5f       	subi	r25, 0xFC	; 252
    1fbc:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <us_over_10+0x1>
    1fc0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <us_over_10>
    1fc4:	80 51       	subi	r24, 0x10	; 16
    1fc6:	97 42       	sbci	r25, 0x27	; 39
    1fc8:	c0 f0       	brcs	.+48     	; 0x1ffa <end>
    1fca:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <us_over_10+0x1>
    1fce:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <us_over_10>
    1fd2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <msCounter>
    1fd6:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <msCounter+0x1>
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <msCounter>
    1fe0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <msCounter+0x1>
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <msCounter+0x2>
    1fea:	89 1f       	adc	r24, r25
    1fec:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <msCounter+0x2>
    1ff0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <msCounter+0x3>
    1ff4:	89 1f       	adc	r24, r25
    1ff6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <msCounter+0x3>

00001ffa <end>:
    1ffa:	2f be       	out	0x3f, r2	; 63
    1ffc:	9f 91       	pop	r25
    1ffe:	8f 91       	pop	r24
    2000:	2f 90       	pop	r2
    2002:	18 95       	reti

00002004 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2004:	28 ee       	ldi	r18, 0xE8	; 232
    2006:	33 e0       	ldi	r19, 0x03	; 3
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	48 f0       	brcs	.+18     	; 0x201e <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    200c:	f9 01       	movw	r30, r18
    200e:	6f 93       	push	r22
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	6a 95       	dec	r22
    2014:	f1 f7       	brne	.-4      	; 0x2012 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2016:	6f 91       	pop	r22
    2018:	31 97       	sbiw	r30, 0x01	; 1
    201a:	c9 f7       	brne	.-14     	; 0x200e <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    201c:	f5 cf       	rjmp	.-22     	; 0x2008 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    201e:	08 95       	ret

00002020 <delay_ms>:
    2020:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN13OrangutanTime17delayMillisecondsEj>
    2024:	08 95       	ret

00002026 <_ZN13OrangutanTime5init2Ev>:
    2026:	e0 e7       	ldi	r30, 0x70	; 112
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8e 7f       	andi	r24, 0xFE	; 254
    202e:	80 83       	st	Z, r24
    2030:	a0 eb       	ldi	r26, 0xB0	; 176
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	8c 91       	ld	r24, X
    2036:	83 60       	ori	r24, 0x03	; 3
    2038:	8c 93       	st	X, r24
    203a:	a1 eb       	ldi	r26, 0xB1	; 177
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	8c 91       	ld	r24, X
    2040:	80 7f       	andi	r24, 0xF0	; 240
    2042:	8c 93       	st	X, r24
    2044:	8c 91       	ld	r24, X
    2046:	82 60       	ori	r24, 0x02	; 2
    2048:	8c 93       	st	X, r24
    204a:	b8 9a       	sbi	0x17, 0	; 23
    204c:	80 81       	ld	r24, Z
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	80 83       	st	Z, r24
    2052:	78 94       	sei
    2054:	08 95       	ret

00002056 <_ZN13OrangutanTime4initEv>:
    2056:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_ZZN13OrangutanTime4initEvE11initialized>
    205a:	81 11       	cpse	r24, r1
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <_ZN13OrangutanTime4initEv+0x12>
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <_ZZN13OrangutanTime4initEvE11initialized>
    2064:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN13OrangutanTime5init2Ev>
    2068:	08 95       	ret

0000206a <_ZN13OrangutanTime5resetEv>:
    206a:	0e 94 2b 10 	call	0x2056	; 0x2056 <_ZN13OrangutanTime4initEv>
    206e:	e0 e7       	ldi	r30, 0x70	; 112
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8e 7f       	andi	r24, 0xFE	; 254
    2076:	80 83       	st	Z, r24
    2078:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <msCounter>
    207c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <msCounter+0x1>
    2080:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <msCounter+0x2>
    2084:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <msCounter+0x3>
    2088:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <us_over_10+0x1>
    208c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <us_over_10>
    2090:	80 81       	ld	r24, Z
    2092:	81 60       	ori	r24, 0x01	; 1
    2094:	80 83       	st	Z, r24
    2096:	08 95       	ret

00002098 <read_line_sensors>:
    2098:	46 2f       	mov	r20, r22
    209a:	bc 01       	movw	r22, r24
    209c:	8d e8       	ldi	r24, 0x8D	; 141
    209e:	91 e0       	ldi	r25, 0x01	; 1
    20a0:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN16PololuQTRSensors4readEPjh>
    20a4:	08 95       	ret

000020a6 <_ZN9Pololu3pi4initEjh>:
    20a6:	0f 93       	push	r16
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <_ZN9Pololu3pi4initEjh+0x8>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <_ZN9Pololu3pi4initEjh+0xa>
    20b0:	1f 92       	push	r1
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	9c 01       	movw	r18, r24
    20b8:	85 e0       	ldi	r24, 0x05	; 5
    20ba:	ea e4       	ldi	r30, 0x4A	; 74
    20bc:	f1 e0       	ldi	r31, 0x01	; 1
    20be:	de 01       	movw	r26, r28
    20c0:	11 96       	adiw	r26, 0x01	; 1
    20c2:	01 90       	ld	r0, Z+
    20c4:	0d 92       	st	X+, r0
    20c6:	8a 95       	dec	r24
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <_ZN9Pololu3pi4initEjh+0x1c>
    20ca:	66 23       	and	r22, r22
    20cc:	11 f0       	breq	.+4      	; 0x20d2 <_ZN9Pololu3pi4initEjh+0x2c>
    20ce:	0f ef       	ldi	r16, 0xFF	; 255
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <_ZN9Pololu3pi4initEjh+0x2e>
    20d2:	03 e1       	ldi	r16, 0x13	; 19
    20d4:	45 e0       	ldi	r20, 0x05	; 5
    20d6:	be 01       	movw	r22, r28
    20d8:	6f 5f       	subi	r22, 0xFF	; 255
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	8d e8       	ldi	r24, 0x8D	; 141
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    20e4:	8d e8       	ldi	r24, 0x8D	; 141
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN16PololuQTRSensors11emittersOffEv>
    20ec:	0e 94 35 10 	call	0x206a	; 0x206a <_ZN13OrangutanTime5resetEv>
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <pololu_3pi_init>:
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN9Pololu3pi4initEjh>
    2108:	08 95       	ret

0000210a <_GLOBAL__sub_D_pololu_3pi_init>:
    210a:	8d e8       	ldi	r24, 0x8D	; 141
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN16PololuQTRSensorsD1Ev>
    2112:	08 95       	ret

00002114 <delay_us>:
    2114:	6f 93       	push	r22
    2116:	64 e0       	ldi	r22, 0x04	; 4
    2118:	6a 95       	dec	r22
    211a:	f1 f7       	brne	.-4      	; 0x2118 <delay_us+0x4>
    211c:	6f 91       	pop	r22
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	c9 f7       	brne	.-14     	; 0x2114 <delay_us>
    2122:	08 95       	ret

00002124 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2124:	fc 01       	movw	r30, r24
    2126:	11 82       	std	Z+1, r1	; 0x01
    2128:	10 82       	st	Z, r1
    212a:	13 82       	std	Z+3, r1	; 0x03
    212c:	12 82       	std	Z+2, r1	; 0x02
    212e:	15 82       	std	Z+5, r1	; 0x05
    2130:	14 82       	std	Z+4, r1	; 0x04
    2132:	16 82       	std	Z+6, r1	; 0x06
    2134:	68 30       	cpi	r22, 0x08	; 8
    2136:	68 f4       	brcc	.+26     	; 0x2152 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2138:	89 e2       	ldi	r24, 0x29	; 41
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	8b e2       	ldi	r24, 0x2B	; 43
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	93 83       	std	Z+3, r25	; 0x03
    2146:	82 83       	std	Z+2, r24	; 0x02
    2148:	8a e2       	ldi	r24, 0x2A	; 42
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	95 83       	std	Z+5, r25	; 0x05
    214e:	84 83       	std	Z+4, r24	; 0x04
    2150:	1f c0       	rjmp	.+62     	; 0x2190 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2152:	6e 30       	cpi	r22, 0x0E	; 14
    2154:	70 f4       	brcc	.+28     	; 0x2172 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2156:	83 e2       	ldi	r24, 0x23	; 35
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
    215e:	85 e2       	ldi	r24, 0x25	; 37
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	93 83       	std	Z+3, r25	; 0x03
    2164:	82 83       	std	Z+2, r24	; 0x02
    2166:	84 e2       	ldi	r24, 0x24	; 36
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	95 83       	std	Z+5, r25	; 0x05
    216c:	84 83       	std	Z+4, r24	; 0x04
    216e:	68 50       	subi	r22, 0x08	; 8
    2170:	0f c0       	rjmp	.+30     	; 0x2190 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2172:	65 31       	cpi	r22, 0x15	; 21
    2174:	98 f4       	brcc	.+38     	; 0x219c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2176:	86 e2       	ldi	r24, 0x26	; 38
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
    217e:	88 e2       	ldi	r24, 0x28	; 40
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	93 83       	std	Z+3, r25	; 0x03
    2184:	82 83       	std	Z+2, r24	; 0x02
    2186:	87 e2       	ldi	r24, 0x27	; 39
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	95 83       	std	Z+5, r25	; 0x05
    218c:	84 83       	std	Z+4, r24	; 0x04
    218e:	6e 50       	subi	r22, 0x0E	; 14
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2194:	88 0f       	add	r24, r24
    2196:	6a 95       	dec	r22
    2198:	ea f7       	brpl	.-6      	; 0x2194 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    219a:	86 83       	std	Z+6, r24	; 0x06
    219c:	08 95       	ret

0000219e <_ZN16PololuQTRSensors4initEhhh>:
    219e:	a7 e0       	ldi	r26, 0x07	; 7
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 ed       	ldi	r30, 0xD5	; 213
    21a4:	f0 e1       	ldi	r31, 0x10	; 16
    21a6:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x1c>
    21aa:	8c 01       	movw	r16, r24
    21ac:	fc 01       	movw	r30, r24
    21ae:	11 82       	std	Z+1, r1	; 0x01
    21b0:	10 82       	st	Z, r1
    21b2:	13 82       	std	Z+3, r1	; 0x03
    21b4:	12 82       	std	Z+2, r1	; 0x02
    21b6:	15 82       	std	Z+5, r1	; 0x05
    21b8:	14 82       	std	Z+4, r1	; 0x04
    21ba:	17 82       	std	Z+7, r1	; 0x07
    21bc:	16 82       	std	Z+6, r1	; 0x06
    21be:	61 31       	cpi	r22, 0x11	; 17
    21c0:	18 f0       	brcs	.+6      	; 0x21c8 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    21c2:	80 e1       	ldi	r24, 0x10	; 16
    21c4:	80 87       	std	Z+8, r24	; 0x08
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <_ZN16PololuQTRSensors4initEhhh+0x2e>
    21c8:	fc 01       	movw	r30, r24
    21ca:	60 87       	std	Z+8, r22	; 0x08
    21cc:	f8 01       	movw	r30, r16
    21ce:	20 8b       	std	Z+16, r18	; 0x10
    21d0:	64 2f       	mov	r22, r20
    21d2:	ce 01       	movw	r24, r28
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    21da:	8f 81       	ldd	r24, Y+7	; 0x07
    21dc:	f8 01       	movw	r30, r16
    21de:	81 87       	std	Z+9, r24	; 0x09
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	93 87       	std	Z+11, r25	; 0x0b
    21e6:	82 87       	std	Z+10, r24	; 0x0a
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	95 87       	std	Z+13, r25	; 0x0d
    21ee:	84 87       	std	Z+12, r24	; 0x0c
    21f0:	27 96       	adiw	r28, 0x07	; 7
    21f2:	e4 e0       	ldi	r30, 0x04	; 4
    21f4:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x1c>

000021f8 <_ZN16PololuQTRSensors11emittersOffEv>:
    21f8:	fc 01       	movw	r30, r24
    21fa:	a4 85       	ldd	r26, Z+12	; 0x0c
    21fc:	b5 85       	ldd	r27, Z+13	; 0x0d
    21fe:	10 97       	sbiw	r26, 0x00	; 0
    2200:	79 f0       	breq	.+30     	; 0x2220 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2202:	8c 91       	ld	r24, X
    2204:	91 85       	ldd	r25, Z+9	; 0x09
    2206:	89 2b       	or	r24, r25
    2208:	8c 93       	st	X, r24
    220a:	a2 85       	ldd	r26, Z+10	; 0x0a
    220c:	b3 85       	ldd	r27, Z+11	; 0x0b
    220e:	9c 91       	ld	r25, X
    2210:	81 85       	ldd	r24, Z+9	; 0x09
    2212:	80 95       	com	r24
    2214:	89 23       	and	r24, r25
    2216:	8c 93       	st	X, r24
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 8a 10 	call	0x2114	; 0x2114 <delay_us>
    2220:	08 95       	ret

00002222 <_ZN16PololuQTRSensors10emittersOnEv>:
    2222:	fc 01       	movw	r30, r24
    2224:	a4 85       	ldd	r26, Z+12	; 0x0c
    2226:	b5 85       	ldd	r27, Z+13	; 0x0d
    2228:	10 97       	sbiw	r26, 0x00	; 0
    222a:	71 f0       	breq	.+28     	; 0x2248 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    222c:	8c 91       	ld	r24, X
    222e:	91 85       	ldd	r25, Z+9	; 0x09
    2230:	89 2b       	or	r24, r25
    2232:	8c 93       	st	X, r24
    2234:	a2 85       	ldd	r26, Z+10	; 0x0a
    2236:	b3 85       	ldd	r27, Z+11	; 0x0b
    2238:	8c 91       	ld	r24, X
    223a:	91 85       	ldd	r25, Z+9	; 0x09
    223c:	89 2b       	or	r24, r25
    223e:	8c 93       	st	X, r24
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 8a 10 	call	0x2114	; 0x2114 <delay_us>
    2248:	08 95       	ret

0000224a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    224a:	a7 e0       	ldi	r26, 0x07	; 7
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	eb e2       	ldi	r30, 0x2B	; 43
    2250:	f1 e1       	ldi	r31, 0x11	; 17
    2252:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__+0x6>
    2256:	7c 01       	movw	r14, r24
    2258:	4b 01       	movw	r8, r22
    225a:	64 2f       	mov	r22, r20
    225c:	39 01       	movw	r6, r18
    225e:	40 2f       	mov	r20, r16
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN16PololuQTRSensors4initEhhh>
    2266:	87 01       	movw	r16, r14
    2268:	0f 5b       	subi	r16, 0xBF	; 191
    226a:	1f 4f       	sbci	r17, 0xFF	; 255
    226c:	f8 01       	movw	r30, r16
    226e:	10 82       	st	Z, r1
    2270:	67 01       	movw	r12, r14
    2272:	f2 e4       	ldi	r31, 0x42	; 66
    2274:	cf 0e       	add	r12, r31
    2276:	d1 1c       	adc	r13, r1
    2278:	f6 01       	movw	r30, r12
    227a:	10 82       	st	Z, r1
    227c:	57 01       	movw	r10, r14
    227e:	f3 e4       	ldi	r31, 0x43	; 67
    2280:	af 0e       	add	r10, r31
    2282:	b1 1c       	adc	r11, r1
    2284:	f5 01       	movw	r30, r10
    2286:	10 82       	st	Z, r1
    2288:	f7 01       	movw	r30, r14
    228a:	77 86       	std	Z+15, r7	; 0x0f
    228c:	66 86       	std	Z+14, r6	; 0x0e
    228e:	51 2c       	mov	r5, r1
    2290:	f7 01       	movw	r30, r14
    2292:	80 85       	ldd	r24, Z+8	; 0x08
    2294:	58 16       	cp	r5, r24
    2296:	50 f5       	brcc	.+84     	; 0x22ec <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2298:	65 2c       	mov	r6, r5
    229a:	71 2c       	mov	r7, r1
    229c:	f4 01       	movw	r30, r8
    229e:	e6 0d       	add	r30, r6
    22a0:	f7 1d       	adc	r31, r7
    22a2:	60 81       	ld	r22, Z
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    22ac:	2f 81       	ldd	r18, Y+7	; 0x07
    22ae:	f7 01       	movw	r30, r14
    22b0:	e6 0d       	add	r30, r6
    22b2:	f7 1d       	adc	r31, r7
    22b4:	21 8b       	std	Z+17, r18	; 0x11
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	f3 01       	movw	r30, r6
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	ee 0d       	add	r30, r14
    22c2:	ff 1d       	adc	r31, r15
    22c4:	92 a3       	std	Z+34, r25	; 0x22
    22c6:	81 a3       	std	Z+33, r24	; 0x21
    22c8:	83 32       	cpi	r24, 0x23	; 35
    22ca:	91 05       	cpc	r25, r1
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    22ce:	f8 01       	movw	r30, r16
    22d0:	08 c0       	rjmp	.+16     	; 0x22e2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    22d2:	86 32       	cpi	r24, 0x26	; 38
    22d4:	91 05       	cpc	r25, r1
    22d6:	11 f4       	brne	.+4      	; 0x22dc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    22d8:	f6 01       	movw	r30, r12
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    22dc:	89 97       	sbiw	r24, 0x29	; 41
    22de:	21 f4       	brne	.+8      	; 0x22e8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    22e0:	f5 01       	movw	r30, r10
    22e2:	80 81       	ld	r24, Z
    22e4:	82 2b       	or	r24, r18
    22e6:	80 83       	st	Z, r24
    22e8:	53 94       	inc	r5
    22ea:	d2 cf       	rjmp	.-92     	; 0x2290 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    22ec:	27 96       	adiw	r28, 0x07	; 7
    22ee:	ef e0       	ldi	r30, 0x0F	; 15
    22f0:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__+0x6>

000022f4 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e0 e8       	ldi	r30, 0x80	; 128
    22fa:	f1 e1       	ldi	r31, 0x11	; 17
    22fc:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__+0xa>
    2300:	ec 01       	movw	r28, r24
    2302:	5b 01       	movw	r10, r22
    2304:	6c 01       	movw	r12, r24
    2306:	81 e4       	ldi	r24, 0x41	; 65
    2308:	c8 0e       	add	r12, r24
    230a:	d1 1c       	adc	r13, r1
    230c:	f6 01       	movw	r30, r12
    230e:	80 80       	ld	r8, Z
    2310:	7e 01       	movw	r14, r28
    2312:	f2 e4       	ldi	r31, 0x42	; 66
    2314:	ef 0e       	add	r14, r31
    2316:	f1 1c       	adc	r15, r1
    2318:	f7 01       	movw	r30, r14
    231a:	70 80       	ld	r7, Z
    231c:	8e 01       	movw	r16, r28
    231e:	0d 5b       	subi	r16, 0xBD	; 189
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	f8 01       	movw	r30, r16
    2324:	90 80       	ld	r9, Z
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	98 85       	ldd	r25, Y+8	; 0x08
    232a:	89 17       	cp	r24, r25
    232c:	48 f4       	brcc	.+18     	; 0x2340 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    232e:	f5 01       	movw	r30, r10
    2330:	e8 0f       	add	r30, r24
    2332:	f1 1d       	adc	r31, r1
    2334:	e8 0f       	add	r30, r24
    2336:	f1 1d       	adc	r31, r1
    2338:	11 82       	std	Z+1, r1	; 0x01
    233a:	10 82       	st	Z, r1
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	f4 cf       	rjmp	.-24     	; 0x2328 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2340:	84 b1       	in	r24, 0x04	; 4
    2342:	f6 01       	movw	r30, r12
    2344:	90 81       	ld	r25, Z
    2346:	89 2b       	or	r24, r25
    2348:	84 b9       	out	0x04, r24	; 4
    234a:	87 b1       	in	r24, 0x07	; 7
    234c:	f7 01       	movw	r30, r14
    234e:	90 81       	ld	r25, Z
    2350:	89 2b       	or	r24, r25
    2352:	87 b9       	out	0x07, r24	; 7
    2354:	8a b1       	in	r24, 0x0a	; 10
    2356:	f8 01       	movw	r30, r16
    2358:	90 81       	ld	r25, Z
    235a:	89 2b       	or	r24, r25
    235c:	8a b9       	out	0x0a, r24	; 10
    235e:	85 b1       	in	r24, 0x05	; 5
    2360:	f6 01       	movw	r30, r12
    2362:	90 81       	ld	r25, Z
    2364:	89 2b       	or	r24, r25
    2366:	85 b9       	out	0x05, r24	; 5
    2368:	88 b1       	in	r24, 0x08	; 8
    236a:	f7 01       	movw	r30, r14
    236c:	90 81       	ld	r25, Z
    236e:	89 2b       	or	r24, r25
    2370:	88 b9       	out	0x08, r24	; 8
    2372:	8b b1       	in	r24, 0x0b	; 11
    2374:	f8 01       	movw	r30, r16
    2376:	90 81       	ld	r25, Z
    2378:	89 2b       	or	r24, r25
    237a:	8b b9       	out	0x0b, r24	; 11
    237c:	8a e0       	ldi	r24, 0x0A	; 10
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 8a 10 	call	0x2114	; 0x2114 <delay_us>
    2384:	94 b1       	in	r25, 0x04	; 4
    2386:	f6 01       	movw	r30, r12
    2388:	80 81       	ld	r24, Z
    238a:	80 95       	com	r24
    238c:	89 23       	and	r24, r25
    238e:	84 b9       	out	0x04, r24	; 4
    2390:	97 b1       	in	r25, 0x07	; 7
    2392:	f7 01       	movw	r30, r14
    2394:	80 81       	ld	r24, Z
    2396:	80 95       	com	r24
    2398:	89 23       	and	r24, r25
    239a:	87 b9       	out	0x07, r24	; 7
    239c:	9a b1       	in	r25, 0x0a	; 10
    239e:	f8 01       	movw	r30, r16
    23a0:	80 81       	ld	r24, Z
    23a2:	80 95       	com	r24
    23a4:	89 23       	and	r24, r25
    23a6:	8a b9       	out	0x0a, r24	; 10
    23a8:	95 b1       	in	r25, 0x05	; 5
    23aa:	f6 01       	movw	r30, r12
    23ac:	80 81       	ld	r24, Z
    23ae:	80 95       	com	r24
    23b0:	89 23       	and	r24, r25
    23b2:	85 b9       	out	0x05, r24	; 5
    23b4:	98 b1       	in	r25, 0x08	; 8
    23b6:	f7 01       	movw	r30, r14
    23b8:	80 81       	ld	r24, Z
    23ba:	80 95       	com	r24
    23bc:	89 23       	and	r24, r25
    23be:	88 b9       	out	0x08, r24	; 8
    23c0:	9b b1       	in	r25, 0x0b	; 11
    23c2:	f8 01       	movw	r30, r16
    23c4:	80 81       	ld	r24, Z
    23c6:	80 95       	com	r24
    23c8:	89 23       	and	r24, r25
    23ca:	8b b9       	out	0x0b, r24	; 11
    23cc:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    23d0:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    23d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    23d8:	83 60       	ori	r24, 0x03	; 3
    23da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    23e4:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	2e 85       	ldd	r18, Y+14	; 0x0e
    23ee:	3f 85       	ldd	r19, Y+15	; 0x0f
    23f0:	82 17       	cp	r24, r18
    23f2:	93 07       	cpc	r25, r19
    23f4:	20 f5       	brcc	.+72     	; 0x243e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    23f6:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    23fa:	2c 2d       	mov	r18, r12
    23fc:	24 1b       	sub	r18, r20
    23fe:	82 0f       	add	r24, r18
    2400:	91 1d       	adc	r25, r1
    2402:	03 b1       	in	r16, 0x03	; 3
    2404:	08 11       	cpse	r16, r8
    2406:	32 c0       	rjmp	.+100    	; 0x246c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2408:	f6 b0       	in	r15, 0x06	; 6
    240a:	f7 10       	cpse	r15, r7
    240c:	2f c0       	rjmp	.+94     	; 0x246c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    240e:	29 b1       	in	r18, 0x09	; 9
    2410:	29 11       	cpse	r18, r9
    2412:	2c c0       	rjmp	.+88     	; 0x246c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2414:	10 c0       	rjmp	.+32     	; 0x2436 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2416:	21 2f       	mov	r18, r17
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	a9 01       	movw	r20, r18
    241c:	44 0f       	add	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	f5 01       	movw	r30, r10
    2422:	e4 0f       	add	r30, r20
    2424:	f5 1f       	adc	r31, r21
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	67 2b       	or	r22, r23
    242c:	21 f1       	breq	.+72     	; 0x2476 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    242e:	1f 5f       	subi	r17, 0xFF	; 255
    2430:	28 85       	ldd	r18, Y+8	; 0x08
    2432:	12 17       	cp	r17, r18
    2434:	80 f3       	brcs	.-32     	; 0x2416 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2436:	7f 2c       	mov	r7, r15
    2438:	80 2e       	mov	r8, r16
    243a:	4c 2d       	mov	r20, r12
    243c:	d7 cf       	rjmp	.-82     	; 0x23ec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    243e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2442:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	88 85       	ldd	r24, Y+8	; 0x08
    244a:	28 17       	cp	r18, r24
    244c:	30 f5       	brcc	.+76     	; 0x249a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    244e:	f5 01       	movw	r30, r10
    2450:	e2 0f       	add	r30, r18
    2452:	f1 1d       	adc	r31, r1
    2454:	e2 0f       	add	r30, r18
    2456:	f1 1d       	adc	r31, r1
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	89 2b       	or	r24, r25
    245e:	21 f4       	brne	.+8      	; 0x2468 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2460:	8e 85       	ldd	r24, Y+14	; 0x0e
    2462:	9f 85       	ldd	r25, Y+15	; 0x0f
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	80 83       	st	Z, r24
    2468:	2f 5f       	subi	r18, 0xFF	; 255
    246a:	ee cf       	rjmp	.-36     	; 0x2448 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    246c:	03 b1       	in	r16, 0x03	; 3
    246e:	f6 b0       	in	r15, 0x06	; 6
    2470:	99 b0       	in	r9, 0x09	; 9
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	dd cf       	rjmp	.-70     	; 0x2430 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2476:	de 01       	movw	r26, r28
    2478:	a4 0f       	add	r26, r20
    247a:	b5 1f       	adc	r27, r21
    247c:	91 96       	adiw	r26, 0x21	; 33
    247e:	0d 90       	ld	r0, X+
    2480:	bc 91       	ld	r27, X
    2482:	a0 2d       	mov	r26, r0
    2484:	4c 91       	ld	r20, X
    2486:	de 01       	movw	r26, r28
    2488:	a2 0f       	add	r26, r18
    248a:	b3 1f       	adc	r27, r19
    248c:	51 96       	adiw	r26, 0x11	; 17
    248e:	2c 91       	ld	r18, X
    2490:	42 23       	and	r20, r18
    2492:	69 f6       	brne	.-102    	; 0x242e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	ca cf       	rjmp	.-108    	; 0x242e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	ed e0       	ldi	r30, 0x0D	; 13
    24a0:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0xa>

000024a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	fc 01       	movw	r30, r24
    24b2:	9b 01       	movw	r18, r22
    24b4:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    24b8:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    24bc:	47 b1       	in	r20, 0x07	; 7
    24be:	18 b1       	in	r17, 0x08	; 8
    24c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    24c4:	86 fd       	sbrc	r24, 6
    24c6:	fc cf       	rjmp	.-8      	; 0x24c0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 85       	ldd	r25, Z+8	; 0x08
    24cc:	89 17       	cp	r24, r25
    24ce:	48 f4       	brcc	.+18     	; 0x24e2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    24d0:	d9 01       	movw	r26, r18
    24d2:	a8 0f       	add	r26, r24
    24d4:	b1 1d       	adc	r27, r1
    24d6:	a8 0f       	add	r26, r24
    24d8:	b1 1d       	adc	r27, r1
    24da:	1d 92       	st	X+, r1
    24dc:	1c 92       	st	X, r1
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	f4 cf       	rjmp	.-24     	; 0x24ca <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    24e2:	97 b1       	in	r25, 0x07	; 7
    24e4:	82 a1       	ldd	r24, Z+34	; 0x22
    24e6:	80 95       	com	r24
    24e8:	89 23       	and	r24, r25
    24ea:	87 b9       	out	0x07, r24	; 7
    24ec:	98 b1       	in	r25, 0x08	; 8
    24ee:	82 a1       	ldd	r24, Z+34	; 0x22
    24f0:	80 95       	com	r24
    24f2:	89 23       	and	r24, r25
    24f4:	88 b9       	out	0x08, r24	; 8
    24f6:	87 e8       	ldi	r24, 0x87	; 135
    24f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    24fc:	e1 2c       	mov	r14, r1
    24fe:	81 a1       	ldd	r24, Z+33	; 0x21
    2500:	e8 16       	cp	r14, r24
    2502:	10 f0       	brcs	.+4      	; 0x2508 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2504:	e1 2c       	mov	r14, r1
    2506:	29 c0       	rjmp	.+82     	; 0x255a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	80 85       	ldd	r24, Z+8	; 0x08
    250c:	58 17       	cp	r21, r24
    250e:	18 f5       	brcc	.+70     	; 0x2556 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2510:	a5 2f       	mov	r26, r21
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ef 01       	movw	r28, r30
    2516:	ca 0f       	add	r28, r26
    2518:	db 1f       	adc	r29, r27
    251a:	89 89       	ldd	r24, Y+17	; 0x11
    251c:	80 64       	ori	r24, 0x40	; 64
    251e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2522:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2526:	80 64       	ori	r24, 0x40	; 64
    2528:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    252c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2530:	86 fd       	sbrc	r24, 6
    2532:	fc cf       	rjmp	.-8      	; 0x252c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2534:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2538:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    253c:	aa 0f       	add	r26, r26
    253e:	bb 1f       	adc	r27, r27
    2540:	a2 0f       	add	r26, r18
    2542:	b3 1f       	adc	r27, r19
    2544:	8d 91       	ld	r24, X+
    2546:	9c 91       	ld	r25, X
    2548:	11 97       	sbiw	r26, 0x01	; 1
    254a:	86 0f       	add	r24, r22
    254c:	97 1f       	adc	r25, r23
    254e:	8d 93       	st	X+, r24
    2550:	9c 93       	st	X, r25
    2552:	5f 5f       	subi	r21, 0xFF	; 255
    2554:	da cf       	rjmp	.-76     	; 0x250a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2556:	e3 94       	inc	r14
    2558:	d2 cf       	rjmp	.-92     	; 0x24fe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    255a:	80 85       	ldd	r24, Z+8	; 0x08
    255c:	e8 16       	cp	r14, r24
    255e:	a0 f4       	brcc	.+40     	; 0x2588 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2560:	e9 01       	movw	r28, r18
    2562:	ce 0d       	add	r28, r14
    2564:	d1 1d       	adc	r29, r1
    2566:	ce 0d       	add	r28, r14
    2568:	d1 1d       	adc	r29, r1
    256a:	61 a1       	ldd	r22, Z+33	; 0x21
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	cb 01       	movw	r24, r22
    2570:	95 95       	asr	r25
    2572:	87 95       	ror	r24
    2574:	a8 81       	ld	r26, Y
    2576:	b9 81       	ldd	r27, Y+1	; 0x01
    2578:	8a 0f       	add	r24, r26
    257a:	9b 1f       	adc	r25, r27
    257c:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    2580:	79 83       	std	Y+1, r23	; 0x01
    2582:	68 83       	st	Y, r22
    2584:	e3 94       	inc	r14
    2586:	e9 cf       	rjmp	.-46     	; 0x255a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2588:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    258c:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2590:	18 b9       	out	0x08, r17	; 8
    2592:	47 b9       	out	0x07, r20	; 7
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	e6 e0       	ldi	r30, 0x06	; 6
    259a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__epilogue_restores__+0x18>

0000259e <_ZN16PololuQTRSensors4readEPjh>:
    259e:	a0 e2       	ldi	r26, 0x20	; 32
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e5 ed       	ldi	r30, 0xD5	; 213
    25a4:	f2 e1       	ldi	r31, 0x12	; 18
    25a6:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x16>
    25aa:	8c 01       	movw	r16, r24
    25ac:	7b 01       	movw	r14, r22
    25ae:	d4 2e       	mov	r13, r20
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	84 0f       	add	r24, r20
    25b4:	82 30       	cpi	r24, 0x02	; 2
    25b6:	18 f4       	brcc	.+6      	; 0x25be <_ZN16PololuQTRSensors4readEPjh+0x20>
    25b8:	c8 01       	movw	r24, r16
    25ba:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN16PololuQTRSensors10emittersOnEv>
    25be:	d8 01       	movw	r26, r16
    25c0:	50 96       	adiw	r26, 0x10	; 16
    25c2:	8c 91       	ld	r24, X
    25c4:	b7 01       	movw	r22, r14
    25c6:	81 11       	cpse	r24, r1
    25c8:	10 c0       	rjmp	.+32     	; 0x25ea <_ZN16PololuQTRSensors4readEPjh+0x4c>
    25ca:	c8 01       	movw	r24, r16
    25cc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    25d0:	c8 01       	movw	r24, r16
    25d2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN16PololuQTRSensors11emittersOffEv>
    25d6:	b2 e0       	ldi	r27, 0x02	; 2
    25d8:	db 12       	cpse	r13, r27
    25da:	3a c0       	rjmp	.+116    	; 0x2650 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    25dc:	be 01       	movw	r22, r28
    25de:	6f 5f       	subi	r22, 0xFF	; 255
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	c8 01       	movw	r24, r16
    25e4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    25ea:	c8 01       	movw	r24, r16
    25ec:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    25f0:	c8 01       	movw	r24, r16
    25f2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_ZN16PololuQTRSensors11emittersOffEv>
    25f6:	e2 e0       	ldi	r30, 0x02	; 2
    25f8:	de 12       	cpse	r13, r30
    25fa:	2a c0       	rjmp	.+84     	; 0x2650 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    25fc:	be 01       	movw	r22, r28
    25fe:	6f 5f       	subi	r22, 0xFF	; 255
    2600:	7f 4f       	sbci	r23, 0xFF	; 255
    2602:	c8 01       	movw	r24, r16
    2604:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	f8 01       	movw	r30, r16
    260c:	80 85       	ldd	r24, Z+8	; 0x08
    260e:	48 17       	cp	r20, r24
    2610:	f8 f4       	brcc	.+62     	; 0x2650 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2612:	84 2f       	mov	r24, r20
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	f7 01       	movw	r30, r14
    261c:	e8 0f       	add	r30, r24
    261e:	f9 1f       	adc	r31, r25
    2620:	21 e0       	ldi	r18, 0x01	; 1
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	2c 0f       	add	r18, r28
    2626:	3d 1f       	adc	r19, r29
    2628:	82 0f       	add	r24, r18
    262a:	93 1f       	adc	r25, r19
    262c:	d8 01       	movw	r26, r16
    262e:	1e 96       	adiw	r26, 0x0e	; 14
    2630:	2d 91       	ld	r18, X+
    2632:	3c 91       	ld	r19, X
    2634:	1f 97       	sbiw	r26, 0x0f	; 15
    2636:	dc 01       	movw	r26, r24
    2638:	8d 91       	ld	r24, X+
    263a:	9c 91       	ld	r25, X
    263c:	28 1b       	sub	r18, r24
    263e:	39 0b       	sbc	r19, r25
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	4f 5f       	subi	r20, 0xFF	; 255
    264e:	dd cf       	rjmp	.-70     	; 0x260a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2650:	a0 96       	adiw	r28, 0x20	; 32
    2652:	e7 e0       	ldi	r30, 0x07	; 7
    2654:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x16>

00002658 <_ZN16PololuQTRSensorsD1Ev>:
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	ec 01       	movw	r28, r24
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	9b 81       	ldd	r25, Y+3	; 0x03
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	11 f0       	breq	.+4      	; 0x266a <_ZN16PololuQTRSensorsD1Ev+0x12>
    2666:	0e 94 a3 14 	call	0x2946	; 0x2946 <free>
    266a:	8e 81       	ldd	r24, Y+6	; 0x06
    266c:	9f 81       	ldd	r25, Y+7	; 0x07
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	11 f0       	breq	.+4      	; 0x2676 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2672:	0e 94 a3 14 	call	0x2946	; 0x2946 <free>
    2676:	88 81       	ld	r24, Y
    2678:	99 81       	ldd	r25, Y+1	; 0x01
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	11 f0       	breq	.+4      	; 0x2682 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    267e:	0e 94 a3 14 	call	0x2946	; 0x2946 <free>
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	11 f0       	breq	.+4      	; 0x268e <_ZN16PololuQTRSensorsD1Ev+0x36>
    268a:	0e 94 a3 14 	call	0x2946	; 0x2946 <free>
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <__udivmodqi4>:
    2694:	99 1b       	sub	r25, r25
    2696:	79 e0       	ldi	r23, 0x09	; 9
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <__udivmodqi4_ep>

0000269a <__udivmodqi4_loop>:
    269a:	99 1f       	adc	r25, r25
    269c:	96 17       	cp	r25, r22
    269e:	08 f0       	brcs	.+2      	; 0x26a2 <__udivmodqi4_ep>
    26a0:	96 1b       	sub	r25, r22

000026a2 <__udivmodqi4_ep>:
    26a2:	88 1f       	adc	r24, r24
    26a4:	7a 95       	dec	r23
    26a6:	c9 f7       	brne	.-14     	; 0x269a <__udivmodqi4_loop>
    26a8:	80 95       	com	r24
    26aa:	08 95       	ret

000026ac <__udivmodhi4>:
    26ac:	aa 1b       	sub	r26, r26
    26ae:	bb 1b       	sub	r27, r27
    26b0:	51 e1       	ldi	r21, 0x11	; 17
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <__udivmodhi4_ep>

000026b4 <__udivmodhi4_loop>:
    26b4:	aa 1f       	adc	r26, r26
    26b6:	bb 1f       	adc	r27, r27
    26b8:	a6 17       	cp	r26, r22
    26ba:	b7 07       	cpc	r27, r23
    26bc:	10 f0       	brcs	.+4      	; 0x26c2 <__udivmodhi4_ep>
    26be:	a6 1b       	sub	r26, r22
    26c0:	b7 0b       	sbc	r27, r23

000026c2 <__udivmodhi4_ep>:
    26c2:	88 1f       	adc	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	5a 95       	dec	r21
    26c8:	a9 f7       	brne	.-22     	; 0x26b4 <__udivmodhi4_loop>
    26ca:	80 95       	com	r24
    26cc:	90 95       	com	r25
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	08 95       	ret

000026d4 <__divmodhi4>:
    26d4:	97 fb       	bst	r25, 7
    26d6:	07 2e       	mov	r0, r23
    26d8:	16 f4       	brtc	.+4      	; 0x26de <__divmodhi4+0xa>
    26da:	00 94       	com	r0
    26dc:	07 d0       	rcall	.+14     	; 0x26ec <__divmodhi4_neg1>
    26de:	77 fd       	sbrc	r23, 7
    26e0:	09 d0       	rcall	.+18     	; 0x26f4 <__divmodhi4_neg2>
    26e2:	0e 94 56 13 	call	0x26ac	; 0x26ac <__udivmodhi4>
    26e6:	07 fc       	sbrc	r0, 7
    26e8:	05 d0       	rcall	.+10     	; 0x26f4 <__divmodhi4_neg2>
    26ea:	3e f4       	brtc	.+14     	; 0x26fa <__divmodhi4_exit>

000026ec <__divmodhi4_neg1>:
    26ec:	90 95       	com	r25
    26ee:	81 95       	neg	r24
    26f0:	9f 4f       	sbci	r25, 0xFF	; 255
    26f2:	08 95       	ret

000026f4 <__divmodhi4_neg2>:
    26f4:	70 95       	com	r23
    26f6:	61 95       	neg	r22
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255

000026fa <__divmodhi4_exit>:
    26fa:	08 95       	ret

000026fc <__udivmodsi4>:
    26fc:	a1 e2       	ldi	r26, 0x21	; 33
    26fe:	1a 2e       	mov	r1, r26
    2700:	aa 1b       	sub	r26, r26
    2702:	bb 1b       	sub	r27, r27
    2704:	fd 01       	movw	r30, r26
    2706:	0d c0       	rjmp	.+26     	; 0x2722 <__udivmodsi4_ep>

00002708 <__udivmodsi4_loop>:
    2708:	aa 1f       	adc	r26, r26
    270a:	bb 1f       	adc	r27, r27
    270c:	ee 1f       	adc	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	a2 17       	cp	r26, r18
    2712:	b3 07       	cpc	r27, r19
    2714:	e4 07       	cpc	r30, r20
    2716:	f5 07       	cpc	r31, r21
    2718:	20 f0       	brcs	.+8      	; 0x2722 <__udivmodsi4_ep>
    271a:	a2 1b       	sub	r26, r18
    271c:	b3 0b       	sbc	r27, r19
    271e:	e4 0b       	sbc	r30, r20
    2720:	f5 0b       	sbc	r31, r21

00002722 <__udivmodsi4_ep>:
    2722:	66 1f       	adc	r22, r22
    2724:	77 1f       	adc	r23, r23
    2726:	88 1f       	adc	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	1a 94       	dec	r1
    272c:	69 f7       	brne	.-38     	; 0x2708 <__udivmodsi4_loop>
    272e:	60 95       	com	r22
    2730:	70 95       	com	r23
    2732:	80 95       	com	r24
    2734:	90 95       	com	r25
    2736:	9b 01       	movw	r18, r22
    2738:	ac 01       	movw	r20, r24
    273a:	bd 01       	movw	r22, r26
    273c:	cf 01       	movw	r24, r30
    273e:	08 95       	ret

00002740 <__divmodsi4>:
    2740:	05 2e       	mov	r0, r21
    2742:	97 fb       	bst	r25, 7
    2744:	1e f4       	brtc	.+6      	; 0x274c <__divmodsi4+0xc>
    2746:	00 94       	com	r0
    2748:	0e 94 b7 13 	call	0x276e	; 0x276e <__negsi2>
    274c:	57 fd       	sbrc	r21, 7
    274e:	07 d0       	rcall	.+14     	; 0x275e <__divmodsi4_neg2>
    2750:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    2754:	07 fc       	sbrc	r0, 7
    2756:	03 d0       	rcall	.+6      	; 0x275e <__divmodsi4_neg2>
    2758:	4e f4       	brtc	.+18     	; 0x276c <__divmodsi4_exit>
    275a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__negsi2>

0000275e <__divmodsi4_neg2>:
    275e:	50 95       	com	r21
    2760:	40 95       	com	r20
    2762:	30 95       	com	r19
    2764:	21 95       	neg	r18
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	4f 4f       	sbci	r20, 0xFF	; 255
    276a:	5f 4f       	sbci	r21, 0xFF	; 255

0000276c <__divmodsi4_exit>:
    276c:	08 95       	ret

0000276e <__negsi2>:
    276e:	90 95       	com	r25
    2770:	80 95       	com	r24
    2772:	70 95       	com	r23
    2774:	61 95       	neg	r22
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	8f 4f       	sbci	r24, 0xFF	; 255
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	08 95       	ret

0000277e <__tablejump2__>:
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	05 90       	lpm	r0, Z+
    2784:	f4 91       	lpm	r31, Z
    2786:	e0 2d       	mov	r30, r0
    2788:	09 94       	ijmp

0000278a <__umulhisi3>:
    278a:	a2 9f       	mul	r26, r18
    278c:	b0 01       	movw	r22, r0
    278e:	b3 9f       	mul	r27, r19
    2790:	c0 01       	movw	r24, r0
    2792:	a3 9f       	mul	r26, r19
    2794:	70 0d       	add	r23, r0
    2796:	81 1d       	adc	r24, r1
    2798:	11 24       	eor	r1, r1
    279a:	91 1d       	adc	r25, r1
    279c:	b2 9f       	mul	r27, r18
    279e:	70 0d       	add	r23, r0
    27a0:	81 1d       	adc	r24, r1
    27a2:	11 24       	eor	r1, r1
    27a4:	91 1d       	adc	r25, r1
    27a6:	08 95       	ret

000027a8 <__prologue_saves__>:
    27a8:	2f 92       	push	r2
    27aa:	3f 92       	push	r3
    27ac:	4f 92       	push	r4
    27ae:	5f 92       	push	r5
    27b0:	6f 92       	push	r6
    27b2:	7f 92       	push	r7
    27b4:	8f 92       	push	r8
    27b6:	9f 92       	push	r9
    27b8:	af 92       	push	r10
    27ba:	bf 92       	push	r11
    27bc:	cf 92       	push	r12
    27be:	df 92       	push	r13
    27c0:	ef 92       	push	r14
    27c2:	ff 92       	push	r15
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	ca 1b       	sub	r28, r26
    27d2:	db 0b       	sbc	r29, r27
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	09 94       	ijmp

000027e0 <__epilogue_restores__>:
    27e0:	2a 88       	ldd	r2, Y+18	; 0x12
    27e2:	39 88       	ldd	r3, Y+17	; 0x11
    27e4:	48 88       	ldd	r4, Y+16	; 0x10
    27e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f2:	b9 84       	ldd	r11, Y+9	; 0x09
    27f4:	c8 84       	ldd	r12, Y+8	; 0x08
    27f6:	df 80       	ldd	r13, Y+7	; 0x07
    27f8:	ee 80       	ldd	r14, Y+6	; 0x06
    27fa:	fd 80       	ldd	r15, Y+5	; 0x05
    27fc:	0c 81       	ldd	r16, Y+4	; 0x04
    27fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2800:	aa 81       	ldd	r26, Y+2	; 0x02
    2802:	b9 81       	ldd	r27, Y+1	; 0x01
    2804:	ce 0f       	add	r28, r30
    2806:	d1 1d       	adc	r29, r1
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	ed 01       	movw	r28, r26
    2814:	08 95       	ret

00002816 <malloc>:
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	91 05       	cpc	r25, r1
    2822:	10 f4       	brcc	.+4      	; 0x2828 <malloc+0x12>
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	e0 91 df 08 	lds	r30, 0x08DF	; 0x8008df <__flp>
    282c:	f0 91 e0 08 	lds	r31, 0x08E0	; 0x8008e0 <__flp+0x1>
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	a0 e0       	ldi	r26, 0x00	; 0
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	30 97       	sbiw	r30, 0x00	; 0
    283a:	19 f1       	breq	.+70     	; 0x2882 <malloc+0x6c>
    283c:	40 81       	ld	r20, Z
    283e:	51 81       	ldd	r21, Z+1	; 0x01
    2840:	02 81       	ldd	r16, Z+2	; 0x02
    2842:	13 81       	ldd	r17, Z+3	; 0x03
    2844:	48 17       	cp	r20, r24
    2846:	59 07       	cpc	r21, r25
    2848:	c8 f0       	brcs	.+50     	; 0x287c <malloc+0x66>
    284a:	84 17       	cp	r24, r20
    284c:	95 07       	cpc	r25, r21
    284e:	69 f4       	brne	.+26     	; 0x286a <malloc+0x54>
    2850:	10 97       	sbiw	r26, 0x00	; 0
    2852:	31 f0       	breq	.+12     	; 0x2860 <malloc+0x4a>
    2854:	12 96       	adiw	r26, 0x02	; 2
    2856:	0c 93       	st	X, r16
    2858:	12 97       	sbiw	r26, 0x02	; 2
    285a:	13 96       	adiw	r26, 0x03	; 3
    285c:	1c 93       	st	X, r17
    285e:	27 c0       	rjmp	.+78     	; 0x28ae <malloc+0x98>
    2860:	00 93 df 08 	sts	0x08DF, r16	; 0x8008df <__flp>
    2864:	10 93 e0 08 	sts	0x08E0, r17	; 0x8008e0 <__flp+0x1>
    2868:	22 c0       	rjmp	.+68     	; 0x28ae <malloc+0x98>
    286a:	21 15       	cp	r18, r1
    286c:	31 05       	cpc	r19, r1
    286e:	19 f0       	breq	.+6      	; 0x2876 <malloc+0x60>
    2870:	42 17       	cp	r20, r18
    2872:	53 07       	cpc	r21, r19
    2874:	18 f4       	brcc	.+6      	; 0x287c <malloc+0x66>
    2876:	9a 01       	movw	r18, r20
    2878:	bd 01       	movw	r22, r26
    287a:	ef 01       	movw	r28, r30
    287c:	df 01       	movw	r26, r30
    287e:	f8 01       	movw	r30, r16
    2880:	db cf       	rjmp	.-74     	; 0x2838 <malloc+0x22>
    2882:	21 15       	cp	r18, r1
    2884:	31 05       	cpc	r19, r1
    2886:	f9 f0       	breq	.+62     	; 0x28c6 <malloc+0xb0>
    2888:	28 1b       	sub	r18, r24
    288a:	39 0b       	sbc	r19, r25
    288c:	24 30       	cpi	r18, 0x04	; 4
    288e:	31 05       	cpc	r19, r1
    2890:	80 f4       	brcc	.+32     	; 0x28b2 <malloc+0x9c>
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	61 15       	cp	r22, r1
    2898:	71 05       	cpc	r23, r1
    289a:	21 f0       	breq	.+8      	; 0x28a4 <malloc+0x8e>
    289c:	fb 01       	movw	r30, r22
    289e:	93 83       	std	Z+3, r25	; 0x03
    28a0:	82 83       	std	Z+2, r24	; 0x02
    28a2:	04 c0       	rjmp	.+8      	; 0x28ac <malloc+0x96>
    28a4:	90 93 e0 08 	sts	0x08E0, r25	; 0x8008e0 <__flp+0x1>
    28a8:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <__flp>
    28ac:	fe 01       	movw	r30, r28
    28ae:	32 96       	adiw	r30, 0x02	; 2
    28b0:	44 c0       	rjmp	.+136    	; 0x293a <malloc+0x124>
    28b2:	fe 01       	movw	r30, r28
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	81 93       	st	Z+, r24
    28ba:	91 93       	st	Z+, r25
    28bc:	22 50       	subi	r18, 0x02	; 2
    28be:	31 09       	sbc	r19, r1
    28c0:	39 83       	std	Y+1, r19	; 0x01
    28c2:	28 83       	st	Y, r18
    28c4:	3a c0       	rjmp	.+116    	; 0x293a <malloc+0x124>
    28c6:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <__brkval>
    28ca:	30 91 de 08 	lds	r19, 0x08DE	; 0x8008de <__brkval+0x1>
    28ce:	23 2b       	or	r18, r19
    28d0:	41 f4       	brne	.+16     	; 0x28e2 <malloc+0xcc>
    28d2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_start>
    28d6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_start+0x1>
    28da:	30 93 de 08 	sts	0x08DE, r19	; 0x8008de <__brkval+0x1>
    28de:	20 93 dd 08 	sts	0x08DD, r18	; 0x8008dd <__brkval>
    28e2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_end>
    28e6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_end+0x1>
    28ea:	21 15       	cp	r18, r1
    28ec:	31 05       	cpc	r19, r1
    28ee:	41 f4       	brne	.+16     	; 0x2900 <malloc+0xea>
    28f0:	2d b7       	in	r18, 0x3d	; 61
    28f2:	3e b7       	in	r19, 0x3e	; 62
    28f4:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__malloc_margin>
    28f8:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__malloc_margin+0x1>
    28fc:	24 1b       	sub	r18, r20
    28fe:	35 0b       	sbc	r19, r21
    2900:	e0 91 dd 08 	lds	r30, 0x08DD	; 0x8008dd <__brkval>
    2904:	f0 91 de 08 	lds	r31, 0x08DE	; 0x8008de <__brkval+0x1>
    2908:	e2 17       	cp	r30, r18
    290a:	f3 07       	cpc	r31, r19
    290c:	a0 f4       	brcc	.+40     	; 0x2936 <malloc+0x120>
    290e:	2e 1b       	sub	r18, r30
    2910:	3f 0b       	sbc	r19, r31
    2912:	28 17       	cp	r18, r24
    2914:	39 07       	cpc	r19, r25
    2916:	78 f0       	brcs	.+30     	; 0x2936 <malloc+0x120>
    2918:	ac 01       	movw	r20, r24
    291a:	4e 5f       	subi	r20, 0xFE	; 254
    291c:	5f 4f       	sbci	r21, 0xFF	; 255
    291e:	24 17       	cp	r18, r20
    2920:	35 07       	cpc	r19, r21
    2922:	48 f0       	brcs	.+18     	; 0x2936 <malloc+0x120>
    2924:	4e 0f       	add	r20, r30
    2926:	5f 1f       	adc	r21, r31
    2928:	50 93 de 08 	sts	0x08DE, r21	; 0x8008de <__brkval+0x1>
    292c:	40 93 dd 08 	sts	0x08DD, r20	; 0x8008dd <__brkval>
    2930:	81 93       	st	Z+, r24
    2932:	91 93       	st	Z+, r25
    2934:	02 c0       	rjmp	.+4      	; 0x293a <malloc+0x124>
    2936:	e0 e0       	ldi	r30, 0x00	; 0
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	cf 01       	movw	r24, r30
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	08 95       	ret

00002946 <free>:
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	09 f4       	brne	.+2      	; 0x2950 <free+0xa>
    294e:	81 c0       	rjmp	.+258    	; 0x2a52 <free+0x10c>
    2950:	fc 01       	movw	r30, r24
    2952:	32 97       	sbiw	r30, 0x02	; 2
    2954:	13 82       	std	Z+3, r1	; 0x03
    2956:	12 82       	std	Z+2, r1	; 0x02
    2958:	a0 91 df 08 	lds	r26, 0x08DF	; 0x8008df <__flp>
    295c:	b0 91 e0 08 	lds	r27, 0x08E0	; 0x8008e0 <__flp+0x1>
    2960:	10 97       	sbiw	r26, 0x00	; 0
    2962:	81 f4       	brne	.+32     	; 0x2984 <free+0x3e>
    2964:	20 81       	ld	r18, Z
    2966:	31 81       	ldd	r19, Z+1	; 0x01
    2968:	82 0f       	add	r24, r18
    296a:	93 1f       	adc	r25, r19
    296c:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <__brkval>
    2970:	30 91 de 08 	lds	r19, 0x08DE	; 0x8008de <__brkval+0x1>
    2974:	28 17       	cp	r18, r24
    2976:	39 07       	cpc	r19, r25
    2978:	51 f5       	brne	.+84     	; 0x29ce <free+0x88>
    297a:	f0 93 de 08 	sts	0x08DE, r31	; 0x8008de <__brkval+0x1>
    297e:	e0 93 dd 08 	sts	0x08DD, r30	; 0x8008dd <__brkval>
    2982:	67 c0       	rjmp	.+206    	; 0x2a52 <free+0x10c>
    2984:	ed 01       	movw	r28, r26
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	ce 17       	cp	r28, r30
    298c:	df 07       	cpc	r29, r31
    298e:	40 f4       	brcc	.+16     	; 0x29a0 <free+0x5a>
    2990:	4a 81       	ldd	r20, Y+2	; 0x02
    2992:	5b 81       	ldd	r21, Y+3	; 0x03
    2994:	9e 01       	movw	r18, r28
    2996:	41 15       	cp	r20, r1
    2998:	51 05       	cpc	r21, r1
    299a:	f1 f0       	breq	.+60     	; 0x29d8 <free+0x92>
    299c:	ea 01       	movw	r28, r20
    299e:	f5 cf       	rjmp	.-22     	; 0x298a <free+0x44>
    29a0:	d3 83       	std	Z+3, r29	; 0x03
    29a2:	c2 83       	std	Z+2, r28	; 0x02
    29a4:	40 81       	ld	r20, Z
    29a6:	51 81       	ldd	r21, Z+1	; 0x01
    29a8:	84 0f       	add	r24, r20
    29aa:	95 1f       	adc	r25, r21
    29ac:	c8 17       	cp	r28, r24
    29ae:	d9 07       	cpc	r29, r25
    29b0:	59 f4       	brne	.+22     	; 0x29c8 <free+0x82>
    29b2:	88 81       	ld	r24, Y
    29b4:	99 81       	ldd	r25, Y+1	; 0x01
    29b6:	84 0f       	add	r24, r20
    29b8:	95 1f       	adc	r25, r21
    29ba:	02 96       	adiw	r24, 0x02	; 2
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	93 83       	std	Z+3, r25	; 0x03
    29c6:	82 83       	std	Z+2, r24	; 0x02
    29c8:	21 15       	cp	r18, r1
    29ca:	31 05       	cpc	r19, r1
    29cc:	29 f4       	brne	.+10     	; 0x29d8 <free+0x92>
    29ce:	f0 93 e0 08 	sts	0x08E0, r31	; 0x8008e0 <__flp+0x1>
    29d2:	e0 93 df 08 	sts	0x08DF, r30	; 0x8008df <__flp>
    29d6:	3d c0       	rjmp	.+122    	; 0x2a52 <free+0x10c>
    29d8:	e9 01       	movw	r28, r18
    29da:	fb 83       	std	Y+3, r31	; 0x03
    29dc:	ea 83       	std	Y+2, r30	; 0x02
    29de:	49 91       	ld	r20, Y+
    29e0:	59 91       	ld	r21, Y+
    29e2:	c4 0f       	add	r28, r20
    29e4:	d5 1f       	adc	r29, r21
    29e6:	ec 17       	cp	r30, r28
    29e8:	fd 07       	cpc	r31, r29
    29ea:	61 f4       	brne	.+24     	; 0x2a04 <free+0xbe>
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	84 0f       	add	r24, r20
    29f2:	95 1f       	adc	r25, r21
    29f4:	02 96       	adiw	r24, 0x02	; 2
    29f6:	e9 01       	movw	r28, r18
    29f8:	99 83       	std	Y+1, r25	; 0x01
    29fa:	88 83       	st	Y, r24
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	9b 83       	std	Y+3, r25	; 0x03
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    2a04:	e0 e0       	ldi	r30, 0x00	; 0
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	12 96       	adiw	r26, 0x02	; 2
    2a0a:	8d 91       	ld	r24, X+
    2a0c:	9c 91       	ld	r25, X
    2a0e:	13 97       	sbiw	r26, 0x03	; 3
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	19 f0       	breq	.+6      	; 0x2a1a <free+0xd4>
    2a14:	fd 01       	movw	r30, r26
    2a16:	dc 01       	movw	r26, r24
    2a18:	f7 cf       	rjmp	.-18     	; 0x2a08 <free+0xc2>
    2a1a:	8d 91       	ld	r24, X+
    2a1c:	9c 91       	ld	r25, X
    2a1e:	11 97       	sbiw	r26, 0x01	; 1
    2a20:	9d 01       	movw	r18, r26
    2a22:	2e 5f       	subi	r18, 0xFE	; 254
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	82 0f       	add	r24, r18
    2a28:	93 1f       	adc	r25, r19
    2a2a:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <__brkval>
    2a2e:	30 91 de 08 	lds	r19, 0x08DE	; 0x8008de <__brkval+0x1>
    2a32:	28 17       	cp	r18, r24
    2a34:	39 07       	cpc	r19, r25
    2a36:	69 f4       	brne	.+26     	; 0x2a52 <free+0x10c>
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	29 f4       	brne	.+10     	; 0x2a46 <free+0x100>
    2a3c:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <__flp+0x1>
    2a40:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <__flp>
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <free+0x104>
    2a46:	13 82       	std	Z+3, r1	; 0x03
    2a48:	12 82       	std	Z+2, r1	; 0x02
    2a4a:	b0 93 de 08 	sts	0x08DE, r27	; 0x8008de <__brkval+0x1>
    2a4e:	a0 93 dd 08 	sts	0x08DD, r26	; 0x8008dd <__brkval>
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <__do_global_dtors>:
    2a58:	10 e0       	ldi	r17, 0x00	; 0
    2a5a:	c4 e5       	ldi	r28, 0x54	; 84
    2a5c:	d0 e0       	ldi	r29, 0x00	; 0
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <__do_global_dtors+0x10>
    2a60:	fe 01       	movw	r30, r28
    2a62:	0e 94 bf 13 	call	0x277e	; 0x277e <__tablejump2__>
    2a66:	21 96       	adiw	r28, 0x01	; 1
    2a68:	c5 35       	cpi	r28, 0x55	; 85
    2a6a:	d1 07       	cpc	r29, r17
    2a6c:	c9 f7       	brne	.-14     	; 0x2a60 <__do_global_dtors+0x8>
    2a6e:	f8 94       	cli

00002a70 <__stop_program>:
    2a70:	ff cf       	rjmp	.-2      	; 0x2a70 <__stop_program>
