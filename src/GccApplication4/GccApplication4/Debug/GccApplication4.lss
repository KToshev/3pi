
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00003270  00003304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  00800192  00800192  00003396  2**0
                  ALLOC
  3 .stab         00006414  00000000  00000000  00003398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  000097ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001248e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000124d0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000080  00000000  00000000  00012510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000328c  00000000  00000000  00012590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000aa1  00000000  00000000  0001581c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f27  00000000  00000000  000162bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000118  00000000  00000000  000171e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000142f  00000000  00000000  000172fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001a8d  00000000  00000000  0001872b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000260  00000000  00000000  0001a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	dc 04       	cpc	r13, r12
      6a:	d6 04       	cpc	r13, r6
      6c:	f4 04       	cpc	r15, r4
      6e:	69 09       	sbc	r22, r9
      70:	70 09       	sbc	r23, r0
      72:	ee 04       	cpc	r14, r14
      74:	e8 04       	cpc	r14, r8
      76:	e2 04       	cpc	r14, r2
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	83 0a       	sbc	r8, r19

000000a8 <__ctors_end>:
      a8:	84 14       	cp	r8, r4

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e0 e7       	ldi	r30, 0x70	; 112
      be:	f2 e3       	ldi	r31, 0x32	; 50
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a2 39       	cpi	r26, 0x92	; 146
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	a2 e9       	ldi	r26, 0x92	; 146
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a0 34       	cpi	r26, 0x40	; 64
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <main>
      f6:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	40 f4       	brcc	.+16     	; 0x11a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x1c>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	30 f0       	brcs	.+12     	; 0x120 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x22>
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	9f e7       	ldi	r25, 0x7F	; 127
     118:	08 95       	ret
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	9f e7       	ldi	r25, 0x7F	; 127
     11e:	08 95       	ret
     120:	ac 01       	movw	r20, r24
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	84 0f       	add	r24, r20
     128:	95 1f       	adc	r25, r21
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	4a e5       	ldi	r20, 0x5A	; 90
     130:	42 9f       	mul	r20, r18
     132:	f0 01       	movw	r30, r0
     134:	43 9f       	mul	r20, r19
     136:	f0 0d       	add	r31, r0
     138:	11 24       	eor	r1, r1
     13a:	8e 0f       	add	r24, r30
     13c:	9f 1f       	adc	r25, r31
     13e:	fc 01       	movw	r30, r24
     140:	ef 50       	subi	r30, 0x0F	; 15
     142:	fe 4f       	sbci	r31, 0xFE	; 254
     144:	80 81       	ld	r24, Z
     146:	91 81       	ldd	r25, Z+1	; 0x01
     148:	08 95       	ret

0000014a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     14a:	fc 01       	movw	r30, r24
     14c:	40 81       	ld	r20, Z
     14e:	51 81       	ldd	r21, Z+1	; 0x01
     150:	4f 30       	cpi	r20, 0x0F	; 15
     152:	51 05       	cpc	r21, r1
     154:	e8 f4       	brcc	.+58     	; 0x190 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x46>
     156:	82 81       	ldd	r24, Z+2	; 0x02
     158:	93 81       	ldd	r25, Z+3	; 0x03
     15a:	8f 30       	cpi	r24, 0x0F	; 15
     15c:	91 05       	cpc	r25, r1
     15e:	d8 f0       	brcs	.+54     	; 0x196 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x4c>
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	9f e7       	ldi	r25, 0x7F	; 127
     164:	08 95       	ret
     166:	9c 01       	movw	r18, r24
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	82 0f       	add	r24, r18
     16e:	93 1f       	adc	r25, r19
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a e5       	ldi	r18, 0x5A	; 90
     176:	24 9f       	mul	r18, r20
     178:	f0 01       	movw	r30, r0
     17a:	25 9f       	mul	r18, r21
     17c:	f0 0d       	add	r31, r0
     17e:	11 24       	eor	r1, r1
     180:	8e 0f       	add	r24, r30
     182:	9f 1f       	adc	r25, r31
     184:	fc 01       	movw	r30, r24
     186:	ef 50       	subi	r30, 0x0F	; 15
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	80 81       	ld	r24, Z
     18c:	91 81       	ldd	r25, Z+1	; 0x01
     18e:	08 95       	ret
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	9f e7       	ldi	r25, 0x7F	; 127
     194:	08 95       	ret
     196:	fc 01       	movw	r30, r24
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	e8 0f       	add	r30, r24
     19e:	f9 1f       	adc	r31, r25
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	6a e5       	ldi	r22, 0x5A	; 90
     1a6:	64 9f       	mul	r22, r20
     1a8:	90 01       	movw	r18, r0
     1aa:	65 9f       	mul	r22, r21
     1ac:	30 0d       	add	r19, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	e2 0f       	add	r30, r18
     1b2:	f3 1f       	adc	r31, r19
     1b4:	ef 50       	subi	r30, 0x0F	; 15
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	25 81       	ldd	r18, Z+5	; 0x05
     1ba:	21 11       	cpse	r18, r1
     1bc:	d4 cf       	rjmp	.-88     	; 0x166 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x1c>
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	9f e7       	ldi	r25, 0x7F	; 127
     1c2:	08 95       	ret

000001c4 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1c4:	fc 01       	movw	r30, r24
     1c6:	40 81       	ld	r20, Z
     1c8:	51 81       	ldd	r21, Z+1	; 0x01
     1ca:	4f 30       	cpi	r20, 0x0F	; 15
     1cc:	51 05       	cpc	r21, r1
     1ce:	e8 f4       	brcc	.+58     	; 0x20a <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x46>
     1d0:	82 81       	ldd	r24, Z+2	; 0x02
     1d2:	93 81       	ldd	r25, Z+3	; 0x03
     1d4:	8f 30       	cpi	r24, 0x0F	; 15
     1d6:	91 05       	cpc	r25, r1
     1d8:	f0 f0       	brcs	.+60     	; 0x216 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x52>
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	9f e7       	ldi	r25, 0x7F	; 127
     1de:	08 95       	ret
     1e0:	9c 01       	movw	r18, r24
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	82 0f       	add	r24, r18
     1e8:	93 1f       	adc	r25, r19
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	2a e5       	ldi	r18, 0x5A	; 90
     1f0:	24 9f       	mul	r18, r20
     1f2:	f0 01       	movw	r30, r0
     1f4:	25 9f       	mul	r18, r21
     1f6:	f0 0d       	add	r31, r0
     1f8:	11 24       	eor	r1, r1
     1fa:	8e 0f       	add	r24, r30
     1fc:	9f 1f       	adc	r25, r31
     1fe:	fc 01       	movw	r30, r24
     200:	ef 50       	subi	r30, 0x0F	; 15
     202:	fe 4f       	sbci	r31, 0xFE	; 254
     204:	82 81       	ldd	r24, Z+2	; 0x02
     206:	93 81       	ldd	r25, Z+3	; 0x03
     208:	08 95       	ret
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	9f e7       	ldi	r25, 0x7F	; 127
     20e:	08 95       	ret
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	9f e7       	ldi	r25, 0x7F	; 127
     214:	08 95       	ret
     216:	fc 01       	movw	r30, r24
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	e8 0f       	add	r30, r24
     21e:	f9 1f       	adc	r31, r25
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	6a e5       	ldi	r22, 0x5A	; 90
     226:	64 9f       	mul	r22, r20
     228:	90 01       	movw	r18, r0
     22a:	65 9f       	mul	r22, r21
     22c:	30 0d       	add	r19, r0
     22e:	11 24       	eor	r1, r1
     230:	e2 0f       	add	r30, r18
     232:	f3 1f       	adc	r31, r19
     234:	ef 50       	subi	r30, 0x0F	; 15
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	25 81       	ldd	r18, Z+5	; 0x05
     23a:	21 11       	cpse	r18, r1
     23c:	e9 cf       	rjmp	.-46     	; 0x210 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x4c>
     23e:	d0 cf       	rjmp	.-96     	; 0x1e0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x1c>

00000240 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     240:	dc 01       	movw	r26, r24
     242:	2d 91       	ld	r18, X+
     244:	3c 91       	ld	r19, X
     246:	11 97       	sbiw	r26, 0x01	; 1
     248:	2f 30       	cpi	r18, 0x0F	; 15
     24a:	31 05       	cpc	r19, r1
     24c:	d8 f5       	brcc	.+118    	; 0x2c4 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x84>
     24e:	12 96       	adiw	r26, 0x02	; 2
     250:	4d 91       	ld	r20, X+
     252:	5c 91       	ld	r21, X
     254:	13 97       	sbiw	r26, 0x03	; 3
     256:	4f 30       	cpi	r20, 0x0F	; 15
     258:	51 05       	cpc	r21, r1
     25a:	e8 f1       	brcs	.+122    	; 0x2d6 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x96>
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	9f e7       	ldi	r25, 0x7F	; 127
     260:	08 95       	ret
     262:	fa 01       	movw	r30, r20
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	e4 0f       	add	r30, r20
     26a:	f5 1f       	adc	r31, r21
     26c:	ee 0f       	add	r30, r30
     26e:	ff 1f       	adc	r31, r31
     270:	aa e5       	ldi	r26, 0x5A	; 90
     272:	a2 9f       	mul	r26, r18
     274:	c0 01       	movw	r24, r0
     276:	a3 9f       	mul	r26, r19
     278:	90 0d       	add	r25, r0
     27a:	11 24       	eor	r1, r1
     27c:	e8 0f       	add	r30, r24
     27e:	f9 1f       	adc	r31, r25
     280:	ef 50       	subi	r30, 0x0F	; 15
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	85 81       	ldd	r24, Z+5	; 0x05
     286:	81 11       	cpse	r24, r1
     288:	20 c0       	rjmp	.+64     	; 0x2ca <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x8a>
     28a:	fb 01       	movw	r30, r22
     28c:	80 81       	ld	r24, Z
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	dc 01       	movw	r26, r24
     292:	a2 1b       	sub	r26, r18
     294:	b3 0b       	sbc	r27, r19
     296:	fd 01       	movw	r30, r26
     298:	22 f4       	brpl	.+8      	; 0x2a2 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x62>
     29a:	ee 27       	eor	r30, r30
     29c:	ff 27       	eor	r31, r31
     29e:	ea 1b       	sub	r30, r26
     2a0:	fb 0b       	sbc	r31, r27
     2a2:	db 01       	movw	r26, r22
     2a4:	12 96       	adiw	r26, 0x02	; 2
     2a6:	2d 91       	ld	r18, X+
     2a8:	3c 91       	ld	r19, X
     2aa:	13 97       	sbiw	r26, 0x03	; 3
     2ac:	24 1b       	sub	r18, r20
     2ae:	35 0b       	sbc	r19, r21
     2b0:	c9 01       	movw	r24, r18
     2b2:	99 23       	and	r25, r25
     2b4:	24 f4       	brge	.+8      	; 0x2be <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x7e>
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	82 1b       	sub	r24, r18
     2bc:	93 0b       	sbc	r25, r19
     2be:	8e 0f       	add	r24, r30
     2c0:	9f 1f       	adc	r25, r31
     2c2:	08 95       	ret
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	9f e7       	ldi	r25, 0x7F	; 127
     2c8:	08 95       	ret
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f e7       	ldi	r25, 0x7F	; 127
     2ce:	08 95       	ret
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	9f e7       	ldi	r25, 0x7F	; 127
     2d4:	08 95       	ret
     2d6:	fa 01       	movw	r30, r20
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	e4 0f       	add	r30, r20
     2de:	f5 1f       	adc	r31, r21
     2e0:	ee 0f       	add	r30, r30
     2e2:	ff 1f       	adc	r31, r31
     2e4:	aa e5       	ldi	r26, 0x5A	; 90
     2e6:	a2 9f       	mul	r26, r18
     2e8:	c0 01       	movw	r24, r0
     2ea:	a3 9f       	mul	r26, r19
     2ec:	90 0d       	add	r25, r0
     2ee:	11 24       	eor	r1, r1
     2f0:	e8 0f       	add	r30, r24
     2f2:	f9 1f       	adc	r31, r25
     2f4:	ef 50       	subi	r30, 0x0F	; 15
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	84 81       	ldd	r24, Z+4	; 0x04
     2fa:	81 11       	cpse	r24, r1
     2fc:	e9 cf       	rjmp	.-46     	; 0x2d0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x90>
     2fe:	b1 cf       	rjmp	.-158    	; 0x262 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>

00000300 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     300:	db 01       	movw	r26, r22
     302:	8d 91       	ld	r24, X+
     304:	9c 91       	ld	r25, X
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	8f 30       	cpi	r24, 0x0F	; 15
     30a:	91 05       	cpc	r25, r1
     30c:	d8 f5       	brcc	.+118    	; 0x384 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x84>
     30e:	12 96       	adiw	r26, 0x02	; 2
     310:	6d 91       	ld	r22, X+
     312:	7c 91       	ld	r23, X
     314:	13 97       	sbiw	r26, 0x03	; 3
     316:	6f 30       	cpi	r22, 0x0F	; 15
     318:	71 05       	cpc	r23, r1
     31a:	e8 f1       	brcs	.+122    	; 0x396 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x96>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9f e7       	ldi	r25, 0x7F	; 127
     320:	08 95       	ret

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     322:	fb 01       	movw	r30, r22
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	e6 0f       	add	r30, r22
     32a:	f7 1f       	adc	r31, r23
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	aa e5       	ldi	r26, 0x5A	; 90
     332:	a8 9f       	mul	r26, r24
     334:	90 01       	movw	r18, r0
     336:	a9 9f       	mul	r26, r25
     338:	30 0d       	add	r19, r0
     33a:	11 24       	eor	r1, r1
     33c:	e2 0f       	add	r30, r18
     33e:	f3 1f       	adc	r31, r19
     340:	ef 50       	subi	r30, 0x0F	; 15
     342:	fe 4f       	sbci	r31, 0xFE	; 254
     344:	25 81       	ldd	r18, Z+5	; 0x05
     346:	21 11       	cpse	r18, r1
     348:	20 c0       	rjmp	.+64     	; 0x38a <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x8a>
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
     34a:	fa 01       	movw	r30, r20
     34c:	20 81       	ld	r18, Z
     34e:	31 81       	ldd	r19, Z+1	; 0x01
     350:	28 1b       	sub	r18, r24
     352:	39 0b       	sbc	r19, r25
     354:	f9 01       	movw	r30, r18
     356:	ff 23       	and	r31, r31
     358:	24 f4       	brge	.+8      	; 0x362 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x62>
     35a:	ee 27       	eor	r30, r30
     35c:	ff 27       	eor	r31, r31
     35e:	e2 1b       	sub	r30, r18
     360:	f3 0b       	sbc	r31, r19
     362:	da 01       	movw	r26, r20
     364:	12 96       	adiw	r26, 0x02	; 2
     366:	2d 91       	ld	r18, X+
     368:	3c 91       	ld	r19, X
     36a:	13 97       	sbiw	r26, 0x03	; 3
     36c:	26 1b       	sub	r18, r22
     36e:	37 0b       	sbc	r19, r23
     370:	c9 01       	movw	r24, r18
     372:	99 23       	and	r25, r25
     374:	24 f4       	brge	.+8      	; 0x37e <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x7e>
     376:	88 27       	eor	r24, r24
     378:	99 27       	eor	r25, r25
     37a:	82 1b       	sub	r24, r18
     37c:	93 0b       	sbc	r25, r19
     37e:	8e 0f       	add	r24, r30
     380:	9f 1f       	adc	r25, r31
     382:	08 95       	ret
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	9f e7       	ldi	r25, 0x7F	; 127
     388:	08 95       	ret
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	9f e7       	ldi	r25, 0x7F	; 127
     38e:	08 95       	ret
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	9f e7       	ldi	r25, 0x7F	; 127
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = abs( goal.x - pos.x ) + abs( goal.y - pos.y );
                }

                return result;
     394:	08 95       	ret
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     396:	fb 01       	movw	r30, r22
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	e6 0f       	add	r30, r22
     39e:	f7 1f       	adc	r31, r23
     3a0:	ee 0f       	add	r30, r30
     3a2:	ff 1f       	adc	r31, r31
     3a4:	aa e5       	ldi	r26, 0x5A	; 90
     3a6:	a8 9f       	mul	r26, r24
     3a8:	90 01       	movw	r18, r0
     3aa:	a9 9f       	mul	r26, r25
     3ac:	30 0d       	add	r19, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	e2 0f       	add	r30, r18
     3b2:	f3 1f       	adc	r31, r19
     3b4:	ef 50       	subi	r30, 0x0F	; 15
     3b6:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     3b8:	24 81       	ldd	r18, Z+4	; 0x04
     3ba:	21 11       	cpse	r18, r1
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x90>
     3be:	b1 cf       	rjmp	.-158    	; 0x322 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>

000003c0 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     3c0:	fb 01       	movw	r30, r22
     3c2:	20 81       	ld	r18, Z
     3c4:	31 81       	ldd	r19, Z+1	; 0x01
     3c6:	2f 30       	cpi	r18, 0x0F	; 15
     3c8:	31 05       	cpc	r19, r1
     3ca:	40 f4       	brcc	.+16     	; 0x3dc <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x1c>
     3cc:	82 81       	ldd	r24, Z+2	; 0x02
     3ce:	93 81       	ldd	r25, Z+3	; 0x03
     3d0:	8f 30       	cpi	r24, 0x0F	; 15
     3d2:	91 05       	cpc	r25, r1
     3d4:	30 f0       	brcs	.+12     	; 0x3e2 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x22>

                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
                {
                    short result = SHRT_MAX;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	9f e7       	ldi	r25, 0x7F	; 127
     3da:	08 95       	ret
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	9f e7       	ldi	r25, 0x7F	; 127
     3e0:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     3e2:	ac 01       	movw	r20, r24
     3e4:	44 0f       	add	r20, r20
     3e6:	55 1f       	adc	r21, r21
     3e8:	84 0f       	add	r24, r20
     3ea:	95 1f       	adc	r25, r21
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	4a e5       	ldi	r20, 0x5A	; 90
     3f2:	42 9f       	mul	r20, r18
     3f4:	f0 01       	movw	r30, r0
     3f6:	43 9f       	mul	r20, r19
     3f8:	f0 0d       	add	r31, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	8e 0f       	add	r24, r30
     3fe:	9f 1f       	adc	r25, r31
     400:	fc 01       	movw	r30, r24
     402:	ef 50       	subi	r30, 0x0F	; 15
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	80 81       	ld	r24, Z
     408:	91 81       	ldd	r25, Z+1	; 0x01
                    }

                    return result;
                };
     40a:	08 95       	ret

0000040c <_ZN5Robot14initializeMenuEv>:
            print( ", " );
            print_long( pos.y );
            print( ")" );
        }

        void initializeMenu()
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	ec 01       	movw	r28, r24
        {
            clear();
     416:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>

            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     41a:	0f e0       	ldi	r16, 0x0F	; 15
     41c:	10 e0       	ldi	r17, 0x00	; 0

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	0e 94 c4 13 	call	0x2788	; 0x2788 <button_is_pressed>
     424:	81 11       	cpse	r24, r1
     426:	45 c0       	rjmp	.+138    	; 0x4b2 <_ZN5Robot14initializeMenuEv+0xa6>
            {
                if ( button_is_pressed( BUTTON_A ) )
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 c4 13 	call	0x2788	; 0x2788 <button_is_pressed>
     42e:	88 23       	and	r24, r24
     430:	41 f0       	breq	.+16     	; 0x442 <_ZN5Robot14initializeMenuEv+0x36>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	b8 01       	movw	r22, r16
     43a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__divmodhi4>
     43e:	9e 83       	std	Y+6, r25	; 0x06
     440:	8d 83       	std	Y+5, r24	; 0x05
                }

                if ( button_is_pressed( BUTTON_C ) )
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	0e 94 c4 13 	call	0x2788	; 0x2788 <button_is_pressed>
     448:	88 23       	and	r24, r24
     44a:	41 f0       	breq	.+16     	; 0x45c <_ZN5Robot14initializeMenuEv+0x50>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     44c:	8f 81       	ldd	r24, Y+7	; 0x07
     44e:	98 85       	ldd	r25, Y+8	; 0x08
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	b8 01       	movw	r22, r16
     454:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__divmodhi4>
     458:	98 87       	std	Y+8, r25	; 0x08
     45a:	8f 83       	std	Y+7, r24	; 0x07
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     45c:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
     460:	81 e5       	ldi	r24, 0x51	; 81
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
     468:	6d 81       	ldd	r22, Y+5	; 0x05
     46a:	7e 81       	ldd	r23, Y+6	; 0x06
     46c:	07 2e       	mov	r0, r23
     46e:	00 0c       	add	r0, r0
     470:	88 0b       	sbc	r24, r24
     472:	99 0b       	sbc	r25, r25
     474:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
     478:	83 e5       	ldi	r24, 0x53	; 83
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
     480:	6f 81       	ldd	r22, Y+7	; 0x07
     482:	78 85       	ldd	r23, Y+8	; 0x08
     484:	07 2e       	mov	r0, r23
     486:	00 0c       	add	r0, r0
     488:	88 0b       	sbc	r24, r24
     48a:	99 0b       	sbc	r25, r25
     48c:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
     490:	86 e5       	ldi	r24, 0x56	; 86
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos );

                lcd_goto_xy( 0, 1 );
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
                print( " A B C " );
     4a0:	88 e5       	ldi	r24, 0x58	; 88
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>

                delay_ms( 100 );
     4a8:	84 e6       	ldi	r24, 0x64	; 100
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     4b0:	b6 cf       	rjmp	.-148    	; 0x41e <_ZN5Robot14initializeMenuEv+0x12>

                delay_ms( 100 );
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     4b2:	80 e1       	ldi	r24, 0x10	; 16
     4b4:	0e 94 b0 13 	call	0x2760	; 0x2760 <wait_for_button_release>
            delay_ms( 1000 );
     4b8:	88 ee       	ldi	r24, 0xE8	; 232
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
        }
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <_ZN5Robot8mainMenuEv>:

        //Main program menu
        void mainMenu()
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	66 97       	sbiw	r28, 0x16	; 22
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	1c 01       	movw	r2, r24
        {
            clear();
     4e0:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "A - Test" );
     4e4:	80 e6       	ldi	r24, 0x60	; 96
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            lcd_goto_xy( 0, 1 );
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
            print( "B - Main" );
     4f4:	89 e6       	ldi	r24, 0x69	; 105
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= CNT_LAPS )
            {
                stepToGoal( finishPos );
     4fc:	91 01       	movw	r18, r2
     4fe:	2b 5f       	subi	r18, 0xFB	; 251
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	3a 8b       	std	Y+18, r19	; 0x12
     504:	29 8b       	std	Y+17, r18	; 0x11
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     506:	c1 01       	movw	r24, r2
     508:	09 96       	adiw	r24, 0x09	; 9
     50a:	9e 8b       	std	Y+22, r25	; 0x16
     50c:	8d 8b       	std	Y+21, r24	; 0x15

            bool isSelectedProgram = false;

            while ( !isSelectedProgram )
            {
                if ( button_is_pressed( BUTTON_A ) )
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 c4 13 	call	0x2788	; 0x2788 <button_is_pressed>
     514:	88 23       	and	r24, r24
     516:	31 f1       	breq	.+76     	; 0x564 <_ZN5Robot8mainMenuEv+0x9a>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	0e 94 b0 13 	call	0x2760	; 0x2760 <wait_for_button_release>
        // Displays the data returned from the sensors
        void testSensors()
        {
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );
     51e:	61 01       	movw	r12, r2
     520:	99 e0       	ldi	r25, 0x09	; 9
     522:	c9 0e       	add	r12, r25
     524:	d1 1c       	adc	r13, r1
     526:	71 01       	movw	r14, r2
     528:	a3 e1       	ldi	r26, 0x13	; 19
     52a:	ea 0e       	add	r14, r26
     52c:	f1 1c       	adc	r15, r1
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	0e 94 4b 14 	call	0x2896	; 0x2896 <read_line_sensors>
     536:	86 01       	movw	r16, r12

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
                {
                    print_long( sensors[ i ] );
     538:	f8 01       	movw	r30, r16
     53a:	61 91       	ld	r22, Z+
     53c:	71 91       	ld	r23, Z+
     53e:	8f 01       	movw	r16, r30
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    delay_ms( 500 );
     548:	84 ef       	ldi	r24, 0xF4	; 244
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                    clear();
     550:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
     554:	e0 16       	cp	r14, r16
     556:	f1 06       	cpc	r15, r17
     558:	79 f7       	brne	.-34     	; 0x538 <_ZN5Robot8mainMenuEv+0x6e>
                    delay_ms( 500 );
                    clear();
                }

                // Play sound to notify that the next iteration will begin.
                play( ">>a32" );
     55a:	82 e7       	ldi	r24, 0x72	; 114
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 3b 11 	call	0x2276	; 0x2276 <play>
     562:	e5 cf       	rjmp	.-54     	; 0x52e <_ZN5Robot8mainMenuEv+0x64>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
                    testSensors();
                }

                if ( button_is_pressed( BUTTON_B ) )
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	0e 94 c4 13 	call	0x2788	; 0x2788 <button_is_pressed>
     56a:	88 23       	and	r24, r24
     56c:	81 f2       	breq	.-96     	; 0x50e <_ZN5Robot8mainMenuEv+0x44>
                {
                    wait_for_button_release( BUTTON_B );//wait for the button to be released before run the program
     56e:	80 e1       	ldi	r24, 0x10	; 16
     570:	0e 94 b0 13 	call	0x2760	; 0x2760 <wait_for_button_release>
                    // mainRobotLogic the initialization menu
                    initializeMenu();
     574:	c1 01       	movw	r24, r2
     576:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN5Robot14initializeMenuEv>
        }

        // Main logic function
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
     57a:	d1 01       	movw	r26, r2
     57c:	4d 91       	ld	r20, X+
     57e:	5c 91       	ld	r21, X
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	12 96       	adiw	r26, 0x02	; 2
     584:	8d 91       	ld	r24, X+
     586:	9c 91       	ld	r25, X
     588:	13 97       	sbiw	r26, 0x03	; 3
     58a:	9c 01       	movw	r18, r24
     58c:	22 0f       	add	r18, r18
     58e:	33 1f       	adc	r19, r19
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	2a e5       	ldi	r18, 0x5A	; 90
     59a:	24 9f       	mul	r18, r20
     59c:	f0 01       	movw	r30, r0
     59e:	25 9f       	mul	r18, r21
     5a0:	f0 0d       	add	r31, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	8e 0f       	add	r24, r30
     5a6:	9f 1f       	adc	r25, r31
     5a8:	fc 01       	movw	r30, r24
     5aa:	ef 50       	subi	r30, 0x0F	; 15
     5ac:	fe 4f       	sbci	r31, 0xFE	; 254
     5ae:	11 82       	std	Z+1, r1	; 0x01
     5b0:	10 82       	st	Z, r1
            matrix[ position.x ][ position.y ].isVisited	= true;
     5b2:	4d 91       	ld	r20, X+
     5b4:	5c 91       	ld	r21, X
     5b6:	11 97       	sbiw	r26, 0x01	; 1
     5b8:	12 96       	adiw	r26, 0x02	; 2
     5ba:	8d 91       	ld	r24, X+
     5bc:	9c 91       	ld	r25, X
     5be:	13 97       	sbiw	r26, 0x03	; 3
     5c0:	bc 01       	movw	r22, r24
     5c2:	66 0f       	add	r22, r22
     5c4:	77 1f       	adc	r23, r23
     5c6:	86 0f       	add	r24, r22
     5c8:	97 1f       	adc	r25, r23
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	24 9f       	mul	r18, r20
     5d0:	f0 01       	movw	r30, r0
     5d2:	25 9f       	mul	r18, r21
     5d4:	f0 0d       	add	r31, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	8e 0f       	add	r24, r30
     5da:	9f 1f       	adc	r25, r31
     5dc:	fc 01       	movw	r30, r24
     5de:	ef 50       	subi	r30, 0x0F	; 15
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	85 83       	std	Z+5, r24	; 0x05

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     5e6:	1f 86       	std	Y+15, r1	; 0x0f
     5e8:	18 8a       	std	Y+16, r1	; 0x10
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     5ea:	f1 01       	movw	r30, r2
     5ec:	20 81       	ld	r18, Z
     5ee:	31 81       	ldd	r19, Z+1	; 0x01
     5f0:	85 81       	ldd	r24, Z+5	; 0x05
     5f2:	96 81       	ldd	r25, Z+6	; 0x06
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	41 f4       	brne	.+16     	; 0x60a <_ZN5Robot8mainMenuEv+0x140>
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= CNT_LAPS )
     5fa:	22 81       	ldd	r18, Z+2	; 0x02
     5fc:	33 81       	ldd	r19, Z+3	; 0x03
     5fe:	87 81       	ldd	r24, Z+7	; 0x07
     600:	90 85       	ldd	r25, Z+8	; 0x08
     602:	28 17       	cp	r18, r24
     604:	39 07       	cpc	r19, r25
     606:	09 f4       	brne	.+2      	; 0x60a <_ZN5Robot8mainMenuEv+0x140>
     608:	82 cf       	rjmp	.-252    	; 0x50e <_ZN5Robot8mainMenuEv+0x44>
     60a:	d1 01       	movw	r26, r2
     60c:	53 96       	adiw	r26, 0x13	; 19
     60e:	8d 91       	ld	r24, X+
     610:	9c 91       	ld	r25, X
     612:	54 97       	sbiw	r26, 0x14	; 20
     614:	05 97       	sbiw	r24, 0x05	; 5
     616:	0c f0       	brlt	.+2      	; 0x61a <_ZN5Robot8mainMenuEv+0x150>
     618:	7a cf       	rjmp	.-268    	; 0x50e <_ZN5Robot8mainMenuEv+0x44>
            {
                stepToGoal( finishPos );
     61a:	e8 e0       	ldi	r30, 0x08	; 8
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	fc 8b       	std	Y+20, r31	; 0x14
     620:	eb 8b       	std	Y+19, r30	; 0x13
                {
                    nextPos = this->getNextPos( goalPos );
                }
                else
                {
                    nextPos = this->getNearestToFinishAdjacent( position );
     622:	82 2c       	mov	r8, r2
     624:	93 2c       	mov	r9, r3

            while ( count < 8 )
            {
                count++;

                if ( lap < CNT_LAPS )
     626:	d1 01       	movw	r26, r2
     628:	53 96       	adiw	r26, 0x13	; 19
     62a:	8d 91       	ld	r24, X+
     62c:	9c 91       	ld	r25, X
     62e:	54 97       	sbiw	r26, 0x14	; 20
     630:	04 97       	sbiw	r24, 0x04	; 4
     632:	0c f0       	brlt	.+2      	; 0x636 <_ZN5Robot8mainMenuEv+0x16c>
     634:	1c c1       	rjmp	.+568    	; 0x86e <_ZN5Robot8mainMenuEv+0x3a4>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	minDist		= getDist( from, to );
     636:	69 89       	ldd	r22, Y+17	; 0x11
     638:	7a 89       	ldd	r23, Y+18	; 0x12
     63a:	88 2d       	mov	r24, r8
     63c:	99 2d       	mov	r25, r9
     63e:	0e 94 20 01 	call	0x240	; 0x240 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     642:	7c 01       	movw	r14, r24
            Point2D	minPos( from );
     644:	f1 01       	movw	r30, r2
     646:	40 80       	ld	r4, Z
     648:	51 80       	ldd	r5, Z+1	; 0x01
     64a:	62 80       	ldd	r6, Z+2	; 0x02
     64c:	73 80       	ldd	r7, Z+3	; 0x03
            short	pos			= ( short )orientation;
     64e:	a4 80       	ldd	r10, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
     650:	8f 85       	ldd	r24, Y+15	; 0x0f
     652:	98 89       	ldd	r25, Y+16	; 0x10
            {
                Point2D currPos;

                currPos.x = position.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     654:	b1 2c       	mov	r11, r1
     656:	8c 01       	movw	r16, r24
     658:	8a 0d       	add	r24, r10
     65a:	9b 1d       	adc	r25, r11
     65c:	87 70       	andi	r24, 0x07	; 7
     65e:	90 78       	andi	r25, 0x80	; 128
     660:	99 23       	and	r25, r25
     662:	24 f4       	brge	.+8      	; 0x66c <_ZN5Robot8mainMenuEv+0x1a2>
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	88 6f       	ori	r24, 0xF8	; 248
     668:	9f 6f       	ori	r25, 0xFF	; 255
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	fc 01       	movw	r30, r24
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ec 5e       	subi	r30, 0xEC	; 236
     674:	fe 4f       	sbci	r31, 0xFE	; 254
     676:	d1 01       	movw	r26, r2
     678:	4d 91       	ld	r20, X+
     67a:	5c 91       	ld	r21, X
     67c:	11 97       	sbiw	r26, 0x01	; 1
     67e:	20 81       	ld	r18, Z
     680:	31 81       	ldd	r19, Z+1	; 0x01
     682:	24 0f       	add	r18, r20
     684:	35 1f       	adc	r19, r21
     686:	3a 83       	std	Y+2, r19	; 0x02
     688:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = position.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	fc 01       	movw	r30, r24
     690:	ec 5d       	subi	r30, 0xDC	; 220
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	12 96       	adiw	r26, 0x02	; 2
     696:	2d 91       	ld	r18, X+
     698:	3c 91       	ld	r19, X
     69a:	13 97       	sbiw	r26, 0x03	; 3
     69c:	80 81       	ld	r24, Z
     69e:	91 81       	ldd	r25, Z+1	; 0x01
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	8b 83       	std	Y+3, r24	; 0x03

                short	currDist = getDist( currPos, to );
     6a8:	69 89       	ldd	r22, Y+17	; 0x11
     6aa:	7a 89       	ldd	r23, Y+18	; 0x12
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	0e 94 20 01 	call	0x240	; 0x240 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     6b4:	6c 01       	movw	r12, r24

                if ( doPrint )
     6b6:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     6ba:	88 23       	and	r24, r24
     6bc:	c1 f1       	breq	.+112    	; 0x72e <_ZN5Robot8mainMenuEv+0x264>
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     6be:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
     6c2:	81 e5       	ldi	r24, 0x51	; 81
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
     6ca:	69 81       	ldd	r22, Y+1	; 0x01
     6cc:	7a 81       	ldd	r23, Y+2	; 0x02
     6ce:	07 2e       	mov	r0, r23
     6d0:	00 0c       	add	r0, r0
     6d2:	88 0b       	sbc	r24, r24
     6d4:	99 0b       	sbc	r25, r25
     6d6:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
     6da:	83 e5       	ldi	r24, 0x53	; 83
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
     6e2:	6b 81       	ldd	r22, Y+3	; 0x03
     6e4:	7c 81       	ldd	r23, Y+4	; 0x04
     6e6:	07 2e       	mov	r0, r23
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
     6f2:	86 e5       	ldi	r24, 0x56	; 86
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos );
                    lcd_goto_xy( 0, 1 );
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
                    print_long( currDist );
     702:	b6 01       	movw	r22, r12
     704:	0d 2c       	mov	r0, r13
     706:	00 0c       	add	r0, r0
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    print( " | " );
     710:	88 e7       	ldi	r24, 0x78	; 120
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                    print_long( minDist );
     718:	b7 01       	movw	r22, r14
     71a:	0f 2c       	mov	r0, r15
     71c:	00 0c       	add	r0, r0
     71e:	88 0b       	sbc	r24, r24
     720:	99 0b       	sbc	r25, r25
     722:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    delay_ms( 4000 );
     726:	80 ea       	ldi	r24, 0xA0	; 160
     728:	9f e0       	ldi	r25, 0x0F	; 15
     72a:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                }

                if ( currDist < minDist )
     72e:	ce 14       	cp	r12, r14
     730:	df 04       	cpc	r13, r15
     732:	2c f4       	brge	.+10     	; 0x73e <_ZN5Robot8mainMenuEv+0x274>
                {
                    minDist = currDist;
                    minPos	= currPos;
     734:	49 80       	ldd	r4, Y+1	; 0x01
     736:	5a 80       	ldd	r5, Y+2	; 0x02
     738:	6b 80       	ldd	r6, Y+3	; 0x03
     73a:	7c 80       	ldd	r7, Y+4	; 0x04
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     73c:	76 01       	movw	r14, r12
     73e:	c8 01       	movw	r24, r16
     740:	01 96       	adiw	r24, 0x01	; 1
        {
            short	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     742:	88 30       	cpi	r24, 0x08	; 8
     744:	91 05       	cpc	r25, r1
     746:	09 f0       	breq	.+2      	; 0x74a <_ZN5Robot8mainMenuEv+0x280>
     748:	86 cf       	rjmp	.-244    	; 0x656 <_ZN5Robot8mainMenuEv+0x18c>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     74a:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
     74e:	82 01       	movw	r16, r4
     750:	53 01       	movw	r10, r6
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     752:	f1 01       	movw	r30, r2
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	84 15       	cp	r24, r4
     75a:	95 05       	cpc	r25, r5
     75c:	09 f0       	breq	.+2      	; 0x760 <_ZN5Robot8mainMenuEv+0x296>
     75e:	ac c5       	rjmp	.+2904   	; 0x12b8 <__stack+0x9b9>
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	33 81       	ldd	r19, Z+3	; 0x03
     764:	26 15       	cp	r18, r6
     766:	37 05       	cpc	r19, r7
     768:	09 f4       	brne	.+2      	; 0x76c <_ZN5Robot8mainMenuEv+0x2a2>
     76a:	89 c5       	rjmp	.+2834   	; 0x127e <__stack+0x97f>

                return result;
            };

            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );
     76c:	8c 01       	movw	r16, r24
     76e:	14 c1       	rjmp	.+552    	; 0x998 <__stack+0x99>
     770:	8c 01       	movw	r16, r24

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos;

                currPos.x = position.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     772:	8a 0d       	add	r24, r10
     774:	9b 1d       	adc	r25, r11
     776:	87 70       	andi	r24, 0x07	; 7
     778:	90 78       	andi	r25, 0x80	; 128
     77a:	99 23       	and	r25, r25
     77c:	24 f4       	brge	.+8      	; 0x786 <_ZN5Robot8mainMenuEv+0x2bc>
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	88 6f       	ori	r24, 0xF8	; 248
     782:	9f 6f       	ori	r25, 0xFF	; 255
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	fc 01       	movw	r30, r24
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	ec 5e       	subi	r30, 0xEC	; 236
     78e:	fe 4f       	sbci	r31, 0xFE	; 254
     790:	d1 01       	movw	r26, r2
     792:	4d 91       	ld	r20, X+
     794:	5c 91       	ld	r21, X
     796:	11 97       	sbiw	r26, 0x01	; 1
     798:	20 81       	ld	r18, Z
     79a:	31 81       	ldd	r19, Z+1	; 0x01
     79c:	24 0f       	add	r18, r20
     79e:	35 1f       	adc	r19, r21
     7a0:	3a 83       	std	Y+2, r19	; 0x02
     7a2:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = position.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	fc 01       	movw	r30, r24
     7aa:	ec 5d       	subi	r30, 0xDC	; 220
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	12 96       	adiw	r26, 0x02	; 2
     7b0:	2d 91       	ld	r18, X+
     7b2:	3c 91       	ld	r19, X
     7b4:	13 97       	sbiw	r26, 0x03	; 3
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	82 0f       	add	r24, r18
     7bc:	93 1f       	adc	r25, r19
     7be:	9c 83       	std	Y+4, r25	; 0x04
     7c0:	8b 83       	std	Y+3, r24	; 0x03

                short	currDist = getDist( currPos, to );
     7c2:	68 2d       	mov	r22, r8
     7c4:	79 2d       	mov	r23, r9
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
     7ce:	6c 01       	movw	r12, r24

                if ( doPrint )
     7d0:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     7d4:	88 23       	and	r24, r24
     7d6:	c1 f1       	breq	.+112    	; 0x848 <_ZN5Robot8mainMenuEv+0x37e>
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     7d8:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
     7dc:	81 e5       	ldi	r24, 0x51	; 81
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
     7e4:	69 81       	ldd	r22, Y+1	; 0x01
     7e6:	7a 81       	ldd	r23, Y+2	; 0x02
     7e8:	07 2e       	mov	r0, r23
     7ea:	00 0c       	add	r0, r0
     7ec:	88 0b       	sbc	r24, r24
     7ee:	99 0b       	sbc	r25, r25
     7f0:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
     7f4:	83 e5       	ldi	r24, 0x53	; 83
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
     7fc:	6b 81       	ldd	r22, Y+3	; 0x03
     7fe:	7c 81       	ldd	r23, Y+4	; 0x04
     800:	07 2e       	mov	r0, r23
     802:	00 0c       	add	r0, r0
     804:	88 0b       	sbc	r24, r24
     806:	99 0b       	sbc	r25, r25
     808:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
     80c:	86 e5       	ldi	r24, 0x56	; 86
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos );
                    lcd_goto_xy( 0, 1 );
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
                    print_long( currDist );
     81c:	b6 01       	movw	r22, r12
     81e:	0d 2c       	mov	r0, r13
     820:	00 0c       	add	r0, r0
     822:	88 0b       	sbc	r24, r24
     824:	99 0b       	sbc	r25, r25
     826:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    print( " | " );
     82a:	88 e7       	ldi	r24, 0x78	; 120
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                    print_long( minDist );
     832:	b7 01       	movw	r22, r14
     834:	0f 2c       	mov	r0, r15
     836:	00 0c       	add	r0, r0
     838:	88 0b       	sbc	r24, r24
     83a:	99 0b       	sbc	r25, r25
     83c:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    delay_ms( 4000 );
     840:	80 ea       	ldi	r24, 0xA0	; 160
     842:	9f e0       	ldi	r25, 0x0F	; 15
     844:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                }

                if ( currDist < minDist )
     848:	ce 14       	cp	r12, r14
     84a:	df 04       	cpc	r13, r15
     84c:	2c f4       	brge	.+10     	; 0x858 <_ZN5Robot8mainMenuEv+0x38e>
                {
                    minDist = currDist;
                    minPos	= currPos;
     84e:	49 80       	ldd	r4, Y+1	; 0x01
     850:	5a 80       	ldd	r5, Y+2	; 0x02
     852:	6b 80       	ldd	r6, Y+3	; 0x03
     854:	7c 80       	ldd	r7, Y+4	; 0x04
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     856:	76 01       	movw	r14, r12
     858:	c8 01       	movw	r24, r16
     85a:	01 96       	adiw	r24, 0x01	; 1
        {
            short	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	91 05       	cpc	r25, r1
     860:	09 f0       	breq	.+2      	; 0x864 <_ZN5Robot8mainMenuEv+0x39a>
     862:	86 cf       	rjmp	.-244    	; 0x770 <_ZN5Robot8mainMenuEv+0x2a6>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     864:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
     868:	82 01       	movw	r16, r4
     86a:	53 01       	movw	r10, r6
     86c:	8e c0       	rjmp	.+284    	; 0x98a <__stack+0x8b>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	minDist		= getDist( from, to );
     86e:	68 2d       	mov	r22, r8
     870:	79 2d       	mov	r23, r9
     872:	88 2d       	mov	r24, r8
     874:	99 2d       	mov	r25, r9
     876:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     87a:	7c 01       	movw	r14, r24
            Point2D	minPos( from );
     87c:	f1 01       	movw	r30, r2
     87e:	40 80       	ld	r4, Z
     880:	51 80       	ldd	r5, Z+1	; 0x01
     882:	62 80       	ldd	r6, Z+2	; 0x02
     884:	73 80       	ldd	r7, Z+3	; 0x03
            short	pos			= ( short )orientation;
     886:	a4 80       	ldd	r10, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
     888:	8f 85       	ldd	r24, Y+15	; 0x0f
     88a:	98 89       	ldd	r25, Y+16	; 0x10
            {
                Point2D currPos;

                currPos.x = position.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     88c:	b1 2c       	mov	r11, r1
     88e:	8c 01       	movw	r16, r24
     890:	8a 0d       	add	r24, r10
     892:	9b 1d       	adc	r25, r11
     894:	87 70       	andi	r24, 0x07	; 7
     896:	90 78       	andi	r25, 0x80	; 128
     898:	99 23       	and	r25, r25
     89a:	24 f4       	brge	.+8      	; 0x8a4 <_ZN5Robot8mainMenuEv+0x3da>
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	88 6f       	ori	r24, 0xF8	; 248
     8a0:	9f 6f       	ori	r25, 0xFF	; 255
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	fc 01       	movw	r30, r24
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ec 5e       	subi	r30, 0xEC	; 236
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	d1 01       	movw	r26, r2
     8b0:	4d 91       	ld	r20, X+
     8b2:	5c 91       	ld	r21, X
     8b4:	11 97       	sbiw	r26, 0x01	; 1
     8b6:	20 81       	ld	r18, Z
     8b8:	31 81       	ldd	r19, Z+1	; 0x01
     8ba:	24 0f       	add	r18, r20
     8bc:	35 1f       	adc	r19, r21
     8be:	3a 83       	std	Y+2, r19	; 0x02
     8c0:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = position.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	fc 01       	movw	r30, r24
     8c8:	ec 5d       	subi	r30, 0xDC	; 220
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	12 96       	adiw	r26, 0x02	; 2
     8ce:	2d 91       	ld	r18, X+
     8d0:	3c 91       	ld	r19, X
     8d2:	13 97       	sbiw	r26, 0x03	; 3
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	82 0f       	add	r24, r18
     8da:	93 1f       	adc	r25, r19
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	8b 83       	std	Y+3, r24	; 0x03

                short	currDist = getDist( currPos, to );
     8e0:	68 2d       	mov	r22, r8
     8e2:	79 2d       	mov	r23, r9
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     8ec:	6c 01       	movw	r12, r24

                if ( doPrint )
     8ee:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     8f2:	88 23       	and	r24, r24
     8f4:	c1 f1       	breq	.+112    	; 0x966 <__stack+0x67>
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     8f6:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
     8fa:	81 e5       	ldi	r24, 0x51	; 81
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
     902:	69 81       	ldd	r22, Y+1	; 0x01
     904:	7a 81       	ldd	r23, Y+2	; 0x02
     906:	07 2e       	mov	r0, r23
     908:	00 0c       	add	r0, r0
     90a:	88 0b       	sbc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
     912:	83 e5       	ldi	r24, 0x53	; 83
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
     91a:	6b 81       	ldd	r22, Y+3	; 0x03
     91c:	7c 81       	ldd	r23, Y+4	; 0x04
     91e:	07 2e       	mov	r0, r23
     920:	00 0c       	add	r0, r0
     922:	88 0b       	sbc	r24, r24
     924:	99 0b       	sbc	r25, r25
     926:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
     92a:	86 e5       	ldi	r24, 0x56	; 86
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos );
                    lcd_goto_xy( 0, 1 );
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
                    print_long( currDist );
     93a:	b6 01       	movw	r22, r12
     93c:	0d 2c       	mov	r0, r13
     93e:	00 0c       	add	r0, r0
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    print( " | " );
     948:	88 e7       	ldi	r24, 0x78	; 120
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                    print_long( minDist );
     950:	b7 01       	movw	r22, r14
     952:	0f 2c       	mov	r0, r15
     954:	00 0c       	add	r0, r0
     956:	88 0b       	sbc	r24, r24
     958:	99 0b       	sbc	r25, r25
     95a:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    delay_ms( 4000 );
     95e:	80 ea       	ldi	r24, 0xA0	; 160
     960:	9f e0       	ldi	r25, 0x0F	; 15
     962:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                }

                if ( currDist < minDist )
     966:	ce 14       	cp	r12, r14
     968:	df 04       	cpc	r13, r15
     96a:	2c f4       	brge	.+10     	; 0x976 <__stack+0x77>
                {
                    minDist = currDist;
                    minPos	= currPos;
     96c:	49 80       	ldd	r4, Y+1	; 0x01
     96e:	5a 80       	ldd	r5, Y+2	; 0x02
     970:	6b 80       	ldd	r6, Y+3	; 0x03
     972:	7c 80       	ldd	r7, Y+4	; 0x04
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     974:	76 01       	movw	r14, r12
     976:	c8 01       	movw	r24, r16
     978:	01 96       	adiw	r24, 0x01	; 1
        {
            short	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     97a:	88 30       	cpi	r24, 0x08	; 8
     97c:	91 05       	cpc	r25, r1
     97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x83>
     980:	86 cf       	rjmp	.-244    	; 0x88e <_ZN5Robot8mainMenuEv+0x3c4>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     982:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
     986:	82 01       	movw	r16, r4
     988:	53 01       	movw	r10, r6
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     98a:	f1 01       	movw	r30, r2
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	80 17       	cp	r24, r16
     992:	91 07       	cpc	r25, r17
     994:	09 f0       	breq	.+2      	; 0x998 <__stack+0x99>
     996:	90 c4       	rjmp	.+2336   	; 0x12b8 <__stack+0x9b9>
     998:	d1 01       	movw	r26, r2
     99a:	12 96       	adiw	r26, 0x02	; 2
     99c:	8d 91       	ld	r24, X+
     99e:	9c 91       	ld	r25, X
     9a0:	13 97       	sbiw	r26, 0x03	; 3
     9a2:	8a 15       	cp	r24, r10
     9a4:	9b 05       	cpc	r25, r11
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__stack+0xab>
     9a8:	87 c4       	rjmp	.+2318   	; 0x12b8 <__stack+0x9b9>
     9aa:	24 c1       	rjmp	.+584    	; 0xbf4 <__stack+0x2f5>

                case EOrientation::East:
                    return 0;

                case EOrientation::NorthEast:
                    return 45;
     9ac:	0f 2e       	mov	r0, r31
     9ae:	fd e2       	ldi	r31, 0x2D	; 45
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f1 2c       	mov	r15, r1
     9b4:	f0 2d       	mov	r31, r0
     9b6:	1a c0       	rjmp	.+52     	; 0x9ec <__stack+0xed>

                case EOrientation::North:
                    return 90;
     9b8:	0f 2e       	mov	r0, r31
     9ba:	fa e5       	ldi	r31, 0x5A	; 90
     9bc:	ef 2e       	mov	r14, r31
     9be:	f1 2c       	mov	r15, r1
     9c0:	f0 2d       	mov	r31, r0
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <__stack+0xed>

                case EOrientation::NorthWest:
                    return 135;
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f7 e8       	ldi	r31, 0x87	; 135
     9c8:	ef 2e       	mov	r14, r31
     9ca:	f0 2d       	mov	r31, r0
     9cc:	f1 2c       	mov	r15, r1
     9ce:	0e c0       	rjmp	.+28     	; 0x9ec <__stack+0xed>

                case EOrientation::West:
                    return 180;
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f4 eb       	ldi	r31, 0xB4	; 180
     9d4:	ef 2e       	mov	r14, r31
     9d6:	f0 2d       	mov	r31, r0
     9d8:	f1 2c       	mov	r15, r1
     9da:	08 c0       	rjmp	.+16     	; 0x9ec <__stack+0xed>

                case EOrientation::SouthWest:
                default:
                    return 225;
     9dc:	0f 2e       	mov	r0, r31
     9de:	f1 ee       	ldi	r31, 0xE1	; 225
     9e0:	ef 2e       	mov	r14, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	f1 2c       	mov	r15, r1
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0xed>

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     9e8:	ef 84       	ldd	r14, Y+15	; 0x0f
     9ea:	f8 88       	ldd	r15, Y+16	; 0x10
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     9ec:	f1 01       	movw	r30, r2
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	38 01       	movw	r6, r16
     9f4:	68 1a       	sub	r6, r24
     9f6:	79 0a       	sbc	r7, r25
            short	y			= -startPoint.y + endPoint.y;
     9f8:	82 81       	ldd	r24, Z+2	; 0x02
     9fa:	93 81       	ldd	r25, Z+3	; 0x03
     9fc:	95 01       	movw	r18, r10
     9fe:	28 1b       	sub	r18, r24
     a00:	39 0b       	sbc	r19, r25
     a02:	c9 01       	movw	r24, r18
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     a04:	61 14       	cp	r6, r1
     a06:	71 04       	cpc	r7, r1
     a08:	61 f4       	brne	.+24     	; 0xa22 <__stack+0x123>
            {
                if ( y > 0 )
     a0a:	18 16       	cp	r1, r24
     a0c:	19 06       	cpc	r1, r25
     a0e:	4c f1       	brlt	.+82     	; 0xa62 <__stack+0x163>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     a10:	99 23       	and	r25, r25
     a12:	6c f5       	brge	.+90     	; 0xa6e <__stack+0x16f>
                {
                    angle = -90;
     a14:	0f 2e       	mov	r0, r31
     a16:	f6 ea       	ldi	r31, 0xA6	; 166
     a18:	cf 2e       	mov	r12, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	dd 24       	eor	r13, r13
     a1e:	da 94       	dec	r13
     a20:	28 c0       	rjmp	.+80     	; 0xa72 <__stack+0x173>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     a22:	b3 01       	movw	r22, r6
     a24:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__divmodhi4>
     a28:	07 2e       	mov	r0, r23
     a2a:	00 0c       	add	r0, r0
     a2c:	88 0b       	sbc	r24, r24
     a2e:	99 0b       	sbc	r25, r25
     a30:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatsisf>
     a34:	0e 94 9a 0a 	call	0x1534	; 0x1534 <atan>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	44 e3       	ldi	r20, 0x34	; 52
     a3e:	53 e4       	ldi	r21, 0x43	; 67
     a40:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     a44:	2b ed       	ldi	r18, 0xDB	; 219
     a46:	3f e0       	ldi	r19, 0x0F	; 15
     a48:	49 e4       	ldi	r20, 0x49	; 73
     a4a:	50 e4       	ldi	r21, 0x40	; 64
     a4c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__divsf3>
     a50:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixsfsi>
     a54:	6b 01       	movw	r12, r22

                if ( x < 0 )
     a56:	77 20       	and	r7, r7
     a58:	64 f4       	brge	.+24     	; 0xa72 <__stack+0x173>
                {
                    angle += 180;
     a5a:	34 eb       	ldi	r19, 0xB4	; 180
     a5c:	c3 0e       	add	r12, r19
     a5e:	d1 1c       	adc	r13, r1
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <__stack+0x173>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     a62:	0f 2e       	mov	r0, r31
     a64:	fa e5       	ldi	r31, 0x5A	; 90
     a66:	cf 2e       	mov	r12, r31
     a68:	d1 2c       	mov	r13, r1
     a6a:	f0 2d       	mov	r31, r0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x173>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     a6e:	cf 84       	ldd	r12, Y+15	; 0x0f
     a70:	d8 88       	ldd	r13, Y+16	; 0x10
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     a72:	c7 01       	movw	r24, r14
     a74:	8c 19       	sub	r24, r12
     a76:	9d 09       	sbc	r25, r13
     a78:	6d e2       	ldi	r22, 0x2D	; 45
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__divmodhi4>
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatsisf>
     a8c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <round>
     a90:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixsfsi>
     a94:	7b 01       	movw	r14, r22

            if ( direction > 4 )
     a96:	65 30       	cpi	r22, 0x05	; 5
     a98:	71 05       	cpc	r23, r1
     a9a:	1c f0       	brlt	.+6      	; 0xaa2 <__stack+0x1a3>
            {
                direction = -8 + direction;
     a9c:	a8 e0       	ldi	r26, 0x08	; 8
     a9e:	ea 1a       	sub	r14, r26
     aa0:	f1 08       	sbc	r15, r1
            }

            if ( direction < -4 )
     aa2:	bc ef       	ldi	r27, 0xFC	; 252
     aa4:	eb 16       	cp	r14, r27
     aa6:	bf ef       	ldi	r27, 0xFF	; 255
     aa8:	fb 06       	cpc	r15, r27
     aaa:	1c f4       	brge	.+6      	; 0xab2 <__stack+0x1b3>
            {
                direction = 8 + direction;
     aac:	e8 e0       	ldi	r30, 0x08	; 8
     aae:	ee 0e       	add	r14, r30
     ab0:	f1 1c       	adc	r15, r1
            }

            clear();
     ab2:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print_long( direction );
     ab6:	b7 01       	movw	r22, r14
     ab8:	0f 2c       	mov	r0, r15
     aba:	00 0c       	add	r0, r0
     abc:	88 0b       	sbc	r24, r24
     abe:	99 0b       	sbc	r25, r25
     ac0:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            lcd_goto_xy( 0, 1 );
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
            print_long( angle );
     acc:	b6 01       	movw	r22, r12
     ace:	0d 2c       	mov	r0, r13
     ad0:	00 0c       	add	r0, r0
     ad2:	88 0b       	sbc	r24, r24
     ad4:	99 0b       	sbc	r25, r25
     ad6:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     ada:	fd e2       	ldi	r31, 0x2D	; 45
     adc:	cf 16       	cp	r12, r31
     ade:	d1 04       	cpc	r13, r1
     ae0:	81 f1       	breq	.+96     	; 0xb42 <__stack+0x243>
     ae2:	74 f4       	brge	.+28     	; 0xb00 <__stack+0x201>
     ae4:	33 ed       	ldi	r19, 0xD3	; 211
     ae6:	c3 16       	cp	r12, r19
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	d3 06       	cpc	r13, r19
     aec:	09 f1       	breq	.+66     	; 0xb30 <__stack+0x231>
     aee:	c1 14       	cp	r12, r1
     af0:	d1 04       	cpc	r13, r1
     af2:	11 f1       	breq	.+68     	; 0xb38 <__stack+0x239>
     af4:	46 ea       	ldi	r20, 0xA6	; 166
     af6:	c4 16       	cp	r12, r20
     af8:	4f ef       	ldi	r20, 0xFF	; 255
     afa:	d4 06       	cpc	r13, r20
     afc:	b9 f5       	brne	.+110    	; 0xb6c <__stack+0x26d>
     afe:	13 c0       	rjmp	.+38     	; 0xb26 <__stack+0x227>
     b00:	87 e8       	ldi	r24, 0x87	; 135
     b02:	c8 16       	cp	r12, r24
     b04:	d1 04       	cpc	r13, r1
     b06:	29 f1       	breq	.+74     	; 0xb52 <__stack+0x253>
     b08:	2c f4       	brge	.+10     	; 0xb14 <__stack+0x215>
     b0a:	aa e5       	ldi	r26, 0x5A	; 90
     b0c:	ca 16       	cp	r12, r26
     b0e:	d1 04       	cpc	r13, r1
     b10:	e1 f0       	breq	.+56     	; 0xb4a <__stack+0x24b>
     b12:	2c c0       	rjmp	.+88     	; 0xb6c <__stack+0x26d>
     b14:	b4 eb       	ldi	r27, 0xB4	; 180
     b16:	cb 16       	cp	r12, r27
     b18:	d1 04       	cpc	r13, r1
     b1a:	f9 f0       	breq	.+62     	; 0xb5a <__stack+0x25b>
     b1c:	e1 ee       	ldi	r30, 0xE1	; 225
     b1e:	ce 16       	cp	r12, r30
     b20:	d1 04       	cpc	r13, r1
     b22:	01 f1       	breq	.+64     	; 0xb64 <__stack+0x265>
     b24:	23 c0       	rjmp	.+70     	; 0xb6c <__stack+0x26d>
            {
                case -90:
                    orientation = EOrientation::South;
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	d1 01       	movw	r26, r2
     b2a:	14 96       	adiw	r26, 0x04	; 4
     b2c:	8c 93       	st	X, r24
     b2e:	1e c0       	rjmp	.+60     	; 0xb6c <__stack+0x26d>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	f1 01       	movw	r30, r2
     b34:	84 83       	std	Z+4, r24	; 0x04
     b36:	1a c0       	rjmp	.+52     	; 0xb6c <__stack+0x26d>
                    break;

                case 0:
                    orientation = EOrientation::East;
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	d1 01       	movw	r26, r2
     b3c:	14 96       	adiw	r26, 0x04	; 4
     b3e:	8c 93       	st	X, r24
     b40:	15 c0       	rjmp	.+42     	; 0xb6c <__stack+0x26d>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	f1 01       	movw	r30, r2
     b46:	84 83       	std	Z+4, r24	; 0x04
     b48:	11 c0       	rjmp	.+34     	; 0xb6c <__stack+0x26d>
                    break;

                case 90:
                    orientation = EOrientation::North;
     b4a:	d1 01       	movw	r26, r2
     b4c:	14 96       	adiw	r26, 0x04	; 4
     b4e:	1c 92       	st	X, r1
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__stack+0x26d>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     b52:	27 e0       	ldi	r18, 0x07	; 7
     b54:	f1 01       	movw	r30, r2
     b56:	24 83       	std	Z+4, r18	; 0x04
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <__stack+0x26d>
                    break;

                case 180:
                    orientation = EOrientation::West;
     b5a:	e6 e0       	ldi	r30, 0x06	; 6
     b5c:	d1 01       	movw	r26, r2
     b5e:	14 96       	adiw	r26, 0x04	; 4
     b60:	ec 93       	st	X, r30
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <__stack+0x26d>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     b64:	e5 e0       	ldi	r30, 0x05	; 5
     b66:	d1 01       	movw	r26, r2
     b68:	14 96       	adiw	r26, 0x04	; 4
     b6a:	ec 93       	st	X, r30
            print_long( angle );
            //delay_ms(1000);

            setDeviceOrientation( angle );

            if ( direction < 0 )
     b6c:	ff 20       	and	r15, r15
     b6e:	ec f4       	brge	.+58     	; 0xbaa <__stack+0x2ab>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     b70:	6a e2       	ldi	r22, 0x2A	; 42
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	86 ed       	ldi	r24, 0xD6	; 214
     b76:	9f ef       	ldi	r25, 0xFF	; 255
     b78:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>

            delay_ms( 200 * turns );
     b7c:	c7 01       	movw	r24, r14
     b7e:	99 23       	and	r25, r25
     b80:	24 f4       	brge	.+8      	; 0xb8a <__stack+0x28b>
     b82:	88 27       	eor	r24, r24
     b84:	99 27       	eor	r25, r25
     b86:	8e 19       	sub	r24, r14
     b88:	9f 09       	sbc	r25, r15
     b8a:	48 ec       	ldi	r20, 0xC8	; 200
     b8c:	9c 01       	movw	r18, r24
     b8e:	42 9f       	mul	r20, r18
     b90:	c0 01       	movw	r24, r0
     b92:	43 9f       	mul	r20, r19
     b94:	90 0d       	add	r25, r0
     b96:	11 24       	eor	r1, r1
     b98:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>

            set_motors( 0, 0 );
     b9c:	6f 85       	ldd	r22, Y+15	; 0x0f
     b9e:	78 89       	ldd	r23, Y+16	; 0x10
     ba0:	86 2f       	mov	r24, r22
     ba2:	97 2f       	mov	r25, r23
     ba4:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>
     ba8:	1f c0       	rjmp	.+62     	; 0xbe8 <__stack+0x2e9>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     baa:	1e 14       	cp	r1, r14
     bac:	1f 04       	cpc	r1, r15
     bae:	e4 f4       	brge	.+56     	; 0xbe8 <__stack+0x2e9>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     bb0:	66 ed       	ldi	r22, 0xD6	; 214
     bb2:	7f ef       	ldi	r23, 0xFF	; 255
     bb4:	8a e2       	ldi	r24, 0x2A	; 42
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>

            delay_ms( 200 * turns );
     bbc:	c7 01       	movw	r24, r14
     bbe:	99 23       	and	r25, r25
     bc0:	24 f4       	brge	.+8      	; 0xbca <__stack+0x2cb>
     bc2:	88 27       	eor	r24, r24
     bc4:	99 27       	eor	r25, r25
     bc6:	8e 19       	sub	r24, r14
     bc8:	9f 09       	sbc	r25, r15
     bca:	e8 ec       	ldi	r30, 0xC8	; 200
     bcc:	dc 01       	movw	r26, r24
     bce:	ea 9f       	mul	r30, r26
     bd0:	c0 01       	movw	r24, r0
     bd2:	eb 9f       	mul	r30, r27
     bd4:	90 0d       	add	r25, r0
     bd6:	11 24       	eor	r1, r1
     bd8:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>

            set_motors( 0, 0 );
     bdc:	6f 85       	ldd	r22, Y+15	; 0x0f
     bde:	78 89       	ldd	r23, Y+16	; 0x10
     be0:	86 2f       	mov	r24, r22
     be2:	97 2f       	mov	r25, r23
     be4:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     be8:	6f 85       	ldd	r22, Y+15	; 0x0f
     bea:	78 89       	ldd	r23, Y+16	; 0x10
     bec:	86 2f       	mov	r24, r22
     bee:	97 2f       	mov	r25, r23
     bf0:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensors[ 5 ];
            read_line_sensors( sensors, IR_EMITTERS_ON );
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	0e 94 4b 14 	call	0x2896	; 0x2896 <read_line_sensors>

            if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	81 3b       	cpi	r24, 0xB1	; 177
     c04:	94 40       	sbci	r25, 0x04	; 4
     c06:	50 f4       	brcc	.+20     	; 0xc1c <__stack+0x31d>
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	81 3b       	cpi	r24, 0xB1	; 177
     c0e:	94 40       	sbci	r25, 0x04	; 4
     c10:	28 f4       	brcc	.+10     	; 0xc1c <__stack+0x31d>
     c12:	8f 81       	ldd	r24, Y+7	; 0x07
     c14:	98 85       	ldd	r25, Y+8	; 0x08
     c16:	81 3b       	cpi	r24, 0xB1	; 177
     c18:	94 40       	sbci	r25, 0x04	; 4
     c1a:	30 f1       	brcs	.+76     	; 0xc68 <__stack+0x369>
            {
                clear();
     c1c:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
                print( "!OBS!" );
     c20:	8c e7       	ldi	r24, 0x7C	; 124
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                delay_ms( 1000 );
     c28:	88 ee       	ldi	r24, 0xE8	; 232
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     c30:	f5 01       	movw	r30, r10
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ea 0d       	add	r30, r10
     c38:	fb 1d       	adc	r31, r11
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	2a e5       	ldi	r18, 0x5A	; 90
     c40:	20 9f       	mul	r18, r16
     c42:	c0 01       	movw	r24, r0
     c44:	21 9f       	mul	r18, r17
     c46:	90 0d       	add	r25, r0
     c48:	11 24       	eor	r1, r1
     c4a:	e8 0f       	add	r30, r24
     c4c:	f9 1f       	adc	r31, r25
     c4e:	ef 50       	subi	r30, 0x0F	; 15
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	84 83       	std	Z+4, r24	; 0x04
     c56:	8b 89       	ldd	r24, Y+19	; 0x13
     c58:	9c 89       	ldd	r25, Y+20	; 0x14
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	9c 8b       	std	Y+20, r25	; 0x14
     c5e:	8b 8b       	std	Y+19, r24	; 0x13
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     c60:	89 2b       	or	r24, r25
     c62:	09 f0       	breq	.+2      	; 0xc66 <__stack+0x367>
     c64:	e0 cc       	rjmp	.-1600   	; 0x626 <_ZN5Robot8mainMenuEv+0x15c>
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <__stack+0x37d>
                delay_ms( 1000 );

                return false;
            }

            clear();
     c68:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "NOT OBS" );
     c6c:	82 e8       	ldi	r24, 0x82	; 130
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            delay_ms( 1000 );
     c74:	88 ee       	ldi	r24, 0xE8	; 232
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     c7c:	1c 87       	std	Y+12, r17	; 0x0c
     c7e:	0b 87       	std	Y+11, r16	; 0x0b
     c80:	be 86       	std	Y+14, r11	; 0x0e
     c82:	ad 86       	std	Y+13, r10	; 0x0d
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     c84:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
     c88:	81 e5       	ldi	r24, 0x51	; 81
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
     c90:	6b 85       	ldd	r22, Y+11	; 0x0b
     c92:	7c 85       	ldd	r23, Y+12	; 0x0c
     c94:	07 2e       	mov	r0, r23
     c96:	00 0c       	add	r0, r0
     c98:	88 0b       	sbc	r24, r24
     c9a:	99 0b       	sbc	r25, r25
     c9c:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
     ca0:	83 e5       	ldi	r24, 0x53	; 83
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
     ca8:	6d 85       	ldd	r22, Y+13	; 0x0d
     caa:	7e 85       	ldd	r23, Y+14	; 0x0e
     cac:	07 2e       	mov	r0, r23
     cae:	00 0c       	add	r0, r0
     cb0:	88 0b       	sbc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
     cb8:	86 e5       	ldi	r24, 0x56	; 86
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );

            printPos( nextPos );
            delay_ms( 1000 );
     cc0:	88 ee       	ldi	r24, 0xE8	; 232
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ccc:	2b 85       	ldd	r18, Y+11	; 0x0b
     cce:	3c 85       	ldd	r19, Y+12	; 0x0c
     cd0:	ac 01       	movw	r20, r24
     cd2:	44 0f       	add	r20, r20
     cd4:	55 1f       	adc	r21, r21
     cd6:	84 0f       	add	r24, r20
     cd8:	95 1f       	adc	r25, r21
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	4a e5       	ldi	r20, 0x5A	; 90
     ce0:	42 9f       	mul	r20, r18
     ce2:	f0 01       	movw	r30, r0
     ce4:	43 9f       	mul	r20, r19
     ce6:	f0 0d       	add	r31, r0
     ce8:	11 24       	eor	r1, r1
     cea:	8e 0f       	add	r24, r30
     cec:	9f 1f       	adc	r25, r31
     cee:	fc 01       	movw	r30, r24
     cf0:	ef 50       	subi	r30, 0x0F	; 15
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	85 81       	ldd	r24, Z+5	; 0x05
     cf6:	81 11       	cpse	r24, r1
     cf8:	f9 c0       	rjmp	.+498    	; 0xeec <__stack+0x5ed>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	minDist		= getDist( from, to );
     cfa:	be 01       	movw	r22, r28
     cfc:	65 5f       	subi	r22, 0xF5	; 245
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	cb 01       	movw	r24, r22
     d02:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     d06:	7c 01       	movw	r14, r24
            Point2D	minPos( from );
     d08:	4b 84       	ldd	r4, Y+11	; 0x0b
     d0a:	5c 84       	ldd	r5, Y+12	; 0x0c
     d0c:	6d 84       	ldd	r6, Y+13	; 0x0d
     d0e:	7e 84       	ldd	r7, Y+14	; 0x0e
            short	pos			= ( short )orientation;
     d10:	d1 01       	movw	r26, r2
     d12:	14 96       	adiw	r26, 0x04	; 4
     d14:	0c 91       	ld	r16, X

            for ( short i = 0; i < 8; i++ )
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = position.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	6c 01       	movw	r12, r24
     d1e:	80 0f       	add	r24, r16
     d20:	91 1f       	adc	r25, r17
     d22:	87 70       	andi	r24, 0x07	; 7
     d24:	90 78       	andi	r25, 0x80	; 128
     d26:	99 23       	and	r25, r25
     d28:	24 f4       	brge	.+8      	; 0xd32 <__stack+0x433>
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	88 6f       	ori	r24, 0xF8	; 248
     d2e:	9f 6f       	ori	r25, 0xFF	; 255
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	fc 01       	movw	r30, r24
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	ec 5e       	subi	r30, 0xEC	; 236
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	d1 01       	movw	r26, r2
     d3e:	4d 91       	ld	r20, X+
     d40:	5c 91       	ld	r21, X
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	20 81       	ld	r18, Z
     d46:	31 81       	ldd	r19, Z+1	; 0x01
     d48:	24 0f       	add	r18, r20
     d4a:	35 1f       	adc	r19, r21
     d4c:	3a 83       	std	Y+2, r19	; 0x02
     d4e:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = position.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	fc 01       	movw	r30, r24
     d56:	ec 5d       	subi	r30, 0xDC	; 220
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	2d 91       	ld	r18, X+
     d5e:	3c 91       	ld	r19, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03

                short	currDist = getDist( currPos, to );
     d6e:	be 01       	movw	r22, r28
     d70:	65 5f       	subi	r22, 0xF5	; 245
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     d7c:	5c 01       	movw	r10, r24

                if ( doPrint )
     d7e:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
     d82:	88 23       	and	r24, r24
     d84:	c1 f1       	breq	.+112    	; 0xdf6 <__stack+0x4f7>
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     d86:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
     d8a:	81 e5       	ldi	r24, 0x51	; 81
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
     d92:	69 81       	ldd	r22, Y+1	; 0x01
     d94:	7a 81       	ldd	r23, Y+2	; 0x02
     d96:	07 2e       	mov	r0, r23
     d98:	00 0c       	add	r0, r0
     d9a:	88 0b       	sbc	r24, r24
     d9c:	99 0b       	sbc	r25, r25
     d9e:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
     da2:	83 e5       	ldi	r24, 0x53	; 83
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
     daa:	6b 81       	ldd	r22, Y+3	; 0x03
     dac:	7c 81       	ldd	r23, Y+4	; 0x04
     dae:	07 2e       	mov	r0, r23
     db0:	00 0c       	add	r0, r0
     db2:	88 0b       	sbc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
     dba:	86 e5       	ldi	r24, 0x56	; 86
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos );
                    lcd_goto_xy( 0, 1 );
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
                    print_long( currDist );
     dca:	b5 01       	movw	r22, r10
     dcc:	0b 2c       	mov	r0, r11
     dce:	00 0c       	add	r0, r0
     dd0:	88 0b       	sbc	r24, r24
     dd2:	99 0b       	sbc	r25, r25
     dd4:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    print( " | " );
     dd8:	88 e7       	ldi	r24, 0x78	; 120
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                    print_long( minDist );
     de0:	b7 01       	movw	r22, r14
     de2:	0f 2c       	mov	r0, r15
     de4:	00 0c       	add	r0, r0
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    delay_ms( 4000 );
     dee:	80 ea       	ldi	r24, 0xA0	; 160
     df0:	9f e0       	ldi	r25, 0x0F	; 15
     df2:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                }

                if ( currDist < minDist )
     df6:	ae 14       	cp	r10, r14
     df8:	bf 04       	cpc	r11, r15
     dfa:	2c f4       	brge	.+10     	; 0xe06 <__stack+0x507>
                {
                    minDist = currDist;
                    minPos	= currPos;
     dfc:	49 80       	ldd	r4, Y+1	; 0x01
     dfe:	5a 80       	ldd	r5, Y+2	; 0x02
     e00:	6b 80       	ldd	r6, Y+3	; 0x03
     e02:	7c 80       	ldd	r7, Y+4	; 0x04
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     e04:	75 01       	movw	r14, r10
     e06:	c6 01       	movw	r24, r12
     e08:	01 96       	adiw	r24, 0x01	; 1
        {
            short	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <__stack+0x513>
     e10:	85 cf       	rjmp	.-246    	; 0xd1c <__stack+0x41d>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     e12:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1e:	ac 01       	movw	r20, r24
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	48 0f       	add	r20, r24
     e26:	59 1f       	adc	r21, r25
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	1a e5       	ldi	r17, 0x5A	; 90
     e2e:	16 9f       	mul	r17, r22
     e30:	90 01       	movw	r18, r0
     e32:	17 9f       	mul	r17, r23
     e34:	30 0d       	add	r19, r0
     e36:	11 24       	eor	r1, r1
     e38:	24 0f       	add	r18, r20
     e3a:	35 1f       	adc	r19, r21
     e3c:	d9 01       	movw	r26, r18
     e3e:	af 50       	subi	r26, 0x0F	; 15
     e40:	be 4f       	sbci	r27, 0xFE	; 254
     e42:	ed 90       	ld	r14, X+
     e44:	fc 90       	ld	r15, X
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     e46:	a3 01       	movw	r20, r6
     e48:	44 0f       	add	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	46 0d       	add	r20, r6
     e4e:	57 1d       	adc	r21, r7
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	14 9d       	mul	r17, r4
     e56:	90 01       	movw	r18, r0
     e58:	15 9d       	mul	r17, r5
     e5a:	30 0d       	add	r19, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	24 0f       	add	r18, r20
     e60:	35 1f       	adc	r19, r21
     e62:	2f 50       	subi	r18, 0x0F	; 15
     e64:	3e 4f       	sbci	r19, 0xFE	; 254
     e66:	d9 01       	movw	r26, r18
     e68:	2d 91       	ld	r18, X+
     e6a:	3c 91       	ld	r19, X
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     e6c:	64 15       	cp	r22, r4
     e6e:	75 05       	cpc	r23, r5
     e70:	31 f0       	breq	.+12     	; 0xe7e <__stack+0x57f>
     e72:	86 15       	cp	r24, r6
     e74:	97 05       	cpc	r25, r7
     e76:	49 f4       	brne	.+18     	; 0xe8a <__stack+0x58b>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     e78:	42 e0       	ldi	r20, 0x02	; 2
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	0b c0       	rjmp	.+22     	; 0xe94 <__stack+0x595>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     e7e:	86 15       	cp	r24, r6
     e80:	97 05       	cpc	r25, r7
     e82:	31 f0       	breq	.+12     	; 0xe90 <__stack+0x591>
            {
                distance = 2;
     e84:	42 e0       	ldi	r20, 0x02	; 2
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <__stack+0x595>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     e8a:	43 e0       	ldi	r20, 0x03	; 3
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <__stack+0x595>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	50 e0       	ldi	r21, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     e94:	24 0f       	add	r18, r20
     e96:	35 1f       	adc	r19, r21

                if ( savedDist > currDist )
     e98:	2e 15       	cp	r18, r14
     e9a:	3f 05       	cpc	r19, r15
     e9c:	9c f4       	brge	.+38     	; 0xec4 <__stack+0x5c5>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     e9e:	fc 01       	movw	r30, r24
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e8 0f       	add	r30, r24
     ea6:	f9 1f       	adc	r31, r25
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	aa e5       	ldi	r26, 0x5A	; 90
     eae:	a6 9f       	mul	r26, r22
     eb0:	a0 01       	movw	r20, r0
     eb2:	a7 9f       	mul	r26, r23
     eb4:	50 0d       	add	r21, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	e4 0f       	add	r30, r20
     eba:	f5 1f       	adc	r31, r21
     ebc:	ef 50       	subi	r30, 0x0F	; 15
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	31 83       	std	Z+1, r19	; 0x01
     ec2:	20 83       	st	Z, r18
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     ec4:	9c 01       	movw	r18, r24
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	82 0f       	add	r24, r18
     ecc:	93 1f       	adc	r25, r19
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	2a e5       	ldi	r18, 0x5A	; 90
     ed4:	26 9f       	mul	r18, r22
     ed6:	f0 01       	movw	r30, r0
     ed8:	27 9f       	mul	r18, r23
     eda:	f0 0d       	add	r31, r0
     edc:	11 24       	eor	r1, r1
     ede:	8e 0f       	add	r24, r30
     ee0:	9f 1f       	adc	r25, r31
     ee2:	fc 01       	movw	r30, r24
     ee4:	ef 50       	subi	r30, 0x0F	; 15
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	85 83       	std	Z+5, r24	; 0x05
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     eec:	f1 01       	movw	r30, r2
     eee:	20 81       	ld	r18, Z
     ef0:	31 81       	ldd	r19, Z+1	; 0x01
     ef2:	85 81       	ldd	r24, Z+5	; 0x05
     ef4:	96 81       	ldd	r25, Z+6	; 0x06
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	39 f4       	brne	.+14     	; 0xf0a <__stack+0x60b>

                matrix[nextPos.x][nextPos.y].isVisited = true;
            }

            // Move until stepping on the goal position
            if ( position != goalPos )
     efc:	22 81       	ldd	r18, Z+2	; 0x02
     efe:	33 81       	ldd	r19, Z+3	; 0x03
     f00:	87 81       	ldd	r24, Z+7	; 0x07
     f02:	90 85       	ldd	r25, Z+8	; 0x08
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	e1 f1       	breq	.+120    	; 0xf82 <__stack+0x683>
            {
                position = nextPos;
     f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f0e:	ad 85       	ldd	r26, Y+13	; 0x0d
     f10:	be 85       	ldd	r27, Y+14	; 0x0e
     f12:	f1 01       	movw	r30, r2
     f14:	80 83       	st	Z, r24
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	a2 83       	std	Z+2, r26	; 0x02
     f1a:	b3 83       	std	Z+3, r27	; 0x03
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 19, 19 );
     f1c:	63 e1       	ldi	r22, 0x13	; 19
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	83 e1       	ldi	r24, 0x13	; 19
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	8d 89       	ldd	r24, Y+21	; 0x15
     f2c:	9e 89       	ldd	r25, Y+22	; 0x16
     f2e:	0e 94 4b 14 	call	0x2896	; 0x2896 <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     f32:	d1 01       	movw	r26, r2
     f34:	1b 96       	adiw	r26, 0x0b	; 11
     f36:	8d 91       	ld	r24, X+
     f38:	9c 91       	ld	r25, X
     f3a:	1c 97       	sbiw	r26, 0x0c	; 12
     f3c:	81 3b       	cpi	r24, 0xB1	; 177
     f3e:	b4 e0       	ldi	r27, 0x04	; 4
     f40:	9b 07       	cpc	r25, r27
     f42:	88 f4       	brcc	.+34     	; 0xf66 <__stack+0x667>
     f44:	f1 01       	movw	r30, r2
     f46:	25 85       	ldd	r18, Z+13	; 0x0d
     f48:	36 85       	ldd	r19, Z+14	; 0x0e
            {
                return true;
            }
            else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     f4a:	8f 35       	cpi	r24, 0x5F	; 95
     f4c:	91 40       	sbci	r25, 0x01	; 1
     f4e:	58 f4       	brcc	.+22     	; 0xf66 <__stack+0x667>
     f50:	2f 35       	cpi	r18, 0x5F	; 95
     f52:	31 40       	sbci	r19, 0x01	; 1
     f54:	40 f4       	brcc	.+16     	; 0xf66 <__stack+0x667>

        void moveForward()
        {
            set_motors( 19, 19 );

            while ( !isOnMarker() ) {}
     f56:	d1 01       	movw	r26, r2
     f58:	1f 96       	adiw	r26, 0x0f	; 15
     f5a:	8d 91       	ld	r24, X+
     f5c:	9c 91       	ld	r25, X
     f5e:	50 97       	sbiw	r26, 0x10	; 16
     f60:	8f 35       	cpi	r24, 0x5F	; 95
     f62:	91 40       	sbci	r25, 0x01	; 1
     f64:	08 f3       	brcs	.-62     	; 0xf28 <__stack+0x629>

            play( ">>a32" );
     f66:	82 e7       	ldi	r24, 0x72	; 114
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 3b 11 	call	0x2276	; 0x2276 <play>
            delay_ms( 900 );
     f6e:	84 e8       	ldi	r24, 0x84	; 132
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
            set_motors( 0, 0 );
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     f82:	f1 01       	movw	r30, r2
     f84:	20 81       	ld	r18, Z
     f86:	31 81       	ldd	r19, Z+1	; 0x01
     f88:	85 81       	ldd	r24, Z+5	; 0x05
     f8a:	96 81       	ldd	r25, Z+6	; 0x06
     f8c:	28 17       	cp	r18, r24
     f8e:	39 07       	cpc	r19, r25
     f90:	09 f0       	breq	.+2      	; 0xf94 <__stack+0x695>
     f92:	2b cb       	rjmp	.-2474   	; 0x5ea <_ZN5Robot8mainMenuEv+0x120>
     f94:	42 81       	ldd	r20, Z+2	; 0x02
     f96:	53 81       	ldd	r21, Z+3	; 0x03
     f98:	87 81       	ldd	r24, Z+7	; 0x07
     f9a:	90 85       	ldd	r25, Z+8	; 0x08
     f9c:	48 17       	cp	r20, r24
     f9e:	59 07       	cpc	r21, r25
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__stack+0x6a5>
     fa2:	23 cb       	rjmp	.-2490   	; 0x5ea <_ZN5Robot8mainMenuEv+0x120>
     fa4:	a4 c1       	rjmp	.+840    	; 0x12ee <__stack+0x9ef>

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
     fa6:	b4 01       	movw	r22, r8
     fa8:	64 1b       	sub	r22, r20
     faa:	75 0b       	sbc	r23, r21
     fac:	fc 01       	movw	r30, r24
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	b2 9e       	mul	r11, r18
     fbc:	a0 01       	movw	r20, r0
     fbe:	b3 9e       	mul	r11, r19
     fc0:	50 0d       	add	r21, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	e4 0f       	add	r30, r20
     fc6:	f5 1f       	adc	r31, r21
     fc8:	ef 50       	subi	r30, 0x0F	; 15
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	42 81       	ldd	r20, Z+2	; 0x02
     fce:	53 81       	ldd	r21, Z+3	; 0x03
     fd0:	46 17       	cp	r20, r22
     fd2:	57 07       	cpc	r21, r23
     fd4:	a4 f4       	brge	.+40     	; 0xffe <__stack+0x6ff>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     fd6:	ac 01       	movw	r20, r24
     fd8:	44 0f       	add	r20, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	84 0f       	add	r24, r20
     fde:	95 1f       	adc	r25, r21
     fe0:	fc 01       	movw	r30, r24
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	b2 9e       	mul	r11, r18
     fe8:	c0 01       	movw	r24, r0
     fea:	b3 9e       	mul	r11, r19
     fec:	90 0d       	add	r25, r0
     fee:	11 24       	eor	r1, r1
     ff0:	8e 0f       	add	r24, r30
     ff2:	9f 1f       	adc	r25, r31
     ff4:	fc 01       	movw	r30, r24
     ff6:	ef 50       	subi	r30, 0x0F	; 15
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	73 83       	std	Z+3, r23	; 0x03
     ffc:	62 83       	std	Z+2, r22	; 0x02
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	minDist		= getDist( from, to );
     ffe:	be 01       	movw	r22, r28
    1000:	65 5f       	subi	r22, 0xF5	; 245
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	cb 01       	movw	r24, r22
    1006:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    100a:	8c 01       	movw	r16, r24
            Point2D	minPos( from );
    100c:	4b 84       	ldd	r4, Y+11	; 0x0b
    100e:	5c 84       	ldd	r5, Y+12	; 0x0c
    1010:	6d 84       	ldd	r6, Y+13	; 0x0d
    1012:	7e 84       	ldd	r7, Y+14	; 0x0e
            short	pos			= ( short )orientation;
    1014:	d1 01       	movw	r26, r2
    1016:	14 96       	adiw	r26, 0x04	; 4
    1018:	2c 91       	ld	r18, X

            for ( short i = 0; i < 8; i++ )
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = position.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
    101e:	c2 2e       	mov	r12, r18
    1020:	d1 2c       	mov	r13, r1
    1022:	bf 86       	std	Y+15, r11	; 0x0f
    1024:	5c 01       	movw	r10, r24
    1026:	8c 0d       	add	r24, r12
    1028:	9d 1d       	adc	r25, r13
    102a:	87 70       	andi	r24, 0x07	; 7
    102c:	90 78       	andi	r25, 0x80	; 128
    102e:	99 23       	and	r25, r25
    1030:	24 f4       	brge	.+8      	; 0x103a <__stack+0x73b>
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	88 6f       	ori	r24, 0xF8	; 248
    1036:	9f 6f       	ori	r25, 0xFF	; 255
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	fc 01       	movw	r30, r24
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	ec 5e       	subi	r30, 0xEC	; 236
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	d1 01       	movw	r26, r2
    1046:	4d 91       	ld	r20, X+
    1048:	5c 91       	ld	r21, X
    104a:	11 97       	sbiw	r26, 0x01	; 1
    104c:	20 81       	ld	r18, Z
    104e:	31 81       	ldd	r19, Z+1	; 0x01
    1050:	24 0f       	add	r18, r20
    1052:	35 1f       	adc	r19, r21
    1054:	3a 83       	std	Y+2, r19	; 0x02
    1056:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = position.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	fc 01       	movw	r30, r24
    105e:	ec 5d       	subi	r30, 0xDC	; 220
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	2d 91       	ld	r18, X+
    1066:	3c 91       	ld	r19, X
    1068:	13 97       	sbiw	r26, 0x03	; 3
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	82 0f       	add	r24, r18
    1070:	93 1f       	adc	r25, r19
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03

                short	currDist = getDist( currPos, to );
    1076:	be 01       	movw	r22, r28
    1078:	65 5f       	subi	r22, 0xF5	; 245
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	ce 01       	movw	r24, r28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    1084:	7c 01       	movw	r14, r24

                if ( doPrint )
    1086:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <doPrint>
    108a:	88 23       	and	r24, r24
    108c:	c1 f1       	breq	.+112    	; 0x10fe <__stack+0x7ff>
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
    108e:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print( "(" );
    1092:	81 e5       	ldi	r24, 0x51	; 81
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.x );
    109a:	69 81       	ldd	r22, Y+1	; 0x01
    109c:	7a 81       	ldd	r23, Y+2	; 0x02
    109e:	07 2e       	mov	r0, r23
    10a0:	00 0c       	add	r0, r0
    10a2:	88 0b       	sbc	r24, r24
    10a4:	99 0b       	sbc	r25, r25
    10a6:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ", " );
    10aa:	83 e5       	ldi	r24, 0x53	; 83
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            print_long( pos.y );
    10b2:	6b 81       	ldd	r22, Y+3	; 0x03
    10b4:	7c 81       	ldd	r23, Y+4	; 0x04
    10b6:	07 2e       	mov	r0, r23
    10b8:	00 0c       	add	r0, r0
    10ba:	88 0b       	sbc	r24, r24
    10bc:	99 0b       	sbc	r25, r25
    10be:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( ")" );
    10c2:	86 e5       	ldi	r24, 0x56	; 86
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                short	currDist = getDist( currPos, to );

                if ( doPrint )
                {
                    printPos( currPos );
                    lcd_goto_xy( 0, 1 );
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 cb 12 	call	0x2596	; 0x2596 <lcd_goto_xy>
                    print_long( currDist );
    10d2:	b7 01       	movw	r22, r14
    10d4:	0f 2c       	mov	r0, r15
    10d6:	00 0c       	add	r0, r0
    10d8:	88 0b       	sbc	r24, r24
    10da:	99 0b       	sbc	r25, r25
    10dc:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    print( " | " );
    10e0:	88 e7       	ldi	r24, 0x78	; 120
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                    print_long( minDist );
    10e8:	b8 01       	movw	r22, r16
    10ea:	01 2e       	mov	r0, r17
    10ec:	00 0c       	add	r0, r0
    10ee:	88 0b       	sbc	r24, r24
    10f0:	99 0b       	sbc	r25, r25
    10f2:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
                    delay_ms( 4000 );
    10f6:	80 ea       	ldi	r24, 0xA0	; 160
    10f8:	9f e0       	ldi	r25, 0x0F	; 15
    10fa:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                }

                if ( currDist < minDist )
    10fe:	e0 16       	cp	r14, r16
    1100:	f1 06       	cpc	r15, r17
    1102:	2c f4       	brge	.+10     	; 0x110e <__stack+0x80f>
                {
                    minDist = currDist;
                    minPos	= currPos;
    1104:	49 80       	ldd	r4, Y+1	; 0x01
    1106:	5a 80       	ldd	r5, Y+2	; 0x02
    1108:	6b 80       	ldd	r6, Y+3	; 0x03
    110a:	7c 80       	ldd	r7, Y+4	; 0x04
                    delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
    110c:	87 01       	movw	r16, r14
    110e:	c5 01       	movw	r24, r10
    1110:	01 96       	adiw	r24, 0x01	; 1
        {
            short	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
    1112:	88 30       	cpi	r24, 0x08	; 8
    1114:	91 05       	cpc	r25, r1
    1116:	09 f0       	breq	.+2      	; 0x111a <__stack+0x81b>
    1118:	85 cf       	rjmp	.-246    	; 0x1024 <__stack+0x725>
    111a:	bf 84       	ldd	r11, Y+15	; 0x0f
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
    111c:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <doPrint>
                if ( currCell.distToFinish < dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
    1120:	4b 86       	std	Y+11, r4	; 0x0b
    1122:	5c 86       	std	Y+12, r5	; 0x0c
    1124:	6d 86       	std	Y+13, r6	; 0x0d
    1126:	7e 86       	std	Y+14, r7	; 0x0e
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    1128:	24 2d       	mov	r18, r4
    112a:	35 2d       	mov	r19, r5
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	fc 01       	movw	r30, r24
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	e8 0f       	add	r30, r24
    1138:	f9 1f       	adc	r31, r25
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	b2 9e       	mul	r11, r18
    1140:	a0 01       	movw	r20, r0
    1142:	b3 9e       	mul	r11, r19
    1144:	50 0d       	add	r21, r0
    1146:	11 24       	eor	r1, r1
    1148:	e4 0f       	add	r30, r20
    114a:	f5 1f       	adc	r31, r21
    114c:	ef 50       	subi	r30, 0x0F	; 15
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	40 81       	ld	r20, Z
    1152:	51 81       	ldd	r21, Z+1	; 0x01
    1154:	41 15       	cp	r20, r1
    1156:	51 05       	cpc	r21, r1
    1158:	09 f0       	breq	.+2      	; 0x115c <__stack+0x85d>
    115a:	25 cf       	rjmp	.-438    	; 0xfa6 <__stack+0x6a7>
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish < dist - currCell.distToStart )
    115c:	fc 01       	movw	r30, r24
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	e8 0f       	add	r30, r24
    1164:	f9 1f       	adc	r31, r25
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	6a e5       	ldi	r22, 0x5A	; 90
    116c:	62 9f       	mul	r22, r18
    116e:	a0 01       	movw	r20, r0
    1170:	63 9f       	mul	r22, r19
    1172:	50 0d       	add	r21, r0
    1174:	11 24       	eor	r1, r1
    1176:	e4 0f       	add	r30, r20
    1178:	f5 1f       	adc	r31, r21
    117a:	ef 50       	subi	r30, 0x0F	; 15
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	42 81       	ldd	r20, Z+2	; 0x02
    1180:	53 81       	ldd	r21, Z+3	; 0x03
    1182:	48 15       	cp	r20, r8
    1184:	59 05       	cpc	r21, r9
    1186:	9c f4       	brge	.+38     	; 0x11ae <__stack+0x8af>
            {
                currCell.distToFinish = dist - currCell.distToStart;
    1188:	fc 01       	movw	r30, r24
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	e8 0f       	add	r30, r24
    1190:	f9 1f       	adc	r31, r25
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	4a e5       	ldi	r20, 0x5A	; 90
    1198:	42 9f       	mul	r20, r18
    119a:	c0 01       	movw	r24, r0
    119c:	43 9f       	mul	r20, r19
    119e:	90 0d       	add	r25, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	e8 0f       	add	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	ef 50       	subi	r30, 0x0F	; 15
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	93 82       	std	Z+3, r9	; 0x03
    11ac:	82 82       	std	Z+2, r8	; 0x02

        void reverseDirection()
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );
    11ae:	f1 01       	movw	r30, r2
    11b0:	b5 80       	ldd	r11, Z+5	; 0x05
    11b2:	c6 80       	ldd	r12, Z+6	; 0x06
    11b4:	d7 80       	ldd	r13, Z+7	; 0x07
    11b6:	00 85       	ldd	r16, Z+8	; 0x08
    11b8:	61 ef       	ldi	r22, 0xF1	; 241
    11ba:	71 e0       	ldi	r23, 0x01	; 1

            for ( short i = 0; i < MAX_ROWS; i++ )
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	fb 01       	movw	r30, r22
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    11c6:	92 2e       	mov	r9, r18
    11c8:	a3 2e       	mov	r10, r19
    11ca:	df 01       	movw	r26, r30

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
    11cc:	45 81       	ldd	r20, Z+5	; 0x05
    11ce:	44 23       	and	r20, r20
    11d0:	b1 f0       	breq	.+44     	; 0x11fe <__stack+0x8ff>
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    11d2:	e0 80       	ld	r14, Z
    11d4:	f1 80       	ldd	r15, Z+1	; 0x01
    11d6:	e1 14       	cp	r14, r1
    11d8:	f1 04       	cpc	r15, r1
    11da:	21 f4       	brne	.+8      	; 0x11e4 <__stack+0x8e5>
    11dc:	d8 2e       	mov	r13, r24
    11de:	09 2f       	mov	r16, r25
    11e0:	b9 2c       	mov	r11, r9
    11e2:	ca 2c       	mov	r12, r10
                        {
                            // Save the start position.
                            startPos = Point2D( i, j );
                        }

                        short tmp						= matrix[ i ][ j ].distToFinish;
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	4d 91       	ld	r20, X+
    11e8:	5c 91       	ld	r21, X
    11ea:	13 97       	sbiw	r26, 0x03	; 3
                        matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
    11ec:	13 96       	adiw	r26, 0x03	; 3
    11ee:	fc 92       	st	X, r15
    11f0:	ee 92       	st	-X, r14
    11f2:	12 97       	sbiw	r26, 0x02	; 2
                        matrix[ i ][ j ].distToStart	= tmp;
    11f4:	11 96       	adiw	r26, 0x01	; 1
    11f6:	5c 93       	st	X, r21
    11f8:	4e 93       	st	-X, r20
                        matrix[ i ][ j ].isVisited		= false;
    11fa:	15 96       	adiw	r26, 0x05	; 5
    11fc:	1c 92       	st	X, r1
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	36 96       	adiw	r30, 0x06	; 6
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
    1202:	8f 30       	cpi	r24, 0x0F	; 15
    1204:	91 05       	cpc	r25, r1
    1206:	09 f7       	brne	.-62     	; 0x11ca <__stack+0x8cb>
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	66 5a       	subi	r22, 0xA6	; 166
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
    1210:	2f 30       	cpi	r18, 0x0F	; 15
    1212:	31 05       	cpc	r19, r1
    1214:	a9 f6       	brne	.-86     	; 0x11c0 <__stack+0x8c1>
                    }
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
    1216:	d1 01       	movw	r26, r2
    1218:	15 96       	adiw	r26, 0x05	; 5
    121a:	bc 92       	st	X, r11
    121c:	15 97       	sbiw	r26, 0x05	; 5
    121e:	16 96       	adiw	r26, 0x06	; 6
    1220:	cc 92       	st	X, r12
    1222:	16 97       	sbiw	r26, 0x06	; 6
    1224:	17 96       	adiw	r26, 0x07	; 7
    1226:	dc 92       	st	X, r13
    1228:	17 97       	sbiw	r26, 0x07	; 7
    122a:	18 96       	adiw	r26, 0x08	; 8
    122c:	0c 93       	st	X, r16
    122e:	18 97       	sbiw	r26, 0x08	; 8

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
                    this->reverseDirection();
                    doPrint = true;
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	20 93 37 07 	sts	0x0737, r18	; 0x800737 <doPrint>
                    matrix[ position.x ][ position.y ].isVisited	= true;
    1236:	4d 91       	ld	r20, X+
    1238:	5c 91       	ld	r21, X
    123a:	11 97       	sbiw	r26, 0x01	; 1
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	8d 91       	ld	r24, X+
    1240:	9c 91       	ld	r25, X
    1242:	13 97       	sbiw	r26, 0x03	; 3
    1244:	bc 01       	movw	r22, r24
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	86 0f       	add	r24, r22
    124c:	97 1f       	adc	r25, r23
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	3a e5       	ldi	r19, 0x5A	; 90
    1254:	34 9f       	mul	r19, r20
    1256:	f0 01       	movw	r30, r0
    1258:	35 9f       	mul	r19, r21
    125a:	f0 0d       	add	r31, r0
    125c:	11 24       	eor	r1, r1
    125e:	8e 0f       	add	r24, r30
    1260:	9f 1f       	adc	r25, r31
    1262:	fc 01       	movw	r30, r24
    1264:	ef 50       	subi	r30, 0x0F	; 15
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	25 83       	std	Z+5, r18	; 0x05

                    lap++;
    126a:	53 96       	adiw	r26, 0x13	; 19
    126c:	8d 91       	ld	r24, X+
    126e:	9c 91       	ld	r25, X
    1270:	54 97       	sbiw	r26, 0x14	; 20
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	54 96       	adiw	r26, 0x14	; 20
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
    127a:	53 97       	sbiw	r26, 0x13	; 19
    127c:	b4 c9       	rjmp	.-3224   	; 0x5e6 <_ZN5Robot8mainMenuEv+0x11c>
            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );

            if ( nextPos == position )
            {
                clear();
    127e:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
                print( "here" );
    1282:	8a e8       	ldi	r24, 0x8A	; 138
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
                delay_ms( 1000 );
    128a:	88 ee       	ldi	r24, 0xE8	; 232
    128c:	93 e0       	ldi	r25, 0x03	; 3
    128e:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
                clear();
    1292:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            short	minDist		= getDist( from, to );
    1296:	68 2d       	mov	r22, r8
    1298:	79 2d       	mov	r23, r9
    129a:	88 2d       	mov	r24, r8
    129c:	99 2d       	mov	r25, r9
    129e:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
    12a2:	7c 01       	movw	r14, r24
            Point2D	minPos( from );
    12a4:	f1 01       	movw	r30, r2
    12a6:	40 80       	ld	r4, Z
    12a8:	51 80       	ldd	r5, Z+1	; 0x01
    12aa:	62 80       	ldd	r6, Z+2	; 0x02
    12ac:	73 80       	ldd	r7, Z+3	; 0x03
            short	pos			= ( short )orientation;
    12ae:	a4 80       	ldd	r10, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
    12b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b2:	98 89       	ldd	r25, Y+16	; 0x10
            {
                Point2D currPos;

                currPos.x = position.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
    12b4:	b1 2c       	mov	r11, r1
    12b6:	5c ca       	rjmp	.-2888   	; 0x770 <_ZN5Robot8mainMenuEv+0x2a6>
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
    12b8:	d1 01       	movw	r26, r2
    12ba:	14 96       	adiw	r26, 0x04	; 4
    12bc:	8c 91       	ld	r24, X
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	88 30       	cpi	r24, 0x08	; 8
    12c2:	91 05       	cpc	r25, r1
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__stack+0x9c9>
    12c6:	8a cb       	rjmp	.-2284   	; 0x9dc <__stack+0xdd>
    12c8:	fc 01       	movw	r30, r24
    12ca:	ec 5c       	subi	r30, 0xCC	; 204
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
    12d2:	0f 2e       	mov	r0, r31
    12d4:	f3 ed       	ldi	r31, 0xD3	; 211
    12d6:	ef 2e       	mov	r14, r31
    12d8:	f0 2d       	mov	r31, r0
    12da:	ff 24       	eor	r15, r15
    12dc:	fa 94       	dec	r15
    12de:	86 cb       	rjmp	.-2292   	; 0x9ec <__stack+0xed>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
    12e0:	0f 2e       	mov	r0, r31
    12e2:	f6 ea       	ldi	r31, 0xA6	; 166
    12e4:	ef 2e       	mov	r14, r31
    12e6:	f0 2d       	mov	r31, r0
    12e8:	ff 24       	eor	r15, r15
    12ea:	fa 94       	dec	r15
    12ec:	7f cb       	rjmp	.-2306   	; 0x9ec <__stack+0xed>
            {
                stepToGoal( finishPos );

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
    12ee:	f1 01       	movw	r30, r2
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	ac 01       	movw	r20, r24
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	84 0f       	add	r24, r20
    12fc:	95 1f       	adc	r25, r21
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	6a e5       	ldi	r22, 0x5A	; 90
    1304:	62 9f       	mul	r22, r18
    1306:	f0 01       	movw	r30, r0
    1308:	63 9f       	mul	r22, r19
    130a:	f0 0d       	add	r31, r0
    130c:	11 24       	eor	r1, r1
    130e:	8e 0f       	add	r24, r30
    1310:	9f 1f       	adc	r25, r31
    1312:	fc 01       	movw	r30, r24
    1314:	ef 50       	subi	r30, 0x0F	; 15
    1316:	fe 4f       	sbci	r31, 0xFE	; 254
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	12 82       	std	Z+2, r1	; 0x02
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
    131c:	f1 01       	movw	r30, r2
    131e:	85 81       	ldd	r24, Z+5	; 0x05
    1320:	96 81       	ldd	r25, Z+6	; 0x06
    1322:	a7 81       	ldd	r26, Z+7	; 0x07
    1324:	b0 85       	ldd	r27, Z+8	; 0x08
    1326:	58 2f       	mov	r21, r24
    1328:	49 2f       	mov	r20, r25
    132a:	8b 87       	std	Y+11, r24	; 0x0b
    132c:	9c 87       	std	Y+12, r25	; 0x0c
    132e:	ad 87       	std	Y+13, r26	; 0x0d
    1330:	be 87       	std	Y+14, r27	; 0x0e
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
    1332:	87 81       	ldd	r24, Z+7	; 0x07
    1334:	90 85       	ldd	r25, Z+8	; 0x08
    1336:	25 81       	ldd	r18, Z+5	; 0x05
    1338:	36 81       	ldd	r19, Z+6	; 0x06
    133a:	fc 01       	movw	r30, r24
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	8e 0f       	add	r24, r30
    1342:	9f 1f       	adc	r25, r31
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	62 9f       	mul	r22, r18
    134a:	f0 01       	movw	r30, r0
    134c:	63 9f       	mul	r22, r19
    134e:	f0 0d       	add	r31, r0
    1350:	11 24       	eor	r1, r1
    1352:	8e 0f       	add	r24, r30
    1354:	9f 1f       	adc	r25, r31
    1356:	fc 01       	movw	r30, r24
    1358:	ef 50       	subi	r30, 0x0F	; 15
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 80       	ld	r8, Z
    135e:	91 80       	ldd	r9, Z+1	; 0x01

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    1360:	25 2f       	mov	r18, r21
    1362:	34 2f       	mov	r19, r20
    1364:	8d 85       	ldd	r24, Y+13	; 0x0d
    1366:	9e 85       	ldd	r25, Y+14	; 0x0e
    1368:	fc 01       	movw	r30, r24
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	e8 0f       	add	r30, r24
    1370:	f9 1f       	adc	r31, r25
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	62 9f       	mul	r22, r18
    1378:	a0 01       	movw	r20, r0
    137a:	63 9f       	mul	r22, r19
    137c:	50 0d       	add	r21, r0
    137e:	11 24       	eor	r1, r1
    1380:	e4 0f       	add	r30, r20
    1382:	f5 1f       	adc	r31, r21
    1384:	ef 50       	subi	r30, 0x0F	; 15
    1386:	fe 4f       	sbci	r31, 0xFE	; 254
    1388:	40 81       	ld	r20, Z
    138a:	51 81       	ldd	r21, Z+1	; 0x01
    138c:	41 15       	cp	r20, r1
    138e:	51 05       	cpc	r21, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <__stack+0xa95>
    1392:	e4 ce       	rjmp	.-568    	; 0x115c <__stack+0x85d>
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
    1394:	0f 2e       	mov	r0, r31
    1396:	fa e5       	ldi	r31, 0x5A	; 90
    1398:	bf 2e       	mov	r11, r31
    139a:	f0 2d       	mov	r31, r0
    139c:	04 ce       	rjmp	.-1016   	; 0xfa6 <__stack+0x6a7>

0000139e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    139e:	fb 01       	movw	r30, r22
    13a0:	40 81       	ld	r20, Z
    13a2:	51 81       	ldd	r21, Z+1	; 0x01
    13a4:	4f 30       	cpi	r20, 0x0F	; 15
    13a6:	51 05       	cpc	r21, r1
    13a8:	e8 f4       	brcc	.+58     	; 0x13e4 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x46>
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	8f 30       	cpi	r24, 0x0F	; 15
    13b0:	91 05       	cpc	r25, r1
    13b2:	d8 f0       	brcs	.+54     	; 0x13ea <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x4c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f e7       	ldi	r25, 0x7F	; 127
    13b8:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
    13ba:	9c 01       	movw	r18, r24
    13bc:	22 0f       	add	r18, r18
    13be:	33 1f       	adc	r19, r19
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	2a e5       	ldi	r18, 0x5A	; 90
    13ca:	24 9f       	mul	r18, r20
    13cc:	f0 01       	movw	r30, r0
    13ce:	25 9f       	mul	r18, r21
    13d0:	f0 0d       	add	r31, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	8e 0f       	add	r24, r30
    13d6:	9f 1f       	adc	r25, r31
    13d8:	fc 01       	movw	r30, r24
    13da:	ef 50       	subi	r30, 0x0F	; 15
    13dc:	fe 4f       	sbci	r31, 0xFE	; 254
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f e7       	ldi	r25, 0x7F	; 127
    13e8:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
    13ea:	fc 01       	movw	r30, r24
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e8 0f       	add	r30, r24
    13f2:	f9 1f       	adc	r31, r25
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	6a e5       	ldi	r22, 0x5A	; 90
    13fa:	64 9f       	mul	r22, r20
    13fc:	90 01       	movw	r18, r0
    13fe:	65 9f       	mul	r22, r21
    1400:	30 0d       	add	r19, r0
    1402:	11 24       	eor	r1, r1
    1404:	e2 0f       	add	r30, r18
    1406:	f3 1f       	adc	r31, r19
    1408:	ef 50       	subi	r30, 0x0F	; 15
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	25 81       	ldd	r18, Z+5	; 0x05
    140e:	21 11       	cpse	r18, r1
    1410:	d4 cf       	rjmp	.-88     	; 0x13ba <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x1c>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	9f e7       	ldi	r25, 0x7F	; 127
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
    1416:	08 95       	ret

00001418 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    1418:	fb 01       	movw	r30, r22
    141a:	40 81       	ld	r20, Z
    141c:	51 81       	ldd	r21, Z+1	; 0x01
    141e:	4f 30       	cpi	r20, 0x0F	; 15
    1420:	51 05       	cpc	r21, r1
    1422:	e8 f4       	brcc	.+58     	; 0x145e <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x46>
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	8f 30       	cpi	r24, 0x0F	; 15
    142a:	91 05       	cpc	r25, r1
    142c:	f0 f0       	brcs	.+60     	; 0x146a <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x52>

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9f e7       	ldi	r25, 0x7F	; 127
    1432:	08 95       	ret

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
    1434:	9c 01       	movw	r18, r24
    1436:	22 0f       	add	r18, r18
    1438:	33 1f       	adc	r19, r19
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	2a e5       	ldi	r18, 0x5A	; 90
    1444:	24 9f       	mul	r18, r20
    1446:	f0 01       	movw	r30, r0
    1448:	25 9f       	mul	r18, r21
    144a:	f0 0d       	add	r31, r0
    144c:	11 24       	eor	r1, r1
    144e:	8e 0f       	add	r24, r30
    1450:	9f 1f       	adc	r25, r31
    1452:	fc 01       	movw	r30, r24
    1454:	ef 50       	subi	r30, 0x0F	; 15
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	08 95       	ret

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	9f e7       	ldi	r25, 0x7F	; 127
    1462:	08 95       	ret
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	9f e7       	ldi	r25, 0x7F	; 127
                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
                }

                return result;
    1468:	08 95       	ret
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> short
            {
                short result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
    146a:	fc 01       	movw	r30, r24
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	e8 0f       	add	r30, r24
    1472:	f9 1f       	adc	r31, r25
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	6a e5       	ldi	r22, 0x5A	; 90
    147a:	64 9f       	mul	r22, r20
    147c:	90 01       	movw	r18, r0
    147e:	65 9f       	mul	r22, r21
    1480:	30 0d       	add	r19, r0
    1482:	11 24       	eor	r1, r1
    1484:	e2 0f       	add	r30, r18
    1486:	f3 1f       	adc	r31, r19
    1488:	ef 50       	subi	r30, 0x0F	; 15
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	25 81       	ldd	r18, Z+5	; 0x05
    148e:	21 11       	cpse	r18, r1
    1490:	e9 cf       	rjmp	.-46     	; 0x1464 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x4c>
    1492:	d0 cf       	rjmp	.-96     	; 0x1434 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x1c>

00001494 <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	65 97       	sbiw	r28, 0x15	; 21
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    14a8:	85 e0       	ldi	r24, 0x05	; 5
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	1c 82       	std	Y+4, r1	; 0x04
    14b2:	1b 82       	std	Y+3, r1	; 0x03
    public:
        Robot()
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
    14b4:	1d 82       	std	Y+5, r1	; 0x05

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    14b6:	9f 83       	std	Y+7, r25	; 0x07
    14b8:	8e 83       	std	Y+6, r24	; 0x06
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	99 87       	std	Y+9, r25	; 0x09
    14c0:	88 87       	std	Y+8, r24	; 0x08
    public:
        Robot()
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
    14c2:	1d 8a       	std	Y+21, r1	; 0x15
    14c4:	1c 8a       	std	Y+20, r1	; 0x14
        {}
        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
    14c6:	80 ed       	ldi	r24, 0xD0	; 208
    14c8:	97 e0       	ldi	r25, 0x07	; 7
    14ca:	0e 94 80 14 	call	0x2900	; 0x2900 <pololu_3pi_init>

            set_motors( 0, 0 );
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 81 13 	call	0x2702	; 0x2702 <set_motors>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    14da:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <read_battery_millivolts_3pi>
    14de:	8c 01       	movw	r16, r24

            // Display battery voltage and wait two seconds
            unsigned short bat = read_battery_millivolts();

            clear();
    14e0:	0e 94 44 12 	call	0x2488	; 0x2488 <clear>
            print_long( bat );
    14e4:	b8 01       	movw	r22, r16
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 a8 12 	call	0x2550	; 0x2550 <print_long>
            print( "mV" );
    14ee:	8f e8       	ldi	r24, 0x8F	; 143
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <print>
            delay_ms( 1000 );
    14f6:	88 ee       	ldi	r24, 0xE8	; 232
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>

            this->mainMenu();
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Robot8mainMenuEv>

00001506 <_GLOBAL__sub_I_doPrint>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1506:	41 ef       	ldi	r20, 0xF1	; 241
    1508:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( SHRT_MAX )
            , distToFinish( SHRT_MAX )
            , isObstacle( false )
            , isVisited( false )
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	9f e7       	ldi	r25, 0x7F	; 127
    150e:	fa 01       	movw	r30, r20
    1510:	46 5a       	subi	r20, 0xA6	; 166
    1512:	5f 4f       	sbci	r21, 0xFF	; 255
    1514:	9a 01       	movw	r18, r20
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	93 83       	std	Z+3, r25	; 0x03
    151c:	82 83       	std	Z+2, r24	; 0x02
    151e:	14 82       	std	Z+4, r1	; 0x04
    1520:	15 82       	std	Z+5, r1	; 0x05
    1522:	36 96       	adiw	r30, 0x06	; 6
        }
};

typedef short ( *getDistFunc )( const Point2D&, const Point2D& );

Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    1524:	e2 17       	cp	r30, r18
    1526:	f3 07       	cpc	r31, r19
    1528:	b1 f7       	brne	.-20     	; 0x1516 <_GLOBAL__sub_I_doPrint+0x10>
    152a:	27 e0       	ldi	r18, 0x07	; 7
    152c:	47 33       	cpi	r20, 0x37	; 55
    152e:	52 07       	cpc	r21, r18
    1530:	71 f7       	brne	.-36     	; 0x150e <_GLOBAL__sub_I_doPrint+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1532:	08 95       	ret

00001534 <atan>:
    1534:	df 93       	push	r29
    1536:	dd 27       	eor	r29, r29
    1538:	b9 2f       	mov	r27, r25
    153a:	bf 77       	andi	r27, 0x7F	; 127
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	16 16       	cp	r1, r22
    1542:	17 06       	cpc	r1, r23
    1544:	48 07       	cpc	r20, r24
    1546:	5b 07       	cpc	r21, r27
    1548:	18 f4       	brcc	.+6      	; 0x1550 <atan+0x1c>
    154a:	d9 2f       	mov	r29, r25
    154c:	0e 94 26 0c 	call	0x184c	; 0x184c <inverse>
    1550:	9f 93       	push	r25
    1552:	8f 93       	push	r24
    1554:	7f 93       	push	r23
    1556:	6f 93       	push	r22
    1558:	0e 94 bf 0c 	call	0x197e	; 0x197e <square>
    155c:	e8 e7       	ldi	r30, 0x78	; 120
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fp_powser>
    1564:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_round>
    1568:	2f 91       	pop	r18
    156a:	3f 91       	pop	r19
    156c:	4f 91       	pop	r20
    156e:	5f 91       	pop	r21
    1570:	0e 94 41 0c 	call	0x1882	; 0x1882 <__mulsf3x>
    1574:	dd 23       	and	r29, r29
    1576:	51 f0       	breq	.+20     	; 0x158c <atan+0x58>
    1578:	90 58       	subi	r25, 0x80	; 128
    157a:	a2 ea       	ldi	r26, 0xA2	; 162
    157c:	2a ed       	ldi	r18, 0xDA	; 218
    157e:	3f e0       	ldi	r19, 0x0F	; 15
    1580:	49 ec       	ldi	r20, 0xC9	; 201
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	d0 78       	andi	r29, 0x80	; 128
    1586:	5d 27       	eor	r21, r29
    1588:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3x>
    158c:	df 91       	pop	r29
    158e:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__fp_round>

00001592 <__divsf3>:
    1592:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__divsf3x>
    1596:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__fp_round>
    159a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscB>
    159e:	58 f0       	brcs	.+22     	; 0x15b6 <__divsf3+0x24>
    15a0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fp_pscA>
    15a4:	40 f0       	brcs	.+16     	; 0x15b6 <__divsf3+0x24>
    15a6:	29 f4       	brne	.+10     	; 0x15b2 <__divsf3+0x20>
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <__divsf3+0x24>
    15ac:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_inf>
    15b0:	51 11       	cpse	r21, r1
    15b2:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_szero>
    15b6:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_nan>

000015ba <__divsf3x>:
    15ba:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_split3>
    15be:	68 f3       	brcs	.-38     	; 0x159a <__divsf3+0x8>

000015c0 <__divsf3_pse>:
    15c0:	99 23       	and	r25, r25
    15c2:	b1 f3       	breq	.-20     	; 0x15b0 <__divsf3+0x1e>
    15c4:	55 23       	and	r21, r21
    15c6:	91 f3       	breq	.-28     	; 0x15ac <__divsf3+0x1a>
    15c8:	95 1b       	sub	r25, r21
    15ca:	55 0b       	sbc	r21, r21
    15cc:	bb 27       	eor	r27, r27
    15ce:	aa 27       	eor	r26, r26
    15d0:	62 17       	cp	r22, r18
    15d2:	73 07       	cpc	r23, r19
    15d4:	84 07       	cpc	r24, r20
    15d6:	38 f0       	brcs	.+14     	; 0x15e6 <__divsf3_pse+0x26>
    15d8:	9f 5f       	subi	r25, 0xFF	; 255
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	44 1f       	adc	r20, r20
    15e2:	aa 1f       	adc	r26, r26
    15e4:	a9 f3       	breq	.-22     	; 0x15d0 <__divsf3_pse+0x10>
    15e6:	35 d0       	rcall	.+106    	; 0x1652 <__divsf3_pse+0x92>
    15e8:	0e 2e       	mov	r0, r30
    15ea:	3a f0       	brmi	.+14     	; 0x15fa <__divsf3_pse+0x3a>
    15ec:	e0 e8       	ldi	r30, 0x80	; 128
    15ee:	32 d0       	rcall	.+100    	; 0x1654 <__divsf3_pse+0x94>
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	50 40       	sbci	r21, 0x00	; 0
    15f4:	e6 95       	lsr	r30
    15f6:	00 1c       	adc	r0, r0
    15f8:	ca f7       	brpl	.-14     	; 0x15ec <__divsf3_pse+0x2c>
    15fa:	2b d0       	rcall	.+86     	; 0x1652 <__divsf3_pse+0x92>
    15fc:	fe 2f       	mov	r31, r30
    15fe:	29 d0       	rcall	.+82     	; 0x1652 <__divsf3_pse+0x92>
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	bb 1f       	adc	r27, r27
    1608:	26 17       	cp	r18, r22
    160a:	37 07       	cpc	r19, r23
    160c:	48 07       	cpc	r20, r24
    160e:	ab 07       	cpc	r26, r27
    1610:	b0 e8       	ldi	r27, 0x80	; 128
    1612:	09 f0       	breq	.+2      	; 0x1616 <__divsf3_pse+0x56>
    1614:	bb 0b       	sbc	r27, r27
    1616:	80 2d       	mov	r24, r0
    1618:	bf 01       	movw	r22, r30
    161a:	ff 27       	eor	r31, r31
    161c:	93 58       	subi	r25, 0x83	; 131
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	3a f0       	brmi	.+14     	; 0x1630 <__divsf3_pse+0x70>
    1622:	9e 3f       	cpi	r25, 0xFE	; 254
    1624:	51 05       	cpc	r21, r1
    1626:	78 f0       	brcs	.+30     	; 0x1646 <__divsf3_pse+0x86>
    1628:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_inf>
    162c:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_szero>
    1630:	5f 3f       	cpi	r21, 0xFF	; 255
    1632:	e4 f3       	brlt	.-8      	; 0x162c <__divsf3_pse+0x6c>
    1634:	98 3e       	cpi	r25, 0xE8	; 232
    1636:	d4 f3       	brlt	.-12     	; 0x162c <__divsf3_pse+0x6c>
    1638:	86 95       	lsr	r24
    163a:	77 95       	ror	r23
    163c:	67 95       	ror	r22
    163e:	b7 95       	ror	r27
    1640:	f7 95       	ror	r31
    1642:	9f 5f       	subi	r25, 0xFF	; 255
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__divsf3_pse+0x78>
    1646:	88 0f       	add	r24, r24
    1648:	91 1d       	adc	r25, r1
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	97 f9       	bld	r25, 7
    1650:	08 95       	ret
    1652:	e1 e0       	ldi	r30, 0x01	; 1
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	bb 1f       	adc	r27, r27
    165c:	62 17       	cp	r22, r18
    165e:	73 07       	cpc	r23, r19
    1660:	84 07       	cpc	r24, r20
    1662:	ba 07       	cpc	r27, r26
    1664:	20 f0       	brcs	.+8      	; 0x166e <__divsf3_pse+0xae>
    1666:	62 1b       	sub	r22, r18
    1668:	73 0b       	sbc	r23, r19
    166a:	84 0b       	sbc	r24, r20
    166c:	ba 0b       	sbc	r27, r26
    166e:	ee 1f       	adc	r30, r30
    1670:	88 f7       	brcc	.-30     	; 0x1654 <__divsf3_pse+0x94>
    1672:	e0 95       	com	r30
    1674:	08 95       	ret

00001676 <__fixsfsi>:
    1676:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    167a:	68 94       	set
    167c:	b1 11       	cpse	r27, r1
    167e:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_szero>
    1682:	08 95       	ret

00001684 <__fixunssfsi>:
    1684:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_splitA>
    1688:	88 f0       	brcs	.+34     	; 0x16ac <__fixunssfsi+0x28>
    168a:	9f 57       	subi	r25, 0x7F	; 127
    168c:	98 f0       	brcs	.+38     	; 0x16b4 <__fixunssfsi+0x30>
    168e:	b9 2f       	mov	r27, r25
    1690:	99 27       	eor	r25, r25
    1692:	b7 51       	subi	r27, 0x17	; 23
    1694:	b0 f0       	brcs	.+44     	; 0x16c2 <__fixunssfsi+0x3e>
    1696:	e1 f0       	breq	.+56     	; 0x16d0 <__fixunssfsi+0x4c>
    1698:	66 0f       	add	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	1a f0       	brmi	.+6      	; 0x16a8 <__fixunssfsi+0x24>
    16a2:	ba 95       	dec	r27
    16a4:	c9 f7       	brne	.-14     	; 0x1698 <__fixunssfsi+0x14>
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <__fixunssfsi+0x4c>
    16a8:	b1 30       	cpi	r27, 0x01	; 1
    16aa:	91 f0       	breq	.+36     	; 0x16d0 <__fixunssfsi+0x4c>
    16ac:	0e 94 1f 0c 	call	0x183e	; 0x183e <__fp_zero>
    16b0:	b1 e0       	ldi	r27, 0x01	; 1
    16b2:	08 95       	ret
    16b4:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_zero>
    16b8:	67 2f       	mov	r22, r23
    16ba:	78 2f       	mov	r23, r24
    16bc:	88 27       	eor	r24, r24
    16be:	b8 5f       	subi	r27, 0xF8	; 248
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <__fixunssfsi+0x4c>
    16c2:	b9 3f       	cpi	r27, 0xF9	; 249
    16c4:	cc f3       	brlt	.-14     	; 0x16b8 <__fixunssfsi+0x34>
    16c6:	86 95       	lsr	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b3 95       	inc	r27
    16ce:	d9 f7       	brne	.-10     	; 0x16c6 <__fixunssfsi+0x42>
    16d0:	3e f4       	brtc	.+14     	; 0x16e0 <__fixunssfsi+0x5c>
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	08 95       	ret

000016e2 <__floatunsisf>:
    16e2:	e8 94       	clt
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <__floatsisf+0x12>

000016e6 <__floatsisf>:
    16e6:	97 fb       	bst	r25, 7
    16e8:	3e f4       	brtc	.+14     	; 0x16f8 <__floatsisf+0x12>
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	99 23       	and	r25, r25
    16fa:	a9 f0       	breq	.+42     	; 0x1726 <__floatsisf+0x40>
    16fc:	f9 2f       	mov	r31, r25
    16fe:	96 e9       	ldi	r25, 0x96	; 150
    1700:	bb 27       	eor	r27, r27
    1702:	93 95       	inc	r25
    1704:	f6 95       	lsr	r31
    1706:	87 95       	ror	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	f1 11       	cpse	r31, r1
    1710:	f8 cf       	rjmp	.-16     	; 0x1702 <__floatsisf+0x1c>
    1712:	fa f4       	brpl	.+62     	; 0x1752 <__floatsisf+0x6c>
    1714:	bb 0f       	add	r27, r27
    1716:	11 f4       	brne	.+4      	; 0x171c <__floatsisf+0x36>
    1718:	60 ff       	sbrs	r22, 0
    171a:	1b c0       	rjmp	.+54     	; 0x1752 <__floatsisf+0x6c>
    171c:	6f 5f       	subi	r22, 0xFF	; 255
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	16 c0       	rjmp	.+44     	; 0x1752 <__floatsisf+0x6c>
    1726:	88 23       	and	r24, r24
    1728:	11 f0       	breq	.+4      	; 0x172e <__floatsisf+0x48>
    172a:	96 e9       	ldi	r25, 0x96	; 150
    172c:	11 c0       	rjmp	.+34     	; 0x1750 <__floatsisf+0x6a>
    172e:	77 23       	and	r23, r23
    1730:	21 f0       	breq	.+8      	; 0x173a <__floatsisf+0x54>
    1732:	9e e8       	ldi	r25, 0x8E	; 142
    1734:	87 2f       	mov	r24, r23
    1736:	76 2f       	mov	r23, r22
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__floatsisf+0x5e>
    173a:	66 23       	and	r22, r22
    173c:	71 f0       	breq	.+28     	; 0x175a <__floatsisf+0x74>
    173e:	96 e8       	ldi	r25, 0x86	; 134
    1740:	86 2f       	mov	r24, r22
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	2a f0       	brmi	.+10     	; 0x1752 <__floatsisf+0x6c>
    1748:	9a 95       	dec	r25
    174a:	66 0f       	add	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	88 1f       	adc	r24, r24
    1750:	da f7       	brpl	.-10     	; 0x1748 <__floatsisf+0x62>
    1752:	88 0f       	add	r24, r24
    1754:	96 95       	lsr	r25
    1756:	87 95       	ror	r24
    1758:	97 f9       	bld	r25, 7
    175a:	08 95       	ret

0000175c <__fp_inf>:
    175c:	97 f9       	bld	r25, 7
    175e:	9f 67       	ori	r25, 0x7F	; 127
    1760:	80 e8       	ldi	r24, 0x80	; 128
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	08 95       	ret

00001768 <__fp_nan>:
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	80 ec       	ldi	r24, 0xC0	; 192
    176c:	08 95       	ret

0000176e <__fp_powser>:
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	1f 93       	push	r17
    1774:	0f 93       	push	r16
    1776:	ff 92       	push	r15
    1778:	ef 92       	push	r14
    177a:	df 92       	push	r13
    177c:	7b 01       	movw	r14, r22
    177e:	8c 01       	movw	r16, r24
    1780:	68 94       	set
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <__fp_powser+0x22>
    1784:	da 2e       	mov	r13, r26
    1786:	ef 01       	movw	r28, r30
    1788:	0e 94 41 0c 	call	0x1882	; 0x1882 <__mulsf3x>
    178c:	fe 01       	movw	r30, r28
    178e:	e8 94       	clt
    1790:	a5 91       	lpm	r26, Z+
    1792:	25 91       	lpm	r18, Z+
    1794:	35 91       	lpm	r19, Z+
    1796:	45 91       	lpm	r20, Z+
    1798:	55 91       	lpm	r21, Z+
    179a:	a6 f3       	brts	.-24     	; 0x1784 <__fp_powser+0x16>
    179c:	ef 01       	movw	r28, r30
    179e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3x>
    17a2:	fe 01       	movw	r30, r28
    17a4:	97 01       	movw	r18, r14
    17a6:	a8 01       	movw	r20, r16
    17a8:	da 94       	dec	r13
    17aa:	69 f7       	brne	.-38     	; 0x1786 <__fp_powser+0x18>
    17ac:	df 90       	pop	r13
    17ae:	ef 90       	pop	r14
    17b0:	ff 90       	pop	r15
    17b2:	0f 91       	pop	r16
    17b4:	1f 91       	pop	r17
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <__fp_pscA>:
    17bc:	00 24       	eor	r0, r0
    17be:	0a 94       	dec	r0
    17c0:	16 16       	cp	r1, r22
    17c2:	17 06       	cpc	r1, r23
    17c4:	18 06       	cpc	r1, r24
    17c6:	09 06       	cpc	r0, r25
    17c8:	08 95       	ret

000017ca <__fp_pscB>:
    17ca:	00 24       	eor	r0, r0
    17cc:	0a 94       	dec	r0
    17ce:	12 16       	cp	r1, r18
    17d0:	13 06       	cpc	r1, r19
    17d2:	14 06       	cpc	r1, r20
    17d4:	05 06       	cpc	r0, r21
    17d6:	08 95       	ret

000017d8 <__fp_round>:
    17d8:	09 2e       	mov	r0, r25
    17da:	03 94       	inc	r0
    17dc:	00 0c       	add	r0, r0
    17de:	11 f4       	brne	.+4      	; 0x17e4 <__fp_round+0xc>
    17e0:	88 23       	and	r24, r24
    17e2:	52 f0       	brmi	.+20     	; 0x17f8 <__fp_round+0x20>
    17e4:	bb 0f       	add	r27, r27
    17e6:	40 f4       	brcc	.+16     	; 0x17f8 <__fp_round+0x20>
    17e8:	bf 2b       	or	r27, r31
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <__fp_round+0x18>
    17ec:	60 ff       	sbrs	r22, 0
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <__fp_round+0x20>
    17f0:	6f 5f       	subi	r22, 0xFF	; 255
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	8f 4f       	sbci	r24, 0xFF	; 255
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	08 95       	ret

000017fa <__fp_split3>:
    17fa:	57 fd       	sbrc	r21, 7
    17fc:	90 58       	subi	r25, 0x80	; 128
    17fe:	44 0f       	add	r20, r20
    1800:	55 1f       	adc	r21, r21
    1802:	59 f0       	breq	.+22     	; 0x181a <__fp_splitA+0x10>
    1804:	5f 3f       	cpi	r21, 0xFF	; 255
    1806:	71 f0       	breq	.+28     	; 0x1824 <__fp_splitA+0x1a>
    1808:	47 95       	ror	r20

0000180a <__fp_splitA>:
    180a:	88 0f       	add	r24, r24
    180c:	97 fb       	bst	r25, 7
    180e:	99 1f       	adc	r25, r25
    1810:	61 f0       	breq	.+24     	; 0x182a <__fp_splitA+0x20>
    1812:	9f 3f       	cpi	r25, 0xFF	; 255
    1814:	79 f0       	breq	.+30     	; 0x1834 <__fp_splitA+0x2a>
    1816:	87 95       	ror	r24
    1818:	08 95       	ret
    181a:	12 16       	cp	r1, r18
    181c:	13 06       	cpc	r1, r19
    181e:	14 06       	cpc	r1, r20
    1820:	55 1f       	adc	r21, r21
    1822:	f2 cf       	rjmp	.-28     	; 0x1808 <__fp_split3+0xe>
    1824:	46 95       	lsr	r20
    1826:	f1 df       	rcall	.-30     	; 0x180a <__fp_splitA>
    1828:	08 c0       	rjmp	.+16     	; 0x183a <__fp_splitA+0x30>
    182a:	16 16       	cp	r1, r22
    182c:	17 06       	cpc	r1, r23
    182e:	18 06       	cpc	r1, r24
    1830:	99 1f       	adc	r25, r25
    1832:	f1 cf       	rjmp	.-30     	; 0x1816 <__fp_splitA+0xc>
    1834:	86 95       	lsr	r24
    1836:	71 05       	cpc	r23, r1
    1838:	61 05       	cpc	r22, r1
    183a:	08 94       	sec
    183c:	08 95       	ret

0000183e <__fp_zero>:
    183e:	e8 94       	clt

00001840 <__fp_szero>:
    1840:	bb 27       	eor	r27, r27
    1842:	66 27       	eor	r22, r22
    1844:	77 27       	eor	r23, r23
    1846:	cb 01       	movw	r24, r22
    1848:	97 f9       	bld	r25, 7
    184a:	08 95       	ret

0000184c <inverse>:
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 e8       	ldi	r24, 0x80	; 128
    1856:	9f e3       	ldi	r25, 0x3F	; 63
    1858:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__divsf3>

0000185c <__mulsf3>:
    185c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__mulsf3x>
    1860:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__fp_round>
    1864:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fp_pscA>
    1868:	38 f0       	brcs	.+14     	; 0x1878 <__mulsf3+0x1c>
    186a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscB>
    186e:	20 f0       	brcs	.+8      	; 0x1878 <__mulsf3+0x1c>
    1870:	95 23       	and	r25, r21
    1872:	11 f0       	breq	.+4      	; 0x1878 <__mulsf3+0x1c>
    1874:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_inf>
    1878:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_nan>
    187c:	11 24       	eor	r1, r1
    187e:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_szero>

00001882 <__mulsf3x>:
    1882:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_split3>
    1886:	70 f3       	brcs	.-36     	; 0x1864 <__mulsf3+0x8>

00001888 <__mulsf3_pse>:
    1888:	95 9f       	mul	r25, r21
    188a:	c1 f3       	breq	.-16     	; 0x187c <__mulsf3+0x20>
    188c:	95 0f       	add	r25, r21
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	55 1f       	adc	r21, r21
    1892:	62 9f       	mul	r22, r18
    1894:	f0 01       	movw	r30, r0
    1896:	72 9f       	mul	r23, r18
    1898:	bb 27       	eor	r27, r27
    189a:	f0 0d       	add	r31, r0
    189c:	b1 1d       	adc	r27, r1
    189e:	63 9f       	mul	r22, r19
    18a0:	aa 27       	eor	r26, r26
    18a2:	f0 0d       	add	r31, r0
    18a4:	b1 1d       	adc	r27, r1
    18a6:	aa 1f       	adc	r26, r26
    18a8:	64 9f       	mul	r22, r20
    18aa:	66 27       	eor	r22, r22
    18ac:	b0 0d       	add	r27, r0
    18ae:	a1 1d       	adc	r26, r1
    18b0:	66 1f       	adc	r22, r22
    18b2:	82 9f       	mul	r24, r18
    18b4:	22 27       	eor	r18, r18
    18b6:	b0 0d       	add	r27, r0
    18b8:	a1 1d       	adc	r26, r1
    18ba:	62 1f       	adc	r22, r18
    18bc:	73 9f       	mul	r23, r19
    18be:	b0 0d       	add	r27, r0
    18c0:	a1 1d       	adc	r26, r1
    18c2:	62 1f       	adc	r22, r18
    18c4:	83 9f       	mul	r24, r19
    18c6:	a0 0d       	add	r26, r0
    18c8:	61 1d       	adc	r22, r1
    18ca:	22 1f       	adc	r18, r18
    18cc:	74 9f       	mul	r23, r20
    18ce:	33 27       	eor	r19, r19
    18d0:	a0 0d       	add	r26, r0
    18d2:	61 1d       	adc	r22, r1
    18d4:	23 1f       	adc	r18, r19
    18d6:	84 9f       	mul	r24, r20
    18d8:	60 0d       	add	r22, r0
    18da:	21 1d       	adc	r18, r1
    18dc:	82 2f       	mov	r24, r18
    18de:	76 2f       	mov	r23, r22
    18e0:	6a 2f       	mov	r22, r26
    18e2:	11 24       	eor	r1, r1
    18e4:	9f 57       	subi	r25, 0x7F	; 127
    18e6:	50 40       	sbci	r21, 0x00	; 0
    18e8:	9a f0       	brmi	.+38     	; 0x1910 <__mulsf3_pse+0x88>
    18ea:	f1 f0       	breq	.+60     	; 0x1928 <__mulsf3_pse+0xa0>
    18ec:	88 23       	and	r24, r24
    18ee:	4a f0       	brmi	.+18     	; 0x1902 <__mulsf3_pse+0x7a>
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	bb 1f       	adc	r27, r27
    18f6:	66 1f       	adc	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	91 50       	subi	r25, 0x01	; 1
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	a9 f7       	brne	.-22     	; 0x18ec <__mulsf3_pse+0x64>
    1902:	9e 3f       	cpi	r25, 0xFE	; 254
    1904:	51 05       	cpc	r21, r1
    1906:	80 f0       	brcs	.+32     	; 0x1928 <__mulsf3_pse+0xa0>
    1908:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_inf>
    190c:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_szero>
    1910:	5f 3f       	cpi	r21, 0xFF	; 255
    1912:	e4 f3       	brlt	.-8      	; 0x190c <__mulsf3_pse+0x84>
    1914:	98 3e       	cpi	r25, 0xE8	; 232
    1916:	d4 f3       	brlt	.-12     	; 0x190c <__mulsf3_pse+0x84>
    1918:	86 95       	lsr	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	b7 95       	ror	r27
    1920:	f7 95       	ror	r31
    1922:	e7 95       	ror	r30
    1924:	9f 5f       	subi	r25, 0xFF	; 255
    1926:	c1 f7       	brne	.-16     	; 0x1918 <__mulsf3_pse+0x90>
    1928:	fe 2b       	or	r31, r30
    192a:	88 0f       	add	r24, r24
    192c:	91 1d       	adc	r25, r1
    192e:	96 95       	lsr	r25
    1930:	87 95       	ror	r24
    1932:	97 f9       	bld	r25, 7
    1934:	08 95       	ret

00001936 <round>:
    1936:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_splitA>
    193a:	e8 f0       	brcs	.+58     	; 0x1976 <round+0x40>
    193c:	9e 37       	cpi	r25, 0x7E	; 126
    193e:	e8 f0       	brcs	.+58     	; 0x197a <round+0x44>
    1940:	96 39       	cpi	r25, 0x96	; 150
    1942:	b8 f4       	brcc	.+46     	; 0x1972 <round+0x3c>
    1944:	9e 38       	cpi	r25, 0x8E	; 142
    1946:	48 f4       	brcc	.+18     	; 0x195a <round+0x24>
    1948:	67 2f       	mov	r22, r23
    194a:	78 2f       	mov	r23, r24
    194c:	88 27       	eor	r24, r24
    194e:	98 5f       	subi	r25, 0xF8	; 248
    1950:	f9 cf       	rjmp	.-14     	; 0x1944 <round+0xe>
    1952:	86 95       	lsr	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	93 95       	inc	r25
    195a:	95 39       	cpi	r25, 0x95	; 149
    195c:	d0 f3       	brcs	.-12     	; 0x1952 <round+0x1c>
    195e:	b6 2f       	mov	r27, r22
    1960:	b1 70       	andi	r27, 0x01	; 1
    1962:	6b 0f       	add	r22, r27
    1964:	71 1d       	adc	r23, r1
    1966:	81 1d       	adc	r24, r1
    1968:	20 f4       	brcc	.+8      	; 0x1972 <round+0x3c>
    196a:	87 95       	ror	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	93 95       	inc	r25
    1972:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_mintl>
    1976:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__fp_mpack>
    197a:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_szero>

0000197e <square>:
    197e:	9b 01       	movw	r18, r22
    1980:	ac 01       	movw	r20, r24
    1982:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__mulsf3>
    1986:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fp_pscA>
    198a:	38 f0       	brcs	.+14     	; 0x199a <square+0x1c>
    198c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscB>
    1990:	20 f0       	brcs	.+8      	; 0x199a <square+0x1c>
    1992:	39 f4       	brne	.+14     	; 0x19a2 <square+0x24>
    1994:	9f 3f       	cpi	r25, 0xFF	; 255
    1996:	19 f4       	brne	.+6      	; 0x199e <square+0x20>
    1998:	26 f4       	brtc	.+8      	; 0x19a2 <square+0x24>
    199a:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_nan>
    199e:	0e f4       	brtc	.+2      	; 0x19a2 <square+0x24>
    19a0:	e0 95       	com	r30
    19a2:	e7 fb       	bst	r30, 7
    19a4:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_inf>

000019a8 <__addsf3x>:
    19a8:	e9 2f       	mov	r30, r25
    19aa:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_split3>
    19ae:	58 f3       	brcs	.-42     	; 0x1986 <square+0x8>
    19b0:	ba 17       	cp	r27, r26
    19b2:	62 07       	cpc	r22, r18
    19b4:	73 07       	cpc	r23, r19
    19b6:	84 07       	cpc	r24, r20
    19b8:	95 07       	cpc	r25, r21
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__addsf3x+0x1c>
    19bc:	79 f4       	brne	.+30     	; 0x19dc <__addsf3x+0x34>
    19be:	a6 f5       	brtc	.+104    	; 0x1a28 <__addsf3x+0x80>
    19c0:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_zero>
    19c4:	0e f4       	brtc	.+2      	; 0x19c8 <__addsf3x+0x20>
    19c6:	e0 95       	com	r30
    19c8:	0b 2e       	mov	r0, r27
    19ca:	ba 2f       	mov	r27, r26
    19cc:	a0 2d       	mov	r26, r0
    19ce:	0b 01       	movw	r0, r22
    19d0:	b9 01       	movw	r22, r18
    19d2:	90 01       	movw	r18, r0
    19d4:	0c 01       	movw	r0, r24
    19d6:	ca 01       	movw	r24, r20
    19d8:	a0 01       	movw	r20, r0
    19da:	11 24       	eor	r1, r1
    19dc:	ff 27       	eor	r31, r31
    19de:	59 1b       	sub	r21, r25
    19e0:	99 f0       	breq	.+38     	; 0x1a08 <__addsf3x+0x60>
    19e2:	59 3f       	cpi	r21, 0xF9	; 249
    19e4:	50 f4       	brcc	.+20     	; 0x19fa <__addsf3x+0x52>
    19e6:	50 3e       	cpi	r21, 0xE0	; 224
    19e8:	68 f1       	brcs	.+90     	; 0x1a44 <__addsf3x+0x9c>
    19ea:	1a 16       	cp	r1, r26
    19ec:	f0 40       	sbci	r31, 0x00	; 0
    19ee:	a2 2f       	mov	r26, r18
    19f0:	23 2f       	mov	r18, r19
    19f2:	34 2f       	mov	r19, r20
    19f4:	44 27       	eor	r20, r20
    19f6:	58 5f       	subi	r21, 0xF8	; 248
    19f8:	f3 cf       	rjmp	.-26     	; 0x19e0 <__addsf3x+0x38>
    19fa:	46 95       	lsr	r20
    19fc:	37 95       	ror	r19
    19fe:	27 95       	ror	r18
    1a00:	a7 95       	ror	r26
    1a02:	f0 40       	sbci	r31, 0x00	; 0
    1a04:	53 95       	inc	r21
    1a06:	c9 f7       	brne	.-14     	; 0x19fa <__addsf3x+0x52>
    1a08:	7e f4       	brtc	.+30     	; 0x1a28 <__addsf3x+0x80>
    1a0a:	1f 16       	cp	r1, r31
    1a0c:	ba 0b       	sbc	r27, r26
    1a0e:	62 0b       	sbc	r22, r18
    1a10:	73 0b       	sbc	r23, r19
    1a12:	84 0b       	sbc	r24, r20
    1a14:	ba f0       	brmi	.+46     	; 0x1a44 <__addsf3x+0x9c>
    1a16:	91 50       	subi	r25, 0x01	; 1
    1a18:	a1 f0       	breq	.+40     	; 0x1a42 <__addsf3x+0x9a>
    1a1a:	ff 0f       	add	r31, r31
    1a1c:	bb 1f       	adc	r27, r27
    1a1e:	66 1f       	adc	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	c2 f7       	brpl	.-16     	; 0x1a16 <__addsf3x+0x6e>
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <__addsf3x+0x9c>
    1a28:	ba 0f       	add	r27, r26
    1a2a:	62 1f       	adc	r22, r18
    1a2c:	73 1f       	adc	r23, r19
    1a2e:	84 1f       	adc	r24, r20
    1a30:	48 f4       	brcc	.+18     	; 0x1a44 <__addsf3x+0x9c>
    1a32:	87 95       	ror	r24
    1a34:	77 95       	ror	r23
    1a36:	67 95       	ror	r22
    1a38:	b7 95       	ror	r27
    1a3a:	f7 95       	ror	r31
    1a3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <__addsf3x+0x9a>
    1a40:	b0 cf       	rjmp	.-160    	; 0x19a2 <square+0x24>
    1a42:	93 95       	inc	r25
    1a44:	88 0f       	add	r24, r24
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <__addsf3x+0xa2>
    1a48:	99 27       	eor	r25, r25
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	97 95       	ror	r25
    1a4e:	87 95       	ror	r24
    1a50:	08 95       	ret

00001a52 <__fp_mintl>:
    1a52:	88 23       	and	r24, r24
    1a54:	71 f4       	brne	.+28     	; 0x1a72 <__fp_mintl+0x20>
    1a56:	77 23       	and	r23, r23
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <__fp_mintl+0x10>
    1a5a:	98 50       	subi	r25, 0x08	; 8
    1a5c:	87 2b       	or	r24, r23
    1a5e:	76 2f       	mov	r23, r22
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <__fp_mintl+0x1e>
    1a62:	66 23       	and	r22, r22
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <__fp_mintl+0x18>
    1a66:	99 27       	eor	r25, r25
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <__fp_mintl+0x32>
    1a6a:	90 51       	subi	r25, 0x10	; 16
    1a6c:	86 2b       	or	r24, r22
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	2a f0       	brmi	.+10     	; 0x1a7e <__fp_mintl+0x2c>
    1a74:	9a 95       	dec	r25
    1a76:	66 0f       	add	r22, r22
    1a78:	77 1f       	adc	r23, r23
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	da f7       	brpl	.-10     	; 0x1a74 <__fp_mintl+0x22>
    1a7e:	88 0f       	add	r24, r24
    1a80:	96 95       	lsr	r25
    1a82:	87 95       	ror	r24
    1a84:	97 f9       	bld	r25, 7
    1a86:	08 95       	ret

00001a88 <__fp_mpack>:
    1a88:	9f 3f       	cpi	r25, 0xFF	; 255
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <__fp_mpack_finite+0xc>

00001a8c <__fp_mpack_finite>:
    1a8c:	91 50       	subi	r25, 0x01	; 1
    1a8e:	20 f4       	brcc	.+8      	; 0x1a98 <__fp_mpack_finite+0xc>
    1a90:	87 95       	ror	r24
    1a92:	77 95       	ror	r23
    1a94:	67 95       	ror	r22
    1a96:	b7 95       	ror	r27
    1a98:	88 0f       	add	r24, r24
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	97 f9       	bld	r25, 7
    1aa2:	08 95       	ret

00001aa4 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1aa4:	ec e7       	ldi	r30, 0x7C	; 124
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 7d       	andi	r24, 0xDF	; 223
    1aac:	80 83       	st	Z, r24
    1aae:	08 95       	ret

00001ab0 <_ZN15OrangutanAnalog7setModeEh>:
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <_ZN15OrangutanAnalog7setModeEh+0xa>
    1ab4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1ab8:	08 95       	ret
    1aba:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1abe:	80 62       	ori	r24, 0x20	; 32
    1ac0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1ac4:	08 95       	ret

00001ac6 <_ZN15OrangutanAnalog7getModeEv>:
    1ac6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1aca:	85 fb       	bst	r24, 5
    1acc:	88 27       	eor	r24, r24
    1ace:	80 f9       	bld	r24, 0
    1ad0:	08 95       	ret

00001ad2 <_ZN15OrangutanAnalog16conversionResultEv>:
    1ad2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN15OrangutanAnalog7getModeEv>
    1ad6:	88 23       	and	r24, r24
    1ad8:	21 f0       	breq	.+8      	; 0x1ae2 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1ada:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	08 95       	ret
    1ae2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1ae6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1aea:	08 95       	ret

00001aec <_ZN15OrangutanAnalog15startConversionEhh>:
    1aec:	80 32       	cpi	r24, 0x20	; 32
    1aee:	a0 f4       	brcc	.+40     	; 0x1b18 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1af0:	97 e8       	ldi	r25, 0x87	; 135
    1af2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1af6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1afa:	66 23       	and	r22, r22
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1afe:	90 6c       	ori	r25, 0xC0	; 192
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1b02:	9f 77       	andi	r25, 0x7F	; 127
    1b04:	90 64       	ori	r25, 0x40	; 64
    1b06:	90 7e       	andi	r25, 0xE0	; 224
    1b08:	98 2b       	or	r25, r24
    1b0a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b0e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b12:	80 64       	ori	r24, 0x40	; 64
    1b14:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b18:	08 95       	ret

00001b1a <_ZN15OrangutanAnalog11readAverageEhj>:
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e3 e9       	ldi	r30, 0x93	; 147
    1b20:	fd e0       	ldi	r31, 0x0D	; 13
    1b22:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x14>
    1b26:	eb 01       	movw	r28, r22
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN15OrangutanAnalog15startConversionEhh>
    1b2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b32:	86 fd       	sbrc	r24, 6
    1b34:	fc cf       	rjmp	.-8      	; 0x1b2e <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1b36:	8e 01       	movw	r16, r28
    1b38:	c1 2c       	mov	r12, r1
    1b3a:	d1 2c       	mov	r13, r1
    1b3c:	76 01       	movw	r14, r12
    1b3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b42:	80 64       	ori	r24, 0x40	; 64
    1b44:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b48:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b4c:	86 fd       	sbrc	r24, 6
    1b4e:	fc cf       	rjmp	.-8      	; 0x1b48 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1b50:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN15OrangutanAnalog16conversionResultEv>
    1b54:	c8 0e       	add	r12, r24
    1b56:	d9 1e       	adc	r13, r25
    1b58:	e1 1c       	adc	r14, r1
    1b5a:	f1 1c       	adc	r15, r1
    1b5c:	01 50       	subi	r16, 0x01	; 1
    1b5e:	11 09       	sbc	r17, r1
    1b60:	01 15       	cp	r16, r1
    1b62:	11 05       	cpc	r17, r1
    1b64:	61 f7       	brne	.-40     	; 0x1b3e <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1b66:	ce 01       	movw	r24, r28
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	c0 34       	cpi	r28, 0x40	; 64
    1b6e:	d1 05       	cpc	r29, r1
    1b70:	38 f4       	brcc	.+14     	; 0x1b80 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1b72:	8c 0d       	add	r24, r12
    1b74:	9d 1d       	adc	r25, r13
    1b76:	be 01       	movw	r22, r28
    1b78:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	0e c0       	rjmp	.+28     	; 0x1b9c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1b80:	a7 01       	movw	r20, r14
    1b82:	96 01       	movw	r18, r12
    1b84:	28 0f       	add	r18, r24
    1b86:	39 1f       	adc	r19, r25
    1b88:	41 1d       	adc	r20, r1
    1b8a:	51 1d       	adc	r21, r1
    1b8c:	ca 01       	movw	r24, r20
    1b8e:	b9 01       	movw	r22, r18
    1b90:	9e 01       	movw	r18, r28
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__udivmodsi4>
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	e8 e0       	ldi	r30, 0x08	; 8
    1ba2:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x14>

00001ba6 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1bb2:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__umulhisi3>
    1bbc:	6b 01       	movw	r12, r22
    1bbe:	7c 01       	movw	r14, r24
    1bc0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN15OrangutanAnalog7getModeEv>
    1bc4:	88 23       	and	r24, r24
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1bc8:	c7 01       	movw	r24, r14
    1bca:	b6 01       	movw	r22, r12
    1bcc:	61 58       	subi	r22, 0x81	; 129
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	2f ef       	ldi	r18, 0xFF	; 255
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	0a c0       	rjmp	.+20     	; 0x1bf2 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1bde:	c7 01       	movw	r24, r14
    1be0:	b6 01       	movw	r22, r12
    1be2:	61 50       	subi	r22, 0x01	; 1
    1be4:	7e 4f       	sbci	r23, 0xFE	; 254
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	2f ef       	ldi	r18, 0xFF	; 255
    1bec:	33 e0       	ldi	r19, 0x03	; 3
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__udivmodsi4>
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	08 95       	ret

00001c02 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1c02:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <_ZN15OrangutanAnalog11readAverageEhj>
    1c06:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1c0a:	08 95       	ret

00001c0c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN15OrangutanAnalog7getModeEv>
    1c16:	18 2f       	mov	r17, r24
    1c18:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1c1c:	6a e0       	ldi	r22, 0x0A	; 10
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	86 e0       	ldi	r24, 0x06	; 6
    1c22:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1c26:	ec 01       	movw	r28, r24
    1c28:	81 2f       	mov	r24, r17
    1c2a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN15OrangutanAnalog7setModeEh>
    1c2e:	ce 01       	movw	r24, r28
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	8c 0f       	add	r24, r28
    1c36:	9d 1f       	adc	r25, r29
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	08 95       	ret

00001c46 <read_battery_millivolts_3pi>:
    1c46:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1c4a:	08 95       	ret

00001c4c <_ZL16currentCharacterv>:
    1c4c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <_ZL17use_program_space>
    1c50:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <__data_end>
    1c54:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <__data_end+0x1>
    1c58:	99 23       	and	r25, r25
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <_ZL16currentCharacterv+0x14>
    1c5c:	84 91       	lpm	r24, Z
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <_ZL16currentCharacterv+0x16>
    1c60:	80 81       	ld	r24, Z
    1c62:	2f eb       	ldi	r18, 0xBF	; 191
    1c64:	28 0f       	add	r18, r24
    1c66:	2a 31       	cpi	r18, 0x1A	; 26
    1c68:	10 f4       	brcc	.+4      	; 0x1c6e <_ZL16currentCharacterv+0x22>
    1c6a:	80 5e       	subi	r24, 0xE0	; 224
    1c6c:	08 95       	ret
    1c6e:	80 32       	cpi	r24, 0x20	; 32
    1c70:	49 f4       	brne	.+18     	; 0x1c84 <_ZL16currentCharacterv+0x38>
    1c72:	9f 01       	movw	r18, r30
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1c7c:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1c80:	ef 2b       	or	r30, r31
    1c82:	31 f7       	brne	.-52     	; 0x1c50 <_ZL16currentCharacterv+0x4>
    1c84:	08 95       	ret

00001c86 <_ZL9getNumberv>:
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    1c90:	c0 e0       	ldi	r28, 0x00	; 0
    1c92:	d0 e0       	ldi	r29, 0x00	; 0
    1c94:	1a e0       	ldi	r17, 0x0A	; 10
    1c96:	90 ed       	ldi	r25, 0xD0	; 208
    1c98:	98 0f       	add	r25, r24
    1c9a:	9a 30       	cpi	r25, 0x0A	; 10
    1c9c:	b8 f4       	brcc	.+46     	; 0x1ccc <_ZL9getNumberv+0x46>
    1c9e:	9e 01       	movw	r18, r28
    1ca0:	12 9f       	mul	r17, r18
    1ca2:	e0 01       	movw	r28, r0
    1ca4:	13 9f       	mul	r17, r19
    1ca6:	d0 0d       	add	r29, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	c8 0f       	add	r28, r24
    1cac:	d1 1d       	adc	r29, r1
    1cae:	87 fd       	sbrc	r24, 7
    1cb0:	da 95       	dec	r29
    1cb2:	e0 97       	sbiw	r28, 0x30	; 48
    1cb4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    1cb8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
    1cc2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
    1cc6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    1cca:	e5 cf       	rjmp	.-54     	; 0x1c96 <_ZL9getNumberv+0x10>
    1ccc:	ce 01       	movw	r24, r28
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	08 95       	ret

00001cd6 <_ZN15OrangutanBuzzer5init2Ev>:
    1cd6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1cda:	83 e2       	ldi	r24, 0x23	; 35
    1cdc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ce0:	81 e1       	ldi	r24, 0x11	; 17
    1ce2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ce6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1cea:	80 e1       	ldi	r24, 0x10	; 16
    1cec:	97 e2       	ldi	r25, 0x27	; 39
    1cee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cf2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1cf6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1cfa:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1cfe:	22 9a       	sbi	0x04, 2	; 4
    1d00:	78 94       	sei
    1d02:	08 95       	ret

00001d04 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1d04:	8f 92       	push	r8
    1d06:	9f 92       	push	r9
    1d08:	af 92       	push	r10
    1d0a:	bf 92       	push	r11
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	5c 01       	movw	r10, r24
    1d1c:	8b 01       	movw	r16, r22
    1d1e:	d4 2e       	mov	r13, r20
    1d20:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <buzzerInitialized>
    1d24:	81 11       	cpse	r24, r1
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <buzzerInitialized>
    1d2e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN15OrangutanBuzzer5init2Ev>
    1d32:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1d36:	b7 fe       	sbrs	r11, 7
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1d3a:	e8 94       	clt
    1d3c:	b7 f8       	bld	r11, 7
    1d3e:	2a e0       	ldi	r18, 0x0A	; 10
    1d40:	f2 2e       	mov	r15, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1d44:	ff 24       	eor	r15, r15
    1d46:	f3 94       	inc	r15
    1d48:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1d4c:	2e 2d       	mov	r18, r14
    1d4e:	28 7f       	andi	r18, 0xF8	; 248
    1d50:	e2 2e       	mov	r14, r18
    1d52:	48 ec       	ldi	r20, 0xC8	; 200
    1d54:	f4 9e       	mul	r15, r20
    1d56:	c0 01       	movw	r24, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	8a 15       	cp	r24, r10
    1d5c:	9b 05       	cpc	r25, r11
    1d5e:	e0 f4       	brcc	.+56     	; 0x1d98 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1d60:	e5 01       	movw	r28, r10
    1d62:	51 e1       	ldi	r21, 0x11	; 17
    1d64:	a5 16       	cp	r10, r21
    1d66:	57 e2       	ldi	r21, 0x27	; 39
    1d68:	b5 06       	cpc	r11, r21
    1d6a:	10 f0       	brcs	.+4      	; 0x1d70 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1d6c:	c0 e1       	ldi	r28, 0x10	; 16
    1d6e:	d7 e2       	ldi	r29, 0x27	; 39
    1d70:	be 01       	movw	r22, r28
    1d72:	76 95       	lsr	r23
    1d74:	67 95       	ror	r22
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	60 58       	subi	r22, 0x80	; 128
    1d7c:	79 46       	sbci	r23, 0x69	; 105
    1d7e:	87 46       	sbci	r24, 0x67	; 103
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	4e 01       	movw	r8, r28
    1d84:	a1 2c       	mov	r10, r1
    1d86:	b1 2c       	mov	r11, r1
    1d88:	a5 01       	movw	r20, r10
    1d8a:	94 01       	movw	r18, r8
    1d8c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__udivmodsi4>
    1d90:	59 01       	movw	r10, r18
    1d92:	8e 2d       	mov	r24, r14
    1d94:	81 60       	ori	r24, 0x01	; 1
    1d96:	24 c0       	rjmp	.+72     	; 0x1de0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1d98:	c8 e2       	ldi	r28, 0x28	; 40
    1d9a:	fc 9e       	mul	r15, r28
    1d9c:	c0 2d       	mov	r28, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	d0 e0       	ldi	r29, 0x00	; 0
    1da2:	ca 15       	cp	r28, r10
    1da4:	db 05       	cpc	r29, r11
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1da8:	e5 01       	movw	r28, r10
    1daa:	be 01       	movw	r22, r28
    1dac:	76 95       	lsr	r23
    1dae:	67 95       	ror	r22
    1db0:	9e 01       	movw	r18, r28
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	f8 12       	cpse	r15, r24
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	60 5e       	subi	r22, 0xE0	; 224
    1dc2:	73 44       	sbci	r23, 0x43	; 67
    1dc4:	81 44       	sbci	r24, 0x41	; 65
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	60 53       	subi	r22, 0x30	; 48
    1dd0:	7d 4e       	sbci	r23, 0xED	; 237
    1dd2:	8c 4e       	sbci	r24, 0xEC	; 236
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__udivmodsi4>
    1dda:	59 01       	movw	r10, r18
    1ddc:	8e 2d       	mov	r24, r14
    1dde:	82 60       	ori	r24, 0x02	; 2
    1de0:	88 2e       	mov	r8, r24
    1de2:	2a e0       	ldi	r18, 0x0A	; 10
    1de4:	f2 12       	cpse	r15, r18
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1de8:	ce 01       	movw	r24, r28
    1dea:	05 96       	adiw	r24, 0x05	; 5
    1dec:	6a e0       	ldi	r22, 0x0A	; 10
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    1df4:	eb 01       	movw	r28, r22
    1df6:	c8 3e       	cpi	r28, 0xE8	; 232
    1df8:	43 e0       	ldi	r20, 0x03	; 3
    1dfa:	d4 07       	cpc	r29, r20
    1dfc:	59 f0       	breq	.+22     	; 0x1e14 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1dfe:	98 01       	movw	r18, r16
    1e00:	de 01       	movw	r26, r28
    1e02:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__umulhisi3>
    1e06:	28 ee       	ldi	r18, 0xE8	; 232
    1e08:	33 e0       	ldi	r19, 0x03	; 3
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__divmodsi4>
    1e12:	89 01       	movw	r16, r18
    1e14:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e18:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e1c:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e20:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e24:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e28:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e2c:	4d 2d       	mov	r20, r13
    1e2e:	40 31       	cpi	r20, 0x10	; 16
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1e32:	4f e0       	ldi	r20, 0x0F	; 15
    1e34:	80 e1       	ldi	r24, 0x10	; 16
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	84 1b       	sub	r24, r20
    1e3a:	91 09       	sbc	r25, r1
    1e3c:	a9 01       	movw	r20, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1e40:	56 95       	lsr	r21
    1e42:	47 95       	ror	r20
    1e44:	8a 95       	dec	r24
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1e48:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e4c:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1e50:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <_ZL13buzzerTimeout+0x1>
    1e54:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <_ZL13buzzerTimeout>
    1e58:	86 b3       	in	r24, 0x16	; 22
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	86 bb       	out	0x16, r24	; 22
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	bf 90       	pop	r11
    1e74:	af 90       	pop	r10
    1e76:	9f 90       	pop	r9
    1e78:	8f 90       	pop	r8
    1e7a:	08 95       	ret

00001e7c <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	eb 01       	movw	r28, r22
    1e82:	8f 3f       	cpi	r24, 0xFF	; 255
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1e86:	41 11       	cpse	r20, r1
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	be 01       	movw	r22, r28
    1e8e:	88 ee       	ldi	r24, 0xE8	; 232
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	43 c0       	rjmp	.+134    	; 0x1f1a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1e94:	81 31       	cpi	r24, 0x11	; 17
    1e96:	30 f0       	brcs	.+12     	; 0x1ea4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1e98:	50 ef       	ldi	r21, 0xF0	; 240
    1e9a:	58 0f       	add	r21, r24
    1e9c:	50 36       	cpi	r21, 0x60	; 96
    1e9e:	18 f0       	brcs	.+6      	; 0x1ea6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1ea0:	5f e5       	ldi	r21, 0x5F	; 95
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	85 2f       	mov	r24, r21
    1ea8:	6c e0       	ldi	r22, 0x0C	; 12
    1eaa:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__udivmodqi4>
    1eae:	68 2f       	mov	r22, r24
    1eb0:	74 ef       	ldi	r23, 0xF4	; 244
    1eb2:	76 03       	mulsu	r23, r22
    1eb4:	90 01       	movw	r18, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	25 0f       	add	r18, r21
    1eba:	31 1d       	adc	r19, r1
    1ebc:	2c 30       	cpi	r18, 0x0C	; 12
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	40 f4       	brcc	.+16     	; 0x1ed2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	ec 5c       	subi	r30, 0xCC	; 204
    1eca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ecc:	20 81       	ld	r18, Z
    1ece:	31 81       	ldd	r19, Z+1	; 0x01
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	87 30       	cpi	r24, 0x07	; 7
    1ed8:	81 f0       	breq	.+32     	; 0x1efa <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1eda:	08 2e       	mov	r0, r24
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1ee6:	82 30       	cpi	r24, 0x02	; 2
    1ee8:	28 f0       	brcs	.+10     	; 0x1ef4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1eea:	c9 01       	movw	r24, r18
    1eec:	05 96       	adiw	r24, 0x05	; 5
    1eee:	6a e0       	ldi	r22, 0x0A	; 10
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	0c c0       	rjmp	.+24     	; 0x1f0c <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	90 58       	subi	r25, 0x80	; 128
    1ef8:	0c c0       	rjmp	.+24     	; 0x1f12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1efa:	c9 01       	movw	r24, r18
    1efc:	36 e0       	ldi	r19, 0x06	; 6
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	3a 95       	dec	r19
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1f06:	02 96       	adiw	r24, 0x02	; 2
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    1f10:	cb 01       	movw	r24, r22
    1f12:	40 31       	cpi	r20, 0x10	; 16
    1f14:	08 f0       	brcs	.+2      	; 0x1f18 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1f16:	4f e0       	ldi	r20, 0x0F	; 15
    1f18:	be 01       	movw	r22, r28
    1f1a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	08 95       	ret

00001f24 <_ZL8nextNotev>:
    1f24:	a2 e0       	ldi	r26, 0x02	; 2
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e8 e9       	ldi	r30, 0x98	; 152
    1f2a:	ff e0       	ldi	r31, 0x0F	; 15
    1f2c:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__prologue_saves__+0x4>
    1f30:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1f34:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZL8staccato>
    1f38:	88 23       	and	r24, r24
    1f3a:	21 f0       	breq	.+8      	; 0x1f44 <_ZL8nextNotev+0x20>
    1f3c:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <_ZL22staccato_rest_duration>
    1f40:	61 11       	cpse	r22, r1
    1f42:	17 c0       	rjmp	.+46     	; 0x1f72 <_ZL8nextNotev+0x4e>
    1f44:	77 24       	eor	r7, r7
    1f46:	73 94       	inc	r7
    1f48:	b0 ec       	ldi	r27, 0xC0	; 192
    1f4a:	ab 2e       	mov	r10, r27
    1f4c:	bd e5       	ldi	r27, 0x5D	; 93
    1f4e:	bb 2e       	mov	r11, r27
    1f50:	1a e0       	ldi	r17, 0x0A	; 10
    1f52:	61 2e       	mov	r6, r17
    1f54:	04 e0       	ldi	r16, 0x04	; 4
    1f56:	80 2e       	mov	r8, r16
    1f58:	80 ed       	ldi	r24, 0xD0	; 208
    1f5a:	c8 2e       	mov	r12, r24
    1f5c:	87 e0       	ldi	r24, 0x07	; 7
    1f5e:	d8 2e       	mov	r13, r24
    1f60:	94 e0       	ldi	r25, 0x04	; 4
    1f62:	e9 2e       	mov	r14, r25
    1f64:	f1 2c       	mov	r15, r1
    1f66:	04 ef       	ldi	r16, 0xF4	; 244
    1f68:	11 e0       	ldi	r17, 0x01	; 1
    1f6a:	2f e0       	ldi	r18, 0x0F	; 15
    1f6c:	42 2e       	mov	r4, r18
    1f6e:	51 2c       	mov	r5, r1
    1f70:	15 c0       	rjmp	.+42     	; 0x1f9c <_ZL8nextNotev+0x78>
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	88 ee       	ldi	r24, 0xE8	; 232
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1f7e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL22staccato_rest_duration>
    1f82:	17 c1       	rjmp	.+558    	; 0x21b2 <_ZL8nextNotev+0x28e>
    1f84:	86 36       	cpi	r24, 0x66	; 102
    1f86:	d4 f5       	brge	.+116    	; 0x1ffc <_ZL8nextNotev+0xd8>
    1f88:	81 36       	cpi	r24, 0x61	; 97
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <_ZL8nextNotev+0x6a>
    1f8c:	a9 c0       	rjmp	.+338    	; 0x20e0 <_ZL8nextNotev+0x1bc>
    1f8e:	7c f5       	brge	.+94     	; 0x1fee <_ZL8nextNotev+0xca>
    1f90:	8c 33       	cpi	r24, 0x3C	; 60
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <_ZL8nextNotev+0x72>
    1f94:	60 c0       	rjmp	.+192    	; 0x2056 <_ZL8nextNotev+0x132>
    1f96:	8e 33       	cpi	r24, 0x3E	; 62
    1f98:	81 f4       	brne	.+32     	; 0x1fba <_ZL8nextNotev+0x96>
    1f9a:	93 94       	inc	r9
    1f9c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    1fa0:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    1fa4:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    1fb0:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    1fb4:	85 36       	cpi	r24, 0x65	; 101
    1fb6:	31 f7       	brne	.-52     	; 0x1f84 <_ZL8nextNotev+0x60>
    1fb8:	52 c0       	rjmp	.+164    	; 0x205e <_ZL8nextNotev+0x13a>
    1fba:	81 32       	cpi	r24, 0x21	; 33
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <_ZL8nextNotev+0x9c>
    1fbe:	8b c0       	rjmp	.+278    	; 0x20d6 <_ZL8nextNotev+0x1b2>
    1fc0:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1fc4:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1fc8:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1fcc:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1fd0:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1fd4:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1fd8:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1fdc:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1fe0:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1fe4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL8staccato>
    1fe8:	a4 e0       	ldi	r26, 0x04	; 4
    1fea:	9a 2e       	mov	r9, r26
    1fec:	d7 cf       	rjmp	.-82     	; 0x1f9c <_ZL8nextNotev+0x78>
    1fee:	83 36       	cpi	r24, 0x63	; 99
    1ff0:	a1 f1       	breq	.+104    	; 0x205a <_ZL8nextNotev+0x136>
    1ff2:	0c f4       	brge	.+2      	; 0x1ff6 <_ZL8nextNotev+0xd2>
    1ff4:	78 c0       	rjmp	.+240    	; 0x20e6 <_ZL8nextNotev+0x1c2>
    1ff6:	10 e0       	ldi	r17, 0x00	; 0
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	77 c0       	rjmp	.+238    	; 0x20ea <_ZL8nextNotev+0x1c6>
    1ffc:	8d 36       	cpi	r24, 0x6D	; 109
    1ffe:	c1 f1       	breq	.+112    	; 0x2070 <_ZL8nextNotev+0x14c>
    2000:	94 f4       	brge	.+36     	; 0x2026 <_ZL8nextNotev+0x102>
    2002:	87 36       	cpi	r24, 0x67	; 103
    2004:	91 f1       	breq	.+100    	; 0x206a <_ZL8nextNotev+0x146>
    2006:	74 f1       	brlt	.+92     	; 0x2064 <_ZL8nextNotev+0x140>
    2008:	8c 36       	cpi	r24, 0x6C	; 108
    200a:	09 f0       	breq	.+2      	; 0x200e <_ZL8nextNotev+0xea>
    200c:	64 c0       	rjmp	.+200    	; 0x20d6 <_ZL8nextNotev+0x1b2>
    200e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZL9getNumberv>
    2012:	bc 01       	movw	r22, r24
    2014:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    2018:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    201c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2020:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2024:	51 c0       	rjmp	.+162    	; 0x20c8 <_ZL8nextNotev+0x1a4>
    2026:	82 37       	cpi	r24, 0x72	; 114
    2028:	c9 f1       	breq	.+114    	; 0x209c <_ZL8nextNotev+0x178>
    202a:	4c f4       	brge	.+18     	; 0x203e <_ZL8nextNotev+0x11a>
    202c:	8f 36       	cpi	r24, 0x6F	; 111
    202e:	09 f0       	breq	.+2      	; 0x2032 <_ZL8nextNotev+0x10e>
    2030:	52 c0       	rjmp	.+164    	; 0x20d6 <_ZL8nextNotev+0x1b2>
    2032:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZL9getNumberv>
    2036:	98 2e       	mov	r9, r24
    2038:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    203c:	af cf       	rjmp	.-162    	; 0x1f9c <_ZL8nextNotev+0x78>
    203e:	84 37       	cpi	r24, 0x74	; 116
    2040:	81 f1       	breq	.+96     	; 0x20a2 <_ZL8nextNotev+0x17e>
    2042:	86 37       	cpi	r24, 0x76	; 118
    2044:	09 f0       	breq	.+2      	; 0x2048 <_ZL8nextNotev+0x124>
    2046:	47 c0       	rjmp	.+142    	; 0x20d6 <_ZL8nextNotev+0x1b2>
    2048:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZL9getNumberv>
    204c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    2050:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    2054:	a3 cf       	rjmp	.-186    	; 0x1f9c <_ZL8nextNotev+0x78>
    2056:	9a 94       	dec	r9
    2058:	a1 cf       	rjmp	.-190    	; 0x1f9c <_ZL8nextNotev+0x78>
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	20 c0       	rjmp	.+64     	; 0x209e <_ZL8nextNotev+0x17a>
    205e:	10 e0       	ldi	r17, 0x00	; 0
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	43 c0       	rjmp	.+134    	; 0x20ea <_ZL8nextNotev+0x1c6>
    2064:	10 e0       	ldi	r17, 0x00	; 0
    2066:	85 e0       	ldi	r24, 0x05	; 5
    2068:	40 c0       	rjmp	.+128    	; 0x20ea <_ZL8nextNotev+0x1c6>
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	87 e0       	ldi	r24, 0x07	; 7
    206e:	3d c0       	rjmp	.+122    	; 0x20ea <_ZL8nextNotev+0x1c6>
    2070:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    2074:	8c 36       	cpi	r24, 0x6C	; 108
    2076:	19 f4       	brne	.+6      	; 0x207e <_ZL8nextNotev+0x15a>
    2078:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL8staccato>
    207c:	04 c0       	rjmp	.+8      	; 0x2086 <_ZL8nextNotev+0x162>
    207e:	70 92 96 01 	sts	0x0196, r7	; 0x800196 <_ZL8staccato>
    2082:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL22staccato_rest_duration>
    2086:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    208a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    208e:	2f 5f       	subi	r18, 0xFF	; 255
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    2096:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    209a:	80 cf       	rjmp	.-256    	; 0x1f9c <_ZL8nextNotev+0x78>
    209c:	11 e0       	ldi	r17, 0x01	; 1
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	24 c0       	rjmp	.+72     	; 0x20ea <_ZL8nextNotev+0x1c6>
    20a2:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZL9getNumberv>
    20a6:	bc 01       	movw	r22, r24
    20a8:	c5 01       	movw	r24, r10
    20aa:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    20ae:	66 9e       	mul	r6, r22
    20b0:	c0 01       	movw	r24, r0
    20b2:	67 9e       	mul	r6, r23
    20b4:	90 0d       	add	r25, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    20bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    20c0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    20c4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    20c8:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    20cc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    20d0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    20d4:	63 cf       	rjmp	.-314    	; 0x1f9c <_ZL8nextNotev+0x78>
    20d6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
    20da:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
    20de:	69 c0       	rjmp	.+210    	; 0x21b2 <_ZL8nextNotev+0x28e>
    20e0:	10 e0       	ldi	r17, 0x00	; 0
    20e2:	89 e0       	ldi	r24, 0x09	; 9
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <_ZL8nextNotev+0x1c6>
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	8b e0       	ldi	r24, 0x0B	; 11
    20ea:	08 2f       	mov	r16, r24
    20ec:	9c e0       	ldi	r25, 0x0C	; 12
    20ee:	99 9e       	mul	r9, r25
    20f0:	00 0d       	add	r16, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    20f8:	98 2f       	mov	r25, r24
    20fa:	97 7f       	andi	r25, 0xF7	; 247
    20fc:	93 32       	cpi	r25, 0x23	; 35
    20fe:	61 f4       	brne	.+24     	; 0x2118 <_ZL8nextNotev+0x1f4>
    2100:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    2104:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    2108:	2f 5f       	subi	r18, 0xFF	; 255
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    2110:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    2114:	0f 5f       	subi	r16, 0xFF	; 255
    2116:	ee cf       	rjmp	.-36     	; 0x20f4 <_ZL8nextNotev+0x1d0>
    2118:	8d 32       	cpi	r24, 0x2D	; 45
    211a:	71 f4       	brne	.+28     	; 0x2138 <_ZL8nextNotev+0x214>
    211c:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    2120:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    2124:	2f 5f       	subi	r18, 0xFF	; 255
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    212c:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    2130:	01 50       	subi	r16, 0x01	; 1
    2132:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    2136:	f0 cf       	rjmp	.-32     	; 0x2118 <_ZL8nextNotev+0x1f4>
    2138:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    213c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    2140:	81 53       	subi	r24, 0x31	; 49
    2142:	88 30       	cpi	r24, 0x08	; 8
    2144:	50 f4       	brcc	.+20     	; 0x215a <_ZL8nextNotev+0x236>
    2146:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    214a:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    214e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZL9getNumberv>
    2152:	bc 01       	movw	r22, r24
    2154:	c7 01       	movw	r24, r14
    2156:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    215a:	7b 01       	movw	r14, r22
    215c:	f6 94       	lsr	r15
    215e:	e7 94       	ror	r14
    2160:	69 83       	std	Y+1, r22	; 0x01
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZL16currentCharacterv>
    2168:	69 81       	ldd	r22, Y+1	; 0x01
    216a:	7a 81       	ldd	r23, Y+2	; 0x02
    216c:	8e 32       	cpi	r24, 0x2E	; 46
    216e:	69 f4       	brne	.+26     	; 0x218a <_ZL8nextNotev+0x266>
    2170:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
    2174:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__data_end+0x1>
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__data_end+0x1>
    2180:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__data_end>
    2184:	6e 0d       	add	r22, r14
    2186:	7f 1d       	adc	r23, r15
    2188:	e9 cf       	rjmp	.-46     	; 0x215c <_ZL8nextNotev+0x238>
    218a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZL8staccato>
    218e:	88 23       	and	r24, r24
    2190:	39 f0       	breq	.+14     	; 0x21a0 <_ZL8nextNotev+0x27c>
    2192:	9b 01       	movw	r18, r22
    2194:	36 95       	lsr	r19
    2196:	27 95       	ror	r18
    2198:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <_ZL22staccato_rest_duration>
    219c:	62 1b       	sub	r22, r18
    219e:	71 09       	sbc	r23, r1
    21a0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    21a4:	11 23       	and	r17, r17
    21a6:	11 f0       	breq	.+4      	; 0x21ac <_ZL8nextNotev+0x288>
    21a8:	8f ef       	ldi	r24, 0xFF	; 255
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <_ZL8nextNotev+0x28a>
    21ac:	80 2f       	mov	r24, r16
    21ae:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN15OrangutanBuzzer8playNoteEhjh>
    21b2:	22 96       	adiw	r28, 0x02	; 2
    21b4:	e0 e1       	ldi	r30, 0x10	; 16
    21b6:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__epilogue_restores__+0x4>

000021ba <__vector_13>:
    21ba:	1f 92       	push	r1
    21bc:	0f 92       	push	r0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	0f 92       	push	r0
    21c2:	11 24       	eor	r1, r1
    21c4:	2f 93       	push	r18
    21c6:	3f 93       	push	r19
    21c8:	4f 93       	push	r20
    21ca:	5f 93       	push	r21
    21cc:	6f 93       	push	r22
    21ce:	7f 93       	push	r23
    21d0:	8f 93       	push	r24
    21d2:	9f 93       	push	r25
    21d4:	af 93       	push	r26
    21d6:	bf 93       	push	r27
    21d8:	ef 93       	push	r30
    21da:	ff 93       	push	r31
    21dc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL13buzzerTimeout>
    21e0:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL13buzzerTimeout+0x1>
    21e4:	9c 01       	movw	r18, r24
    21e6:	21 50       	subi	r18, 0x01	; 1
    21e8:	31 09       	sbc	r19, r1
    21ea:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <_ZL13buzzerTimeout+0x1>
    21ee:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <_ZL13buzzerTimeout>
    21f2:	89 2b       	or	r24, r25
    21f4:	11 f5       	brne	.+68     	; 0x223a <__vector_13+0x80>
    21f6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    21fa:	78 94       	sei
    21fc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2200:	88 7f       	andi	r24, 0xF8	; 248
    2202:	81 60       	ori	r24, 0x01	; 1
    2204:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2208:	80 e1       	ldi	r24, 0x10	; 16
    220a:	97 e2       	ldi	r25, 0x27	; 39
    220c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2210:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2214:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2218:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    2222:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    2226:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    222a:	89 2b       	or	r24, r25
    222c:	31 f0       	breq	.+12     	; 0x223a <__vector_13+0x80>
    222e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL17play_mode_setting>
    2232:	81 11       	cpse	r24, r1
    2234:	02 c0       	rjmp	.+4      	; 0x223a <__vector_13+0x80>
    2236:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZL8nextNotev>
    223a:	ff 91       	pop	r31
    223c:	ef 91       	pop	r30
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	7f 91       	pop	r23
    2248:	6f 91       	pop	r22
    224a:	5f 91       	pop	r21
    224c:	4f 91       	pop	r20
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <_ZN15OrangutanBuzzer4playEPKc>:
    225c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2260:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
    2264:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
    2268:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL17use_program_space>
    226c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL22staccato_rest_duration>
    2270:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZL8nextNotev>
    2274:	08 95       	ret

00002276 <play>:
    2276:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN15OrangutanBuzzer4playEPKc>
    227a:	08 95       	ret

0000227c <delay_us.constprop.0>:
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	6f 93       	push	r22
    2282:	64 e0       	ldi	r22, 0x04	; 4
    2284:	6a 95       	dec	r22
    2286:	f1 f7       	brne	.-4      	; 0x2284 <delay_us.constprop.0+0x8>
    2288:	6f 91       	pop	r22
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	c9 f7       	brne	.-14     	; 0x2280 <delay_us.constprop.0+0x4>
    228e:	08 95       	ret

00002290 <_ZN12OrangutanLCD8busyWaitEv>:
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	1a b1       	in	r17, 0x0a	; 10
    229a:	57 98       	cbi	0x0a, 7	; 10
    229c:	5a 98       	cbi	0x0b, 2	; 11
    229e:	28 9a       	sbi	0x05, 0	; 5
    22a0:	c0 e0       	ldi	r28, 0x00	; 0
    22a2:	d0 e0       	ldi	r29, 0x00	; 0
    22a4:	0e 94 3e 11 	call	0x227c	; 0x227c <delay_us.constprop.0>
    22a8:	5c 9a       	sbi	0x0b, 4	; 11
    22aa:	0e 94 3e 11 	call	0x227c	; 0x227c <delay_us.constprop.0>
    22ae:	09 b1       	in	r16, 0x09	; 9
    22b0:	5c 98       	cbi	0x0b, 4	; 11
    22b2:	0e 94 3e 11 	call	0x227c	; 0x227c <delay_us.constprop.0>
    22b6:	5c 9a       	sbi	0x0b, 4	; 11
    22b8:	0e 94 3e 11 	call	0x227c	; 0x227c <delay_us.constprop.0>
    22bc:	5c 98       	cbi	0x0b, 4	; 11
    22be:	24 96       	adiw	r28, 0x04	; 4
    22c0:	07 ff       	sbrs	r16, 7
    22c2:	10 c0       	rjmp	.+32     	; 0x22e4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    22c4:	ae 01       	movw	r20, r28
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <lcdTimeout>
    22ce:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <lcdTimeout+0x1>
    22d2:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <lcdTimeout+0x2>
    22d6:	b0 91 9e 01 	lds	r27, 0x019E	; 0x80019e <lcdTimeout+0x3>
    22da:	48 17       	cp	r20, r24
    22dc:	59 07       	cpc	r21, r25
    22de:	6a 07       	cpc	r22, r26
    22e0:	7b 07       	cpc	r23, r27
    22e2:	00 f3       	brcs	.-64     	; 0x22a4 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    22e4:	1a b9       	out	0x0a, r17	; 10
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <_ZN12OrangutanLCD8sendDataEh>:
    22f0:	95 b1       	in	r25, 0x05	; 5
    22f2:	28 2f       	mov	r18, r24
    22f4:	21 70       	andi	r18, 0x01	; 1
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	48 2f       	mov	r20, r24
    22fe:	46 70       	andi	r20, 0x06	; 6
    2300:	68 e0       	ldi	r22, 0x08	; 8
    2302:	46 9f       	mul	r20, r22
    2304:	a0 01       	movw	r20, r0
    2306:	11 24       	eor	r1, r1
    2308:	24 2b       	or	r18, r20
    230a:	9d 7c       	andi	r25, 0xCD	; 205
    230c:	29 2b       	or	r18, r25
    230e:	25 b9       	out	0x05, r18	; 5
    2310:	9b b1       	in	r25, 0x0b	; 11
    2312:	88 70       	andi	r24, 0x08	; 8
    2314:	82 95       	swap	r24
    2316:	80 7f       	andi	r24, 0xF0	; 240
    2318:	9f 77       	andi	r25, 0x7F	; 127
    231a:	89 2b       	or	r24, r25
    231c:	8b b9       	out	0x0b, r24	; 11
    231e:	5c 9a       	sbi	0x0b, 4	; 11
    2320:	0e 94 3e 11 	call	0x227c	; 0x227c <delay_us.constprop.0>
    2324:	5c 98       	cbi	0x0b, 4	; 11
    2326:	0e 94 3e 11 	call	0x227c	; 0x227c <delay_us.constprop.0>
    232a:	08 95       	ret

0000232c <_ZN12OrangutanLCD4sendEhhh>:
    232c:	a0 e0       	ldi	r26, 0x00	; 0
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ec e9       	ldi	r30, 0x9C	; 156
    2332:	f1 e1       	ldi	r31, 0x11	; 17
    2334:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x16>
    2338:	c8 2f       	mov	r28, r24
    233a:	d6 2e       	mov	r13, r22
    233c:	e4 2e       	mov	r14, r20
    233e:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <_ZZN12OrangutanLCD4initEvE11initialized>
    2342:	81 11       	cpse	r24, r1
    2344:	05 c0       	rjmp	.+10     	; 0x2350 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <_ZZN12OrangutanLCD4initEvE11initialized>
    234c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN12OrangutanLCD5init2Ev>
    2350:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN12OrangutanLCD8busyWaitEv>
    2354:	14 b1       	in	r17, 0x04	; 4
    2356:	d5 b1       	in	r29, 0x05	; 5
    2358:	fa b0       	in	r15, 0x0a	; 10
    235a:	0b b1       	in	r16, 0x0b	; 11
    235c:	28 98       	cbi	0x05, 0	; 5
    235e:	dd 20       	and	r13, r13
    2360:	11 f0       	breq	.+4      	; 0x2366 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2362:	5a 9a       	sbi	0x0b, 2	; 11
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2366:	5a 98       	cbi	0x0b, 2	; 11
    2368:	94 b1       	in	r25, 0x04	; 4
    236a:	92 63       	ori	r25, 0x32	; 50
    236c:	94 b9       	out	0x04, r25	; 4
    236e:	57 9a       	sbi	0x0a, 7	; 10
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	e8 16       	cp	r14, r24
    2374:	29 f0       	breq	.+10     	; 0x2380 <_ZN12OrangutanLCD4sendEhhh+0x54>
    2376:	8c 2f       	mov	r24, r28
    2378:	82 95       	swap	r24
    237a:	8f 70       	andi	r24, 0x0F	; 15
    237c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN12OrangutanLCD8sendDataEh>
    2380:	8c 2f       	mov	r24, r28
    2382:	8f 70       	andi	r24, 0x0F	; 15
    2384:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN12OrangutanLCD8sendDataEh>
    2388:	fa b8       	out	0x0a, r15	; 10
    238a:	0b b9       	out	0x0b, r16	; 11
    238c:	14 b9       	out	0x04, r17	; 4
    238e:	d5 b9       	out	0x05, r29	; 5
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	e7 e0       	ldi	r30, 0x07	; 7
    2396:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x16>

0000239a <_ZN12OrangutanLCD8send_cmdEh>:
    239a:	42 e0       	ldi	r20, 0x02	; 2
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 96 11 	call	0x232c	; 0x232c <_ZN12OrangutanLCD4sendEhhh>
    23a2:	08 95       	ret

000023a4 <_ZN12OrangutanLCD9send_dataEh>:
    23a4:	42 e0       	ldi	r20, 0x02	; 2
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	0e 94 96 11 	call	0x232c	; 0x232c <_ZN12OrangutanLCD4sendEhhh>
    23ac:	08 95       	ret

000023ae <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    23ae:	41 e0       	ldi	r20, 0x01	; 1
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	0e 94 96 11 	call	0x232c	; 0x232c <_ZN12OrangutanLCD4sendEhhh>
    23b6:	08 95       	ret

000023b8 <_ZN12OrangutanLCD5init2Ev>:
    23b8:	80 e1       	ldi	r24, 0x10	; 16
    23ba:	97 e2       	ldi	r25, 0x27	; 39
    23bc:	a0 e0       	ldi	r26, 0x00	; 0
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <lcdTimeout>
    23c4:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <lcdTimeout+0x1>
    23c8:	a0 93 9d 01 	sts	0x019D, r26	; 0x80019d <lcdTimeout+0x2>
    23cc:	b0 93 9e 01 	sts	0x019E, r27	; 0x80019e <lcdTimeout+0x3>
    23d0:	52 9a       	sbi	0x0a, 2	; 10
    23d2:	20 9a       	sbi	0x04, 0	; 4
    23d4:	54 9a       	sbi	0x0a, 4	; 10
    23d6:	8e e1       	ldi	r24, 0x1E	; 30
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
    2416:	88 e2       	ldi	r24, 0x28	; 40
    2418:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    241c:	88 e0       	ldi	r24, 0x08	; 8
    241e:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    242e:	8c e0       	ldi	r24, 0x0C	; 12
    2430:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    2434:	08 95       	ret

00002436 <_ZN12OrangutanLCD5clearEv>:
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    243c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <printf_chars>
    2440:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <printf_chars+0x1>
    2444:	89 2b       	or	r24, r25
    2446:	f9 f0       	breq	.+62     	; 0x2486 <_ZN12OrangutanLCD5clearEv+0x50>
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	a0 e2       	ldi	r26, 0x20	; 32
    244c:	26 2f       	mov	r18, r22
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2454:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	78 9f       	mul	r23, r24
    245e:	a0 01       	movw	r20, r0
    2460:	79 9f       	mul	r23, r25
    2462:	50 0d       	add	r21, r0
    2464:	11 24       	eor	r1, r1
    2466:	24 17       	cp	r18, r20
    2468:	35 07       	cpc	r19, r21
    246a:	4c f4       	brge	.+18     	; 0x247e <_ZN12OrangutanLCD5clearEv+0x48>
    246c:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <printf_chars>
    2470:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <printf_chars+0x1>
    2474:	e2 0f       	add	r30, r18
    2476:	f3 1f       	adc	r31, r19
    2478:	a0 83       	st	Z, r26
    247a:	6f 5f       	subi	r22, 0xFF	; 255
    247c:	e7 cf       	rjmp	.-50     	; 0x244c <_ZN12OrangutanLCD5clearEv+0x16>
    247e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <col>
    2482:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <row>
    2486:	08 95       	ret

00002488 <clear>:
    2488:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZN12OrangutanLCD5clearEv>
    248c:	08 95       	ret

0000248e <_ZN12OrangutanLCD5printEPKc>:
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	ec 01       	movw	r28, r24
    2494:	89 91       	ld	r24, Y+
    2496:	88 23       	and	r24, r24
    2498:	19 f0       	breq	.+6      	; 0x24a0 <_ZN12OrangutanLCD5printEPKc+0x12>
    249a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN12OrangutanLCD9send_dataEh>
    249e:	fa cf       	rjmp	.-12     	; 0x2494 <_ZN12OrangutanLCD5printEPKc+0x6>
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <print>:
    24a6:	0e 94 47 12 	call	0x248e	; 0x248e <_ZN12OrangutanLCD5printEPKc>
    24aa:	08 95       	ret

000024ac <_ZN12OrangutanLCD5printEm>:
    24ac:	aa e0       	ldi	r26, 0x0A	; 10
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	ec e5       	ldi	r30, 0x5C	; 92
    24b2:	f2 e1       	ldi	r31, 0x12	; 18
    24b4:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x14>
    24b8:	1a e0       	ldi	r17, 0x0A	; 10
    24ba:	5a e0       	ldi	r21, 0x0A	; 10
    24bc:	c5 2e       	mov	r12, r21
    24be:	d1 2c       	mov	r13, r1
    24c0:	e1 2c       	mov	r14, r1
    24c2:	f1 2c       	mov	r15, r1
    24c4:	06 2f       	mov	r16, r22
    24c6:	a7 01       	movw	r20, r14
    24c8:	96 01       	movw	r18, r12
    24ca:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__udivmodsi4>
    24ce:	ca 01       	movw	r24, r20
    24d0:	b9 01       	movw	r22, r18
    24d2:	11 50       	subi	r17, 0x01	; 1
    24d4:	e1 e0       	ldi	r30, 0x01	; 1
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	ec 0f       	add	r30, r28
    24da:	fd 1f       	adc	r31, r29
    24dc:	e1 0f       	add	r30, r17
    24de:	f1 1d       	adc	r31, r1
    24e0:	00 5d       	subi	r16, 0xD0	; 208
    24e2:	2a e0       	ldi	r18, 0x0A	; 10
    24e4:	62 9f       	mul	r22, r18
    24e6:	00 19       	sub	r16, r0
    24e8:	11 24       	eor	r1, r1
    24ea:	00 83       	st	Z, r16
    24ec:	61 15       	cp	r22, r1
    24ee:	71 05       	cpc	r23, r1
    24f0:	81 05       	cpc	r24, r1
    24f2:	91 05       	cpc	r25, r1
    24f4:	39 f7       	brne	.-50     	; 0x24c4 <_ZN12OrangutanLCD5printEm+0x18>
    24f6:	1a 30       	cpi	r17, 0x0A	; 10
    24f8:	58 f4       	brcc	.+22     	; 0x2510 <_ZN12OrangutanLCD5printEm+0x64>
    24fa:	e1 e0       	ldi	r30, 0x01	; 1
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	ec 0f       	add	r30, r28
    2500:	fd 1f       	adc	r31, r29
    2502:	e1 0f       	add	r30, r17
    2504:	f1 1d       	adc	r31, r1
    2506:	80 81       	ld	r24, Z
    2508:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN12OrangutanLCD9send_dataEh>
    250c:	1f 5f       	subi	r17, 0xFF	; 255
    250e:	f3 cf       	rjmp	.-26     	; 0x24f6 <_ZN12OrangutanLCD5printEm+0x4a>
    2510:	2a 96       	adiw	r28, 0x0a	; 10
    2512:	e8 e0       	ldi	r30, 0x08	; 8
    2514:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x14>

00002518 <_ZN12OrangutanLCD5printEl>:
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	6b 01       	movw	r12, r22
    2522:	7c 01       	movw	r14, r24
    2524:	97 ff       	sbrs	r25, 7
    2526:	0b c0       	rjmp	.+22     	; 0x253e <_ZN12OrangutanLCD5printEl+0x26>
    2528:	f0 94       	com	r15
    252a:	e0 94       	com	r14
    252c:	d0 94       	com	r13
    252e:	c0 94       	com	r12
    2530:	c1 1c       	adc	r12, r1
    2532:	d1 1c       	adc	r13, r1
    2534:	e1 1c       	adc	r14, r1
    2536:	f1 1c       	adc	r15, r1
    2538:	8d e2       	ldi	r24, 0x2D	; 45
    253a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN12OrangutanLCD9send_dataEh>
    253e:	c7 01       	movw	r24, r14
    2540:	b6 01       	movw	r22, r12
    2542:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN12OrangutanLCD5printEm>
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	08 95       	ret

00002550 <print_long>:
    2550:	0e 94 8c 12 	call	0x2518	; 0x2518 <_ZN12OrangutanLCD5printEl>
    2554:	08 95       	ret

00002556 <_ZN12OrangutanLCD6gotoXYEhh>:
    2556:	a5 e0       	ldi	r26, 0x05	; 5
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e1 eb       	ldi	r30, 0xB1	; 177
    255c:	f2 e1       	ldi	r31, 0x12	; 18
    255e:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x1e>
    2562:	18 2f       	mov	r17, r24
    2564:	80 e8       	ldi	r24, 0x80	; 128
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	80 ec       	ldi	r24, 0xC0	; 192
    256a:	8a 83       	std	Y+2, r24	; 0x02
    256c:	84 e9       	ldi	r24, 0x94	; 148
    256e:	8b 83       	std	Y+3, r24	; 0x03
    2570:	84 ed       	ldi	r24, 0xD4	; 212
    2572:	8c 83       	std	Y+4, r24	; 0x04
    2574:	fe 01       	movw	r30, r28
    2576:	e6 0f       	add	r30, r22
    2578:	f1 1d       	adc	r31, r1
    257a:	81 81       	ldd	r24, Z+1	; 0x01
    257c:	81 0f       	add	r24, r17
    257e:	6d 83       	std	Y+5, r22	; 0x05
    2580:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD8send_cmdEh>
    2584:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <col>
    2588:	6d 81       	ldd	r22, Y+5	; 0x05
    258a:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <row>
    258e:	25 96       	adiw	r28, 0x05	; 5
    2590:	e3 e0       	ldi	r30, 0x03	; 3
    2592:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x1e>

00002596 <lcd_goto_xy>:
    2596:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN12OrangutanLCD6gotoXYEhh>
    259a:	08 95       	ret

0000259c <_ZN16OrangutanDigital9setOutputEhh>:
    259c:	88 30       	cpi	r24, 0x08	; 8
    259e:	58 f4       	brcc	.+22     	; 0x25b6 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	01 c0       	rjmp	.+2      	; 0x25a6 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    25a4:	99 0f       	add	r25, r25
    25a6:	8a 95       	dec	r24
    25a8:	ea f7       	brpl	.-6      	; 0x25a4 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    25aa:	89 2f       	mov	r24, r25
    25ac:	aa e2       	ldi	r26, 0x2A	; 42
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	eb e2       	ldi	r30, 0x2B	; 43
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	21 c0       	rjmp	.+66     	; 0x25f8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25b6:	8e 30       	cpi	r24, 0x0E	; 14
    25b8:	60 f4       	brcc	.+24     	; 0x25d2 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    25ba:	98 ef       	ldi	r25, 0xF8	; 248
    25bc:	98 0f       	add	r25, r24
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    25c2:	88 0f       	add	r24, r24
    25c4:	9a 95       	dec	r25
    25c6:	ea f7       	brpl	.-6      	; 0x25c2 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    25c8:	a4 e2       	ldi	r26, 0x24	; 36
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e2       	ldi	r30, 0x25	; 37
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	13 c0       	rjmp	.+38     	; 0x25f8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25d2:	85 31       	cpi	r24, 0x15	; 21
    25d4:	60 f4       	brcc	.+24     	; 0x25ee <_ZN16OrangutanDigital9setOutputEhh+0x52>
    25d6:	92 ef       	ldi	r25, 0xF2	; 242
    25d8:	98 0f       	add	r25, r24
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    25de:	88 0f       	add	r24, r24
    25e0:	9a 95       	dec	r25
    25e2:	ea f7       	brpl	.-6      	; 0x25de <_ZN16OrangutanDigital9setOutputEhh+0x42>
    25e4:	a7 e2       	ldi	r26, 0x27	; 39
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e8 e2       	ldi	r30, 0x28	; 40
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e0 e0       	ldi	r30, 0x00	; 0
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	6f 3f       	cpi	r22, 0xFF	; 255
    25fa:	19 f4       	brne	.+6      	; 0x2602 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    25fc:	90 81       	ld	r25, Z
    25fe:	98 27       	eor	r25, r24
    2600:	09 c0       	rjmp	.+18     	; 0x2614 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2602:	66 23       	and	r22, r22
    2604:	19 f0       	breq	.+6      	; 0x260c <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2606:	90 81       	ld	r25, Z
    2608:	98 2b       	or	r25, r24
    260a:	04 c0       	rjmp	.+8      	; 0x2614 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    260c:	20 81       	ld	r18, Z
    260e:	98 2f       	mov	r25, r24
    2610:	90 95       	com	r25
    2612:	92 23       	and	r25, r18
    2614:	90 83       	st	Z, r25
    2616:	9c 91       	ld	r25, X
    2618:	98 2b       	or	r25, r24
    261a:	9c 93       	st	X, r25
    261c:	08 95       	ret

0000261e <_ZN15OrangutanMotors5init2Ev>:
    261e:	83 ef       	ldi	r24, 0xF3	; 243
    2620:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2624:	84 bd       	out	0x24, r24	; 36
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    262c:	85 bd       	out	0x25, r24	; 37
    262e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2632:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2636:	18 bc       	out	0x28, r1	; 40
    2638:	17 bc       	out	0x27, r1	; 39
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	86 e0       	ldi	r24, 0x06	; 6
    263e:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN16OrangutanDigital9setOutputEhh>
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	85 e0       	ldi	r24, 0x05	; 5
    2646:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN16OrangutanDigital9setOutputEhh>
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	8b e0       	ldi	r24, 0x0B	; 11
    264e:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN16OrangutanDigital9setOutputEhh>
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN16OrangutanDigital9setOutputEhh>
    265a:	08 95       	ret

0000265c <_ZN15OrangutanMotors4initEv>:
    265c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <_ZZN15OrangutanMotors4initEvE11initialized>
    2660:	81 11       	cpse	r24, r1
    2662:	05 c0       	rjmp	.+10     	; 0x266e <_ZN15OrangutanMotors4initEv+0x12>
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <_ZZN15OrangutanMotors4initEvE11initialized>
    266a:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN15OrangutanMotors5init2Ev>
    266e:	08 95       	ret

00002670 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
    2676:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN15OrangutanMotors4initEv>
    267a:	d7 ff       	sbrs	r29, 7
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    267e:	d1 95       	neg	r29
    2680:	c1 95       	neg	r28
    2682:	d1 09       	sbc	r29, r1
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	01 c0       	rjmp	.+2      	; 0x268a <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	cf 3f       	cpi	r28, 0xFF	; 255
    268c:	d1 05       	cpc	r29, r1
    268e:	19 f0       	breq	.+6      	; 0x2696 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2690:	14 f0       	brlt	.+4      	; 0x2696 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2692:	cf ef       	ldi	r28, 0xFF	; 255
    2694:	d0 e0       	ldi	r29, 0x00	; 0
    2696:	88 23       	and	r24, r24
    2698:	19 f0       	breq	.+6      	; 0x26a0 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    269a:	18 bc       	out	0x28, r1	; 40
    269c:	c7 bd       	out	0x27, r28	; 39
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    26a0:	c8 bd       	out	0x28, r28	; 40
    26a2:	17 bc       	out	0x27, r1	; 39
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	08 95       	ret

000026aa <_ZN15OrangutanMotors10setM2SpeedEi>:
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	ec 01       	movw	r28, r24
    26b0:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN15OrangutanMotors4initEv>
    26b4:	d7 ff       	sbrs	r29, 7
    26b6:	05 c0       	rjmp	.+10     	; 0x26c2 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    26b8:	d1 95       	neg	r29
    26ba:	c1 95       	neg	r28
    26bc:	d1 09       	sbc	r29, r1
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	cf 3f       	cpi	r28, 0xFF	; 255
    26c6:	d1 05       	cpc	r29, r1
    26c8:	19 f0       	breq	.+6      	; 0x26d0 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    26ca:	14 f0       	brlt	.+4      	; 0x26d0 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    26cc:	cf ef       	ldi	r28, 0xFF	; 255
    26ce:	d0 e0       	ldi	r29, 0x00	; 0
    26d0:	88 23       	and	r24, r24
    26d2:	29 f0       	breq	.+10     	; 0x26de <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    26d4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    26d8:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    26de:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    26e2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <_ZN15OrangutanMotors9setSpeedsEii>:
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	eb 01       	movw	r28, r22
    26f2:	0e 94 38 13 	call	0x2670	; 0x2670 <_ZN15OrangutanMotors10setM1SpeedEi>
    26f6:	ce 01       	movw	r24, r28
    26f8:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN15OrangutanMotors10setM2SpeedEi>
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	08 95       	ret

00002702 <set_motors>:
    2702:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN15OrangutanMotors9setSpeedsEii>
    2706:	08 95       	ret

00002708 <_ZN20OrangutanPushbuttons5init2Ev>:
    2708:	84 b1       	in	r24, 0x04	; 4
    270a:	8d 7c       	andi	r24, 0xCD	; 205
    270c:	84 b9       	out	0x04, r24	; 4
    270e:	85 b1       	in	r24, 0x05	; 5
    2710:	82 63       	ori	r24, 0x32	; 50
    2712:	85 b9       	out	0x05, r24	; 5
    2714:	85 e0       	ldi	r24, 0x05	; 5
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	6f 93       	push	r22
    271a:	64 e0       	ldi	r22, 0x04	; 4
    271c:	6a 95       	dec	r22
    271e:	f1 f7       	brne	.-4      	; 0x271c <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2720:	6f 91       	pop	r22
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	c9 f7       	brne	.-14     	; 0x2718 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2726:	08 95       	ret

00002728 <_ZN20OrangutanPushbuttons4initEv>:
    2728:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    272c:	81 11       	cpse	r24, r1
    272e:	05 c0       	rjmp	.+10     	; 0x273a <_ZN20OrangutanPushbuttons4initEv+0x12>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2736:	0e 94 84 13 	call	0x2708	; 0x2708 <_ZN20OrangutanPushbuttons5init2Ev>
    273a:	08 95       	ret

0000273c <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    273c:	cf 93       	push	r28
    273e:	c8 2f       	mov	r28, r24
    2740:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZN20OrangutanPushbuttons4initEv>
    2744:	83 b1       	in	r24, 0x03	; 3
    2746:	8c 23       	and	r24, r28
    2748:	e9 f3       	breq	.-6      	; 0x2744 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    274a:	8a e0       	ldi	r24, 0x0A	; 10
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 0f 14 	call	0x281e	; 0x281e <delay_ms>
    2752:	83 b1       	in	r24, 0x03	; 3
    2754:	8c 23       	and	r24, r28
    2756:	b1 f3       	breq	.-20     	; 0x2744 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2758:	83 b1       	in	r24, 0x03	; 3
    275a:	8c 23       	and	r24, r28
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <wait_for_button_release>:
    2760:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2764:	08 95       	ret

00002766 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2766:	a1 e0       	ldi	r26, 0x01	; 1
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e9 eb       	ldi	r30, 0xB9	; 185
    276c:	f3 e1       	ldi	r31, 0x13	; 19
    276e:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__prologue_saves__+0x20>
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZN20OrangutanPushbuttons4initEv>
    2778:	93 b1       	in	r25, 0x03	; 3
    277a:	90 95       	com	r25
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	89 23       	and	r24, r25
    2780:	21 96       	adiw	r28, 0x01	; 1
    2782:	e2 e0       	ldi	r30, 0x02	; 2
    2784:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__epilogue_restores__+0x20>

00002788 <button_is_pressed>:
    2788:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN20OrangutanPushbuttons9isPressedEh>
    278c:	08 95       	ret

0000278e <__vector_9>:
    278e:	2f 92       	push	r2
    2790:	8f 93       	push	r24
    2792:	9f 93       	push	r25
    2794:	2f b6       	in	r2, 0x3f	; 63
    2796:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tickCount+0x1>
    279a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <tickCount+0x2>
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tickCount+0x1>
    27a4:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <tickCount+0x2>
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <tickCount+0x3>
    27ae:	89 1f       	adc	r24, r25
    27b0:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <tickCount+0x3>
    27b4:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <us_over_10+0x1>
    27b8:	9c 5f       	subi	r25, 0xFC	; 252
    27ba:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <us_over_10+0x1>
    27be:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <us_over_10>
    27c2:	80 51       	subi	r24, 0x10	; 16
    27c4:	97 42       	sbci	r25, 0x27	; 39
    27c6:	c0 f0       	brcs	.+48     	; 0x27f8 <end>
    27c8:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <us_over_10+0x1>
    27cc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <us_over_10>
    27d0:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msCounter>
    27d4:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <msCounter+0x1>
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <msCounter>
    27de:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <msCounter+0x1>
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <msCounter+0x2>
    27e8:	89 1f       	adc	r24, r25
    27ea:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <msCounter+0x2>
    27ee:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <msCounter+0x3>
    27f2:	89 1f       	adc	r24, r25
    27f4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <msCounter+0x3>

000027f8 <end>:
    27f8:	2f be       	out	0x3f, r2	; 63
    27fa:	9f 91       	pop	r25
    27fc:	8f 91       	pop	r24
    27fe:	2f 90       	pop	r2
    2800:	18 95       	reti

00002802 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2802:	28 ee       	ldi	r18, 0xE8	; 232
    2804:	33 e0       	ldi	r19, 0x03	; 3
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	48 f0       	brcs	.+18     	; 0x281c <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    280a:	f9 01       	movw	r30, r18
    280c:	6f 93       	push	r22
    280e:	64 e0       	ldi	r22, 0x04	; 4
    2810:	6a 95       	dec	r22
    2812:	f1 f7       	brne	.-4      	; 0x2810 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2814:	6f 91       	pop	r22
    2816:	31 97       	sbiw	r30, 0x01	; 1
    2818:	c9 f7       	brne	.-14     	; 0x280c <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    281a:	f5 cf       	rjmp	.-22     	; 0x2806 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    281c:	08 95       	ret

0000281e <delay_ms>:
    281e:	0e 94 01 14 	call	0x2802	; 0x2802 <_ZN13OrangutanTime17delayMillisecondsEj>
    2822:	08 95       	ret

00002824 <_ZN13OrangutanTime5init2Ev>:
    2824:	e0 e7       	ldi	r30, 0x70	; 112
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	8e 7f       	andi	r24, 0xFE	; 254
    282c:	80 83       	st	Z, r24
    282e:	a0 eb       	ldi	r26, 0xB0	; 176
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	8c 91       	ld	r24, X
    2834:	83 60       	ori	r24, 0x03	; 3
    2836:	8c 93       	st	X, r24
    2838:	a1 eb       	ldi	r26, 0xB1	; 177
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	8c 91       	ld	r24, X
    283e:	80 7f       	andi	r24, 0xF0	; 240
    2840:	8c 93       	st	X, r24
    2842:	8c 91       	ld	r24, X
    2844:	82 60       	ori	r24, 0x02	; 2
    2846:	8c 93       	st	X, r24
    2848:	b8 9a       	sbi	0x17, 0	; 23
    284a:	80 81       	ld	r24, Z
    284c:	81 60       	ori	r24, 0x01	; 1
    284e:	80 83       	st	Z, r24
    2850:	78 94       	sei
    2852:	08 95       	ret

00002854 <_ZN13OrangutanTime4initEv>:
    2854:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <_ZZN13OrangutanTime4initEvE11initialized>
    2858:	81 11       	cpse	r24, r1
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <_ZN13OrangutanTime4initEv+0x12>
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <_ZZN13OrangutanTime4initEvE11initialized>
    2862:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN13OrangutanTime5init2Ev>
    2866:	08 95       	ret

00002868 <_ZN13OrangutanTime5resetEv>:
    2868:	0e 94 2a 14 	call	0x2854	; 0x2854 <_ZN13OrangutanTime4initEv>
    286c:	e0 e7       	ldi	r30, 0x70	; 112
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	8e 7f       	andi	r24, 0xFE	; 254
    2874:	80 83       	st	Z, r24
    2876:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msCounter>
    287a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <msCounter+0x1>
    287e:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <msCounter+0x2>
    2882:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <msCounter+0x3>
    2886:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <us_over_10+0x1>
    288a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <us_over_10>
    288e:	80 81       	ld	r24, Z
    2890:	81 60       	ori	r24, 0x01	; 1
    2892:	80 83       	st	Z, r24
    2894:	08 95       	ret

00002896 <read_line_sensors>:
    2896:	46 2f       	mov	r20, r22
    2898:	bc 01       	movw	r22, r24
    289a:	8d ea       	ldi	r24, 0xAD	; 173
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <_ZN16PololuQTRSensors4readEPjh>
    28a2:	08 95       	ret

000028a4 <_ZN9Pololu3pi4initEjh>:
    28a4:	0f 93       	push	r16
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <_ZN9Pololu3pi4initEjh+0x8>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <_ZN9Pololu3pi4initEjh+0xa>
    28ae:	1f 92       	push	r1
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9c 01       	movw	r18, r24
    28b6:	85 e0       	ldi	r24, 0x05	; 5
    28b8:	ec e4       	ldi	r30, 0x4C	; 76
    28ba:	f1 e0       	ldi	r31, 0x01	; 1
    28bc:	de 01       	movw	r26, r28
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	01 90       	ld	r0, Z+
    28c2:	0d 92       	st	X+, r0
    28c4:	8a 95       	dec	r24
    28c6:	e1 f7       	brne	.-8      	; 0x28c0 <_ZN9Pololu3pi4initEjh+0x1c>
    28c8:	66 23       	and	r22, r22
    28ca:	11 f0       	breq	.+4      	; 0x28d0 <_ZN9Pololu3pi4initEjh+0x2c>
    28cc:	0f ef       	ldi	r16, 0xFF	; 255
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <_ZN9Pololu3pi4initEjh+0x2e>
    28d0:	03 e1       	ldi	r16, 0x13	; 19
    28d2:	45 e0       	ldi	r20, 0x05	; 5
    28d4:	be 01       	movw	r22, r28
    28d6:	6f 5f       	subi	r22, 0xFF	; 255
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255
    28da:	8d ea       	ldi	r24, 0xAD	; 173
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    28e2:	8d ea       	ldi	r24, 0xAD	; 173
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN16PololuQTRSensors11emittersOffEv>
    28ea:	0e 94 34 14 	call	0x2868	; 0x2868 <_ZN13OrangutanTime5resetEv>
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	0f 91       	pop	r16
    28fe:	08 95       	ret

00002900 <pololu_3pi_init>:
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN9Pololu3pi4initEjh>
    2906:	08 95       	ret

00002908 <_GLOBAL__sub_D_pololu_3pi_init>:
    2908:	8d ea       	ldi	r24, 0xAD	; 173
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN16PololuQTRSensorsD1Ev>
    2910:	08 95       	ret

00002912 <delay_us>:
    2912:	6f 93       	push	r22
    2914:	64 e0       	ldi	r22, 0x04	; 4
    2916:	6a 95       	dec	r22
    2918:	f1 f7       	brne	.-4      	; 0x2916 <delay_us+0x4>
    291a:	6f 91       	pop	r22
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	c9 f7       	brne	.-14     	; 0x2912 <delay_us>
    2920:	08 95       	ret

00002922 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2922:	fc 01       	movw	r30, r24
    2924:	11 82       	std	Z+1, r1	; 0x01
    2926:	10 82       	st	Z, r1
    2928:	13 82       	std	Z+3, r1	; 0x03
    292a:	12 82       	std	Z+2, r1	; 0x02
    292c:	15 82       	std	Z+5, r1	; 0x05
    292e:	14 82       	std	Z+4, r1	; 0x04
    2930:	16 82       	std	Z+6, r1	; 0x06
    2932:	68 30       	cpi	r22, 0x08	; 8
    2934:	68 f4       	brcc	.+26     	; 0x2950 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2936:	89 e2       	ldi	r24, 0x29	; 41
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	8b e2       	ldi	r24, 0x2B	; 43
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	93 83       	std	Z+3, r25	; 0x03
    2944:	82 83       	std	Z+2, r24	; 0x02
    2946:	8a e2       	ldi	r24, 0x2A	; 42
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	95 83       	std	Z+5, r25	; 0x05
    294c:	84 83       	std	Z+4, r24	; 0x04
    294e:	1f c0       	rjmp	.+62     	; 0x298e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2950:	6e 30       	cpi	r22, 0x0E	; 14
    2952:	70 f4       	brcc	.+28     	; 0x2970 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2954:	83 e2       	ldi	r24, 0x23	; 35
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	85 e2       	ldi	r24, 0x25	; 37
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	93 83       	std	Z+3, r25	; 0x03
    2962:	82 83       	std	Z+2, r24	; 0x02
    2964:	84 e2       	ldi	r24, 0x24	; 36
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	95 83       	std	Z+5, r25	; 0x05
    296a:	84 83       	std	Z+4, r24	; 0x04
    296c:	68 50       	subi	r22, 0x08	; 8
    296e:	0f c0       	rjmp	.+30     	; 0x298e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2970:	65 31       	cpi	r22, 0x15	; 21
    2972:	98 f4       	brcc	.+38     	; 0x299a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2974:	86 e2       	ldi	r24, 0x26	; 38
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
    297c:	88 e2       	ldi	r24, 0x28	; 40
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	93 83       	std	Z+3, r25	; 0x03
    2982:	82 83       	std	Z+2, r24	; 0x02
    2984:	87 e2       	ldi	r24, 0x27	; 39
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	95 83       	std	Z+5, r25	; 0x05
    298a:	84 83       	std	Z+4, r24	; 0x04
    298c:	6e 50       	subi	r22, 0x0E	; 14
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	01 c0       	rjmp	.+2      	; 0x2994 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2992:	88 0f       	add	r24, r24
    2994:	6a 95       	dec	r22
    2996:	ea f7       	brpl	.-6      	; 0x2992 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2998:	86 83       	std	Z+6, r24	; 0x06
    299a:	08 95       	ret

0000299c <_ZN16PololuQTRSensors4initEhhh>:
    299c:	a7 e0       	ldi	r26, 0x07	; 7
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 ed       	ldi	r30, 0xD4	; 212
    29a2:	f4 e1       	ldi	r31, 0x14	; 20
    29a4:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__prologue_saves__+0x1c>
    29a8:	8c 01       	movw	r16, r24
    29aa:	fc 01       	movw	r30, r24
    29ac:	11 82       	std	Z+1, r1	; 0x01
    29ae:	10 82       	st	Z, r1
    29b0:	13 82       	std	Z+3, r1	; 0x03
    29b2:	12 82       	std	Z+2, r1	; 0x02
    29b4:	15 82       	std	Z+5, r1	; 0x05
    29b6:	14 82       	std	Z+4, r1	; 0x04
    29b8:	17 82       	std	Z+7, r1	; 0x07
    29ba:	16 82       	std	Z+6, r1	; 0x06
    29bc:	61 31       	cpi	r22, 0x11	; 17
    29be:	18 f0       	brcs	.+6      	; 0x29c6 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    29c0:	80 e1       	ldi	r24, 0x10	; 16
    29c2:	80 87       	std	Z+8, r24	; 0x08
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <_ZN16PololuQTRSensors4initEhhh+0x2e>
    29c6:	fc 01       	movw	r30, r24
    29c8:	60 87       	std	Z+8, r22	; 0x08
    29ca:	f8 01       	movw	r30, r16
    29cc:	20 8b       	std	Z+16, r18	; 0x10
    29ce:	64 2f       	mov	r22, r20
    29d0:	ce 01       	movw	r24, r28
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	0e 94 91 14 	call	0x2922	; 0x2922 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    29d8:	8f 81       	ldd	r24, Y+7	; 0x07
    29da:	f8 01       	movw	r30, r16
    29dc:	81 87       	std	Z+9, r24	; 0x09
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	93 87       	std	Z+11, r25	; 0x0b
    29e4:	82 87       	std	Z+10, r24	; 0x0a
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	95 87       	std	Z+13, r25	; 0x0d
    29ec:	84 87       	std	Z+12, r24	; 0x0c
    29ee:	27 96       	adiw	r28, 0x07	; 7
    29f0:	e4 e0       	ldi	r30, 0x04	; 4
    29f2:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__epilogue_restores__+0x1c>

000029f6 <_ZN16PololuQTRSensors11emittersOffEv>:
    29f6:	fc 01       	movw	r30, r24
    29f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    29fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    29fc:	10 97       	sbiw	r26, 0x00	; 0
    29fe:	79 f0       	breq	.+30     	; 0x2a1e <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2a00:	8c 91       	ld	r24, X
    2a02:	91 85       	ldd	r25, Z+9	; 0x09
    2a04:	89 2b       	or	r24, r25
    2a06:	8c 93       	st	X, r24
    2a08:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a0a:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a0c:	9c 91       	ld	r25, X
    2a0e:	81 85       	ldd	r24, Z+9	; 0x09
    2a10:	80 95       	com	r24
    2a12:	89 23       	and	r24, r25
    2a14:	8c 93       	st	X, r24
    2a16:	88 ec       	ldi	r24, 0xC8	; 200
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 89 14 	call	0x2912	; 0x2912 <delay_us>
    2a1e:	08 95       	ret

00002a20 <_ZN16PololuQTRSensors10emittersOnEv>:
    2a20:	fc 01       	movw	r30, r24
    2a22:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a24:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a26:	10 97       	sbiw	r26, 0x00	; 0
    2a28:	71 f0       	breq	.+28     	; 0x2a46 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2a2a:	8c 91       	ld	r24, X
    2a2c:	91 85       	ldd	r25, Z+9	; 0x09
    2a2e:	89 2b       	or	r24, r25
    2a30:	8c 93       	st	X, r24
    2a32:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a34:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a36:	8c 91       	ld	r24, X
    2a38:	91 85       	ldd	r25, Z+9	; 0x09
    2a3a:	89 2b       	or	r24, r25
    2a3c:	8c 93       	st	X, r24
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 89 14 	call	0x2912	; 0x2912 <delay_us>
    2a46:	08 95       	ret

00002a48 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2a48:	a7 e0       	ldi	r26, 0x07	; 7
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	ea e2       	ldi	r30, 0x2A	; 42
    2a4e:	f5 e1       	ldi	r31, 0x15	; 21
    2a50:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x6>
    2a54:	7c 01       	movw	r14, r24
    2a56:	4b 01       	movw	r8, r22
    2a58:	64 2f       	mov	r22, r20
    2a5a:	39 01       	movw	r6, r18
    2a5c:	40 2f       	mov	r20, r16
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN16PololuQTRSensors4initEhhh>
    2a64:	87 01       	movw	r16, r14
    2a66:	0f 5b       	subi	r16, 0xBF	; 191
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	10 82       	st	Z, r1
    2a6e:	67 01       	movw	r12, r14
    2a70:	f2 e4       	ldi	r31, 0x42	; 66
    2a72:	cf 0e       	add	r12, r31
    2a74:	d1 1c       	adc	r13, r1
    2a76:	f6 01       	movw	r30, r12
    2a78:	10 82       	st	Z, r1
    2a7a:	57 01       	movw	r10, r14
    2a7c:	f3 e4       	ldi	r31, 0x43	; 67
    2a7e:	af 0e       	add	r10, r31
    2a80:	b1 1c       	adc	r11, r1
    2a82:	f5 01       	movw	r30, r10
    2a84:	10 82       	st	Z, r1
    2a86:	f7 01       	movw	r30, r14
    2a88:	77 86       	std	Z+15, r7	; 0x0f
    2a8a:	66 86       	std	Z+14, r6	; 0x0e
    2a8c:	51 2c       	mov	r5, r1
    2a8e:	f7 01       	movw	r30, r14
    2a90:	80 85       	ldd	r24, Z+8	; 0x08
    2a92:	58 16       	cp	r5, r24
    2a94:	50 f5       	brcc	.+84     	; 0x2aea <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2a96:	65 2c       	mov	r6, r5
    2a98:	71 2c       	mov	r7, r1
    2a9a:	f4 01       	movw	r30, r8
    2a9c:	e6 0d       	add	r30, r6
    2a9e:	f7 1d       	adc	r31, r7
    2aa0:	60 81       	ld	r22, Z
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	0e 94 91 14 	call	0x2922	; 0x2922 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2aaa:	2f 81       	ldd	r18, Y+7	; 0x07
    2aac:	f7 01       	movw	r30, r14
    2aae:	e6 0d       	add	r30, r6
    2ab0:	f7 1d       	adc	r31, r7
    2ab2:	21 8b       	std	Z+17, r18	; 0x11
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	f3 01       	movw	r30, r6
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	ee 0d       	add	r30, r14
    2ac0:	ff 1d       	adc	r31, r15
    2ac2:	92 a3       	std	Z+34, r25	; 0x22
    2ac4:	81 a3       	std	Z+33, r24	; 0x21
    2ac6:	83 32       	cpi	r24, 0x23	; 35
    2ac8:	91 05       	cpc	r25, r1
    2aca:	11 f4       	brne	.+4      	; 0x2ad0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2acc:	f8 01       	movw	r30, r16
    2ace:	08 c0       	rjmp	.+16     	; 0x2ae0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2ad0:	86 32       	cpi	r24, 0x26	; 38
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	11 f4       	brne	.+4      	; 0x2ada <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2ad6:	f6 01       	movw	r30, r12
    2ad8:	03 c0       	rjmp	.+6      	; 0x2ae0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2ada:	89 97       	sbiw	r24, 0x29	; 41
    2adc:	21 f4       	brne	.+8      	; 0x2ae6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2ade:	f5 01       	movw	r30, r10
    2ae0:	80 81       	ld	r24, Z
    2ae2:	82 2b       	or	r24, r18
    2ae4:	80 83       	st	Z, r24
    2ae6:	53 94       	inc	r5
    2ae8:	d2 cf       	rjmp	.-92     	; 0x2a8e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2aea:	27 96       	adiw	r28, 0x07	; 7
    2aec:	ef e0       	ldi	r30, 0x0F	; 15
    2aee:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x6>

00002af2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2af2:	a0 e0       	ldi	r26, 0x00	; 0
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ef e7       	ldi	r30, 0x7F	; 127
    2af8:	f5 e1       	ldi	r31, 0x15	; 21
    2afa:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__prologue_saves__+0xa>
    2afe:	ec 01       	movw	r28, r24
    2b00:	5b 01       	movw	r10, r22
    2b02:	6c 01       	movw	r12, r24
    2b04:	81 e4       	ldi	r24, 0x41	; 65
    2b06:	c8 0e       	add	r12, r24
    2b08:	d1 1c       	adc	r13, r1
    2b0a:	f6 01       	movw	r30, r12
    2b0c:	80 80       	ld	r8, Z
    2b0e:	7e 01       	movw	r14, r28
    2b10:	f2 e4       	ldi	r31, 0x42	; 66
    2b12:	ef 0e       	add	r14, r31
    2b14:	f1 1c       	adc	r15, r1
    2b16:	f7 01       	movw	r30, r14
    2b18:	70 80       	ld	r7, Z
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	0d 5b       	subi	r16, 0xBD	; 189
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	f8 01       	movw	r30, r16
    2b22:	90 80       	ld	r9, Z
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	98 85       	ldd	r25, Y+8	; 0x08
    2b28:	89 17       	cp	r24, r25
    2b2a:	48 f4       	brcc	.+18     	; 0x2b3e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2b2c:	f5 01       	movw	r30, r10
    2b2e:	e8 0f       	add	r30, r24
    2b30:	f1 1d       	adc	r31, r1
    2b32:	e8 0f       	add	r30, r24
    2b34:	f1 1d       	adc	r31, r1
    2b36:	11 82       	std	Z+1, r1	; 0x01
    2b38:	10 82       	st	Z, r1
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	f4 cf       	rjmp	.-24     	; 0x2b26 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2b3e:	84 b1       	in	r24, 0x04	; 4
    2b40:	f6 01       	movw	r30, r12
    2b42:	90 81       	ld	r25, Z
    2b44:	89 2b       	or	r24, r25
    2b46:	84 b9       	out	0x04, r24	; 4
    2b48:	87 b1       	in	r24, 0x07	; 7
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	90 81       	ld	r25, Z
    2b4e:	89 2b       	or	r24, r25
    2b50:	87 b9       	out	0x07, r24	; 7
    2b52:	8a b1       	in	r24, 0x0a	; 10
    2b54:	f8 01       	movw	r30, r16
    2b56:	90 81       	ld	r25, Z
    2b58:	89 2b       	or	r24, r25
    2b5a:	8a b9       	out	0x0a, r24	; 10
    2b5c:	85 b1       	in	r24, 0x05	; 5
    2b5e:	f6 01       	movw	r30, r12
    2b60:	90 81       	ld	r25, Z
    2b62:	89 2b       	or	r24, r25
    2b64:	85 b9       	out	0x05, r24	; 5
    2b66:	88 b1       	in	r24, 0x08	; 8
    2b68:	f7 01       	movw	r30, r14
    2b6a:	90 81       	ld	r25, Z
    2b6c:	89 2b       	or	r24, r25
    2b6e:	88 b9       	out	0x08, r24	; 8
    2b70:	8b b1       	in	r24, 0x0b	; 11
    2b72:	f8 01       	movw	r30, r16
    2b74:	90 81       	ld	r25, Z
    2b76:	89 2b       	or	r24, r25
    2b78:	8b b9       	out	0x0b, r24	; 11
    2b7a:	8a e0       	ldi	r24, 0x0A	; 10
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 89 14 	call	0x2912	; 0x2912 <delay_us>
    2b82:	94 b1       	in	r25, 0x04	; 4
    2b84:	f6 01       	movw	r30, r12
    2b86:	80 81       	ld	r24, Z
    2b88:	80 95       	com	r24
    2b8a:	89 23       	and	r24, r25
    2b8c:	84 b9       	out	0x04, r24	; 4
    2b8e:	97 b1       	in	r25, 0x07	; 7
    2b90:	f7 01       	movw	r30, r14
    2b92:	80 81       	ld	r24, Z
    2b94:	80 95       	com	r24
    2b96:	89 23       	and	r24, r25
    2b98:	87 b9       	out	0x07, r24	; 7
    2b9a:	9a b1       	in	r25, 0x0a	; 10
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 95       	com	r24
    2ba2:	89 23       	and	r24, r25
    2ba4:	8a b9       	out	0x0a, r24	; 10
    2ba6:	95 b1       	in	r25, 0x05	; 5
    2ba8:	f6 01       	movw	r30, r12
    2baa:	80 81       	ld	r24, Z
    2bac:	80 95       	com	r24
    2bae:	89 23       	and	r24, r25
    2bb0:	85 b9       	out	0x05, r24	; 5
    2bb2:	98 b1       	in	r25, 0x08	; 8
    2bb4:	f7 01       	movw	r30, r14
    2bb6:	80 81       	ld	r24, Z
    2bb8:	80 95       	com	r24
    2bba:	89 23       	and	r24, r25
    2bbc:	88 b9       	out	0x08, r24	; 8
    2bbe:	9b b1       	in	r25, 0x0b	; 11
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	80 81       	ld	r24, Z
    2bc4:	80 95       	com	r24
    2bc6:	89 23       	and	r24, r25
    2bc8:	8b b9       	out	0x0b, r24	; 11
    2bca:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2bce:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2bd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2bd6:	83 60       	ori	r24, 0x03	; 3
    2bd8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2be2:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	2e 85       	ldd	r18, Y+14	; 0x0e
    2bec:	3f 85       	ldd	r19, Y+15	; 0x0f
    2bee:	82 17       	cp	r24, r18
    2bf0:	93 07       	cpc	r25, r19
    2bf2:	20 f5       	brcc	.+72     	; 0x2c3c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2bf4:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2bf8:	2c 2d       	mov	r18, r12
    2bfa:	24 1b       	sub	r18, r20
    2bfc:	82 0f       	add	r24, r18
    2bfe:	91 1d       	adc	r25, r1
    2c00:	03 b1       	in	r16, 0x03	; 3
    2c02:	08 11       	cpse	r16, r8
    2c04:	32 c0       	rjmp	.+100    	; 0x2c6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c06:	f6 b0       	in	r15, 0x06	; 6
    2c08:	f7 10       	cpse	r15, r7
    2c0a:	2f c0       	rjmp	.+94     	; 0x2c6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c0c:	29 b1       	in	r18, 0x09	; 9
    2c0e:	29 11       	cpse	r18, r9
    2c10:	2c c0       	rjmp	.+88     	; 0x2c6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c12:	10 c0       	rjmp	.+32     	; 0x2c34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2c14:	21 2f       	mov	r18, r17
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	a9 01       	movw	r20, r18
    2c1a:	44 0f       	add	r20, r20
    2c1c:	55 1f       	adc	r21, r21
    2c1e:	f5 01       	movw	r30, r10
    2c20:	e4 0f       	add	r30, r20
    2c22:	f5 1f       	adc	r31, r21
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	67 2b       	or	r22, r23
    2c2a:	21 f1       	breq	.+72     	; 0x2c74 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2c2c:	1f 5f       	subi	r17, 0xFF	; 255
    2c2e:	28 85       	ldd	r18, Y+8	; 0x08
    2c30:	12 17       	cp	r17, r18
    2c32:	80 f3       	brcs	.-32     	; 0x2c14 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2c34:	7f 2c       	mov	r7, r15
    2c36:	80 2e       	mov	r8, r16
    2c38:	4c 2d       	mov	r20, r12
    2c3a:	d7 cf       	rjmp	.-82     	; 0x2bea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2c3c:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c40:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	88 85       	ldd	r24, Y+8	; 0x08
    2c48:	28 17       	cp	r18, r24
    2c4a:	30 f5       	brcc	.+76     	; 0x2c98 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2c4c:	f5 01       	movw	r30, r10
    2c4e:	e2 0f       	add	r30, r18
    2c50:	f1 1d       	adc	r31, r1
    2c52:	e2 0f       	add	r30, r18
    2c54:	f1 1d       	adc	r31, r1
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	89 2b       	or	r24, r25
    2c5c:	21 f4       	brne	.+8      	; 0x2c66 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c60:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c62:	91 83       	std	Z+1, r25	; 0x01
    2c64:	80 83       	st	Z, r24
    2c66:	2f 5f       	subi	r18, 0xFF	; 255
    2c68:	ee cf       	rjmp	.-36     	; 0x2c46 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2c6a:	03 b1       	in	r16, 0x03	; 3
    2c6c:	f6 b0       	in	r15, 0x06	; 6
    2c6e:	99 b0       	in	r9, 0x09	; 9
    2c70:	10 e0       	ldi	r17, 0x00	; 0
    2c72:	dd cf       	rjmp	.-70     	; 0x2c2e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2c74:	de 01       	movw	r26, r28
    2c76:	a4 0f       	add	r26, r20
    2c78:	b5 1f       	adc	r27, r21
    2c7a:	91 96       	adiw	r26, 0x21	; 33
    2c7c:	0d 90       	ld	r0, X+
    2c7e:	bc 91       	ld	r27, X
    2c80:	a0 2d       	mov	r26, r0
    2c82:	4c 91       	ld	r20, X
    2c84:	de 01       	movw	r26, r28
    2c86:	a2 0f       	add	r26, r18
    2c88:	b3 1f       	adc	r27, r19
    2c8a:	51 96       	adiw	r26, 0x11	; 17
    2c8c:	2c 91       	ld	r18, X
    2c8e:	42 23       	and	r20, r18
    2c90:	69 f6       	brne	.-102    	; 0x2c2c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
    2c96:	ca cf       	rjmp	.-108    	; 0x2c2c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	ed e0       	ldi	r30, 0x0D	; 13
    2c9e:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__epilogue_restores__+0xa>

00002ca2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	fc 01       	movw	r30, r24
    2cb0:	9b 01       	movw	r18, r22
    2cb2:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2cb6:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2cba:	47 b1       	in	r20, 0x07	; 7
    2cbc:	18 b1       	in	r17, 0x08	; 8
    2cbe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2cc2:	86 fd       	sbrc	r24, 6
    2cc4:	fc cf       	rjmp	.-8      	; 0x2cbe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 85       	ldd	r25, Z+8	; 0x08
    2cca:	89 17       	cp	r24, r25
    2ccc:	48 f4       	brcc	.+18     	; 0x2ce0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2cce:	d9 01       	movw	r26, r18
    2cd0:	a8 0f       	add	r26, r24
    2cd2:	b1 1d       	adc	r27, r1
    2cd4:	a8 0f       	add	r26, r24
    2cd6:	b1 1d       	adc	r27, r1
    2cd8:	1d 92       	st	X+, r1
    2cda:	1c 92       	st	X, r1
    2cdc:	8f 5f       	subi	r24, 0xFF	; 255
    2cde:	f4 cf       	rjmp	.-24     	; 0x2cc8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2ce0:	97 b1       	in	r25, 0x07	; 7
    2ce2:	82 a1       	ldd	r24, Z+34	; 0x22
    2ce4:	80 95       	com	r24
    2ce6:	89 23       	and	r24, r25
    2ce8:	87 b9       	out	0x07, r24	; 7
    2cea:	98 b1       	in	r25, 0x08	; 8
    2cec:	82 a1       	ldd	r24, Z+34	; 0x22
    2cee:	80 95       	com	r24
    2cf0:	89 23       	and	r24, r25
    2cf2:	88 b9       	out	0x08, r24	; 8
    2cf4:	87 e8       	ldi	r24, 0x87	; 135
    2cf6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2cfa:	e1 2c       	mov	r14, r1
    2cfc:	81 a1       	ldd	r24, Z+33	; 0x21
    2cfe:	e8 16       	cp	r14, r24
    2d00:	10 f0       	brcs	.+4      	; 0x2d06 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2d02:	e1 2c       	mov	r14, r1
    2d04:	29 c0       	rjmp	.+82     	; 0x2d58 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	80 85       	ldd	r24, Z+8	; 0x08
    2d0a:	58 17       	cp	r21, r24
    2d0c:	18 f5       	brcc	.+70     	; 0x2d54 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2d0e:	a5 2f       	mov	r26, r21
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ef 01       	movw	r28, r30
    2d14:	ca 0f       	add	r28, r26
    2d16:	db 1f       	adc	r29, r27
    2d18:	89 89       	ldd	r24, Y+17	; 0x11
    2d1a:	80 64       	ori	r24, 0x40	; 64
    2d1c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d20:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d24:	80 64       	ori	r24, 0x40	; 64
    2d26:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d2a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d2e:	86 fd       	sbrc	r24, 6
    2d30:	fc cf       	rjmp	.-8      	; 0x2d2a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2d32:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2d36:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2d3a:	aa 0f       	add	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	a2 0f       	add	r26, r18
    2d40:	b3 1f       	adc	r27, r19
    2d42:	8d 91       	ld	r24, X+
    2d44:	9c 91       	ld	r25, X
    2d46:	11 97       	sbiw	r26, 0x01	; 1
    2d48:	86 0f       	add	r24, r22
    2d4a:	97 1f       	adc	r25, r23
    2d4c:	8d 93       	st	X+, r24
    2d4e:	9c 93       	st	X, r25
    2d50:	5f 5f       	subi	r21, 0xFF	; 255
    2d52:	da cf       	rjmp	.-76     	; 0x2d08 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2d54:	e3 94       	inc	r14
    2d56:	d2 cf       	rjmp	.-92     	; 0x2cfc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2d58:	80 85       	ldd	r24, Z+8	; 0x08
    2d5a:	e8 16       	cp	r14, r24
    2d5c:	a0 f4       	brcc	.+40     	; 0x2d86 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2d5e:	e9 01       	movw	r28, r18
    2d60:	ce 0d       	add	r28, r14
    2d62:	d1 1d       	adc	r29, r1
    2d64:	ce 0d       	add	r28, r14
    2d66:	d1 1d       	adc	r29, r1
    2d68:	61 a1       	ldd	r22, Z+33	; 0x21
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	a8 81       	ld	r26, Y
    2d74:	b9 81       	ldd	r27, Y+1	; 0x01
    2d76:	8a 0f       	add	r24, r26
    2d78:	9b 1f       	adc	r25, r27
    2d7a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    2d7e:	79 83       	std	Y+1, r23	; 0x01
    2d80:	68 83       	st	Y, r22
    2d82:	e3 94       	inc	r14
    2d84:	e9 cf       	rjmp	.-46     	; 0x2d58 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2d86:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d8a:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d8e:	18 b9       	out	0x08, r17	; 8
    2d90:	47 b9       	out	0x07, r20	; 7
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	e6 e0       	ldi	r30, 0x06	; 6
    2d98:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__+0x18>

00002d9c <_ZN16PololuQTRSensors4readEPjh>:
    2d9c:	a0 e2       	ldi	r26, 0x20	; 32
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e4 ed       	ldi	r30, 0xD4	; 212
    2da2:	f6 e1       	ldi	r31, 0x16	; 22
    2da4:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x16>
    2da8:	8c 01       	movw	r16, r24
    2daa:	7b 01       	movw	r14, r22
    2dac:	d4 2e       	mov	r13, r20
    2dae:	8f ef       	ldi	r24, 0xFF	; 255
    2db0:	84 0f       	add	r24, r20
    2db2:	82 30       	cpi	r24, 0x02	; 2
    2db4:	18 f4       	brcc	.+6      	; 0x2dbc <_ZN16PololuQTRSensors4readEPjh+0x20>
    2db6:	c8 01       	movw	r24, r16
    2db8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <_ZN16PololuQTRSensors10emittersOnEv>
    2dbc:	d8 01       	movw	r26, r16
    2dbe:	50 96       	adiw	r26, 0x10	; 16
    2dc0:	8c 91       	ld	r24, X
    2dc2:	b7 01       	movw	r22, r14
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	10 c0       	rjmp	.+32     	; 0x2de8 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2dc8:	c8 01       	movw	r24, r16
    2dca:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN16PololuQTRSensors11emittersOffEv>
    2dd4:	b2 e0       	ldi	r27, 0x02	; 2
    2dd6:	db 12       	cpse	r13, r27
    2dd8:	3a c0       	rjmp	.+116    	; 0x2e4e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2dda:	be 01       	movw	r22, r28
    2ddc:	6f 5f       	subi	r22, 0xFF	; 255
    2dde:	7f 4f       	sbci	r23, 0xFF	; 255
    2de0:	c8 01       	movw	r24, r16
    2de2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2de8:	c8 01       	movw	r24, r16
    2dea:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2dee:	c8 01       	movw	r24, r16
    2df0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN16PololuQTRSensors11emittersOffEv>
    2df4:	e2 e0       	ldi	r30, 0x02	; 2
    2df6:	de 12       	cpse	r13, r30
    2df8:	2a c0       	rjmp	.+84     	; 0x2e4e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2dfa:	be 01       	movw	r22, r28
    2dfc:	6f 5f       	subi	r22, 0xFF	; 255
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	c8 01       	movw	r24, r16
    2e02:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	f8 01       	movw	r30, r16
    2e0a:	80 85       	ldd	r24, Z+8	; 0x08
    2e0c:	48 17       	cp	r20, r24
    2e0e:	f8 f4       	brcc	.+62     	; 0x2e4e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e10:	84 2f       	mov	r24, r20
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	f7 01       	movw	r30, r14
    2e1a:	e8 0f       	add	r30, r24
    2e1c:	f9 1f       	adc	r31, r25
    2e1e:	21 e0       	ldi	r18, 0x01	; 1
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	2c 0f       	add	r18, r28
    2e24:	3d 1f       	adc	r19, r29
    2e26:	82 0f       	add	r24, r18
    2e28:	93 1f       	adc	r25, r19
    2e2a:	d8 01       	movw	r26, r16
    2e2c:	1e 96       	adiw	r26, 0x0e	; 14
    2e2e:	2d 91       	ld	r18, X+
    2e30:	3c 91       	ld	r19, X
    2e32:	1f 97       	sbiw	r26, 0x0f	; 15
    2e34:	dc 01       	movw	r26, r24
    2e36:	8d 91       	ld	r24, X+
    2e38:	9c 91       	ld	r25, X
    2e3a:	28 1b       	sub	r18, r24
    2e3c:	39 0b       	sbc	r19, r25
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	82 0f       	add	r24, r18
    2e44:	93 1f       	adc	r25, r19
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
    2e4a:	4f 5f       	subi	r20, 0xFF	; 255
    2e4c:	dd cf       	rjmp	.-70     	; 0x2e08 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2e4e:	a0 96       	adiw	r28, 0x20	; 32
    2e50:	e7 e0       	ldi	r30, 0x07	; 7
    2e52:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x16>

00002e56 <_ZN16PololuQTRSensorsD1Ev>:
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	ec 01       	movw	r28, r24
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	11 f0       	breq	.+4      	; 0x2e68 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2e64:	0e 94 a2 18 	call	0x3144	; 0x3144 <free>
    2e68:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	11 f0       	breq	.+4      	; 0x2e74 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2e70:	0e 94 a2 18 	call	0x3144	; 0x3144 <free>
    2e74:	88 81       	ld	r24, Y
    2e76:	99 81       	ldd	r25, Y+1	; 0x01
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	11 f0       	breq	.+4      	; 0x2e80 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2e7c:	0e 94 a2 18 	call	0x3144	; 0x3144 <free>
    2e80:	8c 81       	ldd	r24, Y+4	; 0x04
    2e82:	9d 81       	ldd	r25, Y+5	; 0x05
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	11 f0       	breq	.+4      	; 0x2e8c <_ZN16PololuQTRSensorsD1Ev+0x36>
    2e88:	0e 94 a2 18 	call	0x3144	; 0x3144 <free>
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	08 95       	ret

00002e92 <__udivmodqi4>:
    2e92:	99 1b       	sub	r25, r25
    2e94:	79 e0       	ldi	r23, 0x09	; 9
    2e96:	04 c0       	rjmp	.+8      	; 0x2ea0 <__udivmodqi4_ep>

00002e98 <__udivmodqi4_loop>:
    2e98:	99 1f       	adc	r25, r25
    2e9a:	96 17       	cp	r25, r22
    2e9c:	08 f0       	brcs	.+2      	; 0x2ea0 <__udivmodqi4_ep>
    2e9e:	96 1b       	sub	r25, r22

00002ea0 <__udivmodqi4_ep>:
    2ea0:	88 1f       	adc	r24, r24
    2ea2:	7a 95       	dec	r23
    2ea4:	c9 f7       	brne	.-14     	; 0x2e98 <__udivmodqi4_loop>
    2ea6:	80 95       	com	r24
    2ea8:	08 95       	ret

00002eaa <__udivmodhi4>:
    2eaa:	aa 1b       	sub	r26, r26
    2eac:	bb 1b       	sub	r27, r27
    2eae:	51 e1       	ldi	r21, 0x11	; 17
    2eb0:	07 c0       	rjmp	.+14     	; 0x2ec0 <__udivmodhi4_ep>

00002eb2 <__udivmodhi4_loop>:
    2eb2:	aa 1f       	adc	r26, r26
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	a6 17       	cp	r26, r22
    2eb8:	b7 07       	cpc	r27, r23
    2eba:	10 f0       	brcs	.+4      	; 0x2ec0 <__udivmodhi4_ep>
    2ebc:	a6 1b       	sub	r26, r22
    2ebe:	b7 0b       	sbc	r27, r23

00002ec0 <__udivmodhi4_ep>:
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	5a 95       	dec	r21
    2ec6:	a9 f7       	brne	.-22     	; 0x2eb2 <__udivmodhi4_loop>
    2ec8:	80 95       	com	r24
    2eca:	90 95       	com	r25
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	08 95       	ret

00002ed2 <__divmodhi4>:
    2ed2:	97 fb       	bst	r25, 7
    2ed4:	07 2e       	mov	r0, r23
    2ed6:	16 f4       	brtc	.+4      	; 0x2edc <__divmodhi4+0xa>
    2ed8:	00 94       	com	r0
    2eda:	07 d0       	rcall	.+14     	; 0x2eea <__divmodhi4_neg1>
    2edc:	77 fd       	sbrc	r23, 7
    2ede:	09 d0       	rcall	.+18     	; 0x2ef2 <__divmodhi4_neg2>
    2ee0:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__udivmodhi4>
    2ee4:	07 fc       	sbrc	r0, 7
    2ee6:	05 d0       	rcall	.+10     	; 0x2ef2 <__divmodhi4_neg2>
    2ee8:	3e f4       	brtc	.+14     	; 0x2ef8 <__divmodhi4_exit>

00002eea <__divmodhi4_neg1>:
    2eea:	90 95       	com	r25
    2eec:	81 95       	neg	r24
    2eee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef0:	08 95       	ret

00002ef2 <__divmodhi4_neg2>:
    2ef2:	70 95       	com	r23
    2ef4:	61 95       	neg	r22
    2ef6:	7f 4f       	sbci	r23, 0xFF	; 255

00002ef8 <__divmodhi4_exit>:
    2ef8:	08 95       	ret

00002efa <__udivmodsi4>:
    2efa:	a1 e2       	ldi	r26, 0x21	; 33
    2efc:	1a 2e       	mov	r1, r26
    2efe:	aa 1b       	sub	r26, r26
    2f00:	bb 1b       	sub	r27, r27
    2f02:	fd 01       	movw	r30, r26
    2f04:	0d c0       	rjmp	.+26     	; 0x2f20 <__udivmodsi4_ep>

00002f06 <__udivmodsi4_loop>:
    2f06:	aa 1f       	adc	r26, r26
    2f08:	bb 1f       	adc	r27, r27
    2f0a:	ee 1f       	adc	r30, r30
    2f0c:	ff 1f       	adc	r31, r31
    2f0e:	a2 17       	cp	r26, r18
    2f10:	b3 07       	cpc	r27, r19
    2f12:	e4 07       	cpc	r30, r20
    2f14:	f5 07       	cpc	r31, r21
    2f16:	20 f0       	brcs	.+8      	; 0x2f20 <__udivmodsi4_ep>
    2f18:	a2 1b       	sub	r26, r18
    2f1a:	b3 0b       	sbc	r27, r19
    2f1c:	e4 0b       	sbc	r30, r20
    2f1e:	f5 0b       	sbc	r31, r21

00002f20 <__udivmodsi4_ep>:
    2f20:	66 1f       	adc	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	88 1f       	adc	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	1a 94       	dec	r1
    2f2a:	69 f7       	brne	.-38     	; 0x2f06 <__udivmodsi4_loop>
    2f2c:	60 95       	com	r22
    2f2e:	70 95       	com	r23
    2f30:	80 95       	com	r24
    2f32:	90 95       	com	r25
    2f34:	9b 01       	movw	r18, r22
    2f36:	ac 01       	movw	r20, r24
    2f38:	bd 01       	movw	r22, r26
    2f3a:	cf 01       	movw	r24, r30
    2f3c:	08 95       	ret

00002f3e <__divmodsi4>:
    2f3e:	05 2e       	mov	r0, r21
    2f40:	97 fb       	bst	r25, 7
    2f42:	1e f4       	brtc	.+6      	; 0x2f4a <__divmodsi4+0xc>
    2f44:	00 94       	com	r0
    2f46:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__negsi2>
    2f4a:	57 fd       	sbrc	r21, 7
    2f4c:	07 d0       	rcall	.+14     	; 0x2f5c <__divmodsi4_neg2>
    2f4e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__udivmodsi4>
    2f52:	07 fc       	sbrc	r0, 7
    2f54:	03 d0       	rcall	.+6      	; 0x2f5c <__divmodsi4_neg2>
    2f56:	4e f4       	brtc	.+18     	; 0x2f6a <__divmodsi4_exit>
    2f58:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__negsi2>

00002f5c <__divmodsi4_neg2>:
    2f5c:	50 95       	com	r21
    2f5e:	40 95       	com	r20
    2f60:	30 95       	com	r19
    2f62:	21 95       	neg	r18
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	4f 4f       	sbci	r20, 0xFF	; 255
    2f68:	5f 4f       	sbci	r21, 0xFF	; 255

00002f6a <__divmodsi4_exit>:
    2f6a:	08 95       	ret

00002f6c <__negsi2>:
    2f6c:	90 95       	com	r25
    2f6e:	80 95       	com	r24
    2f70:	70 95       	com	r23
    2f72:	61 95       	neg	r22
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255
    2f76:	8f 4f       	sbci	r24, 0xFF	; 255
    2f78:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7a:	08 95       	ret

00002f7c <__tablejump2__>:
    2f7c:	ee 0f       	add	r30, r30
    2f7e:	ff 1f       	adc	r31, r31
    2f80:	05 90       	lpm	r0, Z+
    2f82:	f4 91       	lpm	r31, Z
    2f84:	e0 2d       	mov	r30, r0
    2f86:	09 94       	ijmp

00002f88 <__umulhisi3>:
    2f88:	a2 9f       	mul	r26, r18
    2f8a:	b0 01       	movw	r22, r0
    2f8c:	b3 9f       	mul	r27, r19
    2f8e:	c0 01       	movw	r24, r0
    2f90:	a3 9f       	mul	r26, r19
    2f92:	70 0d       	add	r23, r0
    2f94:	81 1d       	adc	r24, r1
    2f96:	11 24       	eor	r1, r1
    2f98:	91 1d       	adc	r25, r1
    2f9a:	b2 9f       	mul	r27, r18
    2f9c:	70 0d       	add	r23, r0
    2f9e:	81 1d       	adc	r24, r1
    2fa0:	11 24       	eor	r1, r1
    2fa2:	91 1d       	adc	r25, r1
    2fa4:	08 95       	ret

00002fa6 <__prologue_saves__>:
    2fa6:	2f 92       	push	r2
    2fa8:	3f 92       	push	r3
    2faa:	4f 92       	push	r4
    2fac:	5f 92       	push	r5
    2fae:	6f 92       	push	r6
    2fb0:	7f 92       	push	r7
    2fb2:	8f 92       	push	r8
    2fb4:	9f 92       	push	r9
    2fb6:	af 92       	push	r10
    2fb8:	bf 92       	push	r11
    2fba:	cf 92       	push	r12
    2fbc:	df 92       	push	r13
    2fbe:	ef 92       	push	r14
    2fc0:	ff 92       	push	r15
    2fc2:	0f 93       	push	r16
    2fc4:	1f 93       	push	r17
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	ca 1b       	sub	r28, r26
    2fd0:	db 0b       	sbc	r29, r27
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	09 94       	ijmp

00002fde <__epilogue_restores__>:
    2fde:	2a 88       	ldd	r2, Y+18	; 0x12
    2fe0:	39 88       	ldd	r3, Y+17	; 0x11
    2fe2:	48 88       	ldd	r4, Y+16	; 0x10
    2fe4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fe6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fe8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fea:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fec:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fee:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ff0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ff2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ff4:	df 80       	ldd	r13, Y+7	; 0x07
    2ff6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ff8:	fd 80       	ldd	r15, Y+5	; 0x05
    2ffa:	0c 81       	ldd	r16, Y+4	; 0x04
    2ffc:	1b 81       	ldd	r17, Y+3	; 0x03
    2ffe:	aa 81       	ldd	r26, Y+2	; 0x02
    3000:	b9 81       	ldd	r27, Y+1	; 0x01
    3002:	ce 0f       	add	r28, r30
    3004:	d1 1d       	adc	r29, r1
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	ed 01       	movw	r28, r26
    3012:	08 95       	ret

00003014 <malloc>:
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	82 30       	cpi	r24, 0x02	; 2
    301e:	91 05       	cpc	r25, r1
    3020:	10 f4       	brcc	.+4      	; 0x3026 <malloc+0x12>
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	e0 91 3e 07 	lds	r30, 0x073E	; 0x80073e <__flp>
    302a:	f0 91 3f 07 	lds	r31, 0x073F	; 0x80073f <__flp+0x1>
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	a0 e0       	ldi	r26, 0x00	; 0
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	30 97       	sbiw	r30, 0x00	; 0
    3038:	19 f1       	breq	.+70     	; 0x3080 <malloc+0x6c>
    303a:	40 81       	ld	r20, Z
    303c:	51 81       	ldd	r21, Z+1	; 0x01
    303e:	02 81       	ldd	r16, Z+2	; 0x02
    3040:	13 81       	ldd	r17, Z+3	; 0x03
    3042:	48 17       	cp	r20, r24
    3044:	59 07       	cpc	r21, r25
    3046:	c8 f0       	brcs	.+50     	; 0x307a <malloc+0x66>
    3048:	84 17       	cp	r24, r20
    304a:	95 07       	cpc	r25, r21
    304c:	69 f4       	brne	.+26     	; 0x3068 <malloc+0x54>
    304e:	10 97       	sbiw	r26, 0x00	; 0
    3050:	31 f0       	breq	.+12     	; 0x305e <malloc+0x4a>
    3052:	12 96       	adiw	r26, 0x02	; 2
    3054:	0c 93       	st	X, r16
    3056:	12 97       	sbiw	r26, 0x02	; 2
    3058:	13 96       	adiw	r26, 0x03	; 3
    305a:	1c 93       	st	X, r17
    305c:	27 c0       	rjmp	.+78     	; 0x30ac <malloc+0x98>
    305e:	00 93 3e 07 	sts	0x073E, r16	; 0x80073e <__flp>
    3062:	10 93 3f 07 	sts	0x073F, r17	; 0x80073f <__flp+0x1>
    3066:	22 c0       	rjmp	.+68     	; 0x30ac <malloc+0x98>
    3068:	21 15       	cp	r18, r1
    306a:	31 05       	cpc	r19, r1
    306c:	19 f0       	breq	.+6      	; 0x3074 <malloc+0x60>
    306e:	42 17       	cp	r20, r18
    3070:	53 07       	cpc	r21, r19
    3072:	18 f4       	brcc	.+6      	; 0x307a <malloc+0x66>
    3074:	9a 01       	movw	r18, r20
    3076:	bd 01       	movw	r22, r26
    3078:	ef 01       	movw	r28, r30
    307a:	df 01       	movw	r26, r30
    307c:	f8 01       	movw	r30, r16
    307e:	db cf       	rjmp	.-74     	; 0x3036 <malloc+0x22>
    3080:	21 15       	cp	r18, r1
    3082:	31 05       	cpc	r19, r1
    3084:	f9 f0       	breq	.+62     	; 0x30c4 <malloc+0xb0>
    3086:	28 1b       	sub	r18, r24
    3088:	39 0b       	sbc	r19, r25
    308a:	24 30       	cpi	r18, 0x04	; 4
    308c:	31 05       	cpc	r19, r1
    308e:	80 f4       	brcc	.+32     	; 0x30b0 <malloc+0x9c>
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	61 15       	cp	r22, r1
    3096:	71 05       	cpc	r23, r1
    3098:	21 f0       	breq	.+8      	; 0x30a2 <malloc+0x8e>
    309a:	fb 01       	movw	r30, r22
    309c:	93 83       	std	Z+3, r25	; 0x03
    309e:	82 83       	std	Z+2, r24	; 0x02
    30a0:	04 c0       	rjmp	.+8      	; 0x30aa <malloc+0x96>
    30a2:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <__flp+0x1>
    30a6:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <__flp>
    30aa:	fe 01       	movw	r30, r28
    30ac:	32 96       	adiw	r30, 0x02	; 2
    30ae:	44 c0       	rjmp	.+136    	; 0x3138 <malloc+0x124>
    30b0:	fe 01       	movw	r30, r28
    30b2:	e2 0f       	add	r30, r18
    30b4:	f3 1f       	adc	r31, r19
    30b6:	81 93       	st	Z+, r24
    30b8:	91 93       	st	Z+, r25
    30ba:	22 50       	subi	r18, 0x02	; 2
    30bc:	31 09       	sbc	r19, r1
    30be:	39 83       	std	Y+1, r19	; 0x01
    30c0:	28 83       	st	Y, r18
    30c2:	3a c0       	rjmp	.+116    	; 0x3138 <malloc+0x124>
    30c4:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    30c8:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    30cc:	23 2b       	or	r18, r19
    30ce:	41 f4       	brne	.+16     	; 0x30e0 <malloc+0xcc>
    30d0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    30d4:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    30d8:	30 93 3d 07 	sts	0x073D, r19	; 0x80073d <__brkval+0x1>
    30dc:	20 93 3c 07 	sts	0x073C, r18	; 0x80073c <__brkval>
    30e0:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    30e4:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    30e8:	21 15       	cp	r18, r1
    30ea:	31 05       	cpc	r19, r1
    30ec:	41 f4       	brne	.+16     	; 0x30fe <malloc+0xea>
    30ee:	2d b7       	in	r18, 0x3d	; 61
    30f0:	3e b7       	in	r19, 0x3e	; 62
    30f2:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    30f6:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    30fa:	24 1b       	sub	r18, r20
    30fc:	35 0b       	sbc	r19, r21
    30fe:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <__brkval>
    3102:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <__brkval+0x1>
    3106:	e2 17       	cp	r30, r18
    3108:	f3 07       	cpc	r31, r19
    310a:	a0 f4       	brcc	.+40     	; 0x3134 <malloc+0x120>
    310c:	2e 1b       	sub	r18, r30
    310e:	3f 0b       	sbc	r19, r31
    3110:	28 17       	cp	r18, r24
    3112:	39 07       	cpc	r19, r25
    3114:	78 f0       	brcs	.+30     	; 0x3134 <malloc+0x120>
    3116:	ac 01       	movw	r20, r24
    3118:	4e 5f       	subi	r20, 0xFE	; 254
    311a:	5f 4f       	sbci	r21, 0xFF	; 255
    311c:	24 17       	cp	r18, r20
    311e:	35 07       	cpc	r19, r21
    3120:	48 f0       	brcs	.+18     	; 0x3134 <malloc+0x120>
    3122:	4e 0f       	add	r20, r30
    3124:	5f 1f       	adc	r21, r31
    3126:	50 93 3d 07 	sts	0x073D, r21	; 0x80073d <__brkval+0x1>
    312a:	40 93 3c 07 	sts	0x073C, r20	; 0x80073c <__brkval>
    312e:	81 93       	st	Z+, r24
    3130:	91 93       	st	Z+, r25
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <malloc+0x124>
    3134:	e0 e0       	ldi	r30, 0x00	; 0
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	cf 01       	movw	r24, r30
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	08 95       	ret

00003144 <free>:
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	09 f4       	brne	.+2      	; 0x314e <free+0xa>
    314c:	81 c0       	rjmp	.+258    	; 0x3250 <free+0x10c>
    314e:	fc 01       	movw	r30, r24
    3150:	32 97       	sbiw	r30, 0x02	; 2
    3152:	13 82       	std	Z+3, r1	; 0x03
    3154:	12 82       	std	Z+2, r1	; 0x02
    3156:	a0 91 3e 07 	lds	r26, 0x073E	; 0x80073e <__flp>
    315a:	b0 91 3f 07 	lds	r27, 0x073F	; 0x80073f <__flp+0x1>
    315e:	10 97       	sbiw	r26, 0x00	; 0
    3160:	81 f4       	brne	.+32     	; 0x3182 <free+0x3e>
    3162:	20 81       	ld	r18, Z
    3164:	31 81       	ldd	r19, Z+1	; 0x01
    3166:	82 0f       	add	r24, r18
    3168:	93 1f       	adc	r25, r19
    316a:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    316e:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    3172:	28 17       	cp	r18, r24
    3174:	39 07       	cpc	r19, r25
    3176:	51 f5       	brne	.+84     	; 0x31cc <free+0x88>
    3178:	f0 93 3d 07 	sts	0x073D, r31	; 0x80073d <__brkval+0x1>
    317c:	e0 93 3c 07 	sts	0x073C, r30	; 0x80073c <__brkval>
    3180:	67 c0       	rjmp	.+206    	; 0x3250 <free+0x10c>
    3182:	ed 01       	movw	r28, r26
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	ce 17       	cp	r28, r30
    318a:	df 07       	cpc	r29, r31
    318c:	40 f4       	brcc	.+16     	; 0x319e <free+0x5a>
    318e:	4a 81       	ldd	r20, Y+2	; 0x02
    3190:	5b 81       	ldd	r21, Y+3	; 0x03
    3192:	9e 01       	movw	r18, r28
    3194:	41 15       	cp	r20, r1
    3196:	51 05       	cpc	r21, r1
    3198:	f1 f0       	breq	.+60     	; 0x31d6 <free+0x92>
    319a:	ea 01       	movw	r28, r20
    319c:	f5 cf       	rjmp	.-22     	; 0x3188 <free+0x44>
    319e:	d3 83       	std	Z+3, r29	; 0x03
    31a0:	c2 83       	std	Z+2, r28	; 0x02
    31a2:	40 81       	ld	r20, Z
    31a4:	51 81       	ldd	r21, Z+1	; 0x01
    31a6:	84 0f       	add	r24, r20
    31a8:	95 1f       	adc	r25, r21
    31aa:	c8 17       	cp	r28, r24
    31ac:	d9 07       	cpc	r29, r25
    31ae:	59 f4       	brne	.+22     	; 0x31c6 <free+0x82>
    31b0:	88 81       	ld	r24, Y
    31b2:	99 81       	ldd	r25, Y+1	; 0x01
    31b4:	84 0f       	add	r24, r20
    31b6:	95 1f       	adc	r25, r21
    31b8:	02 96       	adiw	r24, 0x02	; 2
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	80 83       	st	Z, r24
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	9b 81       	ldd	r25, Y+3	; 0x03
    31c2:	93 83       	std	Z+3, r25	; 0x03
    31c4:	82 83       	std	Z+2, r24	; 0x02
    31c6:	21 15       	cp	r18, r1
    31c8:	31 05       	cpc	r19, r1
    31ca:	29 f4       	brne	.+10     	; 0x31d6 <free+0x92>
    31cc:	f0 93 3f 07 	sts	0x073F, r31	; 0x80073f <__flp+0x1>
    31d0:	e0 93 3e 07 	sts	0x073E, r30	; 0x80073e <__flp>
    31d4:	3d c0       	rjmp	.+122    	; 0x3250 <free+0x10c>
    31d6:	e9 01       	movw	r28, r18
    31d8:	fb 83       	std	Y+3, r31	; 0x03
    31da:	ea 83       	std	Y+2, r30	; 0x02
    31dc:	49 91       	ld	r20, Y+
    31de:	59 91       	ld	r21, Y+
    31e0:	c4 0f       	add	r28, r20
    31e2:	d5 1f       	adc	r29, r21
    31e4:	ec 17       	cp	r30, r28
    31e6:	fd 07       	cpc	r31, r29
    31e8:	61 f4       	brne	.+24     	; 0x3202 <free+0xbe>
    31ea:	80 81       	ld	r24, Z
    31ec:	91 81       	ldd	r25, Z+1	; 0x01
    31ee:	84 0f       	add	r24, r20
    31f0:	95 1f       	adc	r25, r21
    31f2:	02 96       	adiw	r24, 0x02	; 2
    31f4:	e9 01       	movw	r28, r18
    31f6:	99 83       	std	Y+1, r25	; 0x01
    31f8:	88 83       	st	Y, r24
    31fa:	82 81       	ldd	r24, Z+2	; 0x02
    31fc:	93 81       	ldd	r25, Z+3	; 0x03
    31fe:	9b 83       	std	Y+3, r25	; 0x03
    3200:	8a 83       	std	Y+2, r24	; 0x02
    3202:	e0 e0       	ldi	r30, 0x00	; 0
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	12 96       	adiw	r26, 0x02	; 2
    3208:	8d 91       	ld	r24, X+
    320a:	9c 91       	ld	r25, X
    320c:	13 97       	sbiw	r26, 0x03	; 3
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	19 f0       	breq	.+6      	; 0x3218 <free+0xd4>
    3212:	fd 01       	movw	r30, r26
    3214:	dc 01       	movw	r26, r24
    3216:	f7 cf       	rjmp	.-18     	; 0x3206 <free+0xc2>
    3218:	8d 91       	ld	r24, X+
    321a:	9c 91       	ld	r25, X
    321c:	11 97       	sbiw	r26, 0x01	; 1
    321e:	9d 01       	movw	r18, r26
    3220:	2e 5f       	subi	r18, 0xFE	; 254
    3222:	3f 4f       	sbci	r19, 0xFF	; 255
    3224:	82 0f       	add	r24, r18
    3226:	93 1f       	adc	r25, r19
    3228:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    322c:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    3230:	28 17       	cp	r18, r24
    3232:	39 07       	cpc	r19, r25
    3234:	69 f4       	brne	.+26     	; 0x3250 <free+0x10c>
    3236:	30 97       	sbiw	r30, 0x00	; 0
    3238:	29 f4       	brne	.+10     	; 0x3244 <free+0x100>
    323a:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <__flp+0x1>
    323e:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <__flp>
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <free+0x104>
    3244:	13 82       	std	Z+3, r1	; 0x03
    3246:	12 82       	std	Z+2, r1	; 0x02
    3248:	b0 93 3d 07 	sts	0x073D, r27	; 0x80073d <__brkval+0x1>
    324c:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <__brkval>
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	08 95       	ret

00003256 <__do_global_dtors>:
    3256:	10 e0       	ldi	r17, 0x00	; 0
    3258:	c4 e5       	ldi	r28, 0x54	; 84
    325a:	d0 e0       	ldi	r29, 0x00	; 0
    325c:	04 c0       	rjmp	.+8      	; 0x3266 <__do_global_dtors+0x10>
    325e:	fe 01       	movw	r30, r28
    3260:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__tablejump2__>
    3264:	21 96       	adiw	r28, 0x01	; 1
    3266:	c5 35       	cpi	r28, 0x55	; 85
    3268:	d1 07       	cpc	r29, r17
    326a:	c9 f7       	brne	.-14     	; 0x325e <__do_global_dtors+0x8>
    326c:	f8 94       	cli

0000326e <__stop_program>:
    326e:	ff cf       	rjmp	.-2      	; 0x326e <__stop_program>
