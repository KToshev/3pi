
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000032fe  00003392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  0080017c  0080017c  0000340e  2**0
                  ALLOC
  3 .stab         00006414  00000000  00000000  00003410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00012506  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012548  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000080  00000000  00000000  00012588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002c89  00000000  00000000  00012608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ade  00000000  00000000  00015291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000dd9  00000000  00000000  00015d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000140  00000000  00000000  00016b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000014bd  00000000  00000000  00016c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bcc  00000000  00000000  00018145  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a0  00000000  00000000  00019d11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	13 05       	cpc	r17, r3
      6a:	10 05       	cpc	r17, r0
      6c:	1f 05       	cpc	r17, r15
      6e:	1c 09       	sbc	r17, r12
      70:	1f 09       	sbc	r17, r15
      72:	1c 05       	cpc	r17, r12
      74:	19 05       	cpc	r17, r9
      76:	16 05       	cpc	r17, r6
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	54 0a       	sbc	r5, r20

000000a8 <__ctors_end>:
      a8:	cb 14       	cp	r12, r11

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ee ef       	ldi	r30, 0xFE	; 254
      be:	f2 e3       	ldi	r31, 0x32	; 50
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ac 37       	cpi	r26, 0x7C	; 124
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	ac e7       	ldi	r26, 0x7C	; 124
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	aa 32       	cpi	r26, 0x2A	; 42
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 05 18 	call	0x300a	; 0x300a <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 19 0a 	call	0x1432	; 0x1432 <main>
      f6:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	50 f4       	brcc	.+20     	; 0x11e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x20>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	50 f0       	brcs	.+20     	; 0x128 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x2a>
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	7e ef       	ldi	r23, 0xFE	; 254
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	96 e4       	ldi	r25, 0x46	; 70
     11c:	08 95       	ret
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	7e ef       	ldi	r23, 0xFE	; 254
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	96 e4       	ldi	r25, 0x46	; 70
     126:	08 95       	ret
     128:	ac 01       	movw	r20, r24
     12a:	44 0f       	add	r20, r20
     12c:	55 1f       	adc	r21, r21
     12e:	84 0f       	add	r24, r20
     130:	95 1f       	adc	r25, r21
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	4a e5       	ldi	r20, 0x5A	; 90
     138:	42 9f       	mul	r20, r18
     13a:	f0 01       	movw	r30, r0
     13c:	43 9f       	mul	r20, r19
     13e:	f0 0d       	add	r31, r0
     140:	11 24       	eor	r1, r1
     142:	8e 0f       	add	r24, r30
     144:	9f 1f       	adc	r25, r31
     146:	fc 01       	movw	r30, r24
     148:	e5 52       	subi	r30, 0x25	; 37
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	60 81       	ld	r22, Z
     14e:	71 81       	ldd	r23, Z+1	; 0x01
     150:	07 2e       	mov	r0, r23
     152:	00 0c       	add	r0, r0
     154:	88 0b       	sbc	r24, r24
     156:	99 0b       	sbc	r25, r25
     158:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     15c:	08 95       	ret

0000015e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     15e:	fc 01       	movw	r30, r24
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	2f 30       	cpi	r18, 0x0F	; 15
     166:	31 05       	cpc	r19, r1
     168:	28 f5       	brcc	.+74     	; 0x1b4 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x56>
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	8f 30       	cpi	r24, 0x0F	; 15
     170:	91 05       	cpc	r25, r1
     172:	28 f1       	brcs	.+74     	; 0x1be <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	7e ef       	ldi	r23, 0xFE	; 254
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	96 e4       	ldi	r25, 0x46	; 70
     17c:	08 95       	ret
     17e:	ac 01       	movw	r20, r24
     180:	44 0f       	add	r20, r20
     182:	55 1f       	adc	r21, r21
     184:	84 0f       	add	r24, r20
     186:	95 1f       	adc	r25, r21
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	4a e5       	ldi	r20, 0x5A	; 90
     18e:	42 9f       	mul	r20, r18
     190:	f0 01       	movw	r30, r0
     192:	43 9f       	mul	r20, r19
     194:	f0 0d       	add	r31, r0
     196:	11 24       	eor	r1, r1
     198:	8e 0f       	add	r24, r30
     19a:	9f 1f       	adc	r25, r31
     19c:	fc 01       	movw	r30, r24
     19e:	e5 52       	subi	r30, 0x25	; 37
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	60 81       	ld	r22, Z
     1a4:	71 81       	ldd	r23, Z+1	; 0x01
     1a6:	07 2e       	mov	r0, r23
     1a8:	00 0c       	add	r0, r0
     1aa:	88 0b       	sbc	r24, r24
     1ac:	99 0b       	sbc	r25, r25
     1ae:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     1b2:	08 95       	ret
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	7e ef       	ldi	r23, 0xFE	; 254
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	96 e4       	ldi	r25, 0x46	; 70
     1bc:	08 95       	ret
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e8 0f       	add	r30, r24
     1c6:	f9 1f       	adc	r31, r25
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	6a e5       	ldi	r22, 0x5A	; 90
     1ce:	62 9f       	mul	r22, r18
     1d0:	a0 01       	movw	r20, r0
     1d2:	63 9f       	mul	r22, r19
     1d4:	50 0d       	add	r21, r0
     1d6:	11 24       	eor	r1, r1
     1d8:	e4 0f       	add	r30, r20
     1da:	f5 1f       	adc	r31, r21
     1dc:	e5 52       	subi	r30, 0x25	; 37
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	45 81       	ldd	r20, Z+5	; 0x05
     1e2:	41 11       	cpse	r20, r1
     1e4:	cc cf       	rjmp	.-104    	; 0x17e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x20>
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	7e ef       	ldi	r23, 0xFE	; 254
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	96 e4       	ldi	r25, 0x46	; 70
     1ee:	08 95       	ret

000001f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 81       	ld	r18, Z
     1f4:	31 81       	ldd	r19, Z+1	; 0x01
     1f6:	2f 30       	cpi	r18, 0x0F	; 15
     1f8:	31 05       	cpc	r19, r1
     1fa:	28 f5       	brcc	.+74     	; 0x246 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x56>
     1fc:	82 81       	ldd	r24, Z+2	; 0x02
     1fe:	93 81       	ldd	r25, Z+3	; 0x03
     200:	8f 30       	cpi	r24, 0x0F	; 15
     202:	91 05       	cpc	r25, r1
     204:	50 f1       	brcs	.+84     	; 0x25a <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x6a>
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	7e ef       	ldi	r23, 0xFE	; 254
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	96 e4       	ldi	r25, 0x46	; 70
     20e:	08 95       	ret
     210:	ac 01       	movw	r20, r24
     212:	44 0f       	add	r20, r20
     214:	55 1f       	adc	r21, r21
     216:	84 0f       	add	r24, r20
     218:	95 1f       	adc	r25, r21
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	4a e5       	ldi	r20, 0x5A	; 90
     220:	42 9f       	mul	r20, r18
     222:	f0 01       	movw	r30, r0
     224:	43 9f       	mul	r20, r19
     226:	f0 0d       	add	r31, r0
     228:	11 24       	eor	r1, r1
     22a:	8e 0f       	add	r24, r30
     22c:	9f 1f       	adc	r25, r31
     22e:	fc 01       	movw	r30, r24
     230:	e5 52       	subi	r30, 0x25	; 37
     232:	fe 4f       	sbci	r31, 0xFE	; 254
     234:	62 81       	ldd	r22, Z+2	; 0x02
     236:	73 81       	ldd	r23, Z+3	; 0x03
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     244:	08 95       	ret
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	7e ef       	ldi	r23, 0xFE	; 254
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	96 e4       	ldi	r25, 0x46	; 70
     24e:	08 95       	ret
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	7e ef       	ldi	r23, 0xFE	; 254
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	96 e4       	ldi	r25, 0x46	; 70
     258:	08 95       	ret
     25a:	fc 01       	movw	r30, r24
     25c:	ee 0f       	add	r30, r30
     25e:	ff 1f       	adc	r31, r31
     260:	e8 0f       	add	r30, r24
     262:	f9 1f       	adc	r31, r25
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	6a e5       	ldi	r22, 0x5A	; 90
     26a:	62 9f       	mul	r22, r18
     26c:	a0 01       	movw	r20, r0
     26e:	63 9f       	mul	r22, r19
     270:	50 0d       	add	r21, r0
     272:	11 24       	eor	r1, r1
     274:	e4 0f       	add	r30, r20
     276:	f5 1f       	adc	r31, r21
     278:	e5 52       	subi	r30, 0x25	; 37
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	45 81       	ldd	r20, Z+5	; 0x05
     27e:	41 11       	cpse	r20, r1
     280:	e7 cf       	rjmp	.-50     	; 0x250 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     282:	c6 cf       	rjmp	.-116    	; 0x210 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x20>

00000284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	31 81       	ldd	r19, Z+1	; 0x01
     292:	2f 30       	cpi	r18, 0x0F	; 15
     294:	31 05       	cpc	r19, r1
     296:	08 f0       	brcs	.+2      	; 0x29a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x16>
     298:	50 c0       	rjmp	.+160    	; 0x33a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xb6>
     29a:	42 81       	ldd	r20, Z+2	; 0x02
     29c:	53 81       	ldd	r21, Z+3	; 0x03
     29e:	4f 30       	cpi	r20, 0x0F	; 15
     2a0:	51 05       	cpc	r21, r1
     2a2:	08 f4       	brcc	.+2      	; 0x2a6 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>
     2a4:	59 c0       	rjmp	.+178    	; 0x358 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xd4>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	7e ef       	ldi	r23, 0xFE	; 254
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	96 e4       	ldi	r25, 0x46	; 70
     2ae:	69 c0       	rjmp	.+210    	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     2b0:	fa 01       	movw	r30, r20
     2b2:	ee 0f       	add	r30, r30
     2b4:	ff 1f       	adc	r31, r31
     2b6:	e4 0f       	add	r30, r20
     2b8:	f5 1f       	adc	r31, r21
     2ba:	ee 0f       	add	r30, r30
     2bc:	ff 1f       	adc	r31, r31
     2be:	aa e5       	ldi	r26, 0x5A	; 90
     2c0:	a2 9f       	mul	r26, r18
     2c2:	c0 01       	movw	r24, r0
     2c4:	a3 9f       	mul	r26, r19
     2c6:	90 0d       	add	r25, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	e8 0f       	add	r30, r24
     2cc:	f9 1f       	adc	r31, r25
     2ce:	e5 52       	subi	r30, 0x25	; 37
     2d0:	fe 4f       	sbci	r31, 0xFE	; 254
     2d2:	85 81       	ldd	r24, Z+5	; 0x05
     2d4:	81 11       	cpse	r24, r1
     2d6:	36 c0       	rjmp	.+108    	; 0x344 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xc0>
     2d8:	fb 01       	movw	r30, r22
     2da:	80 81       	ld	r24, Z
     2dc:	91 81       	ldd	r25, Z+1	; 0x01
     2de:	fc 01       	movw	r30, r24
     2e0:	e2 1b       	sub	r30, r18
     2e2:	f3 0b       	sbc	r31, r19
     2e4:	cf 01       	movw	r24, r30
     2e6:	22 f4       	brpl	.+8      	; 0x2f0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x6c>
     2e8:	88 27       	eor	r24, r24
     2ea:	99 27       	eor	r25, r25
     2ec:	8e 1b       	sub	r24, r30
     2ee:	9f 0b       	sbc	r25, r31
     2f0:	fb 01       	movw	r30, r22
     2f2:	22 81       	ldd	r18, Z+2	; 0x02
     2f4:	33 81       	ldd	r19, Z+3	; 0x03
     2f6:	b9 01       	movw	r22, r18
     2f8:	64 1b       	sub	r22, r20
     2fa:	75 0b       	sbc	r23, r21
     2fc:	9b 01       	movw	r18, r22
     2fe:	22 f4       	brpl	.+8      	; 0x308 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x84>
     300:	22 27       	eor	r18, r18
     302:	33 27       	eor	r19, r19
     304:	26 1b       	sub	r18, r22
     306:	37 0b       	sbc	r19, r23
     308:	88 9f       	mul	r24, r24
     30a:	60 01       	movw	r12, r0
     30c:	89 9f       	mul	r24, r25
     30e:	d0 0c       	add	r13, r0
     310:	d0 0c       	add	r13, r0
     312:	11 24       	eor	r1, r1
     314:	22 9f       	mul	r18, r18
     316:	c0 01       	movw	r24, r0
     318:	23 9f       	mul	r18, r19
     31a:	90 0d       	add	r25, r0
     31c:	90 0d       	add	r25, r0
     31e:	11 24       	eor	r1, r1
     320:	c8 0e       	add	r12, r24
     322:	d9 1e       	adc	r13, r25
     324:	0d 2c       	mov	r0, r13
     326:	00 0c       	add	r0, r0
     328:	ee 08       	sbc	r14, r14
     32a:	ff 08       	sbc	r15, r15
     32c:	c7 01       	movw	r24, r14
     32e:	b6 01       	movw	r22, r12
     330:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     334:	0e 94 bf 0c 	call	0x197e	; 0x197e <sqrt>
     338:	24 c0       	rjmp	.+72     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	7e ef       	ldi	r23, 0xFE	; 254
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	96 e4       	ldi	r25, 0x46	; 70
     342:	1f c0       	rjmp	.+62     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	7e ef       	ldi	r23, 0xFE	; 254
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	96 e4       	ldi	r25, 0x46	; 70
     34c:	1a c0       	rjmp	.+52     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	7e ef       	ldi	r23, 0xFE	; 254
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	96 e4       	ldi	r25, 0x46	; 70
     356:	15 c0       	rjmp	.+42     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     358:	fa 01       	movw	r30, r20
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	e4 0f       	add	r30, r20
     360:	f5 1f       	adc	r31, r21
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	aa e5       	ldi	r26, 0x5A	; 90
     368:	a2 9f       	mul	r26, r18
     36a:	c0 01       	movw	r24, r0
     36c:	a3 9f       	mul	r26, r19
     36e:	90 0d       	add	r25, r0
     370:	11 24       	eor	r1, r1
     372:	e8 0f       	add	r30, r24
     374:	f9 1f       	adc	r31, r25
     376:	e5 52       	subi	r30, 0x25	; 37
     378:	fe 4f       	sbci	r31, 0xFE	; 254
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	81 11       	cpse	r24, r1
     37e:	e7 cf       	rjmp	.-50     	; 0x34e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xca>
     380:	97 cf       	rjmp	.-210    	; 0x2b0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x2c>
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	08 95       	ret

0000038c <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
        }

        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     394:	fb 01       	movw	r30, r22
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	8f 30       	cpi	r24, 0x0F	; 15
     39c:	91 05       	cpc	r25, r1
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x16>
     3a0:	4f c0       	rjmp	.+158    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3a2:	22 81       	ldd	r18, Z+2	; 0x02
     3a4:	33 81       	ldd	r19, Z+3	; 0x03
     3a6:	2f 30       	cpi	r18, 0x0F	; 15
     3a8:	31 05       	cpc	r19, r1
     3aa:	08 f4       	brcc	.+2      	; 0x3ae <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>
     3ac:	58 c0       	rjmp	.+176    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	7e ef       	ldi	r23, 0xFE	; 254
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	96 e4       	ldi	r25, 0x46	; 70
     3b6:	68 c0       	rjmp	.+208    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     3b8:	f9 01       	movw	r30, r18
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	e2 0f       	add	r30, r18
     3c0:	f3 1f       	adc	r31, r19
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	aa e5       	ldi	r26, 0x5A	; 90
     3c8:	a8 9f       	mul	r26, r24
     3ca:	b0 01       	movw	r22, r0
     3cc:	a9 9f       	mul	r26, r25
     3ce:	70 0d       	add	r23, r0
     3d0:	11 24       	eor	r1, r1
     3d2:	e6 0f       	add	r30, r22
     3d4:	f7 1f       	adc	r31, r23
     3d6:	e5 52       	subi	r30, 0x25	; 37
     3d8:	fe 4f       	sbci	r31, 0xFE	; 254
     3da:	65 81       	ldd	r22, Z+5	; 0x05
     3dc:	61 11       	cpse	r22, r1
     3de:	35 c0       	rjmp	.+106    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
     3e0:	fa 01       	movw	r30, r20
     3e2:	60 81       	ld	r22, Z
     3e4:	71 81       	ldd	r23, Z+1	; 0x01
     3e6:	68 1b       	sub	r22, r24
     3e8:	79 0b       	sbc	r23, r25
     3ea:	cb 01       	movw	r24, r22
     3ec:	99 23       	and	r25, r25
     3ee:	24 f4       	brge	.+8      	; 0x3f8 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x6c>
     3f0:	88 27       	eor	r24, r24
     3f2:	99 27       	eor	r25, r25
     3f4:	86 1b       	sub	r24, r22
     3f6:	97 0b       	sbc	r25, r23
     3f8:	fa 01       	movw	r30, r20
     3fa:	42 81       	ldd	r20, Z+2	; 0x02
     3fc:	53 81       	ldd	r21, Z+3	; 0x03
     3fe:	42 1b       	sub	r20, r18
     400:	53 0b       	sbc	r21, r19
     402:	9a 01       	movw	r18, r20
     404:	22 f4       	brpl	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	22 27       	eor	r18, r18
     408:	33 27       	eor	r19, r19
     40a:	24 1b       	sub	r18, r20
     40c:	35 0b       	sbc	r19, r21
     40e:	88 9f       	mul	r24, r24
     410:	60 01       	movw	r12, r0
     412:	89 9f       	mul	r24, r25
     414:	d0 0c       	add	r13, r0
     416:	d0 0c       	add	r13, r0
     418:	11 24       	eor	r1, r1
     41a:	22 9f       	mul	r18, r18
     41c:	c0 01       	movw	r24, r0
     41e:	23 9f       	mul	r18, r19
     420:	90 0d       	add	r25, r0
     422:	90 0d       	add	r25, r0
     424:	11 24       	eor	r1, r1
     426:	c8 0e       	add	r12, r24
     428:	d9 1e       	adc	r13, r25
     42a:	0d 2c       	mov	r0, r13
     42c:	00 0c       	add	r0, r0
     42e:	ee 08       	sbc	r14, r14
     430:	ff 08       	sbc	r15, r15
     432:	c7 01       	movw	r24, r14
     434:	b6 01       	movw	r22, r12
     436:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     43a:	0e 94 bf 0c 	call	0x197e	; 0x197e <sqrt>
     43e:	24 c0       	rjmp	.+72     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	7e ef       	ldi	r23, 0xFE	; 254
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	96 e4       	ldi	r25, 0x46	; 70
     448:	1f c0       	rjmp	.+62     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	7e ef       	ldi	r23, 0xFE	; 254
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	96 e4       	ldi	r25, 0x46	; 70
     452:	1a c0       	rjmp	.+52     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	7e ef       	ldi	r23, 0xFE	; 254
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	96 e4       	ldi	r25, 0x46	; 70
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
                }

                return result;
     45c:	15 c0       	rjmp	.+42     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     45e:	f9 01       	movw	r30, r18
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e2 0f       	add	r30, r18
     466:	f3 1f       	adc	r31, r19
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	aa e5       	ldi	r26, 0x5A	; 90
     46e:	a8 9f       	mul	r26, r24
     470:	b0 01       	movw	r22, r0
     472:	a9 9f       	mul	r26, r25
     474:	70 0d       	add	r23, r0
     476:	11 24       	eor	r1, r1
     478:	e6 0f       	add	r30, r22
     47a:	f7 1f       	adc	r31, r23
     47c:	e5 52       	subi	r30, 0x25	; 37
     47e:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     480:	64 81       	ldd	r22, Z+4	; 0x04
     482:	61 11       	cpse	r22, r1
     484:	e7 cf       	rjmp	.-50     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     486:	98 cf       	rjmp	.-208    	; 0x3b8 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x2c>
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
                }

                return result;
            };
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	08 95       	ret

00000492 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     492:	fb 01       	movw	r30, r22
     494:	20 81       	ld	r18, Z
     496:	31 81       	ldd	r19, Z+1	; 0x01
     498:	2f 30       	cpi	r18, 0x0F	; 15
     49a:	31 05       	cpc	r19, r1
     49c:	50 f4       	brcc	.+20     	; 0x4b2 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x20>
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	8f 30       	cpi	r24, 0x0F	; 15
     4a4:	91 05       	cpc	r25, r1
     4a6:	50 f0       	brcs	.+20     	; 0x4bc <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x2a>

                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
                {
                    float result = SHRT_MAX;
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	7e ef       	ldi	r23, 0xFE	; 254
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	96 e4       	ldi	r25, 0x46	; 70
     4b0:	08 95       	ret
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	7e ef       	ldi	r23, 0xFE	; 254
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	96 e4       	ldi	r25, 0x46	; 70
     4ba:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     4bc:	ac 01       	movw	r20, r24
     4be:	44 0f       	add	r20, r20
     4c0:	55 1f       	adc	r21, r21
     4c2:	84 0f       	add	r24, r20
     4c4:	95 1f       	adc	r25, r21
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	4a e5       	ldi	r20, 0x5A	; 90
     4cc:	42 9f       	mul	r20, r18
     4ce:	f0 01       	movw	r30, r0
     4d0:	43 9f       	mul	r20, r19
     4d2:	f0 0d       	add	r31, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8e 0f       	add	r24, r30
     4d8:	9f 1f       	adc	r25, r31
     4da:	fc 01       	movw	r30, r24
     4dc:	e5 52       	subi	r30, 0x25	; 37
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	60 81       	ld	r22, Z
     4e2:	71 81       	ldd	r23, Z+1	; 0x01
     4e4:	07 2e       	mov	r0, r23
     4e6:	00 0c       	add	r0, r0
     4e8:	88 0b       	sbc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
                    }

                    return result;
                };
     4f0:	08 95       	ret

000004f2 <_ZN5Robot14initializeMenuEv>:
            print( ", " );
            print_long( pos.y );
            print( ")" );
        }

        void initializeMenu()
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
        {
            clear();
     4fc:	0e 94 8b 12 	call	0x2516	; 0x2516 <clear>

            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     500:	0f e0       	ldi	r16, 0x0F	; 15
     502:	10 e0       	ldi	r17, 0x00	; 0

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     504:	80 e1       	ldi	r24, 0x10	; 16
     506:	0e 94 0b 14 	call	0x2816	; 0x2816 <button_is_pressed>
     50a:	81 11       	cpse	r24, r1
     50c:	45 c0       	rjmp	.+138    	; 0x598 <_ZN5Robot14initializeMenuEv+0xa6>
            {
                if ( button_is_pressed( BUTTON_A ) )
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 0b 14 	call	0x2816	; 0x2816 <button_is_pressed>
     514:	88 23       	and	r24, r24
     516:	41 f0       	breq	.+16     	; 0x528 <_ZN5Robot14initializeMenuEv+0x36>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	9e 81       	ldd	r25, Y+6	; 0x06
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	b8 01       	movw	r22, r16
     520:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__divmodhi4>
     524:	9e 83       	std	Y+6, r25	; 0x06
     526:	8d 83       	std	Y+5, r24	; 0x05
                }

                if ( button_is_pressed( BUTTON_C ) )
     528:	80 e2       	ldi	r24, 0x20	; 32
     52a:	0e 94 0b 14 	call	0x2816	; 0x2816 <button_is_pressed>
     52e:	88 23       	and	r24, r24
     530:	41 f0       	breq	.+16     	; 0x542 <_ZN5Robot14initializeMenuEv+0x50>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     532:	8f 81       	ldd	r24, Y+7	; 0x07
     534:	98 85       	ldd	r25, Y+8	; 0x08
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	b8 01       	movw	r22, r16
     53a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__divmodhi4>
     53e:	98 87       	std	Y+8, r25	; 0x08
     540:	8f 83       	std	Y+7, r24	; 0x07
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     542:	0e 94 8b 12 	call	0x2516	; 0x2516 <clear>
            print( "(" );
     546:	81 e5       	ldi	r24, 0x51	; 81
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>
            print_long( pos.x );
     54e:	6d 81       	ldd	r22, Y+5	; 0x05
     550:	7e 81       	ldd	r23, Y+6	; 0x06
     552:	07 2e       	mov	r0, r23
     554:	00 0c       	add	r0, r0
     556:	88 0b       	sbc	r24, r24
     558:	99 0b       	sbc	r25, r25
     55a:	0e 94 ef 12 	call	0x25de	; 0x25de <print_long>
            print( ", " );
     55e:	83 e5       	ldi	r24, 0x53	; 83
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>
            print_long( pos.y );
     566:	6f 81       	ldd	r22, Y+7	; 0x07
     568:	78 85       	ldd	r23, Y+8	; 0x08
     56a:	07 2e       	mov	r0, r23
     56c:	00 0c       	add	r0, r0
     56e:	88 0b       	sbc	r24, r24
     570:	99 0b       	sbc	r25, r25
     572:	0e 94 ef 12 	call	0x25de	; 0x25de <print_long>
            print( ")" );
     576:	86 e5       	ldi	r24, 0x56	; 86
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos );

                lcd_goto_xy( 0, 1 );
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 12 13 	call	0x2624	; 0x2624 <lcd_goto_xy>
                print( " A B C " );
     586:	88 e5       	ldi	r24, 0x58	; 88
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>

                delay_ms( 100 );
     58e:	84 e6       	ldi	r24, 0x64	; 100
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     596:	b6 cf       	rjmp	.-148    	; 0x504 <_ZN5Robot14initializeMenuEv+0x12>

                delay_ms( 100 );
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     598:	80 e1       	ldi	r24, 0x10	; 16
     59a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <wait_for_button_release>
            delay_ms( 1000 );
     59e:	88 ee       	ldi	r24, 0xE8	; 232
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
        }
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <_ZN5Robot8mainMenuEv>:

        //Main program menu
        void mainMenu()
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	a9 97       	sbiw	r28, 0x29	; 41
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	1c 01       	movw	r2, r24
        {
            clear();
     5c6:	0e 94 8b 12 	call	0x2516	; 0x2516 <clear>
            print( "A - Test" );
     5ca:	80 e6       	ldi	r24, 0x60	; 96
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>
            lcd_goto_xy( 0, 1 );
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 12 13 	call	0x2624	; 0x2624 <lcd_goto_xy>
            print( "B - Main" );
     5da:	89 e6       	ldi	r24, 0x69	; 105
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>
            unsigned int	sensorsArr[ 5 ];
            markerValue = 0;

            for ( short i = 0; i < 20; i++ )
            {
                read_line_sensors( sensorsArr, IR_EMITTERS_ON );
     5e2:	9e 01       	movw	r18, r28
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	38 8b       	std	Y+16, r19	; 0x10
     5ea:	2f 87       	std	Y+15, r18	; 0x0f
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= LAPS_COUNT )
            {
                stepToGoal( finishPos );
     5ec:	c1 01       	movw	r24, r2
     5ee:	05 96       	adiw	r24, 0x05	; 5
     5f0:	99 a3       	std	Y+33, r25	; 0x21
     5f2:	88 a3       	std	Y+32, r24	; 0x20
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                float	currDist = getDist( currPos, to );
     5f4:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f6:	9e 8b       	std	Y+22, r25	; 0x16
     5f8:	a8 89       	ldd	r26, Y+16	; 0x10
     5fa:	af 8b       	std	Y+23, r26	; 0x17
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     5fc:	f1 01       	movw	r30, r2
     5fe:	39 96       	adiw	r30, 0x09	; 9
     600:	ff a3       	std	Y+39, r31	; 0x27
     602:	ee a3       	std	Y+38, r30	; 0x26

            bool isSelectedProgram = false;

            while ( !isSelectedProgram )
            {
                if ( button_is_pressed( BUTTON_A ) )
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	0e 94 0b 14 	call	0x2816	; 0x2816 <button_is_pressed>
     60a:	88 23       	and	r24, r24
     60c:	31 f1       	breq	.+76     	; 0x65a <_ZN5Robot8mainMenuEv+0xaa>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 f7 13 	call	0x27ee	; 0x27ee <wait_for_button_release>
        // Displays the data returned from the sensors
        void testSensors()
        {
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );
     614:	61 01       	movw	r12, r2
     616:	f9 e0       	ldi	r31, 0x09	; 9
     618:	cf 0e       	add	r12, r31
     61a:	d1 1c       	adc	r13, r1
     61c:	71 01       	movw	r14, r2
     61e:	23 e1       	ldi	r18, 0x13	; 19
     620:	e2 0e       	add	r14, r18
     622:	f1 1c       	adc	r15, r1
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	c6 01       	movw	r24, r12
     628:	0e 94 92 14 	call	0x2924	; 0x2924 <read_line_sensors>
     62c:	86 01       	movw	r16, r12

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
                {
                    print_long( sensors[ i ] );
     62e:	d8 01       	movw	r26, r16
     630:	6d 91       	ld	r22, X+
     632:	7d 91       	ld	r23, X+
     634:	8d 01       	movw	r16, r26
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 ef 12 	call	0x25de	; 0x25de <print_long>
                    delay_ms( 500 );
     63e:	84 ef       	ldi	r24, 0xF4	; 244
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
                    clear();
     646:	0e 94 8b 12 	call	0x2516	; 0x2516 <clear>
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
     64a:	0e 15       	cp	r16, r14
     64c:	1f 05       	cpc	r17, r15
     64e:	79 f7       	brne	.-34     	; 0x62e <_ZN5Robot8mainMenuEv+0x7e>
                    delay_ms( 500 );
                    clear();
                }

                // Play sound to notify that the next iteration will begin.
                play( ">>a32" );
     650:	82 e7       	ldi	r24, 0x72	; 114
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 82 11 	call	0x2304	; 0x2304 <play>
     658:	e5 cf       	rjmp	.-54     	; 0x624 <_ZN5Robot8mainMenuEv+0x74>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
                    testSensors();
                }

                if ( button_is_pressed( BUTTON_B ) )
     65a:	80 e1       	ldi	r24, 0x10	; 16
     65c:	0e 94 0b 14 	call	0x2816	; 0x2816 <button_is_pressed>
     660:	88 23       	and	r24, r24
     662:	81 f2       	breq	.-96     	; 0x604 <_ZN5Robot8mainMenuEv+0x54>
                {
                    wait_for_button_release( BUTTON_B );//wait for the button to be released before run the program
     664:	80 e1       	ldi	r24, 0x10	; 16
     666:	0e 94 f7 13 	call	0x27ee	; 0x27ee <wait_for_button_release>
                    // mainRobotLogic the initialization menu
                    this->initializeMenu();
     66a:	c1 01       	movw	r24, r2
     66c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN5Robot14initializeMenuEv>

        // Reads line sensors a couple times and then sets markerValue as the average output of the 3 middle sensors
        void calibrateMarkerValue()
        {
            unsigned int	sensorsArr[ 5 ];
            markerValue = 0;
     670:	f1 01       	movw	r30, r2
     672:	10 8e       	std	Z+24, r1	; 0x18
     674:	17 8a       	std	Z+23, r1	; 0x17
     676:	24 e1       	ldi	r18, 0x14	; 20
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	3b a3       	std	Y+35, r19	; 0x23
     67c:	2a a3       	std	Y+34, r18	; 0x22
     67e:	04 e1       	ldi	r16, 0x14	; 20
     680:	10 e0       	ldi	r17, 0x00	; 0

            for ( short i = 0; i < 20; i++ )
            {
                read_line_sensors( sensorsArr, IR_EMITTERS_ON );
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 92 14 	call	0x2924	; 0x2924 <read_line_sensors>
                markerValue += ( sensorsArr[1] + sensorsArr[2] + sensorsArr[3] );
     68c:	d1 01       	movw	r26, r2
     68e:	57 96       	adiw	r26, 0x17	; 23
     690:	2d 91       	ld	r18, X+
     692:	3c 91       	ld	r19, X
     694:	58 97       	sbiw	r26, 0x18	; 24
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	28 0f       	add	r18, r24
     69c:	39 1f       	adc	r19, r25
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	9e 81       	ldd	r25, Y+6	; 0x06
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	2f 81       	ldd	r18, Y+7	; 0x07
     6a8:	38 85       	ldd	r19, Y+8	; 0x08
     6aa:	28 0f       	add	r18, r24
     6ac:	39 1f       	adc	r19, r25
     6ae:	58 96       	adiw	r26, 0x18	; 24
     6b0:	3c 93       	st	X, r19
     6b2:	2e 93       	st	-X, r18
     6b4:	57 97       	sbiw	r26, 0x17	; 23
     6b6:	01 50       	subi	r16, 0x01	; 1
     6b8:	11 09       	sbc	r17, r1
        void calibrateMarkerValue()
        {
            unsigned int	sensorsArr[ 5 ];
            markerValue = 0;

            for ( short i = 0; i < 20; i++ )
     6ba:	19 f7       	brne	.-58     	; 0x682 <_ZN5Robot8mainMenuEv+0xd2>
     6bc:	1b a3       	std	Y+35, r17	; 0x23
     6be:	0a a3       	std	Y+34, r16	; 0x22
                read_line_sensors( sensorsArr, IR_EMITTERS_ON );
                markerValue += ( sensorsArr[1] + sensorsArr[2] + sensorsArr[3] );
            }

            markerValue /= 60;
            markerValue -= MARKER_EPS;
     6c0:	a9 e8       	ldi	r26, 0x89	; 137
     6c2:	b8 e8       	ldi	r27, 0x88	; 136
     6c4:	0e 94 0b 18 	call	0x3016	; 0x3016 <__umulhisi3>
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	92 95       	swap	r25
     6ce:	82 95       	swap	r24
     6d0:	8f 70       	andi	r24, 0x0F	; 15
     6d2:	89 27       	eor	r24, r25
     6d4:	9f 70       	andi	r25, 0x0F	; 15
     6d6:	89 27       	eor	r24, r25
     6d8:	44 97       	sbiw	r24, 0x14	; 20
     6da:	f1 01       	movw	r30, r2
     6dc:	90 8f       	std	Z+24, r25	; 0x18
     6de:	87 8b       	std	Z+23, r24	; 0x17

            // Move a bit forward in order to go over the calibration point
            set_motors( 20, 20 );
     6e0:	64 e1       	ldi	r22, 0x14	; 20
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	84 e1       	ldi	r24, 0x14	; 20
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
            delay_ms( 900 );
     6ec:	84 e8       	ldi	r24, 0x84	; 132
     6ee:	93 e0       	ldi	r25, 0x03	; 3
     6f0:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
            set_motors( 0, 0 );
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
        }

        // Main logic function
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
     700:	d1 01       	movw	r26, r2
     702:	4d 91       	ld	r20, X+
     704:	5c 91       	ld	r21, X
     706:	11 97       	sbiw	r26, 0x01	; 1
     708:	12 96       	adiw	r26, 0x02	; 2
     70a:	8d 91       	ld	r24, X+
     70c:	9c 91       	ld	r25, X
     70e:	13 97       	sbiw	r26, 0x03	; 3
     710:	9c 01       	movw	r18, r24
     712:	22 0f       	add	r18, r18
     714:	33 1f       	adc	r19, r19
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	2a e5       	ldi	r18, 0x5A	; 90
     720:	24 9f       	mul	r18, r20
     722:	f0 01       	movw	r30, r0
     724:	25 9f       	mul	r18, r21
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	8e 0f       	add	r24, r30
     72c:	9f 1f       	adc	r25, r31
     72e:	fc 01       	movw	r30, r24
     730:	e5 52       	subi	r30, 0x25	; 37
     732:	fe 4f       	sbci	r31, 0xFE	; 254
     734:	11 82       	std	Z+1, r1	; 0x01
     736:	10 82       	st	Z, r1
            matrix[ position.x ][ position.y ].isVisited	= true;
     738:	4d 91       	ld	r20, X+
     73a:	5c 91       	ld	r21, X
     73c:	11 97       	sbiw	r26, 0x01	; 1
     73e:	12 96       	adiw	r26, 0x02	; 2
     740:	8d 91       	ld	r24, X+
     742:	9c 91       	ld	r25, X
     744:	13 97       	sbiw	r26, 0x03	; 3
     746:	bc 01       	movw	r22, r24
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	86 0f       	add	r24, r22
     74e:	97 1f       	adc	r25, r23
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	24 9f       	mul	r18, r20
     756:	f0 01       	movw	r30, r0
     758:	25 9f       	mul	r18, r21
     75a:	f0 0d       	add	r31, r0
     75c:	11 24       	eor	r1, r1
     75e:	8e 0f       	add	r24, r30
     760:	9f 1f       	adc	r25, r31
     762:	fc 01       	movw	r30, r24
     764:	e5 52       	subi	r30, 0x25	; 37
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	85 83       	std	Z+5, r24	; 0x05

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     76c:	18 8e       	std	Y+24, r1	; 0x18
     76e:	1a 8e       	std	Y+26, r1	; 0x1a
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     770:	f1 01       	movw	r30, r2
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	85 81       	ldd	r24, Z+5	; 0x05
     778:	96 81       	ldd	r25, Z+6	; 0x06
     77a:	28 17       	cp	r18, r24
     77c:	39 07       	cpc	r19, r25
     77e:	41 f4       	brne	.+16     	; 0x790 <_ZN5Robot8mainMenuEv+0x1e0>
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= LAPS_COUNT )
     780:	22 81       	ldd	r18, Z+2	; 0x02
     782:	33 81       	ldd	r19, Z+3	; 0x03
     784:	87 81       	ldd	r24, Z+7	; 0x07
     786:	90 85       	ldd	r25, Z+8	; 0x08
     788:	28 17       	cp	r18, r24
     78a:	39 07       	cpc	r19, r25
     78c:	09 f4       	brne	.+2      	; 0x790 <_ZN5Robot8mainMenuEv+0x1e0>
     78e:	3a cf       	rjmp	.-396    	; 0x604 <_ZN5Robot8mainMenuEv+0x54>
     790:	d1 01       	movw	r26, r2
     792:	53 96       	adiw	r26, 0x13	; 19
     794:	8d 91       	ld	r24, X+
     796:	9c 91       	ld	r25, X
     798:	54 97       	sbiw	r26, 0x14	; 20
     79a:	03 97       	sbiw	r24, 0x03	; 3
     79c:	0c f0       	brlt	.+2      	; 0x7a0 <_ZN5Robot8mainMenuEv+0x1f0>
     79e:	32 cf       	rjmp	.-412    	; 0x604 <_ZN5Robot8mainMenuEv+0x54>
            {
                stepToGoal( finishPos );
     7a0:	e8 e0       	ldi	r30, 0x08	; 8
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	fd a3       	std	Y+37, r31	; 0x25
     7a6:	ec a3       	std	Y+36, r30	; 0x24
                {
                    nextPos = this->getNextPos( goalPos );
                }
                else
                {
                    nextPos = this->getNearestToFinishAdjacent( position );
     7a8:	2c 8a       	std	Y+20, r2	; 0x14
     7aa:	3d 8a       	std	Y+21, r3	; 0x15

            while ( count < 8 )
            {
                count++;

                if ( lap < LAPS_COUNT )
     7ac:	d1 01       	movw	r26, r2
     7ae:	53 96       	adiw	r26, 0x13	; 19
     7b0:	8d 91       	ld	r24, X+
     7b2:	9c 91       	ld	r25, X
     7b4:	54 97       	sbiw	r26, 0x14	; 20
     7b6:	02 97       	sbiw	r24, 0x02	; 2
     7b8:	0c f0       	brlt	.+2      	; 0x7bc <_ZN5Robot8mainMenuEv+0x20c>
     7ba:	c1 c0       	rjmp	.+386    	; 0x93e <__stack+0x3f>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     7bc:	68 a1       	ldd	r22, Y+32	; 0x20
     7be:	79 a1       	ldd	r23, Y+33	; 0x21
     7c0:	8c 89       	ldd	r24, Y+20	; 0x14
     7c2:	9d 89       	ldd	r25, Y+21	; 0x15
     7c4:	0e 94 42 01 	call	0x284	; 0x284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     7c8:	76 2e       	mov	r7, r22
     7ca:	67 2e       	mov	r6, r23
     7cc:	89 8b       	std	Y+17, r24	; 0x11
     7ce:	9a 8b       	std	Y+18, r25	; 0x12
            Point2D	minPos( from );
     7d0:	d1 01       	movw	r26, r2
     7d2:	8d 91       	ld	r24, X+
     7d4:	9d 91       	ld	r25, X+
     7d6:	0d 90       	ld	r0, X+
     7d8:	bc 91       	ld	r27, X
     7da:	a0 2d       	mov	r26, r0
     7dc:	8c 8f       	std	Y+28, r24	; 0x1c
     7de:	9d 8f       	std	Y+29, r25	; 0x1d
     7e0:	ae 8f       	std	Y+30, r26	; 0x1e
     7e2:	bf 8f       	std	Y+31, r27	; 0x1f
            short	pos			= ( short )orientation;
     7e4:	f1 01       	movw	r30, r2
     7e6:	84 80       	ldd	r8, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
     7e8:	88 8d       	ldd	r24, Y+24	; 0x18
     7ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7ec:	91 2c       	mov	r9, r1
     7ee:	24 01       	movw	r4, r8
     7f0:	8c 01       	movw	r16, r24
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     7f2:	88 0d       	add	r24, r8
     7f4:	99 1d       	adc	r25, r9
     7f6:	87 70       	andi	r24, 0x07	; 7
     7f8:	90 78       	andi	r25, 0x80	; 128
     7fa:	99 23       	and	r25, r25
     7fc:	24 f4       	brge	.+8      	; 0x806 <_ZN5Robot8mainMenuEv+0x256>
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	88 6f       	ori	r24, 0xF8	; 248
     802:	9f 6f       	ori	r25, 0xFF	; 255
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	fc 01       	movw	r30, r24
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	ec 5e       	subi	r30, 0xEC	; 236
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	d1 01       	movw	r26, r2
     812:	4d 91       	ld	r20, X+
     814:	5c 91       	ld	r21, X
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	20 81       	ld	r18, Z
     81a:	31 81       	ldd	r19, Z+1	; 0x01
     81c:	24 0f       	add	r18, r20
     81e:	35 1f       	adc	r19, r21
     820:	3a 83       	std	Y+2, r19	; 0x02
     822:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     824:	12 96       	adiw	r26, 0x02	; 2
     826:	ad 90       	ld	r10, X+
     828:	bc 90       	ld	r11, X
     82a:	13 97       	sbiw	r26, 0x03	; 3
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	fc 01       	movw	r30, r24
     832:	ec 5d       	subi	r30, 0xDC	; 220
     834:	fe 4f       	sbci	r31, 0xFE	; 254
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	8a 0d       	add	r24, r10
     83c:	9b 1d       	adc	r25, r11
     83e:	9c 83       	std	Y+4, r25	; 0x04
     840:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     842:	68 a1       	ldd	r22, Y+32	; 0x20
     844:	79 a1       	ldd	r23, Y+33	; 0x21
     846:	8e 89       	ldd	r24, Y+22	; 0x16
     848:	9f 89       	ldd	r25, Y+23	; 0x17
     84a:	0e 94 42 01 	call	0x284	; 0x284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     84e:	c6 2e       	mov	r12, r22
     850:	d7 2e       	mov	r13, r23
     852:	e8 2e       	mov	r14, r24
     854:	f9 2e       	mov	r15, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     856:	27 2d       	mov	r18, r7
     858:	36 2d       	mov	r19, r6
     85a:	49 89       	ldd	r20, Y+17	; 0x11
     85c:	5a 89       	ldd	r21, Y+18	; 0x12
     85e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__cmpsf2>
     862:	88 23       	and	r24, r24
     864:	64 f4       	brge	.+24     	; 0x87e <_ZN5Robot8mainMenuEv+0x2ce>
                {
                    minDist = currDist;
                    minPos	= currPos;
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	ab 81       	ldd	r26, Y+3	; 0x03
     86c:	bc 81       	ldd	r27, Y+4	; 0x04
     86e:	8c 8f       	std	Y+28, r24	; 0x1c
     870:	9d 8f       	std	Y+29, r25	; 0x1d
     872:	ae 8f       	std	Y+30, r26	; 0x1e
     874:	bf 8f       	std	Y+31, r27	; 0x1f
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     876:	7c 2c       	mov	r7, r12
     878:	6d 2c       	mov	r6, r13
     87a:	e9 8a       	std	Y+17, r14	; 0x11
     87c:	fa 8a       	std	Y+18, r15	; 0x12
     87e:	c8 01       	movw	r24, r16
     880:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     882:	88 30       	cpi	r24, 0x08	; 8
     884:	91 05       	cpc	r25, r1
     886:	09 f0       	breq	.+2      	; 0x88a <_ZN5Robot8mainMenuEv+0x2da>
     888:	b2 cf       	rjmp	.-156    	; 0x7ee <_ZN5Robot8mainMenuEv+0x23e>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     88a:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
     88e:	6c 8c       	ldd	r6, Y+28	; 0x1c
     890:	7d 8c       	ldd	r7, Y+29	; 0x1d
     892:	ee 8c       	ldd	r14, Y+30	; 0x1e
     894:	ff 8c       	ldd	r15, Y+31	; 0x1f
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     896:	d1 01       	movw	r26, r2
     898:	8d 90       	ld	r8, X+
     89a:	9c 90       	ld	r9, X
     89c:	86 14       	cp	r8, r6
     89e:	97 04       	cpc	r9, r7
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <_ZN5Robot8mainMenuEv+0x2f4>
     8a2:	bd c4       	rjmp	.+2426   	; 0x121e <__stack+0x91f>
     8a4:	ae 14       	cp	r10, r14
     8a6:	bf 04       	cpc	r11, r15
     8a8:	09 f4       	brne	.+2      	; 0x8ac <_ZN5Robot8mainMenuEv+0x2fc>
     8aa:	a5 c4       	rjmp	.+2378   	; 0x11f6 <__stack+0x8f7>

                return result;
            };

            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );
     8ac:	34 01       	movw	r6, r8
     8ae:	ae c0       	rjmp	.+348    	; 0xa0c <__stack+0x10d>
     8b0:	9d 8f       	std	Y+29, r25	; 0x1d
     8b2:	8c 8f       	std	Y+28, r24	; 0x1c

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     8b4:	84 0d       	add	r24, r4
     8b6:	95 1d       	adc	r25, r5
     8b8:	87 70       	andi	r24, 0x07	; 7
     8ba:	90 78       	andi	r25, 0x80	; 128
     8bc:	99 23       	and	r25, r25
     8be:	24 f4       	brge	.+8      	; 0x8c8 <_ZN5Robot8mainMenuEv+0x318>
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	88 6f       	ori	r24, 0xF8	; 248
     8c4:	9f 6f       	ori	r25, 0xFF	; 255
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	fc 01       	movw	r30, r24
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ec 5e       	subi	r30, 0xEC	; 236
     8d0:	fe 4f       	sbci	r31, 0xFE	; 254
     8d2:	20 81       	ld	r18, Z
     8d4:	31 81       	ldd	r19, Z+1	; 0x01
     8d6:	28 0d       	add	r18, r8
     8d8:	39 1d       	adc	r19, r9
     8da:	3a 83       	std	Y+2, r19	; 0x02
     8dc:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	fc 01       	movw	r30, r24
     8e4:	ec 5d       	subi	r30, 0xDC	; 220
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	8a 0d       	add	r24, r10
     8ee:	9b 1d       	adc	r25, r11
     8f0:	9c 83       	std	Y+4, r25	; 0x04
     8f2:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     8f4:	6c 89       	ldd	r22, Y+20	; 0x14
     8f6:	7d 89       	ldd	r23, Y+21	; 0x15
     8f8:	8e 89       	ldd	r24, Y+22	; 0x16
     8fa:	9f 89       	ldd	r25, Y+23	; 0x17
     8fc:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
     900:	06 2f       	mov	r16, r22
     902:	17 2f       	mov	r17, r23
     904:	28 2e       	mov	r2, r24
     906:	39 2e       	mov	r3, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     908:	27 2d       	mov	r18, r7
     90a:	36 2d       	mov	r19, r6
     90c:	49 89       	ldd	r20, Y+17	; 0x11
     90e:	5a 89       	ldd	r21, Y+18	; 0x12
     910:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__cmpsf2>
     914:	88 23       	and	r24, r24
     916:	44 f4       	brge	.+16     	; 0x928 <__stack+0x29>
                {
                    minDist = currDist;
                    minPos	= currPos;
     918:	c9 80       	ldd	r12, Y+1	; 0x01
     91a:	da 80       	ldd	r13, Y+2	; 0x02
     91c:	eb 80       	ldd	r14, Y+3	; 0x03
     91e:	fc 80       	ldd	r15, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     920:	70 2e       	mov	r7, r16
     922:	61 2e       	mov	r6, r17
     924:	29 8a       	std	Y+17, r2	; 0x11
     926:	3a 8a       	std	Y+18, r3	; 0x12
     928:	8c 8d       	ldd	r24, Y+28	; 0x1c
     92a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     92c:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     92e:	88 30       	cpi	r24, 0x08	; 8
     930:	91 05       	cpc	r25, r1
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	bd cf       	rjmp	.-134    	; 0x8b0 <_ZN5Robot8mainMenuEv+0x300>
     936:	28 a4       	ldd	r2, Y+40	; 0x28
     938:	39 a4       	ldd	r3, Y+41	; 0x29
     93a:	36 01       	movw	r6, r12
     93c:	60 c0       	rjmp	.+192    	; 0x9fe <__stack+0xff>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     93e:	6c 89       	ldd	r22, Y+20	; 0x14
     940:	7d 89       	ldd	r23, Y+21	; 0x15
     942:	86 2f       	mov	r24, r22
     944:	97 2f       	mov	r25, r23
     946:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     94a:	56 2e       	mov	r5, r22
     94c:	47 2e       	mov	r4, r23
     94e:	89 8b       	std	Y+17, r24	; 0x11
     950:	9a 8b       	std	Y+18, r25	; 0x12
            Point2D	minPos( from );
     952:	f1 01       	movw	r30, r2
     954:	80 80       	ld	r8, Z
     956:	91 80       	ldd	r9, Z+1	; 0x01
     958:	a2 80       	ldd	r10, Z+2	; 0x02
     95a:	b3 80       	ldd	r11, Z+3	; 0x03
            short	pos			= ( short )orientation;
     95c:	64 80       	ldd	r6, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
     95e:	88 8d       	ldd	r24, Y+24	; 0x18
     960:	9a 8d       	ldd	r25, Y+26	; 0x1a
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     962:	71 2c       	mov	r7, r1
     964:	6c 01       	movw	r12, r24
     966:	86 0d       	add	r24, r6
     968:	97 1d       	adc	r25, r7
     96a:	87 70       	andi	r24, 0x07	; 7
     96c:	90 78       	andi	r25, 0x80	; 128
     96e:	99 23       	and	r25, r25
     970:	24 f4       	brge	.+8      	; 0x97a <__stack+0x7b>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	88 6f       	ori	r24, 0xF8	; 248
     976:	9f 6f       	ori	r25, 0xFF	; 255
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	fc 01       	movw	r30, r24
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	ec 5e       	subi	r30, 0xEC	; 236
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	d1 01       	movw	r26, r2
     986:	4d 91       	ld	r20, X+
     988:	5c 91       	ld	r21, X
     98a:	11 97       	sbiw	r26, 0x01	; 1
     98c:	20 81       	ld	r18, Z
     98e:	31 81       	ldd	r19, Z+1	; 0x01
     990:	24 0f       	add	r18, r20
     992:	35 1f       	adc	r19, r21
     994:	3a 83       	std	Y+2, r19	; 0x02
     996:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	fc 01       	movw	r30, r24
     99e:	ec 5d       	subi	r30, 0xDC	; 220
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	12 96       	adiw	r26, 0x02	; 2
     9a4:	8d 91       	ld	r24, X+
     9a6:	9c 91       	ld	r25, X
     9a8:	13 97       	sbiw	r26, 0x03	; 3
     9aa:	20 81       	ld	r18, Z
     9ac:	31 81       	ldd	r19, Z+1	; 0x01
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	9c 83       	std	Y+4, r25	; 0x04
     9b4:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     9b6:	6c 89       	ldd	r22, Y+20	; 0x14
     9b8:	7d 89       	ldd	r23, Y+21	; 0x15
     9ba:	8e 89       	ldd	r24, Y+22	; 0x16
     9bc:	9f 89       	ldd	r25, Y+23	; 0x17
     9be:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     9c2:	06 2f       	mov	r16, r22
     9c4:	17 2f       	mov	r17, r23
     9c6:	f8 2e       	mov	r15, r24
     9c8:	e9 2e       	mov	r14, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     9ca:	25 2d       	mov	r18, r5
     9cc:	34 2d       	mov	r19, r4
     9ce:	49 89       	ldd	r20, Y+17	; 0x11
     9d0:	5a 89       	ldd	r21, Y+18	; 0x12
     9d2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	44 f4       	brge	.+16     	; 0x9ea <__stack+0xeb>
                {
                    minDist = currDist;
                    minPos	= currPos;
     9da:	89 80       	ldd	r8, Y+1	; 0x01
     9dc:	9a 80       	ldd	r9, Y+2	; 0x02
     9de:	ab 80       	ldd	r10, Y+3	; 0x03
     9e0:	bc 80       	ldd	r11, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     9e2:	50 2e       	mov	r5, r16
     9e4:	41 2e       	mov	r4, r17
     9e6:	f9 8a       	std	Y+17, r15	; 0x11
     9e8:	ea 8a       	std	Y+18, r14	; 0x12
     9ea:	c6 01       	movw	r24, r12
     9ec:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     9ee:	88 30       	cpi	r24, 0x08	; 8
     9f0:	91 05       	cpc	r25, r1
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	b7 cf       	rjmp	.-146    	; 0x964 <__stack+0x65>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     9f6:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
     9fa:	34 01       	movw	r6, r8
     9fc:	75 01       	movw	r14, r10
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     9fe:	f1 01       	movw	r30, r2
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	86 15       	cp	r24, r6
     a06:	97 05       	cpc	r25, r7
     a08:	09 f0       	breq	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	09 c4       	rjmp	.+2066   	; 0x121e <__stack+0x91f>
     a0c:	d1 01       	movw	r26, r2
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	8d 91       	ld	r24, X+
     a12:	9c 91       	ld	r25, X
     a14:	13 97       	sbiw	r26, 0x03	; 3
     a16:	8e 15       	cp	r24, r14
     a18:	9f 05       	cpc	r25, r15
     a1a:	09 f0       	breq	.+2      	; 0xa1e <__stack+0x11f>
     a1c:	00 c4       	rjmp	.+2048   	; 0x121e <__stack+0x91f>
     a1e:	fe c0       	rjmp	.+508    	; 0xc1c <__stack+0x31d>

                case EOrientation::East:
                    return 0;

                case EOrientation::NorthEast:
                    return 45;
     a20:	0d e2       	ldi	r16, 0x2D	; 45
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <__stack+0x143>

                case EOrientation::North:
                    return 90;
     a26:	0a e5       	ldi	r16, 0x5A	; 90
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <__stack+0x143>

                case EOrientation::NorthWest:
                    return 135;
     a2c:	07 e8       	ldi	r16, 0x87	; 135
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <__stack+0x143>

                case EOrientation::West:
                    return 180;
     a32:	04 eb       	ldi	r16, 0xB4	; 180
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <__stack+0x143>

                case EOrientation::SouthWest:
                default:
                    return 225;
     a38:	01 ee       	ldi	r16, 0xE1	; 225
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x143>

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     a3e:	08 8d       	ldd	r16, Y+24	; 0x18
     a40:	1a 8d       	ldd	r17, Y+26	; 0x1a
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     a42:	f1 01       	movw	r30, r2
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	53 01       	movw	r10, r6
     a4a:	a8 1a       	sub	r10, r24
     a4c:	b9 0a       	sbc	r11, r25
            short	y			= -startPoint.y + endPoint.y;
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	93 81       	ldd	r25, Z+3	; 0x03
     a52:	97 01       	movw	r18, r14
     a54:	28 1b       	sub	r18, r24
     a56:	39 0b       	sbc	r19, r25
     a58:	c9 01       	movw	r24, r18
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     a5a:	a1 14       	cp	r10, r1
     a5c:	b1 04       	cpc	r11, r1
     a5e:	61 f4       	brne	.+24     	; 0xa78 <__stack+0x179>
            {
                if ( y > 0 )
     a60:	18 16       	cp	r1, r24
     a62:	19 06       	cpc	r1, r25
     a64:	4c f1       	brlt	.+82     	; 0xab8 <__stack+0x1b9>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     a66:	99 23       	and	r25, r25
     a68:	6c f5       	brge	.+90     	; 0xac4 <__stack+0x1c5>
                {
                    angle = -90;
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f6 ea       	ldi	r31, 0xA6	; 166
     a6e:	cf 2e       	mov	r12, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	dd 24       	eor	r13, r13
     a74:	da 94       	dec	r13
     a76:	28 c0       	rjmp	.+80     	; 0xac8 <__stack+0x1c9>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     a78:	b5 01       	movw	r22, r10
     a7a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__divmodhi4>
     a7e:	07 2e       	mov	r0, r23
     a80:	00 0c       	add	r0, r0
     a82:	88 0b       	sbc	r24, r24
     a84:	99 0b       	sbc	r25, r25
     a86:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     a8a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <atan>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	44 e3       	ldi	r20, 0x34	; 52
     a94:	53 e4       	ldi	r21, 0x43	; 67
     a96:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     a9a:	2b ed       	ldi	r18, 0xDB	; 219
     a9c:	3f e0       	ldi	r19, 0x0F	; 15
     a9e:	49 e4       	ldi	r20, 0x49	; 73
     aa0:	50 e4       	ldi	r21, 0x40	; 64
     aa2:	0e 94 9f 0a 	call	0x153e	; 0x153e <__divsf3>
     aa6:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     aaa:	6b 01       	movw	r12, r22

                if ( x < 0 )
     aac:	bb 20       	and	r11, r11
     aae:	64 f4       	brge	.+24     	; 0xac8 <__stack+0x1c9>
                {
                    angle += 180;
     ab0:	34 eb       	ldi	r19, 0xB4	; 180
     ab2:	c3 0e       	add	r12, r19
     ab4:	d1 1c       	adc	r13, r1
     ab6:	08 c0       	rjmp	.+16     	; 0xac8 <__stack+0x1c9>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     ab8:	0f 2e       	mov	r0, r31
     aba:	fa e5       	ldi	r31, 0x5A	; 90
     abc:	cf 2e       	mov	r12, r31
     abe:	d1 2c       	mov	r13, r1
     ac0:	f0 2d       	mov	r31, r0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__stack+0x1c9>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     ac4:	c8 8c       	ldd	r12, Y+24	; 0x18
     ac6:	da 8c       	ldd	r13, Y+26	; 0x1a
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     ac8:	c8 01       	movw	r24, r16
     aca:	8c 19       	sub	r24, r12
     acc:	9d 09       	sbc	r25, r13
     ace:	6d e2       	ldi	r22, 0x2D	; 45
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__divmodhi4>
     ad6:	07 2e       	mov	r0, r23
     ad8:	00 0c       	add	r0, r0
     ada:	88 0b       	sbc	r24, r24
     adc:	99 0b       	sbc	r25, r25
     ade:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     ae2:	0e 94 95 0c 	call	0x192a	; 0x192a <round>
     ae6:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     aea:	8b 01       	movw	r16, r22

            if ( direction > 4 )
     aec:	65 30       	cpi	r22, 0x05	; 5
     aee:	71 05       	cpc	r23, r1
     af0:	14 f0       	brlt	.+4      	; 0xaf6 <__stack+0x1f7>
            {
                direction = -8 + direction;
     af2:	08 50       	subi	r16, 0x08	; 8
     af4:	11 09       	sbc	r17, r1
            }

            if ( direction < -4 )
     af6:	0c 3f       	cpi	r16, 0xFC	; 252
     af8:	4f ef       	ldi	r20, 0xFF	; 255
     afa:	14 07       	cpc	r17, r20
     afc:	14 f4       	brge	.+4      	; 0xb02 <__stack+0x203>
            {
                direction = 8 + direction;
     afe:	08 5f       	subi	r16, 0xF8	; 248
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     b02:	8d e2       	ldi	r24, 0x2D	; 45
     b04:	c8 16       	cp	r12, r24
     b06:	d1 04       	cpc	r13, r1
     b08:	81 f1       	breq	.+96     	; 0xb6a <__stack+0x26b>
     b0a:	74 f4       	brge	.+28     	; 0xb28 <__stack+0x229>
     b0c:	a3 ed       	ldi	r26, 0xD3	; 211
     b0e:	ca 16       	cp	r12, r26
     b10:	af ef       	ldi	r26, 0xFF	; 255
     b12:	da 06       	cpc	r13, r26
     b14:	09 f1       	breq	.+66     	; 0xb58 <__stack+0x259>
     b16:	c1 14       	cp	r12, r1
     b18:	d1 04       	cpc	r13, r1
     b1a:	11 f1       	breq	.+68     	; 0xb60 <__stack+0x261>
     b1c:	b6 ea       	ldi	r27, 0xA6	; 166
     b1e:	cb 16       	cp	r12, r27
     b20:	bf ef       	ldi	r27, 0xFF	; 255
     b22:	db 06       	cpc	r13, r27
     b24:	b9 f5       	brne	.+110    	; 0xb94 <__stack+0x295>
     b26:	13 c0       	rjmp	.+38     	; 0xb4e <__stack+0x24f>
     b28:	e7 e8       	ldi	r30, 0x87	; 135
     b2a:	ce 16       	cp	r12, r30
     b2c:	d1 04       	cpc	r13, r1
     b2e:	29 f1       	breq	.+74     	; 0xb7a <__stack+0x27b>
     b30:	2c f4       	brge	.+10     	; 0xb3c <__stack+0x23d>
     b32:	2a e5       	ldi	r18, 0x5A	; 90
     b34:	c2 16       	cp	r12, r18
     b36:	d1 04       	cpc	r13, r1
     b38:	e1 f0       	breq	.+56     	; 0xb72 <__stack+0x273>
     b3a:	2c c0       	rjmp	.+88     	; 0xb94 <__stack+0x295>
     b3c:	34 eb       	ldi	r19, 0xB4	; 180
     b3e:	c3 16       	cp	r12, r19
     b40:	d1 04       	cpc	r13, r1
     b42:	f9 f0       	breq	.+62     	; 0xb82 <__stack+0x283>
     b44:	41 ee       	ldi	r20, 0xE1	; 225
     b46:	c4 16       	cp	r12, r20
     b48:	d1 04       	cpc	r13, r1
     b4a:	01 f1       	breq	.+64     	; 0xb8c <__stack+0x28d>
     b4c:	23 c0       	rjmp	.+70     	; 0xb94 <__stack+0x295>
            {
                case -90:
                    orientation = EOrientation::South;
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	d1 01       	movw	r26, r2
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	8c 93       	st	X, r24
     b56:	1e c0       	rjmp	.+60     	; 0xb94 <__stack+0x295>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	f1 01       	movw	r30, r2
     b5c:	84 83       	std	Z+4, r24	; 0x04
     b5e:	1a c0       	rjmp	.+52     	; 0xb94 <__stack+0x295>
                    break;

                case 0:
                    orientation = EOrientation::East;
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	d1 01       	movw	r26, r2
     b64:	14 96       	adiw	r26, 0x04	; 4
     b66:	8c 93       	st	X, r24
     b68:	15 c0       	rjmp	.+42     	; 0xb94 <__stack+0x295>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	f1 01       	movw	r30, r2
     b6e:	24 83       	std	Z+4, r18	; 0x04
     b70:	11 c0       	rjmp	.+34     	; 0xb94 <__stack+0x295>
                    break;

                case 90:
                    orientation = EOrientation::North;
     b72:	d1 01       	movw	r26, r2
     b74:	14 96       	adiw	r26, 0x04	; 4
     b76:	1c 92       	st	X, r1
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <__stack+0x295>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     b7a:	27 e0       	ldi	r18, 0x07	; 7
     b7c:	f1 01       	movw	r30, r2
     b7e:	24 83       	std	Z+4, r18	; 0x04
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <__stack+0x295>
                    break;

                case 180:
                    orientation = EOrientation::West;
     b82:	e6 e0       	ldi	r30, 0x06	; 6
     b84:	d1 01       	movw	r26, r2
     b86:	14 96       	adiw	r26, 0x04	; 4
     b88:	ec 93       	st	X, r30
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <__stack+0x295>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     b8c:	85 e0       	ldi	r24, 0x05	; 5
     b8e:	d1 01       	movw	r26, r2
     b90:	14 96       	adiw	r26, 0x04	; 4
     b92:	8c 93       	st	X, r24
            //print_long( angle );
            //delay_ms( 1000 );

            setDeviceOrientation( angle );

            if ( direction < 0 )
     b94:	11 23       	and	r17, r17
     b96:	ec f4       	brge	.+58     	; 0xbd2 <__stack+0x2d3>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     b98:	6a e2       	ldi	r22, 0x2A	; 42
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	86 ed       	ldi	r24, 0xD6	; 214
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>

            delay_ms( 200 * turns );
     ba4:	c8 01       	movw	r24, r16
     ba6:	99 23       	and	r25, r25
     ba8:	24 f4       	brge	.+8      	; 0xbb2 <__stack+0x2b3>
     baa:	88 27       	eor	r24, r24
     bac:	99 27       	eor	r25, r25
     bae:	80 1b       	sub	r24, r16
     bb0:	91 0b       	sbc	r25, r17
     bb2:	28 ec       	ldi	r18, 0xC8	; 200
     bb4:	fc 01       	movw	r30, r24
     bb6:	2e 9f       	mul	r18, r30
     bb8:	c0 01       	movw	r24, r0
     bba:	2f 9f       	mul	r18, r31
     bbc:	90 0d       	add	r25, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>

            set_motors( 0, 0 );
     bc4:	68 8d       	ldd	r22, Y+24	; 0x18
     bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bc8:	86 2f       	mov	r24, r22
     bca:	97 2f       	mov	r25, r23
     bcc:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
     bd0:	1f c0       	rjmp	.+62     	; 0xc10 <__stack+0x311>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     bd2:	10 16       	cp	r1, r16
     bd4:	11 06       	cpc	r1, r17
     bd6:	e4 f4       	brge	.+56     	; 0xc10 <__stack+0x311>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     bd8:	66 ed       	ldi	r22, 0xD6	; 214
     bda:	7f ef       	ldi	r23, 0xFF	; 255
     bdc:	8a e2       	ldi	r24, 0x2A	; 42
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>

            delay_ms( 200 * turns );
     be4:	c8 01       	movw	r24, r16
     be6:	99 23       	and	r25, r25
     be8:	24 f4       	brge	.+8      	; 0xbf2 <__stack+0x2f3>
     bea:	88 27       	eor	r24, r24
     bec:	99 27       	eor	r25, r25
     bee:	80 1b       	sub	r24, r16
     bf0:	91 0b       	sbc	r25, r17
     bf2:	e8 ec       	ldi	r30, 0xC8	; 200
     bf4:	dc 01       	movw	r26, r24
     bf6:	ea 9f       	mul	r30, r26
     bf8:	c0 01       	movw	r24, r0
     bfa:	eb 9f       	mul	r30, r27
     bfc:	90 0d       	add	r25, r0
     bfe:	11 24       	eor	r1, r1
     c00:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>

            set_motors( 0, 0 );
     c04:	68 8d       	ldd	r22, Y+24	; 0x18
     c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c08:	86 2f       	mov	r24, r22
     c0a:	97 2f       	mov	r25, r23
     c0c:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     c10:	68 8d       	ldd	r22, Y+24	; 0x18
     c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c14:	86 2f       	mov	r24, r22
     c16:	97 2f       	mov	r25, r23
     c18:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensorsArr[ 5 ];
            read_line_sensors( sensorsArr, IR_EMITTERS_ON );
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	8e 89       	ldd	r24, Y+22	; 0x16
     c20:	9f 89       	ldd	r25, Y+23	; 0x17
     c22:	0e 94 92 14 	call	0x2924	; 0x2924 <read_line_sensors>

            if ( sensorsArr[ 1 ] > OBSTACLE_VALUE || sensorsArr[ 2 ] > OBSTACLE_VALUE || sensorsArr[ 3 ] > OBSTACLE_VALUE )
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	81 3b       	cpi	r24, 0xB1	; 177
     c2c:	94 40       	sbci	r25, 0x04	; 4
     c2e:	50 f4       	brcc	.+20     	; 0xc44 <__stack+0x345>
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	81 3b       	cpi	r24, 0xB1	; 177
     c36:	94 40       	sbci	r25, 0x04	; 4
     c38:	28 f4       	brcc	.+10     	; 0xc44 <__stack+0x345>
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
                    setDirection( position, nextPos );
                }

                // TODO: Check isObstacle or maybe isVisited

                if ( isDirectionTraversable() )
     c3e:	81 3b       	cpi	r24, 0xB1	; 177
     c40:	94 40       	sbci	r25, 0x04	; 4
     c42:	d8 f0       	brcs	.+54     	; 0xc7a <__stack+0x37b>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     c44:	f7 01       	movw	r30, r14
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	ee 0d       	add	r30, r14
     c4c:	ff 1d       	adc	r31, r15
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	2a e5       	ldi	r18, 0x5A	; 90
     c54:	26 9d       	mul	r18, r6
     c56:	c0 01       	movw	r24, r0
     c58:	27 9d       	mul	r18, r7
     c5a:	90 0d       	add	r25, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	e8 0f       	add	r30, r24
     c60:	f9 1f       	adc	r31, r25
     c62:	e5 52       	subi	r30, 0x25	; 37
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	44 83       	std	Z+4, r20	; 0x04
     c6a:	8c a1       	ldd	r24, Y+36	; 0x24
     c6c:	9d a1       	ldd	r25, Y+37	; 0x25
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	9d a3       	std	Y+37, r25	; 0x25
     c72:	8c a3       	std	Y+36, r24	; 0x24
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     c74:	89 2b       	or	r24, r25
     c76:	09 f0       	breq	.+2      	; 0xc7a <__stack+0x37b>
     c78:	99 cd       	rjmp	.-1230   	; 0x7ac <_ZN5Robot8mainMenuEv+0x1fc>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     c7a:	7c 86       	std	Y+12, r7	; 0x0c
     c7c:	6b 86       	std	Y+11, r6	; 0x0b
     c7e:	fe 86       	std	Y+14, r15	; 0x0e
     c80:	ed 86       	std	Y+13, r14	; 0x0d

            //printPos( nextPos );
            //delay_ms( 1000 );

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     c82:	43 01       	movw	r8, r6
     c84:	57 01       	movw	r10, r14
     c86:	c7 01       	movw	r24, r14
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	8e 0d       	add	r24, r14
     c8e:	9f 1d       	adc	r25, r15
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	2a e5       	ldi	r18, 0x5A	; 90
     c96:	26 9d       	mul	r18, r6
     c98:	f0 01       	movw	r30, r0
     c9a:	27 9d       	mul	r18, r7
     c9c:	f0 0d       	add	r31, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8e 0f       	add	r24, r30
     ca2:	9f 1f       	adc	r25, r31
     ca4:	fc 01       	movw	r30, r24
     ca6:	e5 52       	subi	r30, 0x25	; 37
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	85 81       	ldd	r24, Z+5	; 0x05
     cac:	81 11       	cpse	r24, r1
     cae:	c4 c0       	rjmp	.+392    	; 0xe38 <__stack+0x539>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     cb0:	be 01       	movw	r22, r28
     cb2:	65 5f       	subi	r22, 0xF5	; 245
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	cb 01       	movw	r24, r22
     cb8:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     cbc:	6c 8b       	std	Y+20, r22	; 0x14
     cbe:	7d 8b       	std	Y+21, r23	; 0x15
     cc0:	89 8b       	std	Y+17, r24	; 0x11
     cc2:	9a 8b       	std	Y+18, r25	; 0x12
            Point2D	minPos( from );
     cc4:	4b 84       	ldd	r4, Y+11	; 0x0b
     cc6:	5c 84       	ldd	r5, Y+12	; 0x0c
     cc8:	6d 84       	ldd	r6, Y+13	; 0x0d
     cca:	7e 84       	ldd	r7, Y+14	; 0x0e
            short	pos			= ( short )orientation;
     ccc:	d1 01       	movw	r26, r2
     cce:	14 96       	adiw	r26, 0x04	; 4
     cd0:	2c 91       	ld	r18, X

            for ( short i = 0; i < 8; i++ )
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     cd6:	02 2f       	mov	r16, r18
     cd8:	10 e0       	ldi	r17, 0x00	; 0
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                float	currDist = getDist( currPos, to );
     cda:	3d 8e       	std	Y+29, r3	; 0x1d
     cdc:	2c 8e       	std	Y+28, r2	; 0x1c
     cde:	7c 01       	movw	r14, r24

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     ce0:	80 0f       	add	r24, r16
     ce2:	91 1f       	adc	r25, r17
     ce4:	87 70       	andi	r24, 0x07	; 7
     ce6:	90 78       	andi	r25, 0x80	; 128
     ce8:	99 23       	and	r25, r25
     cea:	24 f4       	brge	.+8      	; 0xcf4 <__stack+0x3f5>
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	88 6f       	ori	r24, 0xF8	; 248
     cf0:	9f 6f       	ori	r25, 0xFF	; 255
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	fc 01       	movw	r30, r24
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ec 5e       	subi	r30, 0xEC	; 236
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	20 81       	ld	r18, Z
     d00:	31 81       	ldd	r19, Z+1	; 0x01
     d02:	28 0d       	add	r18, r8
     d04:	39 1d       	adc	r19, r9
     d06:	3a 83       	std	Y+2, r19	; 0x02
     d08:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	fc 01       	movw	r30, r24
     d10:	ec 5d       	subi	r30, 0xDC	; 220
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	8a 0d       	add	r24, r10
     d1a:	9b 1d       	adc	r25, r11
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     d20:	be 01       	movw	r22, r28
     d22:	65 5f       	subi	r22, 0xF5	; 245
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	8e 89       	ldd	r24, Y+22	; 0x16
     d28:	9f 89       	ldd	r25, Y+23	; 0x17
     d2a:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     d2e:	26 2e       	mov	r2, r22
     d30:	37 2e       	mov	r3, r23
     d32:	c8 2e       	mov	r12, r24
     d34:	d9 2e       	mov	r13, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     d36:	2c 89       	ldd	r18, Y+20	; 0x14
     d38:	3d 89       	ldd	r19, Y+21	; 0x15
     d3a:	49 89       	ldd	r20, Y+17	; 0x11
     d3c:	5a 89       	ldd	r21, Y+18	; 0x12
     d3e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__cmpsf2>
     d42:	88 23       	and	r24, r24
     d44:	44 f4       	brge	.+16     	; 0xd56 <__stack+0x457>
                {
                    minDist = currDist;
                    minPos	= currPos;
     d46:	49 80       	ldd	r4, Y+1	; 0x01
     d48:	5a 80       	ldd	r5, Y+2	; 0x02
     d4a:	6b 80       	ldd	r6, Y+3	; 0x03
     d4c:	7c 80       	ldd	r7, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     d4e:	2c 8a       	std	Y+20, r2	; 0x14
     d50:	3d 8a       	std	Y+21, r3	; 0x15
     d52:	c9 8a       	std	Y+17, r12	; 0x11
     d54:	da 8a       	std	Y+18, r13	; 0x12
     d56:	c7 01       	movw	r24, r14
     d58:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     d5a:	88 30       	cpi	r24, 0x08	; 8
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__stack+0x463>
     d60:	be cf       	rjmp	.-132    	; 0xcde <__stack+0x3df>
     d62:	2c 8c       	ldd	r2, Y+28	; 0x1c
     d64:	3d 8c       	ldd	r3, Y+29	; 0x1d
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     d66:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     d6a:	95 01       	movw	r18, r10
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	2a 0d       	add	r18, r10
     d72:	3b 1d       	adc	r19, r11
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	ea e5       	ldi	r30, 0x5A	; 90
     d7a:	e8 9d       	mul	r30, r8
     d7c:	c0 01       	movw	r24, r0
     d7e:	e9 9d       	mul	r30, r9
     d80:	90 0d       	add	r25, r0
     d82:	11 24       	eor	r1, r1
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	dc 01       	movw	r26, r24
     d8a:	a5 52       	subi	r26, 0x25	; 37
     d8c:	be 4f       	sbci	r27, 0xFE	; 254
     d8e:	6d 91       	ld	r22, X+
     d90:	7c 91       	ld	r23, X
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     d92:	93 01       	movw	r18, r6
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	e4 9d       	mul	r30, r4
     da2:	c0 01       	movw	r24, r0
     da4:	e5 9d       	mul	r30, r5
     da6:	90 0d       	add	r25, r0
     da8:	11 24       	eor	r1, r1
     daa:	82 0f       	add	r24, r18
     dac:	93 1f       	adc	r25, r19
     dae:	fc 01       	movw	r30, r24
     db0:	e5 52       	subi	r30, 0x25	; 37
     db2:	fe 4f       	sbci	r31, 0xFE	; 254
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     db8:	84 14       	cp	r8, r4
     dba:	95 04       	cpc	r9, r5
     dbc:	31 f0       	breq	.+12     	; 0xdca <__stack+0x4cb>
     dbe:	a6 14       	cp	r10, r6
     dc0:	b7 04       	cpc	r11, r7
     dc2:	49 f4       	brne	.+18     	; 0xdd6 <__stack+0x4d7>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     dc4:	22 e0       	ldi	r18, 0x02	; 2
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <__stack+0x4e1>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     dca:	a6 14       	cp	r10, r6
     dcc:	b7 04       	cpc	r11, r7
     dce:	31 f0       	breq	.+12     	; 0xddc <__stack+0x4dd>
            {
                distance = 2;
     dd0:	22 e0       	ldi	r18, 0x02	; 2
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	05 c0       	rjmp	.+10     	; 0xde0 <__stack+0x4e1>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     dd6:	23 e0       	ldi	r18, 0x03	; 3
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <__stack+0x4e1>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19

                if ( savedDist > currDist )
     de4:	86 17       	cp	r24, r22
     de6:	97 07       	cpc	r25, r23
     de8:	9c f4       	brge	.+38     	; 0xe10 <__stack+0x511>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     dea:	f5 01       	movw	r30, r10
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	ea 0d       	add	r30, r10
     df2:	fb 1d       	adc	r31, r11
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	4a e5       	ldi	r20, 0x5A	; 90
     dfa:	48 9d       	mul	r20, r8
     dfc:	90 01       	movw	r18, r0
     dfe:	49 9d       	mul	r20, r9
     e00:	30 0d       	add	r19, r0
     e02:	11 24       	eor	r1, r1
     e04:	e2 0f       	add	r30, r18
     e06:	f3 1f       	adc	r31, r19
     e08:	e5 52       	subi	r30, 0x25	; 37
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     e10:	c5 01       	movw	r24, r10
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	8a 0d       	add	r24, r10
     e18:	9b 1d       	adc	r25, r11
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	2a e5       	ldi	r18, 0x5A	; 90
     e20:	28 9d       	mul	r18, r8
     e22:	f0 01       	movw	r30, r0
     e24:	29 9d       	mul	r18, r9
     e26:	f0 0d       	add	r31, r0
     e28:	11 24       	eor	r1, r1
     e2a:	8e 0f       	add	r24, r30
     e2c:	9f 1f       	adc	r25, r31
     e2e:	fc 01       	movw	r30, r24
     e30:	e5 52       	subi	r30, 0x25	; 37
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	85 83       	std	Z+5, r24	; 0x05
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     e38:	f1 01       	movw	r30, r2
     e3a:	20 81       	ld	r18, Z
     e3c:	31 81       	ldd	r19, Z+1	; 0x01
     e3e:	85 81       	ldd	r24, Z+5	; 0x05
     e40:	96 81       	ldd	r25, Z+6	; 0x06
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	41 f4       	brne	.+16     	; 0xe58 <__stack+0x559>

                matrix[nextPos.x][nextPos.y].isVisited = true;
            }

            // Move until stepping on the goal position
            if ( position != goalPos )
     e48:	22 81       	ldd	r18, Z+2	; 0x02
     e4a:	33 81       	ldd	r19, Z+3	; 0x03
     e4c:	87 81       	ldd	r24, Z+7	; 0x07
     e4e:	90 85       	ldd	r25, Z+8	; 0x08
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	09 f4       	brne	.+2      	; 0xe58 <__stack+0x559>
     e56:	84 c0       	rjmp	.+264    	; 0xf60 <__stack+0x661>
            {
                position = nextPos;
     e58:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5c:	ad 85       	ldd	r26, Y+13	; 0x0d
     e5e:	be 85       	ldd	r27, Y+14	; 0x0e
     e60:	f1 01       	movw	r30, r2
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 19, 19 );
     e6a:	63 e1       	ldi	r22, 0x13	; 19
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	83 e1       	ldi	r24, 0x13	; 19
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
            set_motors( 0, 0 );
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	8e a1       	ldd	r24, Y+38	; 0x26
     e7a:	9f a1       	ldd	r25, Y+39	; 0x27
     e7c:	0e 94 92 14 	call	0x2924	; 0x2924 <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     e80:	d1 01       	movw	r26, r2
     e82:	1b 96       	adiw	r26, 0x0b	; 11
     e84:	8d 91       	ld	r24, X+
     e86:	9c 91       	ld	r25, X
     e88:	1c 97       	sbiw	r26, 0x0c	; 12
     e8a:	81 3b       	cpi	r24, 0xB1	; 177
     e8c:	b4 e0       	ldi	r27, 0x04	; 4
     e8e:	9b 07       	cpc	r25, r27
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__stack+0x595>
     e92:	d8 c1       	rjmp	.+944    	; 0x1244 <__stack+0x945>
     e94:	f1 01       	movw	r30, r2
     e96:	65 85       	ldd	r22, Z+13	; 0x0d
     e98:	76 85       	ldd	r23, Z+14	; 0x0e
     e9a:	61 3b       	cpi	r22, 0xB1	; 177
     e9c:	f4 e0       	ldi	r31, 0x04	; 4
     e9e:	7f 07       	cpc	r23, r31
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <__stack+0x5a5>
     ea2:	d0 c1       	rjmp	.+928    	; 0x1244 <__stack+0x945>
     ea4:	d1 01       	movw	r26, r2
     ea6:	1f 96       	adiw	r26, 0x0f	; 15
     ea8:	2d 91       	ld	r18, X+
     eaa:	3c 91       	ld	r19, X
     eac:	50 97       	sbiw	r26, 0x10	; 16
     eae:	21 3b       	cpi	r18, 0xB1	; 177
     eb0:	b4 e0       	ldi	r27, 0x04	; 4
     eb2:	3b 07       	cpc	r19, r27
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <__stack+0x5b9>
     eb6:	c6 c1       	rjmp	.+908    	; 0x1244 <__stack+0x945>
            {
                return true; // do not return true here?? To DO
            }
            else if ( sensors[1] > markerValue || sensors[2] > markerValue || sensors[3] > markerValue ) // there is marker
     eb8:	f1 01       	movw	r30, r2
     eba:	47 89       	ldd	r20, Z+23	; 0x17
     ebc:	50 8d       	ldd	r21, Z+24	; 0x18
     ebe:	48 17       	cp	r20, r24
     ec0:	59 07       	cpc	r21, r25
     ec2:	30 f0       	brcs	.+12     	; 0xed0 <__stack+0x5d1>
     ec4:	46 17       	cp	r20, r22
     ec6:	57 07       	cpc	r21, r23
     ec8:	18 f0       	brcs	.+6      	; 0xed0 <__stack+0x5d1>
     eca:	42 17       	cp	r20, r18
     ecc:	53 07       	cpc	r21, r19
     ece:	98 f6       	brcc	.-90     	; 0xe76 <__stack+0x577>
            {
                short currentOffset = sensors[1] - sensors[3];
     ed0:	82 1b       	sub	r24, r18
     ed2:	93 0b       	sbc	r25, r19

                if ( abs( currentOffset ) >= 20 )
     ed4:	9c 01       	movw	r18, r24
     ed6:	22 f4       	brpl	.+8      	; 0xee0 <__stack+0x5e1>
     ed8:	22 27       	eor	r18, r18
     eda:	33 27       	eor	r19, r19
     edc:	28 1b       	sub	r18, r24
     ede:	39 0b       	sbc	r19, r25
     ee0:	24 31       	cpi	r18, 0x14	; 20
     ee2:	31 05       	cpc	r19, r1
     ee4:	7c f0       	brlt	.+30     	; 0xf04 <__stack+0x605>
                {
                    if ( currentOffset < 0 )
     ee6:	99 23       	and	r25, r25
     ee8:	44 f4       	brge	.+16     	; 0xefa <__stack+0x5fb>
                    {
                        boostLeftWheel = true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	d1 01       	movw	r26, r2
     eee:	55 96       	adiw	r26, 0x15	; 21
     ef0:	8c 93       	st	X, r24
     ef2:	55 97       	sbiw	r26, 0x15	; 21
                        boostRightWheel = false;
     ef4:	56 96       	adiw	r26, 0x16	; 22
     ef6:	1c 92       	st	X, r1
     ef8:	a5 c1       	rjmp	.+842    	; 0x1244 <__stack+0x945>
                    }
                    else
                    {
                        boostLeftWheel = false;
     efa:	f1 01       	movw	r30, r2
     efc:	15 8a       	std	Z+21, r1	; 0x15
                        boostRightWheel = true;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	86 8b       	std	Z+22, r24	; 0x16
     f02:	a0 c1       	rjmp	.+832    	; 0x1244 <__stack+0x945>
                    }
                }
                else
                {
                    boostLeftWheel = false;
     f04:	d1 01       	movw	r26, r2
     f06:	55 96       	adiw	r26, 0x15	; 21
     f08:	1c 92       	st	X, r1
     f0a:	55 97       	sbiw	r26, 0x15	; 21
                    boostRightWheel = false;
     f0c:	56 96       	adiw	r26, 0x16	; 22
     f0e:	1c 92       	st	X, r1
     f10:	99 c1       	rjmp	.+818    	; 0x1244 <__stack+0x945>

            while ( !isOnMarker() ) {}

            play( ">>a32" );

            if ( boostLeftWheel && !boostRightWheel )
     f12:	f1 01       	movw	r30, r2
     f14:	86 89       	ldd	r24, Z+22	; 0x16
     f16:	81 11       	cpse	r24, r1
     f18:	13 c0       	rjmp	.+38     	; 0xf40 <__stack+0x641>
            {
                set_motors( 20, 19 );
     f1a:	63 e1       	ldi	r22, 0x13	; 19
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	84 e1       	ldi	r24, 0x14	; 20
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
     f26:	12 c0       	rjmp	.+36     	; 0xf4c <__stack+0x64d>
            }
            else if ( !boostLeftWheel && boostRightWheel )
     f28:	d1 01       	movw	r26, r2
     f2a:	56 96       	adiw	r26, 0x16	; 22
     f2c:	8c 91       	ld	r24, X
     f2e:	88 23       	and	r24, r24
     f30:	39 f0       	breq	.+14     	; 0xf40 <__stack+0x641>
            {
                set_motors( 19, 20 );
     f32:	64 e1       	ldi	r22, 0x14	; 20
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	83 e1       	ldi	r24, 0x13	; 19
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <__stack+0x64d>
            }
            else
            {
                set_motors( 19, 19 );
     f40:	63 e1       	ldi	r22, 0x13	; 19
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	83 e1       	ldi	r24, 0x13	; 19
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
            }

            delay_ms( 900 );
     f4c:	84 e8       	ldi	r24, 0x84	; 132
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
            set_motors( 0, 0 );
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     f60:	f1 01       	movw	r30, r2
     f62:	20 81       	ld	r18, Z
     f64:	31 81       	ldd	r19, Z+1	; 0x01
     f66:	85 81       	ldd	r24, Z+5	; 0x05
     f68:	96 81       	ldd	r25, Z+6	; 0x06
     f6a:	28 17       	cp	r18, r24
     f6c:	39 07       	cpc	r19, r25
     f6e:	09 f0       	breq	.+2      	; 0xf72 <__stack+0x673>
     f70:	ff cb       	rjmp	.-2050   	; 0x770 <_ZN5Robot8mainMenuEv+0x1c0>
     f72:	42 81       	ldd	r20, Z+2	; 0x02
     f74:	53 81       	ldd	r21, Z+3	; 0x03
     f76:	87 81       	ldd	r24, Z+7	; 0x07
     f78:	90 85       	ldd	r25, Z+8	; 0x08
     f7a:	48 17       	cp	r20, r24
     f7c:	59 07       	cpc	r21, r25
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__stack+0x683>
     f80:	f7 cb       	rjmp	.-2066   	; 0x770 <_ZN5Robot8mainMenuEv+0x1c0>
     f82:	69 c1       	rjmp	.+722    	; 0x1256 <__stack+0x957>

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish > dist - currCell.distToStart )
     f84:	93 01       	movw	r18, r6
     f86:	28 1b       	sub	r18, r24
     f88:	39 0b       	sbc	r19, r25
     f8a:	f2 01       	movw	r30, r4
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	e4 0d       	add	r30, r4
     f92:	f5 1d       	adc	r31, r5
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	b8 9c       	mul	r11, r8
     f9a:	c0 01       	movw	r24, r0
     f9c:	b9 9c       	mul	r11, r9
     f9e:	90 0d       	add	r25, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	e8 0f       	add	r30, r24
     fa4:	f9 1f       	adc	r31, r25
     fa6:	e5 52       	subi	r30, 0x25	; 37
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	28 17       	cp	r18, r24
     fb0:	39 07       	cpc	r19, r25
     fb2:	94 f4       	brge	.+36     	; 0xfd8 <__stack+0x6d9>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     fb4:	f2 01       	movw	r30, r4
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	e4 0d       	add	r30, r4
     fbc:	f5 1d       	adc	r31, r5
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	b8 9c       	mul	r11, r8
     fc4:	c0 01       	movw	r24, r0
     fc6:	b9 9c       	mul	r11, r9
     fc8:	90 0d       	add	r25, r0
     fca:	11 24       	eor	r1, r1
     fcc:	e8 0f       	add	r30, r24
     fce:	f9 1f       	adc	r31, r25
     fd0:	e5 52       	subi	r30, 0x25	; 37
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	33 83       	std	Z+3, r19	; 0x03
     fd6:	22 83       	std	Z+2, r18	; 0x02
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     fd8:	be 01       	movw	r22, r28
     fda:	65 5f       	subi	r22, 0xF5	; 245
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	cb 01       	movw	r24, r22
     fe0:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     fe4:	a6 2e       	mov	r10, r22
     fe6:	7d 8b       	std	Y+21, r23	; 0x15
     fe8:	89 8b       	std	Y+17, r24	; 0x11
     fea:	39 2e       	mov	r3, r25
            Point2D	minPos( from );
     fec:	cb 84       	ldd	r12, Y+11	; 0x0b
     fee:	dc 84       	ldd	r13, Y+12	; 0x0c
     ff0:	ed 84       	ldd	r14, Y+13	; 0x0d
     ff2:	fe 84       	ldd	r15, Y+14	; 0x0e
            short	pos			= ( short )orientation;
     ff4:	aa 89       	ldd	r26, Y+18	; 0x12
     ff6:	bb 89       	ldd	r27, Y+19	; 0x13
     ff8:	14 96       	adiw	r26, 0x04	; 4
     ffa:	2c 91       	ld	r18, X

            for ( short i = 0; i < 8; i++ )
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
    1000:	02 2f       	mov	r16, r18
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	7b 8e       	std	Y+27, r7	; 0x1b
    1006:	6a 8e       	std	Y+26, r6	; 0x1a
    1008:	99 8f       	std	Y+25, r25	; 0x19
    100a:	88 8f       	std	Y+24, r24	; 0x18
    100c:	80 0f       	add	r24, r16
    100e:	91 1f       	adc	r25, r17
    1010:	87 70       	andi	r24, 0x07	; 7
    1012:	90 78       	andi	r25, 0x80	; 128
    1014:	99 23       	and	r25, r25
    1016:	24 f4       	brge	.+8      	; 0x1020 <__stack+0x721>
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	88 6f       	ori	r24, 0xF8	; 248
    101c:	9f 6f       	ori	r25, 0xFF	; 255
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	fc 01       	movw	r30, r24
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	ec 5e       	subi	r30, 0xEC	; 236
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	20 81       	ld	r18, Z
    102c:	31 81       	ldd	r19, Z+1	; 0x01
    102e:	28 0d       	add	r18, r8
    1030:	39 1d       	adc	r19, r9
    1032:	3a 83       	std	Y+2, r19	; 0x02
    1034:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	fc 01       	movw	r30, r24
    103c:	ec 5d       	subi	r30, 0xDC	; 220
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	84 0d       	add	r24, r4
    1046:	95 1d       	adc	r25, r5
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
    104c:	be 01       	movw	r22, r28
    104e:	65 5f       	subi	r22, 0xF5	; 245
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	8e 89       	ldd	r24, Y+22	; 0x16
    1054:	9f 89       	ldd	r25, Y+23	; 0x17
    1056:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    105a:	6c 8b       	std	Y+20, r22	; 0x14
    105c:	67 2e       	mov	r6, r23
    105e:	78 2e       	mov	r7, r24
    1060:	29 2e       	mov	r2, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
    1062:	2a 2d       	mov	r18, r10
    1064:	3d 89       	ldd	r19, Y+21	; 0x15
    1066:	49 89       	ldd	r20, Y+17	; 0x11
    1068:	53 2d       	mov	r21, r3
    106a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__cmpsf2>
    106e:	88 23       	and	r24, r24
    1070:	44 f4       	brge	.+16     	; 0x1082 <__stack+0x783>
                {
                    minDist = currDist;
                    minPos	= currPos;
    1072:	c9 80       	ldd	r12, Y+1	; 0x01
    1074:	da 80       	ldd	r13, Y+2	; 0x02
    1076:	eb 80       	ldd	r14, Y+3	; 0x03
    1078:	fc 80       	ldd	r15, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
    107a:	ac 88       	ldd	r10, Y+20	; 0x14
    107c:	6d 8a       	std	Y+21, r6	; 0x15
    107e:	79 8a       	std	Y+17, r7	; 0x11
    1080:	32 2c       	mov	r3, r2
    1082:	88 8d       	ldd	r24, Y+24	; 0x18
    1084:	99 8d       	ldd	r25, Y+25	; 0x19
    1086:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	91 05       	cpc	r25, r1
    108c:	09 f0       	breq	.+2      	; 0x1090 <__stack+0x791>
    108e:	bc cf       	rjmp	.-136    	; 0x1008 <__stack+0x709>
    1090:	6a 8c       	ldd	r6, Y+26	; 0x1a
    1092:	7b 8c       	ldd	r7, Y+27	; 0x1b
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
    1094:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
                if ( currCell.distToFinish > dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
    1098:	cb 86       	std	Y+11, r12	; 0x0b
    109a:	dc 86       	std	Y+12, r13	; 0x0c
    109c:	ed 86       	std	Y+13, r14	; 0x0d
    109e:	fe 86       	std	Y+14, r15	; 0x0e
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    10a0:	8c 2c       	mov	r8, r12
    10a2:	9d 2c       	mov	r9, r13
    10a4:	4d 84       	ldd	r4, Y+13	; 0x0d
    10a6:	5e 84       	ldd	r5, Y+14	; 0x0e
    10a8:	f2 01       	movw	r30, r4
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	e4 0d       	add	r30, r4
    10b0:	f5 1d       	adc	r31, r5
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	b8 9c       	mul	r11, r8
    10b8:	c0 01       	movw	r24, r0
    10ba:	b9 9c       	mul	r11, r9
    10bc:	90 0d       	add	r25, r0
    10be:	11 24       	eor	r1, r1
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	e5 52       	subi	r30, 0x25	; 37
    10c6:	fe 4f       	sbci	r31, 0xFE	; 254
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__stack+0x7d3>
    10d0:	59 cf       	rjmp	.-334    	; 0xf84 <__stack+0x685>
    10d2:	2a 88       	ldd	r2, Y+18	; 0x12
    10d4:	3b 88       	ldd	r3, Y+19	; 0x13
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish > dist - currCell.distToStart )
    10d6:	f2 01       	movw	r30, r4
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e4 0d       	add	r30, r4
    10de:	f5 1d       	adc	r31, r5
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	2a e5       	ldi	r18, 0x5A	; 90
    10e6:	28 9d       	mul	r18, r8
    10e8:	c0 01       	movw	r24, r0
    10ea:	29 9d       	mul	r18, r9
    10ec:	90 0d       	add	r25, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	e8 0f       	add	r30, r24
    10f2:	f9 1f       	adc	r31, r25
    10f4:	e5 52       	subi	r30, 0x25	; 37
    10f6:	fe 4f       	sbci	r31, 0xFE	; 254
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	68 16       	cp	r6, r24
    10fe:	79 06       	cpc	r7, r25
    1100:	94 f4       	brge	.+36     	; 0x1126 <__stack+0x827>
            {
                currCell.distToFinish = dist - currCell.distToStart;
    1102:	f2 01       	movw	r30, r4
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	e4 0d       	add	r30, r4
    110a:	f5 1d       	adc	r31, r5
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	28 9d       	mul	r18, r8
    1112:	c0 01       	movw	r24, r0
    1114:	29 9d       	mul	r18, r9
    1116:	90 0d       	add	r25, r0
    1118:	11 24       	eor	r1, r1
    111a:	e8 0f       	add	r30, r24
    111c:	f9 1f       	adc	r31, r25
    111e:	e5 52       	subi	r30, 0x25	; 37
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	73 82       	std	Z+3, r7	; 0x03
    1124:	62 82       	std	Z+2, r6	; 0x02

        void reverseDirection()
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );
    1126:	f1 01       	movw	r30, r2
    1128:	b5 80       	ldd	r11, Z+5	; 0x05
    112a:	c6 80       	ldd	r12, Z+6	; 0x06
    112c:	d7 80       	ldd	r13, Z+7	; 0x07
    112e:	00 85       	ldd	r16, Z+8	; 0x08
    1130:	6b ed       	ldi	r22, 0xDB	; 219
    1132:	71 e0       	ldi	r23, 0x01	; 1

            for ( short i = 0; i < MAX_ROWS; i++ )
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	fb 01       	movw	r30, r22
    113a:	8a a1       	ldd	r24, Y+34	; 0x22
    113c:	9b a1       	ldd	r25, Y+35	; 0x23
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    113e:	92 2e       	mov	r9, r18
    1140:	a3 2e       	mov	r10, r19
    1142:	df 01       	movw	r26, r30

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
    1144:	45 81       	ldd	r20, Z+5	; 0x05
    1146:	44 23       	and	r20, r20
    1148:	b1 f0       	breq	.+44     	; 0x1176 <__stack+0x877>
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    114a:	e0 80       	ld	r14, Z
    114c:	f1 80       	ldd	r15, Z+1	; 0x01
    114e:	e1 14       	cp	r14, r1
    1150:	f1 04       	cpc	r15, r1
    1152:	21 f4       	brne	.+8      	; 0x115c <__stack+0x85d>
    1154:	d8 2e       	mov	r13, r24
    1156:	09 2f       	mov	r16, r25
    1158:	b9 2c       	mov	r11, r9
    115a:	ca 2c       	mov	r12, r10
                        {
                            // Save the start position.
                            startPos = Point2D( i, j );
                        }

                        short tmp						= matrix[ i ][ j ].distToFinish;
    115c:	12 96       	adiw	r26, 0x02	; 2
    115e:	4d 91       	ld	r20, X+
    1160:	5c 91       	ld	r21, X
    1162:	13 97       	sbiw	r26, 0x03	; 3
                        matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
    1164:	13 96       	adiw	r26, 0x03	; 3
    1166:	fc 92       	st	X, r15
    1168:	ee 92       	st	-X, r14
    116a:	12 97       	sbiw	r26, 0x02	; 2
                        matrix[ i ][ j ].distToStart	= tmp;
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	5c 93       	st	X, r21
    1170:	4e 93       	st	-X, r20
                        matrix[ i ][ j ].isVisited		= false;
    1172:	15 96       	adiw	r26, 0x05	; 5
    1174:	1c 92       	st	X, r1
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	36 96       	adiw	r30, 0x06	; 6
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
    117a:	8f 30       	cpi	r24, 0x0F	; 15
    117c:	91 05       	cpc	r25, r1
    117e:	09 f7       	brne	.-62     	; 0x1142 <__stack+0x843>
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	66 5a       	subi	r22, 0xA6	; 166
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
    1188:	2f 30       	cpi	r18, 0x0F	; 15
    118a:	31 05       	cpc	r19, r1
    118c:	a9 f6       	brne	.-86     	; 0x1138 <__stack+0x839>
                    }
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
    118e:	d1 01       	movw	r26, r2
    1190:	15 96       	adiw	r26, 0x05	; 5
    1192:	bc 92       	st	X, r11
    1194:	15 97       	sbiw	r26, 0x05	; 5
    1196:	16 96       	adiw	r26, 0x06	; 6
    1198:	cc 92       	st	X, r12
    119a:	16 97       	sbiw	r26, 0x06	; 6
    119c:	17 96       	adiw	r26, 0x07	; 7
    119e:	dc 92       	st	X, r13
    11a0:	17 97       	sbiw	r26, 0x07	; 7
    11a2:	18 96       	adiw	r26, 0x08	; 8
    11a4:	0c 93       	st	X, r16
    11a6:	18 97       	sbiw	r26, 0x08	; 8

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
                    this->reverseDirection();
                    doPrint = false;
    11a8:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
                    matrix[ position.x ][ position.y ].isVisited	= true;
    11ac:	2d 91       	ld	r18, X+
    11ae:	3c 91       	ld	r19, X
    11b0:	11 97       	sbiw	r26, 0x01	; 1
    11b2:	12 96       	adiw	r26, 0x02	; 2
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	13 97       	sbiw	r26, 0x03	; 3
    11ba:	ac 01       	movw	r20, r24
    11bc:	44 0f       	add	r20, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	84 0f       	add	r24, r20
    11c2:	95 1f       	adc	r25, r21
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	4a e5       	ldi	r20, 0x5A	; 90
    11ca:	42 9f       	mul	r20, r18
    11cc:	f0 01       	movw	r30, r0
    11ce:	43 9f       	mul	r20, r19
    11d0:	f0 0d       	add	r31, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	8e 0f       	add	r24, r30
    11d6:	9f 1f       	adc	r25, r31
    11d8:	fc 01       	movw	r30, r24
    11da:	e5 52       	subi	r30, 0x25	; 37
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	85 83       	std	Z+5, r24	; 0x05

                    lap++;
    11e2:	53 96       	adiw	r26, 0x13	; 19
    11e4:	8d 91       	ld	r24, X+
    11e6:	9c 91       	ld	r25, X
    11e8:	54 97       	sbiw	r26, 0x14	; 20
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	54 96       	adiw	r26, 0x14	; 20
    11ee:	9c 93       	st	X, r25
    11f0:	8e 93       	st	-X, r24
    11f2:	53 97       	sbiw	r26, 0x13	; 19
    11f4:	bb ca       	rjmp	.-2698   	; 0x76c <_ZN5Robot8mainMenuEv+0x1bc>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
    11f6:	6c 89       	ldd	r22, Y+20	; 0x14
    11f8:	7d 89       	ldd	r23, Y+21	; 0x15
    11fa:	86 2f       	mov	r24, r22
    11fc:	97 2f       	mov	r25, r23
    11fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
    1202:	76 2e       	mov	r7, r22
    1204:	67 2e       	mov	r6, r23
    1206:	89 8b       	std	Y+17, r24	; 0x11
    1208:	9a 8b       	std	Y+18, r25	; 0x12
            Point2D	minPos( from );
    120a:	f1 01       	movw	r30, r2
    120c:	c0 80       	ld	r12, Z
    120e:	d1 80       	ldd	r13, Z+1	; 0x01
    1210:	e2 80       	ldd	r14, Z+2	; 0x02
    1212:	f3 80       	ldd	r15, Z+3	; 0x03
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
    1214:	88 8d       	ldd	r24, Y+24	; 0x18
    1216:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1218:	39 a6       	std	Y+41, r3	; 0x29
    121a:	28 a6       	std	Y+40, r2	; 0x28
    121c:	49 cb       	rjmp	.-2414   	; 0x8b0 <_ZN5Robot8mainMenuEv+0x300>
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
    121e:	d1 01       	movw	r26, r2
    1220:	14 96       	adiw	r26, 0x04	; 4
    1222:	8c 91       	ld	r24, X
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	88 30       	cpi	r24, 0x08	; 8
    1228:	91 05       	cpc	r25, r1
    122a:	08 f0       	brcs	.+2      	; 0x122e <__stack+0x92f>
    122c:	05 cc       	rjmp	.-2038   	; 0xa38 <__stack+0x139>
    122e:	fc 01       	movw	r30, r24
    1230:	ec 5c       	subi	r30, 0xCC	; 204
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	0c 94 05 18 	jmp	0x300a	; 0x300a <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
    1238:	03 ed       	ldi	r16, 0xD3	; 211
    123a:	1f ef       	ldi	r17, 0xFF	; 255
    123c:	02 cc       	rjmp	.-2044   	; 0xa42 <__stack+0x143>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
    123e:	06 ea       	ldi	r16, 0xA6	; 166
    1240:	1f ef       	ldi	r17, 0xFF	; 255
    1242:	ff cb       	rjmp	.-2050   	; 0xa42 <__stack+0x143>
        {
            set_motors( 19, 19 );

            while ( !isOnMarker() ) {}

            play( ">>a32" );
    1244:	82 e7       	ldi	r24, 0x72	; 114
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 82 11 	call	0x2304	; 0x2304 <play>

            if ( boostLeftWheel && !boostRightWheel )
    124c:	f1 01       	movw	r30, r2
    124e:	85 89       	ldd	r24, Z+21	; 0x15
    1250:	81 11       	cpse	r24, r1
    1252:	5f ce       	rjmp	.-834    	; 0xf12 <__stack+0x613>
    1254:	69 ce       	rjmp	.-814    	; 0xf28 <__stack+0x629>
            {
                stepToGoal( finishPos );

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
    1256:	d1 01       	movw	r26, r2
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	ac 01       	movw	r20, r24
    125e:	44 0f       	add	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	84 0f       	add	r24, r20
    1264:	95 1f       	adc	r25, r21
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	4a e5       	ldi	r20, 0x5A	; 90
    126c:	42 9f       	mul	r20, r18
    126e:	f0 01       	movw	r30, r0
    1270:	43 9f       	mul	r20, r19
    1272:	f0 0d       	add	r31, r0
    1274:	11 24       	eor	r1, r1
    1276:	8e 0f       	add	r24, r30
    1278:	9f 1f       	adc	r25, r31
    127a:	fc 01       	movw	r30, r24
    127c:	e5 52       	subi	r30, 0x25	; 37
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	13 82       	std	Z+3, r1	; 0x03
    1282:	12 82       	std	Z+2, r1	; 0x02
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
    1284:	15 96       	adiw	r26, 0x05	; 5
    1286:	8d 91       	ld	r24, X+
    1288:	9d 91       	ld	r25, X+
    128a:	0d 90       	ld	r0, X+
    128c:	bc 91       	ld	r27, X
    128e:	a0 2d       	mov	r26, r0
    1290:	38 2f       	mov	r19, r24
    1292:	29 2f       	mov	r18, r25
    1294:	8b 87       	std	Y+11, r24	; 0x0b
    1296:	9c 87       	std	Y+12, r25	; 0x0c
    1298:	ad 87       	std	Y+13, r26	; 0x0d
    129a:	be 87       	std	Y+14, r27	; 0x0e
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
    129c:	f1 01       	movw	r30, r2
    129e:	87 81       	ldd	r24, Z+7	; 0x07
    12a0:	90 85       	ldd	r25, Z+8	; 0x08
    12a2:	65 81       	ldd	r22, Z+5	; 0x05
    12a4:	76 81       	ldd	r23, Z+6	; 0x06
    12a6:	fc 01       	movw	r30, r24
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	8e 0f       	add	r24, r30
    12ae:	9f 1f       	adc	r25, r31
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	46 9f       	mul	r20, r22
    12b6:	f0 01       	movw	r30, r0
    12b8:	47 9f       	mul	r20, r23
    12ba:	f0 0d       	add	r31, r0
    12bc:	11 24       	eor	r1, r1
    12be:	8e 0f       	add	r24, r30
    12c0:	9f 1f       	adc	r25, r31
    12c2:	fc 01       	movw	r30, r24
    12c4:	e5 52       	subi	r30, 0x25	; 37
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	60 80       	ld	r6, Z
    12ca:	71 80       	ldd	r7, Z+1	; 0x01

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    12cc:	83 2e       	mov	r8, r19
    12ce:	92 2e       	mov	r9, r18
    12d0:	4d 84       	ldd	r4, Y+13	; 0x0d
    12d2:	5e 84       	ldd	r5, Y+14	; 0x0e
    12d4:	f2 01       	movw	r30, r4
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	e4 0d       	add	r30, r4
    12dc:	f5 1d       	adc	r31, r5
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	48 9d       	mul	r20, r8
    12e4:	c0 01       	movw	r24, r0
    12e6:	49 9d       	mul	r20, r9
    12e8:	90 0d       	add	r25, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	e8 0f       	add	r30, r24
    12ee:	f9 1f       	adc	r31, r25
    12f0:	e5 52       	subi	r30, 0x25	; 37
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__stack+0x9ff>
    12fc:	ec ce       	rjmp	.-552    	; 0x10d6 <__stack+0x7d7>
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish > dist - currCell.distToStart )
    12fe:	0f 2e       	mov	r0, r31
    1300:	fa e5       	ldi	r31, 0x5A	; 90
    1302:	bf 2e       	mov	r11, r31
    1304:	f0 2d       	mov	r31, r0
    1306:	3b 8a       	std	Y+19, r3	; 0x13
    1308:	2a 8a       	std	Y+18, r2	; 0x12
    130a:	3c ce       	rjmp	.-904    	; 0xf84 <__stack+0x685>

0000130c <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    130c:	fb 01       	movw	r30, r22
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	2f 30       	cpi	r18, 0x0F	; 15
    1314:	31 05       	cpc	r19, r1
    1316:	28 f5       	brcc	.+74     	; 0x1362 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x56>
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	8f 30       	cpi	r24, 0x0F	; 15
    131e:	91 05       	cpc	r25, r1
    1320:	28 f1       	brcs	.+74     	; 0x136c <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	7e ef       	ldi	r23, 0xFE	; 254
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	96 e4       	ldi	r25, 0x46	; 70
    132a:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
    132c:	ac 01       	movw	r20, r24
    132e:	44 0f       	add	r20, r20
    1330:	55 1f       	adc	r21, r21
    1332:	84 0f       	add	r24, r20
    1334:	95 1f       	adc	r25, r21
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	4a e5       	ldi	r20, 0x5A	; 90
    133c:	42 9f       	mul	r20, r18
    133e:	f0 01       	movw	r30, r0
    1340:	43 9f       	mul	r20, r19
    1342:	f0 0d       	add	r31, r0
    1344:	11 24       	eor	r1, r1
    1346:	8e 0f       	add	r24, r30
    1348:	9f 1f       	adc	r25, r31
    134a:	fc 01       	movw	r30, r24
    134c:	e5 52       	subi	r30, 0x25	; 37
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	07 2e       	mov	r0, r23
    1356:	00 0c       	add	r0, r0
    1358:	88 0b       	sbc	r24, r24
    135a:	99 0b       	sbc	r25, r25
    135c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
    1360:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	7e ef       	ldi	r23, 0xFE	; 254
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	96 e4       	ldi	r25, 0x46	; 70
    136a:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
    136c:	fc 01       	movw	r30, r24
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	e8 0f       	add	r30, r24
    1374:	f9 1f       	adc	r31, r25
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	6a e5       	ldi	r22, 0x5A	; 90
    137c:	62 9f       	mul	r22, r18
    137e:	a0 01       	movw	r20, r0
    1380:	63 9f       	mul	r22, r19
    1382:	50 0d       	add	r21, r0
    1384:	11 24       	eor	r1, r1
    1386:	e4 0f       	add	r30, r20
    1388:	f5 1f       	adc	r31, r21
    138a:	e5 52       	subi	r30, 0x25	; 37
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	45 81       	ldd	r20, Z+5	; 0x05
    1390:	41 11       	cpse	r20, r1
    1392:	cc cf       	rjmp	.-104    	; 0x132c <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x20>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	7e ef       	ldi	r23, 0xFE	; 254
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	96 e4       	ldi	r25, 0x46	; 70
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
    139c:	08 95       	ret

0000139e <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    139e:	fb 01       	movw	r30, r22
    13a0:	20 81       	ld	r18, Z
    13a2:	31 81       	ldd	r19, Z+1	; 0x01
    13a4:	2f 30       	cpi	r18, 0x0F	; 15
    13a6:	31 05       	cpc	r19, r1
    13a8:	28 f5       	brcc	.+74     	; 0x13f4 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x56>
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	8f 30       	cpi	r24, 0x0F	; 15
    13b0:	91 05       	cpc	r25, r1
    13b2:	50 f1       	brcs	.+84     	; 0x1408 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x6a>

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	7e ef       	ldi	r23, 0xFE	; 254
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	96 e4       	ldi	r25, 0x46	; 70
    13bc:	08 95       	ret

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
    13be:	ac 01       	movw	r20, r24
    13c0:	44 0f       	add	r20, r20
    13c2:	55 1f       	adc	r21, r21
    13c4:	84 0f       	add	r24, r20
    13c6:	95 1f       	adc	r25, r21
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	4a e5       	ldi	r20, 0x5A	; 90
    13ce:	42 9f       	mul	r20, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	43 9f       	mul	r20, r19
    13d4:	f0 0d       	add	r31, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	8e 0f       	add	r24, r30
    13da:	9f 1f       	adc	r25, r31
    13dc:	fc 01       	movw	r30, r24
    13de:	e5 52       	subi	r30, 0x25	; 37
    13e0:	fe 4f       	sbci	r31, 0xFE	; 254
    13e2:	62 81       	ldd	r22, Z+2	; 0x02
    13e4:	73 81       	ldd	r23, Z+3	; 0x03
    13e6:	07 2e       	mov	r0, r23
    13e8:	00 0c       	add	r0, r0
    13ea:	88 0b       	sbc	r24, r24
    13ec:	99 0b       	sbc	r25, r25
    13ee:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
    13f2:	08 95       	ret

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	7e ef       	ldi	r23, 0xFE	; 254
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	96 e4       	ldi	r25, 0x46	; 70
    13fc:	08 95       	ret
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	7e ef       	ldi	r23, 0xFE	; 254
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	96 e4       	ldi	r25, 0x46	; 70
                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
                }

                return result;
    1406:	08 95       	ret
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
    1408:	fc 01       	movw	r30, r24
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	e8 0f       	add	r30, r24
    1410:	f9 1f       	adc	r31, r25
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	6a e5       	ldi	r22, 0x5A	; 90
    1418:	62 9f       	mul	r22, r18
    141a:	a0 01       	movw	r20, r0
    141c:	63 9f       	mul	r22, r19
    141e:	50 0d       	add	r21, r0
    1420:	11 24       	eor	r1, r1
    1422:	e4 0f       	add	r30, r20
    1424:	f5 1f       	adc	r31, r21
    1426:	e5 52       	subi	r30, 0x25	; 37
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	45 81       	ldd	r20, Z+5	; 0x05
    142c:	41 11       	cpse	r20, r1
    142e:	e7 cf       	rjmp	.-50     	; 0x13fe <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>
    1430:	c6 cf       	rjmp	.-116    	; 0x13be <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x20>

00001432 <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	69 97       	sbiw	r28, 0x19	; 25
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    1446:	85 e0       	ldi	r24, 0x05	; 5
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	1c 82       	std	Y+4, r1	; 0x04
    1450:	1b 82       	std	Y+3, r1	; 0x03
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
            , boostLeftWheel( false )
            , boostRightWheel( false )
    1452:	1d 82       	std	Y+5, r1	; 0x05

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    1454:	9f 83       	std	Y+7, r25	; 0x07
    1456:	8e 83       	std	Y+6, r24	; 0x06
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	99 87       	std	Y+9, r25	; 0x09
    145e:	88 87       	std	Y+8, r24	; 0x08
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
            , boostLeftWheel( false )
            , boostRightWheel( false )
    1460:	1d 8a       	std	Y+21, r1	; 0x15
    1462:	1c 8a       	std	Y+20, r1	; 0x14
    1464:	1e 8a       	std	Y+22, r1	; 0x16
    1466:	1f 8a       	std	Y+23, r1	; 0x17
        {}
        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
    1468:	80 ed       	ldi	r24, 0xD0	; 208
    146a:	97 e0       	ldi	r25, 0x07	; 7
    146c:	0e 94 c7 14 	call	0x298e	; 0x298e <pololu_3pi_init>

            set_motors( 0, 0 );
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 c8 13 	call	0x2790	; 0x2790 <set_motors>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    147c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <read_battery_millivolts_3pi>
    1480:	8c 01       	movw	r16, r24

            // Display battery voltage and wait two seconds
            unsigned short bat = read_battery_millivolts();

            clear();
    1482:	0e 94 8b 12 	call	0x2516	; 0x2516 <clear>
            print_long( bat );
    1486:	b8 01       	movw	r22, r16
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 ef 12 	call	0x25de	; 0x25de <print_long>
            print( "mV" );
    1490:	88 e7       	ldi	r24, 0x78	; 120
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 9a 12 	call	0x2534	; 0x2534 <print>
            delay_ms( 1000 );
    1498:	88 ee       	ldi	r24, 0xE8	; 232
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>

            this->mainMenu();
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN5Robot8mainMenuEv>

000014a8 <_GLOBAL__sub_I_doPrint>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    14a8:	4b ed       	ldi	r20, 0xDB	; 219
    14aa:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( SHRT_MAX )
            , distToFinish( SHRT_MAX )
            , isObstacle( false )
            , isVisited( false )
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f e7       	ldi	r25, 0x7F	; 127
    14b0:	fa 01       	movw	r30, r20
    14b2:	46 5a       	subi	r20, 0xA6	; 166
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	9a 01       	movw	r18, r20
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
    14bc:	93 83       	std	Z+3, r25	; 0x03
    14be:	82 83       	std	Z+2, r24	; 0x02
    14c0:	14 82       	std	Z+4, r1	; 0x04
    14c2:	15 82       	std	Z+5, r1	; 0x05
    14c4:	36 96       	adiw	r30, 0x06	; 6
        }
};

typedef float ( *getDistFunc )( const Point2D&, const Point2D& );

Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    14c6:	e2 17       	cp	r30, r18
    14c8:	f3 07       	cpc	r31, r19
    14ca:	b1 f7       	brne	.-20     	; 0x14b8 <_GLOBAL__sub_I_doPrint+0x10>
    14cc:	27 e0       	ldi	r18, 0x07	; 7
    14ce:	41 32       	cpi	r20, 0x21	; 33
    14d0:	52 07       	cpc	r21, r18
    14d2:	71 f7       	brne	.-36     	; 0x14b0 <_GLOBAL__sub_I_doPrint+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    14d4:	08 95       	ret

000014d6 <atan>:
    14d6:	df 93       	push	r29
    14d8:	dd 27       	eor	r29, r29
    14da:	b9 2f       	mov	r27, r25
    14dc:	bf 77       	andi	r27, 0x7F	; 127
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	16 16       	cp	r1, r22
    14e4:	17 06       	cpc	r1, r23
    14e6:	48 07       	cpc	r20, r24
    14e8:	5b 07       	cpc	r21, r27
    14ea:	18 f4       	brcc	.+6      	; 0x14f2 <atan+0x1c>
    14ec:	d9 2f       	mov	r29, r25
    14ee:	0e 94 20 0c 	call	0x1840	; 0x1840 <inverse>
    14f2:	9f 93       	push	r25
    14f4:	8f 93       	push	r24
    14f6:	7f 93       	push	r23
    14f8:	6f 93       	push	r22
    14fa:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <square>
    14fe:	e8 e7       	ldi	r30, 0x78	; 120
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fp_powser>
    1506:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_round>
    150a:	2f 91       	pop	r18
    150c:	3f 91       	pop	r19
    150e:	4f 91       	pop	r20
    1510:	5f 91       	pop	r21
    1512:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3x>
    1516:	dd 23       	and	r29, r29
    1518:	51 f0       	breq	.+20     	; 0x152e <atan+0x58>
    151a:	90 58       	subi	r25, 0x80	; 128
    151c:	a2 ea       	ldi	r26, 0xA2	; 162
    151e:	2a ed       	ldi	r18, 0xDA	; 218
    1520:	3f e0       	ldi	r19, 0x0F	; 15
    1522:	49 ec       	ldi	r20, 0xC9	; 201
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	d0 78       	andi	r29, 0x80	; 128
    1528:	5d 27       	eor	r21, r29
    152a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__addsf3x>
    152e:	df 91       	pop	r29
    1530:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_round>

00001534 <__cmpsf2>:
    1534:	0e 94 84 0b 	call	0x1708	; 0x1708 <__fp_cmp>
    1538:	08 f4       	brcc	.+2      	; 0x153c <__cmpsf2+0x8>
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	08 95       	ret

0000153e <__divsf3>:
    153e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__divsf3x>
    1542:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_round>
    1546:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_pscB>
    154a:	58 f0       	brcs	.+22     	; 0x1562 <__divsf3+0x24>
    154c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscA>
    1550:	40 f0       	brcs	.+16     	; 0x1562 <__divsf3+0x24>
    1552:	29 f4       	brne	.+10     	; 0x155e <__divsf3+0x20>
    1554:	5f 3f       	cpi	r21, 0xFF	; 255
    1556:	29 f0       	breq	.+10     	; 0x1562 <__divsf3+0x24>
    1558:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>
    155c:	51 11       	cpse	r21, r1
    155e:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_szero>
    1562:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>

00001566 <__divsf3x>:
    1566:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_split3>
    156a:	68 f3       	brcs	.-38     	; 0x1546 <__divsf3+0x8>

0000156c <__divsf3_pse>:
    156c:	99 23       	and	r25, r25
    156e:	b1 f3       	breq	.-20     	; 0x155c <__divsf3+0x1e>
    1570:	55 23       	and	r21, r21
    1572:	91 f3       	breq	.-28     	; 0x1558 <__divsf3+0x1a>
    1574:	95 1b       	sub	r25, r21
    1576:	55 0b       	sbc	r21, r21
    1578:	bb 27       	eor	r27, r27
    157a:	aa 27       	eor	r26, r26
    157c:	62 17       	cp	r22, r18
    157e:	73 07       	cpc	r23, r19
    1580:	84 07       	cpc	r24, r20
    1582:	38 f0       	brcs	.+14     	; 0x1592 <__divsf3_pse+0x26>
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	22 0f       	add	r18, r18
    158a:	33 1f       	adc	r19, r19
    158c:	44 1f       	adc	r20, r20
    158e:	aa 1f       	adc	r26, r26
    1590:	a9 f3       	breq	.-22     	; 0x157c <__divsf3_pse+0x10>
    1592:	35 d0       	rcall	.+106    	; 0x15fe <__divsf3_pse+0x92>
    1594:	0e 2e       	mov	r0, r30
    1596:	3a f0       	brmi	.+14     	; 0x15a6 <__divsf3_pse+0x3a>
    1598:	e0 e8       	ldi	r30, 0x80	; 128
    159a:	32 d0       	rcall	.+100    	; 0x1600 <__divsf3_pse+0x94>
    159c:	91 50       	subi	r25, 0x01	; 1
    159e:	50 40       	sbci	r21, 0x00	; 0
    15a0:	e6 95       	lsr	r30
    15a2:	00 1c       	adc	r0, r0
    15a4:	ca f7       	brpl	.-14     	; 0x1598 <__divsf3_pse+0x2c>
    15a6:	2b d0       	rcall	.+86     	; 0x15fe <__divsf3_pse+0x92>
    15a8:	fe 2f       	mov	r31, r30
    15aa:	29 d0       	rcall	.+82     	; 0x15fe <__divsf3_pse+0x92>
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	bb 1f       	adc	r27, r27
    15b4:	26 17       	cp	r18, r22
    15b6:	37 07       	cpc	r19, r23
    15b8:	48 07       	cpc	r20, r24
    15ba:	ab 07       	cpc	r26, r27
    15bc:	b0 e8       	ldi	r27, 0x80	; 128
    15be:	09 f0       	breq	.+2      	; 0x15c2 <__divsf3_pse+0x56>
    15c0:	bb 0b       	sbc	r27, r27
    15c2:	80 2d       	mov	r24, r0
    15c4:	bf 01       	movw	r22, r30
    15c6:	ff 27       	eor	r31, r31
    15c8:	93 58       	subi	r25, 0x83	; 131
    15ca:	5f 4f       	sbci	r21, 0xFF	; 255
    15cc:	3a f0       	brmi	.+14     	; 0x15dc <__divsf3_pse+0x70>
    15ce:	9e 3f       	cpi	r25, 0xFE	; 254
    15d0:	51 05       	cpc	r21, r1
    15d2:	78 f0       	brcs	.+30     	; 0x15f2 <__divsf3_pse+0x86>
    15d4:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>
    15d8:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_szero>
    15dc:	5f 3f       	cpi	r21, 0xFF	; 255
    15de:	e4 f3       	brlt	.-8      	; 0x15d8 <__divsf3_pse+0x6c>
    15e0:	98 3e       	cpi	r25, 0xE8	; 232
    15e2:	d4 f3       	brlt	.-12     	; 0x15d8 <__divsf3_pse+0x6c>
    15e4:	86 95       	lsr	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b7 95       	ror	r27
    15ec:	f7 95       	ror	r31
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__divsf3_pse+0x78>
    15f2:	88 0f       	add	r24, r24
    15f4:	91 1d       	adc	r25, r1
    15f6:	96 95       	lsr	r25
    15f8:	87 95       	ror	r24
    15fa:	97 f9       	bld	r25, 7
    15fc:	08 95       	ret
    15fe:	e1 e0       	ldi	r30, 0x01	; 1
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	bb 1f       	adc	r27, r27
    1608:	62 17       	cp	r22, r18
    160a:	73 07       	cpc	r23, r19
    160c:	84 07       	cpc	r24, r20
    160e:	ba 07       	cpc	r27, r26
    1610:	20 f0       	brcs	.+8      	; 0x161a <__divsf3_pse+0xae>
    1612:	62 1b       	sub	r22, r18
    1614:	73 0b       	sbc	r23, r19
    1616:	84 0b       	sbc	r24, r20
    1618:	ba 0b       	sbc	r27, r26
    161a:	ee 1f       	adc	r30, r30
    161c:	88 f7       	brcc	.-30     	; 0x1600 <__divsf3_pse+0x94>
    161e:	e0 95       	com	r30
    1620:	08 95       	ret

00001622 <__fixsfsi>:
    1622:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixunssfsi>
    1626:	68 94       	set
    1628:	b1 11       	cpse	r27, r1
    162a:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_szero>
    162e:	08 95       	ret

00001630 <__fixunssfsi>:
    1630:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_splitA>
    1634:	88 f0       	brcs	.+34     	; 0x1658 <__fixunssfsi+0x28>
    1636:	9f 57       	subi	r25, 0x7F	; 127
    1638:	98 f0       	brcs	.+38     	; 0x1660 <__fixunssfsi+0x30>
    163a:	b9 2f       	mov	r27, r25
    163c:	99 27       	eor	r25, r25
    163e:	b7 51       	subi	r27, 0x17	; 23
    1640:	b0 f0       	brcs	.+44     	; 0x166e <__fixunssfsi+0x3e>
    1642:	e1 f0       	breq	.+56     	; 0x167c <__fixunssfsi+0x4c>
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a f0       	brmi	.+6      	; 0x1654 <__fixunssfsi+0x24>
    164e:	ba 95       	dec	r27
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__fixunssfsi+0x14>
    1652:	14 c0       	rjmp	.+40     	; 0x167c <__fixunssfsi+0x4c>
    1654:	b1 30       	cpi	r27, 0x01	; 1
    1656:	91 f0       	breq	.+36     	; 0x167c <__fixunssfsi+0x4c>
    1658:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_zero>
    165c:	b1 e0       	ldi	r27, 0x01	; 1
    165e:	08 95       	ret
    1660:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__fp_zero>
    1664:	67 2f       	mov	r22, r23
    1666:	78 2f       	mov	r23, r24
    1668:	88 27       	eor	r24, r24
    166a:	b8 5f       	subi	r27, 0xF8	; 248
    166c:	39 f0       	breq	.+14     	; 0x167c <__fixunssfsi+0x4c>
    166e:	b9 3f       	cpi	r27, 0xF9	; 249
    1670:	cc f3       	brlt	.-14     	; 0x1664 <__fixunssfsi+0x34>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b3 95       	inc	r27
    167a:	d9 f7       	brne	.-10     	; 0x1672 <__fixunssfsi+0x42>
    167c:	3e f4       	brtc	.+14     	; 0x168c <__fixunssfsi+0x5c>
    167e:	90 95       	com	r25
    1680:	80 95       	com	r24
    1682:	70 95       	com	r23
    1684:	61 95       	neg	r22
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <__floatunsisf>:
    168e:	e8 94       	clt
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <__floatsisf+0x12>

00001692 <__floatsisf>:
    1692:	97 fb       	bst	r25, 7
    1694:	3e f4       	brtc	.+14     	; 0x16a4 <__floatsisf+0x12>
    1696:	90 95       	com	r25
    1698:	80 95       	com	r24
    169a:	70 95       	com	r23
    169c:	61 95       	neg	r22
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8f 4f       	sbci	r24, 0xFF	; 255
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	99 23       	and	r25, r25
    16a6:	a9 f0       	breq	.+42     	; 0x16d2 <__floatsisf+0x40>
    16a8:	f9 2f       	mov	r31, r25
    16aa:	96 e9       	ldi	r25, 0x96	; 150
    16ac:	bb 27       	eor	r27, r27
    16ae:	93 95       	inc	r25
    16b0:	f6 95       	lsr	r31
    16b2:	87 95       	ror	r24
    16b4:	77 95       	ror	r23
    16b6:	67 95       	ror	r22
    16b8:	b7 95       	ror	r27
    16ba:	f1 11       	cpse	r31, r1
    16bc:	f8 cf       	rjmp	.-16     	; 0x16ae <__floatsisf+0x1c>
    16be:	fa f4       	brpl	.+62     	; 0x16fe <__floatsisf+0x6c>
    16c0:	bb 0f       	add	r27, r27
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <__floatsisf+0x36>
    16c4:	60 ff       	sbrs	r22, 0
    16c6:	1b c0       	rjmp	.+54     	; 0x16fe <__floatsisf+0x6c>
    16c8:	6f 5f       	subi	r22, 0xFF	; 255
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	8f 4f       	sbci	r24, 0xFF	; 255
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	16 c0       	rjmp	.+44     	; 0x16fe <__floatsisf+0x6c>
    16d2:	88 23       	and	r24, r24
    16d4:	11 f0       	breq	.+4      	; 0x16da <__floatsisf+0x48>
    16d6:	96 e9       	ldi	r25, 0x96	; 150
    16d8:	11 c0       	rjmp	.+34     	; 0x16fc <__floatsisf+0x6a>
    16da:	77 23       	and	r23, r23
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <__floatsisf+0x54>
    16de:	9e e8       	ldi	r25, 0x8E	; 142
    16e0:	87 2f       	mov	r24, r23
    16e2:	76 2f       	mov	r23, r22
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <__floatsisf+0x5e>
    16e6:	66 23       	and	r22, r22
    16e8:	71 f0       	breq	.+28     	; 0x1706 <__floatsisf+0x74>
    16ea:	96 e8       	ldi	r25, 0x86	; 134
    16ec:	86 2f       	mov	r24, r22
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	2a f0       	brmi	.+10     	; 0x16fe <__floatsisf+0x6c>
    16f4:	9a 95       	dec	r25
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	da f7       	brpl	.-10     	; 0x16f4 <__floatsisf+0x62>
    16fe:	88 0f       	add	r24, r24
    1700:	96 95       	lsr	r25
    1702:	87 95       	ror	r24
    1704:	97 f9       	bld	r25, 7
    1706:	08 95       	ret

00001708 <__fp_cmp>:
    1708:	99 0f       	add	r25, r25
    170a:	00 08       	sbc	r0, r0
    170c:	55 0f       	add	r21, r21
    170e:	aa 0b       	sbc	r26, r26
    1710:	e0 e8       	ldi	r30, 0x80	; 128
    1712:	fe ef       	ldi	r31, 0xFE	; 254
    1714:	16 16       	cp	r1, r22
    1716:	17 06       	cpc	r1, r23
    1718:	e8 07       	cpc	r30, r24
    171a:	f9 07       	cpc	r31, r25
    171c:	c0 f0       	brcs	.+48     	; 0x174e <__fp_cmp+0x46>
    171e:	12 16       	cp	r1, r18
    1720:	13 06       	cpc	r1, r19
    1722:	e4 07       	cpc	r30, r20
    1724:	f5 07       	cpc	r31, r21
    1726:	98 f0       	brcs	.+38     	; 0x174e <__fp_cmp+0x46>
    1728:	62 1b       	sub	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	95 0b       	sbc	r25, r21
    1730:	39 f4       	brne	.+14     	; 0x1740 <__fp_cmp+0x38>
    1732:	0a 26       	eor	r0, r26
    1734:	61 f0       	breq	.+24     	; 0x174e <__fp_cmp+0x46>
    1736:	23 2b       	or	r18, r19
    1738:	24 2b       	or	r18, r20
    173a:	25 2b       	or	r18, r21
    173c:	21 f4       	brne	.+8      	; 0x1746 <__fp_cmp+0x3e>
    173e:	08 95       	ret
    1740:	0a 26       	eor	r0, r26
    1742:	09 f4       	brne	.+2      	; 0x1746 <__fp_cmp+0x3e>
    1744:	a1 40       	sbci	r26, 0x01	; 1
    1746:	a6 95       	lsr	r26
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	81 1d       	adc	r24, r1
    174c:	81 1d       	adc	r24, r1
    174e:	08 95       	ret

00001750 <__fp_inf>:
    1750:	97 f9       	bld	r25, 7
    1752:	9f 67       	ori	r25, 0x7F	; 127
    1754:	80 e8       	ldi	r24, 0x80	; 128
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	08 95       	ret

0000175c <__fp_nan>:
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	80 ec       	ldi	r24, 0xC0	; 192
    1760:	08 95       	ret

00001762 <__fp_powser>:
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	1f 93       	push	r17
    1768:	0f 93       	push	r16
    176a:	ff 92       	push	r15
    176c:	ef 92       	push	r14
    176e:	df 92       	push	r13
    1770:	7b 01       	movw	r14, r22
    1772:	8c 01       	movw	r16, r24
    1774:	68 94       	set
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <__fp_powser+0x22>
    1778:	da 2e       	mov	r13, r26
    177a:	ef 01       	movw	r28, r30
    177c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3x>
    1780:	fe 01       	movw	r30, r28
    1782:	e8 94       	clt
    1784:	a5 91       	lpm	r26, Z+
    1786:	25 91       	lpm	r18, Z+
    1788:	35 91       	lpm	r19, Z+
    178a:	45 91       	lpm	r20, Z+
    178c:	55 91       	lpm	r21, Z+
    178e:	a6 f3       	brts	.-24     	; 0x1778 <__fp_powser+0x16>
    1790:	ef 01       	movw	r28, r30
    1792:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__addsf3x>
    1796:	fe 01       	movw	r30, r28
    1798:	97 01       	movw	r18, r14
    179a:	a8 01       	movw	r20, r16
    179c:	da 94       	dec	r13
    179e:	69 f7       	brne	.-38     	; 0x177a <__fp_powser+0x18>
    17a0:	df 90       	pop	r13
    17a2:	ef 90       	pop	r14
    17a4:	ff 90       	pop	r15
    17a6:	0f 91       	pop	r16
    17a8:	1f 91       	pop	r17
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <__fp_pscA>:
    17b0:	00 24       	eor	r0, r0
    17b2:	0a 94       	dec	r0
    17b4:	16 16       	cp	r1, r22
    17b6:	17 06       	cpc	r1, r23
    17b8:	18 06       	cpc	r1, r24
    17ba:	09 06       	cpc	r0, r25
    17bc:	08 95       	ret

000017be <__fp_pscB>:
    17be:	00 24       	eor	r0, r0
    17c0:	0a 94       	dec	r0
    17c2:	12 16       	cp	r1, r18
    17c4:	13 06       	cpc	r1, r19
    17c6:	14 06       	cpc	r1, r20
    17c8:	05 06       	cpc	r0, r21
    17ca:	08 95       	ret

000017cc <__fp_round>:
    17cc:	09 2e       	mov	r0, r25
    17ce:	03 94       	inc	r0
    17d0:	00 0c       	add	r0, r0
    17d2:	11 f4       	brne	.+4      	; 0x17d8 <__fp_round+0xc>
    17d4:	88 23       	and	r24, r24
    17d6:	52 f0       	brmi	.+20     	; 0x17ec <__fp_round+0x20>
    17d8:	bb 0f       	add	r27, r27
    17da:	40 f4       	brcc	.+16     	; 0x17ec <__fp_round+0x20>
    17dc:	bf 2b       	or	r27, r31
    17de:	11 f4       	brne	.+4      	; 0x17e4 <__fp_round+0x18>
    17e0:	60 ff       	sbrs	r22, 0
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <__fp_round+0x20>
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	08 95       	ret

000017ee <__fp_split3>:
    17ee:	57 fd       	sbrc	r21, 7
    17f0:	90 58       	subi	r25, 0x80	; 128
    17f2:	44 0f       	add	r20, r20
    17f4:	55 1f       	adc	r21, r21
    17f6:	59 f0       	breq	.+22     	; 0x180e <__fp_splitA+0x10>
    17f8:	5f 3f       	cpi	r21, 0xFF	; 255
    17fa:	71 f0       	breq	.+28     	; 0x1818 <__fp_splitA+0x1a>
    17fc:	47 95       	ror	r20

000017fe <__fp_splitA>:
    17fe:	88 0f       	add	r24, r24
    1800:	97 fb       	bst	r25, 7
    1802:	99 1f       	adc	r25, r25
    1804:	61 f0       	breq	.+24     	; 0x181e <__fp_splitA+0x20>
    1806:	9f 3f       	cpi	r25, 0xFF	; 255
    1808:	79 f0       	breq	.+30     	; 0x1828 <__fp_splitA+0x2a>
    180a:	87 95       	ror	r24
    180c:	08 95       	ret
    180e:	12 16       	cp	r1, r18
    1810:	13 06       	cpc	r1, r19
    1812:	14 06       	cpc	r1, r20
    1814:	55 1f       	adc	r21, r21
    1816:	f2 cf       	rjmp	.-28     	; 0x17fc <__fp_split3+0xe>
    1818:	46 95       	lsr	r20
    181a:	f1 df       	rcall	.-30     	; 0x17fe <__fp_splitA>
    181c:	08 c0       	rjmp	.+16     	; 0x182e <__fp_splitA+0x30>
    181e:	16 16       	cp	r1, r22
    1820:	17 06       	cpc	r1, r23
    1822:	18 06       	cpc	r1, r24
    1824:	99 1f       	adc	r25, r25
    1826:	f1 cf       	rjmp	.-30     	; 0x180a <__fp_splitA+0xc>
    1828:	86 95       	lsr	r24
    182a:	71 05       	cpc	r23, r1
    182c:	61 05       	cpc	r22, r1
    182e:	08 94       	sec
    1830:	08 95       	ret

00001832 <__fp_zero>:
    1832:	e8 94       	clt

00001834 <__fp_szero>:
    1834:	bb 27       	eor	r27, r27
    1836:	66 27       	eor	r22, r22
    1838:	77 27       	eor	r23, r23
    183a:	cb 01       	movw	r24, r22
    183c:	97 f9       	bld	r25, 7
    183e:	08 95       	ret

00001840 <inverse>:
    1840:	9b 01       	movw	r18, r22
    1842:	ac 01       	movw	r20, r24
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	80 e8       	ldi	r24, 0x80	; 128
    184a:	9f e3       	ldi	r25, 0x3F	; 63
    184c:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__divsf3>

00001850 <__mulsf3>:
    1850:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3x>
    1854:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_round>
    1858:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscA>
    185c:	38 f0       	brcs	.+14     	; 0x186c <__mulsf3+0x1c>
    185e:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_pscB>
    1862:	20 f0       	brcs	.+8      	; 0x186c <__mulsf3+0x1c>
    1864:	95 23       	and	r25, r21
    1866:	11 f0       	breq	.+4      	; 0x186c <__mulsf3+0x1c>
    1868:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>
    186c:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>
    1870:	11 24       	eor	r1, r1
    1872:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_szero>

00001876 <__mulsf3x>:
    1876:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_split3>
    187a:	70 f3       	brcs	.-36     	; 0x1858 <__mulsf3+0x8>

0000187c <__mulsf3_pse>:
    187c:	95 9f       	mul	r25, r21
    187e:	c1 f3       	breq	.-16     	; 0x1870 <__mulsf3+0x20>
    1880:	95 0f       	add	r25, r21
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	55 1f       	adc	r21, r21
    1886:	62 9f       	mul	r22, r18
    1888:	f0 01       	movw	r30, r0
    188a:	72 9f       	mul	r23, r18
    188c:	bb 27       	eor	r27, r27
    188e:	f0 0d       	add	r31, r0
    1890:	b1 1d       	adc	r27, r1
    1892:	63 9f       	mul	r22, r19
    1894:	aa 27       	eor	r26, r26
    1896:	f0 0d       	add	r31, r0
    1898:	b1 1d       	adc	r27, r1
    189a:	aa 1f       	adc	r26, r26
    189c:	64 9f       	mul	r22, r20
    189e:	66 27       	eor	r22, r22
    18a0:	b0 0d       	add	r27, r0
    18a2:	a1 1d       	adc	r26, r1
    18a4:	66 1f       	adc	r22, r22
    18a6:	82 9f       	mul	r24, r18
    18a8:	22 27       	eor	r18, r18
    18aa:	b0 0d       	add	r27, r0
    18ac:	a1 1d       	adc	r26, r1
    18ae:	62 1f       	adc	r22, r18
    18b0:	73 9f       	mul	r23, r19
    18b2:	b0 0d       	add	r27, r0
    18b4:	a1 1d       	adc	r26, r1
    18b6:	62 1f       	adc	r22, r18
    18b8:	83 9f       	mul	r24, r19
    18ba:	a0 0d       	add	r26, r0
    18bc:	61 1d       	adc	r22, r1
    18be:	22 1f       	adc	r18, r18
    18c0:	74 9f       	mul	r23, r20
    18c2:	33 27       	eor	r19, r19
    18c4:	a0 0d       	add	r26, r0
    18c6:	61 1d       	adc	r22, r1
    18c8:	23 1f       	adc	r18, r19
    18ca:	84 9f       	mul	r24, r20
    18cc:	60 0d       	add	r22, r0
    18ce:	21 1d       	adc	r18, r1
    18d0:	82 2f       	mov	r24, r18
    18d2:	76 2f       	mov	r23, r22
    18d4:	6a 2f       	mov	r22, r26
    18d6:	11 24       	eor	r1, r1
    18d8:	9f 57       	subi	r25, 0x7F	; 127
    18da:	50 40       	sbci	r21, 0x00	; 0
    18dc:	9a f0       	brmi	.+38     	; 0x1904 <__mulsf3_pse+0x88>
    18de:	f1 f0       	breq	.+60     	; 0x191c <__mulsf3_pse+0xa0>
    18e0:	88 23       	and	r24, r24
    18e2:	4a f0       	brmi	.+18     	; 0x18f6 <__mulsf3_pse+0x7a>
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	bb 1f       	adc	r27, r27
    18ea:	66 1f       	adc	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	91 50       	subi	r25, 0x01	; 1
    18f2:	50 40       	sbci	r21, 0x00	; 0
    18f4:	a9 f7       	brne	.-22     	; 0x18e0 <__mulsf3_pse+0x64>
    18f6:	9e 3f       	cpi	r25, 0xFE	; 254
    18f8:	51 05       	cpc	r21, r1
    18fa:	80 f0       	brcs	.+32     	; 0x191c <__mulsf3_pse+0xa0>
    18fc:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>
    1900:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_szero>
    1904:	5f 3f       	cpi	r21, 0xFF	; 255
    1906:	e4 f3       	brlt	.-8      	; 0x1900 <__mulsf3_pse+0x84>
    1908:	98 3e       	cpi	r25, 0xE8	; 232
    190a:	d4 f3       	brlt	.-12     	; 0x1900 <__mulsf3_pse+0x84>
    190c:	86 95       	lsr	r24
    190e:	77 95       	ror	r23
    1910:	67 95       	ror	r22
    1912:	b7 95       	ror	r27
    1914:	f7 95       	ror	r31
    1916:	e7 95       	ror	r30
    1918:	9f 5f       	subi	r25, 0xFF	; 255
    191a:	c1 f7       	brne	.-16     	; 0x190c <__mulsf3_pse+0x90>
    191c:	fe 2b       	or	r31, r30
    191e:	88 0f       	add	r24, r24
    1920:	91 1d       	adc	r25, r1
    1922:	96 95       	lsr	r25
    1924:	87 95       	ror	r24
    1926:	97 f9       	bld	r25, 7
    1928:	08 95       	ret

0000192a <round>:
    192a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_splitA>
    192e:	e8 f0       	brcs	.+58     	; 0x196a <round+0x40>
    1930:	9e 37       	cpi	r25, 0x7E	; 126
    1932:	e8 f0       	brcs	.+58     	; 0x196e <round+0x44>
    1934:	96 39       	cpi	r25, 0x96	; 150
    1936:	b8 f4       	brcc	.+46     	; 0x1966 <round+0x3c>
    1938:	9e 38       	cpi	r25, 0x8E	; 142
    193a:	48 f4       	brcc	.+18     	; 0x194e <round+0x24>
    193c:	67 2f       	mov	r22, r23
    193e:	78 2f       	mov	r23, r24
    1940:	88 27       	eor	r24, r24
    1942:	98 5f       	subi	r25, 0xF8	; 248
    1944:	f9 cf       	rjmp	.-14     	; 0x1938 <round+0xe>
    1946:	86 95       	lsr	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	93 95       	inc	r25
    194e:	95 39       	cpi	r25, 0x95	; 149
    1950:	d0 f3       	brcs	.-12     	; 0x1946 <round+0x1c>
    1952:	b6 2f       	mov	r27, r22
    1954:	b1 70       	andi	r27, 0x01	; 1
    1956:	6b 0f       	add	r22, r27
    1958:	71 1d       	adc	r23, r1
    195a:	81 1d       	adc	r24, r1
    195c:	20 f4       	brcc	.+8      	; 0x1966 <round+0x3c>
    195e:	87 95       	ror	r24
    1960:	77 95       	ror	r23
    1962:	67 95       	ror	r22
    1964:	93 95       	inc	r25
    1966:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_mintl>
    196a:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_mpack>
    196e:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_szero>
    1972:	19 f4       	brne	.+6      	; 0x197a <round+0x50>
    1974:	16 f4       	brtc	.+4      	; 0x197a <round+0x50>
    1976:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>
    197a:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_mpack>

0000197e <sqrt>:
    197e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_splitA>
    1982:	b8 f3       	brcs	.-18     	; 0x1972 <round+0x48>
    1984:	99 23       	and	r25, r25
    1986:	c9 f3       	breq	.-14     	; 0x197a <round+0x50>
    1988:	b6 f3       	brts	.-20     	; 0x1976 <round+0x4c>
    198a:	9f 57       	subi	r25, 0x7F	; 127
    198c:	55 0b       	sbc	r21, r21
    198e:	87 ff       	sbrs	r24, 7
    1990:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__fp_norm2>
    1994:	00 24       	eor	r0, r0
    1996:	a0 e6       	ldi	r26, 0x60	; 96
    1998:	40 ea       	ldi	r20, 0xA0	; 160
    199a:	90 01       	movw	r18, r0
    199c:	80 58       	subi	r24, 0x80	; 128
    199e:	56 95       	lsr	r21
    19a0:	97 95       	ror	r25
    19a2:	28 f4       	brcc	.+10     	; 0x19ae <sqrt+0x30>
    19a4:	80 5c       	subi	r24, 0xC0	; 192
    19a6:	66 0f       	add	r22, r22
    19a8:	77 1f       	adc	r23, r23
    19aa:	88 1f       	adc	r24, r24
    19ac:	20 f0       	brcs	.+8      	; 0x19b6 <sqrt+0x38>
    19ae:	26 17       	cp	r18, r22
    19b0:	37 07       	cpc	r19, r23
    19b2:	48 07       	cpc	r20, r24
    19b4:	30 f4       	brcc	.+12     	; 0x19c2 <sqrt+0x44>
    19b6:	62 1b       	sub	r22, r18
    19b8:	73 0b       	sbc	r23, r19
    19ba:	84 0b       	sbc	r24, r20
    19bc:	20 29       	or	r18, r0
    19be:	31 29       	or	r19, r1
    19c0:	4a 2b       	or	r20, r26
    19c2:	a6 95       	lsr	r26
    19c4:	17 94       	ror	r1
    19c6:	07 94       	ror	r0
    19c8:	20 25       	eor	r18, r0
    19ca:	31 25       	eor	r19, r1
    19cc:	4a 27       	eor	r20, r26
    19ce:	58 f7       	brcc	.-42     	; 0x19a6 <sqrt+0x28>
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	20 f0       	brcs	.+8      	; 0x19e0 <sqrt+0x62>
    19d8:	26 17       	cp	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	48 07       	cpc	r20, r24
    19de:	30 f4       	brcc	.+12     	; 0x19ec <sqrt+0x6e>
    19e0:	62 0b       	sbc	r22, r18
    19e2:	73 0b       	sbc	r23, r19
    19e4:	84 0b       	sbc	r24, r20
    19e6:	20 0d       	add	r18, r0
    19e8:	31 1d       	adc	r19, r1
    19ea:	41 1d       	adc	r20, r1
    19ec:	a0 95       	com	r26
    19ee:	81 f7       	brne	.-32     	; 0x19d0 <sqrt+0x52>
    19f0:	b9 01       	movw	r22, r18
    19f2:	84 2f       	mov	r24, r20
    19f4:	91 58       	subi	r25, 0x81	; 129
    19f6:	88 0f       	add	r24, r24
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	08 95       	ret

000019fe <square>:
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__mulsf3>
    1a06:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscA>
    1a0a:	38 f0       	brcs	.+14     	; 0x1a1a <square+0x1c>
    1a0c:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_pscB>
    1a10:	20 f0       	brcs	.+8      	; 0x1a1a <square+0x1c>
    1a12:	39 f4       	brne	.+14     	; 0x1a22 <square+0x24>
    1a14:	9f 3f       	cpi	r25, 0xFF	; 255
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <square+0x20>
    1a18:	26 f4       	brtc	.+8      	; 0x1a22 <square+0x24>
    1a1a:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>
    1a1e:	0e f4       	brtc	.+2      	; 0x1a22 <square+0x24>
    1a20:	e0 95       	com	r30
    1a22:	e7 fb       	bst	r30, 7
    1a24:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>

00001a28 <__addsf3x>:
    1a28:	e9 2f       	mov	r30, r25
    1a2a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_split3>
    1a2e:	58 f3       	brcs	.-42     	; 0x1a06 <square+0x8>
    1a30:	ba 17       	cp	r27, r26
    1a32:	62 07       	cpc	r22, r18
    1a34:	73 07       	cpc	r23, r19
    1a36:	84 07       	cpc	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <__addsf3x+0x1c>
    1a3c:	79 f4       	brne	.+30     	; 0x1a5c <__addsf3x+0x34>
    1a3e:	a6 f5       	brtc	.+104    	; 0x1aa8 <__addsf3x+0x80>
    1a40:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__fp_zero>
    1a44:	0e f4       	brtc	.+2      	; 0x1a48 <__addsf3x+0x20>
    1a46:	e0 95       	com	r30
    1a48:	0b 2e       	mov	r0, r27
    1a4a:	ba 2f       	mov	r27, r26
    1a4c:	a0 2d       	mov	r26, r0
    1a4e:	0b 01       	movw	r0, r22
    1a50:	b9 01       	movw	r22, r18
    1a52:	90 01       	movw	r18, r0
    1a54:	0c 01       	movw	r0, r24
    1a56:	ca 01       	movw	r24, r20
    1a58:	a0 01       	movw	r20, r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	ff 27       	eor	r31, r31
    1a5e:	59 1b       	sub	r21, r25
    1a60:	99 f0       	breq	.+38     	; 0x1a88 <__addsf3x+0x60>
    1a62:	59 3f       	cpi	r21, 0xF9	; 249
    1a64:	50 f4       	brcc	.+20     	; 0x1a7a <__addsf3x+0x52>
    1a66:	50 3e       	cpi	r21, 0xE0	; 224
    1a68:	68 f1       	brcs	.+90     	; 0x1ac4 <__addsf3x+0x9c>
    1a6a:	1a 16       	cp	r1, r26
    1a6c:	f0 40       	sbci	r31, 0x00	; 0
    1a6e:	a2 2f       	mov	r26, r18
    1a70:	23 2f       	mov	r18, r19
    1a72:	34 2f       	mov	r19, r20
    1a74:	44 27       	eor	r20, r20
    1a76:	58 5f       	subi	r21, 0xF8	; 248
    1a78:	f3 cf       	rjmp	.-26     	; 0x1a60 <__addsf3x+0x38>
    1a7a:	46 95       	lsr	r20
    1a7c:	37 95       	ror	r19
    1a7e:	27 95       	ror	r18
    1a80:	a7 95       	ror	r26
    1a82:	f0 40       	sbci	r31, 0x00	; 0
    1a84:	53 95       	inc	r21
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <__addsf3x+0x52>
    1a88:	7e f4       	brtc	.+30     	; 0x1aa8 <__addsf3x+0x80>
    1a8a:	1f 16       	cp	r1, r31
    1a8c:	ba 0b       	sbc	r27, r26
    1a8e:	62 0b       	sbc	r22, r18
    1a90:	73 0b       	sbc	r23, r19
    1a92:	84 0b       	sbc	r24, r20
    1a94:	ba f0       	brmi	.+46     	; 0x1ac4 <__addsf3x+0x9c>
    1a96:	91 50       	subi	r25, 0x01	; 1
    1a98:	a1 f0       	breq	.+40     	; 0x1ac2 <__addsf3x+0x9a>
    1a9a:	ff 0f       	add	r31, r31
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	66 1f       	adc	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	c2 f7       	brpl	.-16     	; 0x1a96 <__addsf3x+0x6e>
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <__addsf3x+0x9c>
    1aa8:	ba 0f       	add	r27, r26
    1aaa:	62 1f       	adc	r22, r18
    1aac:	73 1f       	adc	r23, r19
    1aae:	84 1f       	adc	r24, r20
    1ab0:	48 f4       	brcc	.+18     	; 0x1ac4 <__addsf3x+0x9c>
    1ab2:	87 95       	ror	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b7 95       	ror	r27
    1aba:	f7 95       	ror	r31
    1abc:	9e 3f       	cpi	r25, 0xFE	; 254
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <__addsf3x+0x9a>
    1ac0:	b0 cf       	rjmp	.-160    	; 0x1a22 <square+0x24>
    1ac2:	93 95       	inc	r25
    1ac4:	88 0f       	add	r24, r24
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <__addsf3x+0xa2>
    1ac8:	99 27       	eor	r25, r25
    1aca:	ee 0f       	add	r30, r30
    1acc:	97 95       	ror	r25
    1ace:	87 95       	ror	r24
    1ad0:	08 95       	ret

00001ad2 <__fp_mintl>:
    1ad2:	88 23       	and	r24, r24
    1ad4:	71 f4       	brne	.+28     	; 0x1af2 <__fp_mintl+0x20>
    1ad6:	77 23       	and	r23, r23
    1ad8:	21 f0       	breq	.+8      	; 0x1ae2 <__fp_mintl+0x10>
    1ada:	98 50       	subi	r25, 0x08	; 8
    1adc:	87 2b       	or	r24, r23
    1ade:	76 2f       	mov	r23, r22
    1ae0:	07 c0       	rjmp	.+14     	; 0x1af0 <__fp_mintl+0x1e>
    1ae2:	66 23       	and	r22, r22
    1ae4:	11 f4       	brne	.+4      	; 0x1aea <__fp_mintl+0x18>
    1ae6:	99 27       	eor	r25, r25
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <__fp_mintl+0x32>
    1aea:	90 51       	subi	r25, 0x10	; 16
    1aec:	86 2b       	or	r24, r22
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	2a f0       	brmi	.+10     	; 0x1afe <__fp_mintl+0x2c>
    1af4:	9a 95       	dec	r25
    1af6:	66 0f       	add	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	da f7       	brpl	.-10     	; 0x1af4 <__fp_mintl+0x22>
    1afe:	88 0f       	add	r24, r24
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	97 f9       	bld	r25, 7
    1b06:	08 95       	ret

00001b08 <__fp_mpack>:
    1b08:	9f 3f       	cpi	r25, 0xFF	; 255
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <__fp_mpack_finite+0xc>

00001b0c <__fp_mpack_finite>:
    1b0c:	91 50       	subi	r25, 0x01	; 1
    1b0e:	20 f4       	brcc	.+8      	; 0x1b18 <__fp_mpack_finite+0xc>
    1b10:	87 95       	ror	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	88 0f       	add	r24, r24
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	97 f9       	bld	r25, 7
    1b22:	08 95       	ret

00001b24 <__fp_norm2>:
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	66 0f       	add	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	d2 f7       	brpl	.-12     	; 0x1b24 <__fp_norm2>
    1b30:	08 95       	ret

00001b32 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1b32:	ec e7       	ldi	r30, 0x7C	; 124
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8f 7d       	andi	r24, 0xDF	; 223
    1b3a:	80 83       	st	Z, r24
    1b3c:	08 95       	ret

00001b3e <_ZN15OrangutanAnalog7setModeEh>:
    1b3e:	81 11       	cpse	r24, r1
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1b42:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1b46:	08 95       	ret
    1b48:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b4c:	80 62       	ori	r24, 0x20	; 32
    1b4e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b52:	08 95       	ret

00001b54 <_ZN15OrangutanAnalog7getModeEv>:
    1b54:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b58:	85 fb       	bst	r24, 5
    1b5a:	88 27       	eor	r24, r24
    1b5c:	80 f9       	bld	r24, 0
    1b5e:	08 95       	ret

00001b60 <_ZN15OrangutanAnalog16conversionResultEv>:
    1b60:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN15OrangutanAnalog7getModeEv>
    1b64:	88 23       	and	r24, r24
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1b68:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	08 95       	ret
    1b70:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1b74:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1b78:	08 95       	ret

00001b7a <_ZN15OrangutanAnalog15startConversionEhh>:
    1b7a:	80 32       	cpi	r24, 0x20	; 32
    1b7c:	a0 f4       	brcc	.+40     	; 0x1ba6 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1b7e:	97 e8       	ldi	r25, 0x87	; 135
    1b80:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b84:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b88:	66 23       	and	r22, r22
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1b8c:	90 6c       	ori	r25, 0xC0	; 192
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1b90:	9f 77       	andi	r25, 0x7F	; 127
    1b92:	90 64       	ori	r25, 0x40	; 64
    1b94:	90 7e       	andi	r25, 0xE0	; 224
    1b96:	98 2b       	or	r25, r24
    1b98:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b9c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1ba0:	80 64       	ori	r24, 0x40	; 64
    1ba2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1ba6:	08 95       	ret

00001ba8 <_ZN15OrangutanAnalog11readAverageEhj>:
    1ba8:	a0 e0       	ldi	r26, 0x00	; 0
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea ed       	ldi	r30, 0xDA	; 218
    1bae:	fd e0       	ldi	r31, 0x0D	; 13
    1bb0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__prologue_saves__+0x14>
    1bb4:	eb 01       	movw	r28, r22
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN15OrangutanAnalog15startConversionEhh>
    1bbc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bc0:	86 fd       	sbrc	r24, 6
    1bc2:	fc cf       	rjmp	.-8      	; 0x1bbc <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1bc4:	8e 01       	movw	r16, r28
    1bc6:	c1 2c       	mov	r12, r1
    1bc8:	d1 2c       	mov	r13, r1
    1bca:	76 01       	movw	r14, r12
    1bcc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bd0:	80 64       	ori	r24, 0x40	; 64
    1bd2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bd6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bda:	86 fd       	sbrc	r24, 6
    1bdc:	fc cf       	rjmp	.-8      	; 0x1bd6 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1bde:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN15OrangutanAnalog16conversionResultEv>
    1be2:	c8 0e       	add	r12, r24
    1be4:	d9 1e       	adc	r13, r25
    1be6:	e1 1c       	adc	r14, r1
    1be8:	f1 1c       	adc	r15, r1
    1bea:	01 50       	subi	r16, 0x01	; 1
    1bec:	11 09       	sbc	r17, r1
    1bee:	01 15       	cp	r16, r1
    1bf0:	11 05       	cpc	r17, r1
    1bf2:	61 f7       	brne	.-40     	; 0x1bcc <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	96 95       	lsr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	c0 34       	cpi	r28, 0x40	; 64
    1bfc:	d1 05       	cpc	r29, r1
    1bfe:	38 f4       	brcc	.+14     	; 0x1c0e <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1c00:	8c 0d       	add	r24, r12
    1c02:	9d 1d       	adc	r25, r13
    1c04:	be 01       	movw	r22, r28
    1c06:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	0e c0       	rjmp	.+28     	; 0x1c2a <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1c0e:	a7 01       	movw	r20, r14
    1c10:	96 01       	movw	r18, r12
    1c12:	28 0f       	add	r18, r24
    1c14:	39 1f       	adc	r19, r25
    1c16:	41 1d       	adc	r20, r1
    1c18:	51 1d       	adc	r21, r1
    1c1a:	ca 01       	movw	r24, r20
    1c1c:	b9 01       	movw	r22, r18
    1c1e:	9e 01       	movw	r18, r28
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    1c28:	c9 01       	movw	r24, r18
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	e8 e0       	ldi	r30, 0x08	; 8
    1c30:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__epilogue_restores__+0x14>

00001c34 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1c40:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1c44:	9c 01       	movw	r18, r24
    1c46:	0e 94 0b 18 	call	0x3016	; 0x3016 <__umulhisi3>
    1c4a:	6b 01       	movw	r12, r22
    1c4c:	7c 01       	movw	r14, r24
    1c4e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN15OrangutanAnalog7getModeEv>
    1c52:	88 23       	and	r24, r24
    1c54:	59 f0       	breq	.+22     	; 0x1c6c <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1c56:	c7 01       	movw	r24, r14
    1c58:	b6 01       	movw	r22, r12
    1c5a:	61 58       	subi	r22, 0x81	; 129
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	2f ef       	ldi	r18, 0xFF	; 255
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	0a c0       	rjmp	.+20     	; 0x1c80 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1c6c:	c7 01       	movw	r24, r14
    1c6e:	b6 01       	movw	r22, r12
    1c70:	61 50       	subi	r22, 0x01	; 1
    1c72:	7e 4f       	sbci	r23, 0xFE	; 254
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	33 e0       	ldi	r19, 0x03	; 3
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    1c84:	c9 01       	movw	r24, r18
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	cf 90       	pop	r12
    1c8e:	08 95       	ret

00001c90 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1c90:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN15OrangutanAnalog11readAverageEhj>
    1c94:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1c98:	08 95       	ret

00001c9a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN15OrangutanAnalog7getModeEv>
    1ca4:	18 2f       	mov	r17, r24
    1ca6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1caa:	6a e0       	ldi	r22, 0x0A	; 10
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	81 2f       	mov	r24, r17
    1cb8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN15OrangutanAnalog7setModeEh>
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	8c 0f       	add	r24, r28
    1cc4:	9d 1f       	adc	r25, r29
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	96 95       	lsr	r25
    1cca:	87 95       	ror	r24
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	08 95       	ret

00001cd4 <read_battery_millivolts_3pi>:
    1cd4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1cd8:	08 95       	ret

00001cda <_ZL16currentCharacterv>:
    1cda:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_ZL17use_program_space>
    1cde:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <__data_end>
    1ce2:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <__data_end+0x1>
    1ce6:	99 23       	and	r25, r25
    1ce8:	11 f0       	breq	.+4      	; 0x1cee <_ZL16currentCharacterv+0x14>
    1cea:	84 91       	lpm	r24, Z
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <_ZL16currentCharacterv+0x16>
    1cee:	80 81       	ld	r24, Z
    1cf0:	2f eb       	ldi	r18, 0xBF	; 191
    1cf2:	28 0f       	add	r18, r24
    1cf4:	2a 31       	cpi	r18, 0x1A	; 26
    1cf6:	10 f4       	brcc	.+4      	; 0x1cfc <_ZL16currentCharacterv+0x22>
    1cf8:	80 5e       	subi	r24, 0xE0	; 224
    1cfa:	08 95       	ret
    1cfc:	80 32       	cpi	r24, 0x20	; 32
    1cfe:	49 f4       	brne	.+18     	; 0x1d12 <_ZL16currentCharacterv+0x38>
    1d00:	9f 01       	movw	r18, r30
    1d02:	2f 5f       	subi	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1d0a:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1d0e:	ef 2b       	or	r30, r31
    1d10:	31 f7       	brne	.-52     	; 0x1cde <_ZL16currentCharacterv+0x4>
    1d12:	08 95       	ret

00001d14 <_ZL9getNumberv>:
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    1d1e:	c0 e0       	ldi	r28, 0x00	; 0
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	1a e0       	ldi	r17, 0x0A	; 10
    1d24:	90 ed       	ldi	r25, 0xD0	; 208
    1d26:	98 0f       	add	r25, r24
    1d28:	9a 30       	cpi	r25, 0x0A	; 10
    1d2a:	b8 f4       	brcc	.+46     	; 0x1d5a <_ZL9getNumberv+0x46>
    1d2c:	9e 01       	movw	r18, r28
    1d2e:	12 9f       	mul	r17, r18
    1d30:	e0 01       	movw	r28, r0
    1d32:	13 9f       	mul	r17, r19
    1d34:	d0 0d       	add	r29, r0
    1d36:	11 24       	eor	r1, r1
    1d38:	c8 0f       	add	r28, r24
    1d3a:	d1 1d       	adc	r29, r1
    1d3c:	87 fd       	sbrc	r24, 7
    1d3e:	da 95       	dec	r29
    1d40:	e0 97       	sbiw	r28, 0x30	; 48
    1d42:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    1d46:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
    1d50:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    1d54:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    1d58:	e5 cf       	rjmp	.-54     	; 0x1d24 <_ZL9getNumberv+0x10>
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	08 95       	ret

00001d64 <_ZN15OrangutanBuzzer5init2Ev>:
    1d64:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d68:	83 e2       	ldi	r24, 0x23	; 35
    1d6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d6e:	81 e1       	ldi	r24, 0x11	; 17
    1d70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1d74:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1d78:	80 e1       	ldi	r24, 0x10	; 16
    1d7a:	97 e2       	ldi	r25, 0x27	; 39
    1d7c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d84:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1d88:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1d8c:	22 9a       	sbi	0x04, 2	; 4
    1d8e:	78 94       	sei
    1d90:	08 95       	ret

00001d92 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1d92:	8f 92       	push	r8
    1d94:	9f 92       	push	r9
    1d96:	af 92       	push	r10
    1d98:	bf 92       	push	r11
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	5c 01       	movw	r10, r24
    1daa:	8b 01       	movw	r16, r22
    1dac:	d4 2e       	mov	r13, r20
    1dae:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <buzzerInitialized>
    1db2:	81 11       	cpse	r24, r1
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <buzzerInitialized>
    1dbc:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN15OrangutanBuzzer5init2Ev>
    1dc0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1dc4:	b7 fe       	sbrs	r11, 7
    1dc6:	05 c0       	rjmp	.+10     	; 0x1dd2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1dc8:	e8 94       	clt
    1dca:	b7 f8       	bld	r11, 7
    1dcc:	2a e0       	ldi	r18, 0x0A	; 10
    1dce:	f2 2e       	mov	r15, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1dd2:	ff 24       	eor	r15, r15
    1dd4:	f3 94       	inc	r15
    1dd6:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1dda:	2e 2d       	mov	r18, r14
    1ddc:	28 7f       	andi	r18, 0xF8	; 248
    1dde:	e2 2e       	mov	r14, r18
    1de0:	48 ec       	ldi	r20, 0xC8	; 200
    1de2:	f4 9e       	mul	r15, r20
    1de4:	c0 01       	movw	r24, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	8a 15       	cp	r24, r10
    1dea:	9b 05       	cpc	r25, r11
    1dec:	e0 f4       	brcc	.+56     	; 0x1e26 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1dee:	e5 01       	movw	r28, r10
    1df0:	51 e1       	ldi	r21, 0x11	; 17
    1df2:	a5 16       	cp	r10, r21
    1df4:	57 e2       	ldi	r21, 0x27	; 39
    1df6:	b5 06       	cpc	r11, r21
    1df8:	10 f0       	brcs	.+4      	; 0x1dfe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1dfa:	c0 e1       	ldi	r28, 0x10	; 16
    1dfc:	d7 e2       	ldi	r29, 0x27	; 39
    1dfe:	be 01       	movw	r22, r28
    1e00:	76 95       	lsr	r23
    1e02:	67 95       	ror	r22
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	60 58       	subi	r22, 0x80	; 128
    1e0a:	79 46       	sbci	r23, 0x69	; 105
    1e0c:	87 46       	sbci	r24, 0x67	; 103
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	4e 01       	movw	r8, r28
    1e12:	a1 2c       	mov	r10, r1
    1e14:	b1 2c       	mov	r11, r1
    1e16:	a5 01       	movw	r20, r10
    1e18:	94 01       	movw	r18, r8
    1e1a:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    1e1e:	59 01       	movw	r10, r18
    1e20:	8e 2d       	mov	r24, r14
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	24 c0       	rjmp	.+72     	; 0x1e6e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1e26:	c8 e2       	ldi	r28, 0x28	; 40
    1e28:	fc 9e       	mul	r15, r28
    1e2a:	c0 2d       	mov	r28, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	d0 e0       	ldi	r29, 0x00	; 0
    1e30:	ca 15       	cp	r28, r10
    1e32:	db 05       	cpc	r29, r11
    1e34:	08 f4       	brcc	.+2      	; 0x1e38 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1e36:	e5 01       	movw	r28, r10
    1e38:	be 01       	movw	r22, r28
    1e3a:	76 95       	lsr	r23
    1e3c:	67 95       	ror	r22
    1e3e:	9e 01       	movw	r18, r28
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	8a e0       	ldi	r24, 0x0A	; 10
    1e46:	f8 12       	cpse	r15, r24
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	60 5e       	subi	r22, 0xE0	; 224
    1e50:	73 44       	sbci	r23, 0x43	; 67
    1e52:	81 44       	sbci	r24, 0x41	; 65
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	60 53       	subi	r22, 0x30	; 48
    1e5e:	7d 4e       	sbci	r23, 0xED	; 237
    1e60:	8c 4e       	sbci	r24, 0xEC	; 236
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    1e68:	59 01       	movw	r10, r18
    1e6a:	8e 2d       	mov	r24, r14
    1e6c:	82 60       	ori	r24, 0x02	; 2
    1e6e:	88 2e       	mov	r8, r24
    1e70:	2a e0       	ldi	r18, 0x0A	; 10
    1e72:	f2 12       	cpse	r15, r18
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1e76:	ce 01       	movw	r24, r28
    1e78:	05 96       	adiw	r24, 0x05	; 5
    1e7a:	6a e0       	ldi	r22, 0x0A	; 10
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    1e82:	eb 01       	movw	r28, r22
    1e84:	c8 3e       	cpi	r28, 0xE8	; 232
    1e86:	43 e0       	ldi	r20, 0x03	; 3
    1e88:	d4 07       	cpc	r29, r20
    1e8a:	59 f0       	breq	.+22     	; 0x1ea2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1e8c:	98 01       	movw	r18, r16
    1e8e:	de 01       	movw	r26, r28
    1e90:	0e 94 0b 18 	call	0x3016	; 0x3016 <__umulhisi3>
    1e94:	28 ee       	ldi	r18, 0xE8	; 232
    1e96:	33 e0       	ldi	r19, 0x03	; 3
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__divmodsi4>
    1ea0:	89 01       	movw	r16, r18
    1ea2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ea6:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1eaa:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1eae:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1eb2:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1eb6:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1eba:	4d 2d       	mov	r20, r13
    1ebc:	40 31       	cpi	r20, 0x10	; 16
    1ebe:	08 f0       	brcs	.+2      	; 0x1ec2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1ec0:	4f e0       	ldi	r20, 0x0F	; 15
    1ec2:	80 e1       	ldi	r24, 0x10	; 16
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	84 1b       	sub	r24, r20
    1ec8:	91 09       	sbc	r25, r1
    1eca:	a9 01       	movw	r20, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1ece:	56 95       	lsr	r21
    1ed0:	47 95       	ror	r20
    1ed2:	8a 95       	dec	r24
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1ed6:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1eda:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1ede:	10 93 84 01 	sts	0x0184, r17	; 0x800184 <_ZL13buzzerTimeout+0x1>
    1ee2:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <_ZL13buzzerTimeout>
    1ee6:	86 b3       	in	r24, 0x16	; 22
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	86 bb       	out	0x16, r24	; 22
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	bf 90       	pop	r11
    1f02:	af 90       	pop	r10
    1f04:	9f 90       	pop	r9
    1f06:	8f 90       	pop	r8
    1f08:	08 95       	ret

00001f0a <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	eb 01       	movw	r28, r22
    1f10:	8f 3f       	cpi	r24, 0xFF	; 255
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1f14:	41 11       	cpse	r20, r1
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	be 01       	movw	r22, r28
    1f1c:	88 ee       	ldi	r24, 0xE8	; 232
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	43 c0       	rjmp	.+134    	; 0x1fa8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1f22:	81 31       	cpi	r24, 0x11	; 17
    1f24:	30 f0       	brcs	.+12     	; 0x1f32 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1f26:	50 ef       	ldi	r21, 0xF0	; 240
    1f28:	58 0f       	add	r21, r24
    1f2a:	50 36       	cpi	r21, 0x60	; 96
    1f2c:	18 f0       	brcs	.+6      	; 0x1f34 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1f2e:	5f e5       	ldi	r21, 0x5F	; 95
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	85 2f       	mov	r24, r21
    1f36:	6c e0       	ldi	r22, 0x0C	; 12
    1f38:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__udivmodqi4>
    1f3c:	68 2f       	mov	r22, r24
    1f3e:	74 ef       	ldi	r23, 0xF4	; 244
    1f40:	76 03       	mulsu	r23, r22
    1f42:	90 01       	movw	r18, r0
    1f44:	11 24       	eor	r1, r1
    1f46:	25 0f       	add	r18, r21
    1f48:	31 1d       	adc	r19, r1
    1f4a:	2c 30       	cpi	r18, 0x0C	; 12
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	40 f4       	brcc	.+16     	; 0x1f60 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1f50:	f9 01       	movw	r30, r18
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	ec 5c       	subi	r30, 0xCC	; 204
    1f58:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5a:	20 81       	ld	r18, Z
    1f5c:	31 81       	ldd	r19, Z+1	; 0x01
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	87 30       	cpi	r24, 0x07	; 7
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1f68:	08 2e       	mov	r0, r24
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1f6c:	22 0f       	add	r18, r18
    1f6e:	33 1f       	adc	r19, r19
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	28 f0       	brcs	.+10     	; 0x1f82 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1f78:	c9 01       	movw	r24, r18
    1f7a:	05 96       	adiw	r24, 0x05	; 5
    1f7c:	6a e0       	ldi	r22, 0x0A	; 10
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	0c c0       	rjmp	.+24     	; 0x1f9a <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1f82:	c9 01       	movw	r24, r18
    1f84:	90 58       	subi	r25, 0x80	; 128
    1f86:	0c c0       	rjmp	.+24     	; 0x1fa0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1f88:	c9 01       	movw	r24, r18
    1f8a:	36 e0       	ldi	r19, 0x06	; 6
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	3a 95       	dec	r19
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1f94:	02 96       	adiw	r24, 0x02	; 2
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	40 31       	cpi	r20, 0x10	; 16
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1fa4:	4f e0       	ldi	r20, 0x0F	; 15
    1fa6:	be 01       	movw	r22, r28
    1fa8:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <_ZL8nextNotev>:
    1fb2:	a2 e0       	ldi	r26, 0x02	; 2
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	ef ed       	ldi	r30, 0xDF	; 223
    1fb8:	ff e0       	ldi	r31, 0x0F	; 15
    1fba:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x4>
    1fbe:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1fc2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL8staccato>
    1fc6:	88 23       	and	r24, r24
    1fc8:	21 f0       	breq	.+8      	; 0x1fd2 <_ZL8nextNotev+0x20>
    1fca:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <_ZL22staccato_rest_duration>
    1fce:	61 11       	cpse	r22, r1
    1fd0:	17 c0       	rjmp	.+46     	; 0x2000 <_ZL8nextNotev+0x4e>
    1fd2:	77 24       	eor	r7, r7
    1fd4:	73 94       	inc	r7
    1fd6:	b0 ec       	ldi	r27, 0xC0	; 192
    1fd8:	ab 2e       	mov	r10, r27
    1fda:	bd e5       	ldi	r27, 0x5D	; 93
    1fdc:	bb 2e       	mov	r11, r27
    1fde:	1a e0       	ldi	r17, 0x0A	; 10
    1fe0:	61 2e       	mov	r6, r17
    1fe2:	04 e0       	ldi	r16, 0x04	; 4
    1fe4:	80 2e       	mov	r8, r16
    1fe6:	80 ed       	ldi	r24, 0xD0	; 208
    1fe8:	c8 2e       	mov	r12, r24
    1fea:	87 e0       	ldi	r24, 0x07	; 7
    1fec:	d8 2e       	mov	r13, r24
    1fee:	94 e0       	ldi	r25, 0x04	; 4
    1ff0:	e9 2e       	mov	r14, r25
    1ff2:	f1 2c       	mov	r15, r1
    1ff4:	04 ef       	ldi	r16, 0xF4	; 244
    1ff6:	11 e0       	ldi	r17, 0x01	; 1
    1ff8:	2f e0       	ldi	r18, 0x0F	; 15
    1ffa:	42 2e       	mov	r4, r18
    1ffc:	51 2c       	mov	r5, r1
    1ffe:	15 c0       	rjmp	.+42     	; 0x202a <_ZL8nextNotev+0x78>
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	88 ee       	ldi	r24, 0xE8	; 232
    2006:	93 e0       	ldi	r25, 0x03	; 3
    2008:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    200c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    2010:	17 c1       	rjmp	.+558    	; 0x2240 <_ZL8nextNotev+0x28e>
    2012:	86 36       	cpi	r24, 0x66	; 102
    2014:	d4 f5       	brge	.+116    	; 0x208a <_ZL8nextNotev+0xd8>
    2016:	81 36       	cpi	r24, 0x61	; 97
    2018:	09 f4       	brne	.+2      	; 0x201c <_ZL8nextNotev+0x6a>
    201a:	a9 c0       	rjmp	.+338    	; 0x216e <_ZL8nextNotev+0x1bc>
    201c:	7c f5       	brge	.+94     	; 0x207c <_ZL8nextNotev+0xca>
    201e:	8c 33       	cpi	r24, 0x3C	; 60
    2020:	09 f4       	brne	.+2      	; 0x2024 <_ZL8nextNotev+0x72>
    2022:	60 c0       	rjmp	.+192    	; 0x20e4 <_ZL8nextNotev+0x132>
    2024:	8e 33       	cpi	r24, 0x3E	; 62
    2026:	81 f4       	brne	.+32     	; 0x2048 <_ZL8nextNotev+0x96>
    2028:	93 94       	inc	r9
    202a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    202e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    2032:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    2036:	2f 5f       	subi	r18, 0xFF	; 255
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    203e:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    2042:	85 36       	cpi	r24, 0x65	; 101
    2044:	31 f7       	brne	.-52     	; 0x2012 <_ZL8nextNotev+0x60>
    2046:	52 c0       	rjmp	.+164    	; 0x20ec <_ZL8nextNotev+0x13a>
    2048:	81 32       	cpi	r24, 0x21	; 33
    204a:	09 f0       	breq	.+2      	; 0x204e <_ZL8nextNotev+0x9c>
    204c:	8b c0       	rjmp	.+278    	; 0x2164 <_ZL8nextNotev+0x1b2>
    204e:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    2052:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    2056:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    205a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    205e:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    2062:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    2066:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    206a:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    206e:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    2072:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_ZL8staccato>
    2076:	a4 e0       	ldi	r26, 0x04	; 4
    2078:	9a 2e       	mov	r9, r26
    207a:	d7 cf       	rjmp	.-82     	; 0x202a <_ZL8nextNotev+0x78>
    207c:	83 36       	cpi	r24, 0x63	; 99
    207e:	a1 f1       	breq	.+104    	; 0x20e8 <_ZL8nextNotev+0x136>
    2080:	0c f4       	brge	.+2      	; 0x2084 <_ZL8nextNotev+0xd2>
    2082:	78 c0       	rjmp	.+240    	; 0x2174 <_ZL8nextNotev+0x1c2>
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	77 c0       	rjmp	.+238    	; 0x2178 <_ZL8nextNotev+0x1c6>
    208a:	8d 36       	cpi	r24, 0x6D	; 109
    208c:	c1 f1       	breq	.+112    	; 0x20fe <_ZL8nextNotev+0x14c>
    208e:	94 f4       	brge	.+36     	; 0x20b4 <_ZL8nextNotev+0x102>
    2090:	87 36       	cpi	r24, 0x67	; 103
    2092:	91 f1       	breq	.+100    	; 0x20f8 <_ZL8nextNotev+0x146>
    2094:	74 f1       	brlt	.+92     	; 0x20f2 <_ZL8nextNotev+0x140>
    2096:	8c 36       	cpi	r24, 0x6C	; 108
    2098:	09 f0       	breq	.+2      	; 0x209c <_ZL8nextNotev+0xea>
    209a:	64 c0       	rjmp	.+200    	; 0x2164 <_ZL8nextNotev+0x1b2>
    209c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZL9getNumberv>
    20a0:	bc 01       	movw	r22, r24
    20a2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    20a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    20aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    20ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    20b2:	51 c0       	rjmp	.+162    	; 0x2156 <_ZL8nextNotev+0x1a4>
    20b4:	82 37       	cpi	r24, 0x72	; 114
    20b6:	c9 f1       	breq	.+114    	; 0x212a <_ZL8nextNotev+0x178>
    20b8:	4c f4       	brge	.+18     	; 0x20cc <_ZL8nextNotev+0x11a>
    20ba:	8f 36       	cpi	r24, 0x6F	; 111
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <_ZL8nextNotev+0x10e>
    20be:	52 c0       	rjmp	.+164    	; 0x2164 <_ZL8nextNotev+0x1b2>
    20c0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZL9getNumberv>
    20c4:	98 2e       	mov	r9, r24
    20c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    20ca:	af cf       	rjmp	.-162    	; 0x202a <_ZL8nextNotev+0x78>
    20cc:	84 37       	cpi	r24, 0x74	; 116
    20ce:	81 f1       	breq	.+96     	; 0x2130 <_ZL8nextNotev+0x17e>
    20d0:	86 37       	cpi	r24, 0x76	; 118
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <_ZL8nextNotev+0x124>
    20d4:	47 c0       	rjmp	.+142    	; 0x2164 <_ZL8nextNotev+0x1b2>
    20d6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZL9getNumberv>
    20da:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    20de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    20e2:	a3 cf       	rjmp	.-186    	; 0x202a <_ZL8nextNotev+0x78>
    20e4:	9a 94       	dec	r9
    20e6:	a1 cf       	rjmp	.-190    	; 0x202a <_ZL8nextNotev+0x78>
    20e8:	10 e0       	ldi	r17, 0x00	; 0
    20ea:	20 c0       	rjmp	.+64     	; 0x212c <_ZL8nextNotev+0x17a>
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	84 e0       	ldi	r24, 0x04	; 4
    20f0:	43 c0       	rjmp	.+134    	; 0x2178 <_ZL8nextNotev+0x1c6>
    20f2:	10 e0       	ldi	r17, 0x00	; 0
    20f4:	85 e0       	ldi	r24, 0x05	; 5
    20f6:	40 c0       	rjmp	.+128    	; 0x2178 <_ZL8nextNotev+0x1c6>
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	87 e0       	ldi	r24, 0x07	; 7
    20fc:	3d c0       	rjmp	.+122    	; 0x2178 <_ZL8nextNotev+0x1c6>
    20fe:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    2102:	8c 36       	cpi	r24, 0x6C	; 108
    2104:	19 f4       	brne	.+6      	; 0x210c <_ZL8nextNotev+0x15a>
    2106:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_ZL8staccato>
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <_ZL8nextNotev+0x162>
    210c:	70 92 80 01 	sts	0x0180, r7	; 0x800180 <_ZL8staccato>
    2110:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    2114:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    2118:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    211c:	2f 5f       	subi	r18, 0xFF	; 255
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    2124:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    2128:	80 cf       	rjmp	.-256    	; 0x202a <_ZL8nextNotev+0x78>
    212a:	11 e0       	ldi	r17, 0x01	; 1
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	24 c0       	rjmp	.+72     	; 0x2178 <_ZL8nextNotev+0x1c6>
    2130:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZL9getNumberv>
    2134:	bc 01       	movw	r22, r24
    2136:	c5 01       	movw	r24, r10
    2138:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    213c:	66 9e       	mul	r6, r22
    213e:	c0 01       	movw	r24, r0
    2140:	67 9e       	mul	r6, r23
    2142:	90 0d       	add	r25, r0
    2144:	11 24       	eor	r1, r1
    2146:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    214a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    214e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    2152:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    2156:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    215a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    215e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    2162:	63 cf       	rjmp	.-314    	; 0x202a <_ZL8nextNotev+0x78>
    2164:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <__data_end+0x1>
    2168:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
    216c:	69 c0       	rjmp	.+210    	; 0x2240 <_ZL8nextNotev+0x28e>
    216e:	10 e0       	ldi	r17, 0x00	; 0
    2170:	89 e0       	ldi	r24, 0x09	; 9
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <_ZL8nextNotev+0x1c6>
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	8b e0       	ldi	r24, 0x0B	; 11
    2178:	08 2f       	mov	r16, r24
    217a:	9c e0       	ldi	r25, 0x0C	; 12
    217c:	99 9e       	mul	r9, r25
    217e:	00 0d       	add	r16, r0
    2180:	11 24       	eor	r1, r1
    2182:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    2186:	98 2f       	mov	r25, r24
    2188:	97 7f       	andi	r25, 0xF7	; 247
    218a:	93 32       	cpi	r25, 0x23	; 35
    218c:	61 f4       	brne	.+24     	; 0x21a6 <_ZL8nextNotev+0x1f4>
    218e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    2192:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    2196:	2f 5f       	subi	r18, 0xFF	; 255
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    219e:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    21a2:	0f 5f       	subi	r16, 0xFF	; 255
    21a4:	ee cf       	rjmp	.-36     	; 0x2182 <_ZL8nextNotev+0x1d0>
    21a6:	8d 32       	cpi	r24, 0x2D	; 45
    21a8:	71 f4       	brne	.+28     	; 0x21c6 <_ZL8nextNotev+0x214>
    21aa:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    21ae:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    21b2:	2f 5f       	subi	r18, 0xFF	; 255
    21b4:	3f 4f       	sbci	r19, 0xFF	; 255
    21b6:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    21ba:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    21be:	01 50       	subi	r16, 0x01	; 1
    21c0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    21c4:	f0 cf       	rjmp	.-32     	; 0x21a6 <_ZL8nextNotev+0x1f4>
    21c6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    21ca:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    21ce:	81 53       	subi	r24, 0x31	; 49
    21d0:	88 30       	cpi	r24, 0x08	; 8
    21d2:	50 f4       	brcc	.+20     	; 0x21e8 <_ZL8nextNotev+0x236>
    21d4:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    21d8:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    21dc:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZL9getNumberv>
    21e0:	bc 01       	movw	r22, r24
    21e2:	c7 01       	movw	r24, r14
    21e4:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    21e8:	7b 01       	movw	r14, r22
    21ea:	f6 94       	lsr	r15
    21ec:	e7 94       	ror	r14
    21ee:	69 83       	std	Y+1, r22	; 0x01
    21f0:	7a 83       	std	Y+2, r23	; 0x02
    21f2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZL16currentCharacterv>
    21f6:	69 81       	ldd	r22, Y+1	; 0x01
    21f8:	7a 81       	ldd	r23, Y+2	; 0x02
    21fa:	8e 32       	cpi	r24, 0x2E	; 46
    21fc:	69 f4       	brne	.+26     	; 0x2218 <_ZL8nextNotev+0x266>
    21fe:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    2202:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    2206:	2f 5f       	subi	r18, 0xFF	; 255
    2208:	3f 4f       	sbci	r19, 0xFF	; 255
    220a:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    220e:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    2212:	6e 0d       	add	r22, r14
    2214:	7f 1d       	adc	r23, r15
    2216:	e9 cf       	rjmp	.-46     	; 0x21ea <_ZL8nextNotev+0x238>
    2218:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL8staccato>
    221c:	88 23       	and	r24, r24
    221e:	39 f0       	breq	.+14     	; 0x222e <_ZL8nextNotev+0x27c>
    2220:	9b 01       	movw	r18, r22
    2222:	36 95       	lsr	r19
    2224:	27 95       	ror	r18
    2226:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <_ZL22staccato_rest_duration>
    222a:	62 1b       	sub	r22, r18
    222c:	71 09       	sbc	r23, r1
    222e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    2232:	11 23       	and	r17, r17
    2234:	11 f0       	breq	.+4      	; 0x223a <_ZL8nextNotev+0x288>
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	01 c0       	rjmp	.+2      	; 0x223c <_ZL8nextNotev+0x28a>
    223a:	80 2f       	mov	r24, r16
    223c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN15OrangutanBuzzer8playNoteEhjh>
    2240:	22 96       	adiw	r28, 0x02	; 2
    2242:	e0 e1       	ldi	r30, 0x10	; 16
    2244:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x4>

00002248 <__vector_13>:
    2248:	1f 92       	push	r1
    224a:	0f 92       	push	r0
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	0f 92       	push	r0
    2250:	11 24       	eor	r1, r1
    2252:	2f 93       	push	r18
    2254:	3f 93       	push	r19
    2256:	4f 93       	push	r20
    2258:	5f 93       	push	r21
    225a:	6f 93       	push	r22
    225c:	7f 93       	push	r23
    225e:	8f 93       	push	r24
    2260:	9f 93       	push	r25
    2262:	af 93       	push	r26
    2264:	bf 93       	push	r27
    2266:	ef 93       	push	r30
    2268:	ff 93       	push	r31
    226a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <_ZL13buzzerTimeout>
    226e:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <_ZL13buzzerTimeout+0x1>
    2272:	9c 01       	movw	r18, r24
    2274:	21 50       	subi	r18, 0x01	; 1
    2276:	31 09       	sbc	r19, r1
    2278:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <_ZL13buzzerTimeout+0x1>
    227c:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <_ZL13buzzerTimeout>
    2280:	89 2b       	or	r24, r25
    2282:	11 f5       	brne	.+68     	; 0x22c8 <__vector_13+0x80>
    2284:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2288:	78 94       	sei
    228a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    228e:	88 7f       	andi	r24, 0xF8	; 248
    2290:	81 60       	ori	r24, 0x01	; 1
    2292:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2296:	80 e1       	ldi	r24, 0x10	; 16
    2298:	97 e2       	ldi	r25, 0x27	; 39
    229a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    229e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    22a2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    22a6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    22b0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    22b4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
    22b8:	89 2b       	or	r24, r25
    22ba:	31 f0       	breq	.+12     	; 0x22c8 <__vector_13+0x80>
    22bc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL17play_mode_setting>
    22c0:	81 11       	cpse	r24, r1
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <__vector_13+0x80>
    22c4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZL8nextNotev>
    22c8:	ff 91       	pop	r31
    22ca:	ef 91       	pop	r30
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <_ZN15OrangutanBuzzer4playEPKc>:
    22ea:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    22ee:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
    22f2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    22f6:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL17use_program_space>
    22fa:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    22fe:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZL8nextNotev>
    2302:	08 95       	ret

00002304 <play>:
    2304:	0e 94 75 11 	call	0x22ea	; 0x22ea <_ZN15OrangutanBuzzer4playEPKc>
    2308:	08 95       	ret

0000230a <delay_us.constprop.0>:
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	6f 93       	push	r22
    2310:	64 e0       	ldi	r22, 0x04	; 4
    2312:	6a 95       	dec	r22
    2314:	f1 f7       	brne	.-4      	; 0x2312 <delay_us.constprop.0+0x8>
    2316:	6f 91       	pop	r22
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	c9 f7       	brne	.-14     	; 0x230e <delay_us.constprop.0+0x4>
    231c:	08 95       	ret

0000231e <_ZN12OrangutanLCD8busyWaitEv>:
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	1a b1       	in	r17, 0x0a	; 10
    2328:	57 98       	cbi	0x0a, 7	; 10
    232a:	5a 98       	cbi	0x0b, 2	; 11
    232c:	28 9a       	sbi	0x05, 0	; 5
    232e:	c0 e0       	ldi	r28, 0x00	; 0
    2330:	d0 e0       	ldi	r29, 0x00	; 0
    2332:	0e 94 85 11 	call	0x230a	; 0x230a <delay_us.constprop.0>
    2336:	5c 9a       	sbi	0x0b, 4	; 11
    2338:	0e 94 85 11 	call	0x230a	; 0x230a <delay_us.constprop.0>
    233c:	09 b1       	in	r16, 0x09	; 9
    233e:	5c 98       	cbi	0x0b, 4	; 11
    2340:	0e 94 85 11 	call	0x230a	; 0x230a <delay_us.constprop.0>
    2344:	5c 9a       	sbi	0x0b, 4	; 11
    2346:	0e 94 85 11 	call	0x230a	; 0x230a <delay_us.constprop.0>
    234a:	5c 98       	cbi	0x0b, 4	; 11
    234c:	24 96       	adiw	r28, 0x04	; 4
    234e:	07 ff       	sbrs	r16, 7
    2350:	10 c0       	rjmp	.+32     	; 0x2372 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2352:	ae 01       	movw	r20, r28
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <lcdTimeout>
    235c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <lcdTimeout+0x1>
    2360:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <lcdTimeout+0x2>
    2364:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <lcdTimeout+0x3>
    2368:	48 17       	cp	r20, r24
    236a:	59 07       	cpc	r21, r25
    236c:	6a 07       	cpc	r22, r26
    236e:	7b 07       	cpc	r23, r27
    2370:	00 f3       	brcs	.-64     	; 0x2332 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    2372:	1a b9       	out	0x0a, r17	; 10
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	08 95       	ret

0000237e <_ZN12OrangutanLCD8sendDataEh>:
    237e:	95 b1       	in	r25, 0x05	; 5
    2380:	28 2f       	mov	r18, r24
    2382:	21 70       	andi	r18, 0x01	; 1
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	22 0f       	add	r18, r18
    2388:	33 1f       	adc	r19, r19
    238a:	48 2f       	mov	r20, r24
    238c:	46 70       	andi	r20, 0x06	; 6
    238e:	68 e0       	ldi	r22, 0x08	; 8
    2390:	46 9f       	mul	r20, r22
    2392:	a0 01       	movw	r20, r0
    2394:	11 24       	eor	r1, r1
    2396:	24 2b       	or	r18, r20
    2398:	9d 7c       	andi	r25, 0xCD	; 205
    239a:	29 2b       	or	r18, r25
    239c:	25 b9       	out	0x05, r18	; 5
    239e:	9b b1       	in	r25, 0x0b	; 11
    23a0:	88 70       	andi	r24, 0x08	; 8
    23a2:	82 95       	swap	r24
    23a4:	80 7f       	andi	r24, 0xF0	; 240
    23a6:	9f 77       	andi	r25, 0x7F	; 127
    23a8:	89 2b       	or	r24, r25
    23aa:	8b b9       	out	0x0b, r24	; 11
    23ac:	5c 9a       	sbi	0x0b, 4	; 11
    23ae:	0e 94 85 11 	call	0x230a	; 0x230a <delay_us.constprop.0>
    23b2:	5c 98       	cbi	0x0b, 4	; 11
    23b4:	0e 94 85 11 	call	0x230a	; 0x230a <delay_us.constprop.0>
    23b8:	08 95       	ret

000023ba <_ZN12OrangutanLCD4sendEhhh>:
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e3 ee       	ldi	r30, 0xE3	; 227
    23c0:	f1 e1       	ldi	r31, 0x11	; 17
    23c2:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x16>
    23c6:	c8 2f       	mov	r28, r24
    23c8:	d6 2e       	mov	r13, r22
    23ca:	e4 2e       	mov	r14, r20
    23cc:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZZN12OrangutanLCD4initEvE11initialized>
    23d0:	81 11       	cpse	r24, r1
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <_ZN12OrangutanLCD4sendEhhh+0x24>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <_ZZN12OrangutanLCD4initEvE11initialized>
    23da:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN12OrangutanLCD5init2Ev>
    23de:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZN12OrangutanLCD8busyWaitEv>
    23e2:	14 b1       	in	r17, 0x04	; 4
    23e4:	d5 b1       	in	r29, 0x05	; 5
    23e6:	fa b0       	in	r15, 0x0a	; 10
    23e8:	0b b1       	in	r16, 0x0b	; 11
    23ea:	28 98       	cbi	0x05, 0	; 5
    23ec:	dd 20       	and	r13, r13
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    23f0:	5a 9a       	sbi	0x0b, 2	; 11
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    23f4:	5a 98       	cbi	0x0b, 2	; 11
    23f6:	94 b1       	in	r25, 0x04	; 4
    23f8:	92 63       	ori	r25, 0x32	; 50
    23fa:	94 b9       	out	0x04, r25	; 4
    23fc:	57 9a       	sbi	0x0a, 7	; 10
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	e8 16       	cp	r14, r24
    2402:	29 f0       	breq	.+10     	; 0x240e <_ZN12OrangutanLCD4sendEhhh+0x54>
    2404:	8c 2f       	mov	r24, r28
    2406:	82 95       	swap	r24
    2408:	8f 70       	andi	r24, 0x0F	; 15
    240a:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN12OrangutanLCD8sendDataEh>
    240e:	8c 2f       	mov	r24, r28
    2410:	8f 70       	andi	r24, 0x0F	; 15
    2412:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN12OrangutanLCD8sendDataEh>
    2416:	fa b8       	out	0x0a, r15	; 10
    2418:	0b b9       	out	0x0b, r16	; 11
    241a:	14 b9       	out	0x04, r17	; 4
    241c:	d5 b9       	out	0x05, r29	; 5
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	e7 e0       	ldi	r30, 0x07	; 7
    2424:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x16>

00002428 <_ZN12OrangutanLCD8send_cmdEh>:
    2428:	42 e0       	ldi	r20, 0x02	; 2
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_ZN12OrangutanLCD4sendEhhh>
    2430:	08 95       	ret

00002432 <_ZN12OrangutanLCD9send_dataEh>:
    2432:	42 e0       	ldi	r20, 0x02	; 2
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_ZN12OrangutanLCD4sendEhhh>
    243a:	08 95       	ret

0000243c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_ZN12OrangutanLCD4sendEhhh>
    2444:	08 95       	ret

00002446 <_ZN12OrangutanLCD5init2Ev>:
    2446:	80 e1       	ldi	r24, 0x10	; 16
    2448:	97 e2       	ldi	r25, 0x27	; 39
    244a:	a0 e0       	ldi	r26, 0x00	; 0
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <lcdTimeout>
    2452:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <lcdTimeout+0x1>
    2456:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <lcdTimeout+0x2>
    245a:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <lcdTimeout+0x3>
    245e:	52 9a       	sbi	0x0a, 2	; 10
    2460:	20 9a       	sbi	0x04, 0	; 4
    2462:	54 9a       	sbi	0x0a, 4	; 10
    2464:	8e e1       	ldi	r24, 0x1E	; 30
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2472:	86 e0       	ldi	r24, 0x06	; 6
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
    24a4:	88 e2       	ldi	r24, 0x28	; 40
    24a6:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    24aa:	88 e0       	ldi	r24, 0x08	; 8
    24ac:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    24b6:	86 e0       	ldi	r24, 0x06	; 6
    24b8:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    24bc:	8c e0       	ldi	r24, 0x0C	; 12
    24be:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    24c2:	08 95       	ret

000024c4 <_ZN12OrangutanLCD5clearEv>:
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    24ca:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <printf_chars>
    24ce:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <printf_chars+0x1>
    24d2:	89 2b       	or	r24, r25
    24d4:	f9 f0       	breq	.+62     	; 0x2514 <_ZN12OrangutanLCD5clearEv+0x50>
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	a0 e2       	ldi	r26, 0x20	; 32
    24da:	26 2f       	mov	r18, r22
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    24e2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	78 9f       	mul	r23, r24
    24ec:	a0 01       	movw	r20, r0
    24ee:	79 9f       	mul	r23, r25
    24f0:	50 0d       	add	r21, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	24 17       	cp	r18, r20
    24f6:	35 07       	cpc	r19, r21
    24f8:	4c f4       	brge	.+18     	; 0x250c <_ZN12OrangutanLCD5clearEv+0x48>
    24fa:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <printf_chars>
    24fe:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <printf_chars+0x1>
    2502:	e2 0f       	add	r30, r18
    2504:	f3 1f       	adc	r31, r19
    2506:	a0 83       	st	Z, r26
    2508:	6f 5f       	subi	r22, 0xFF	; 255
    250a:	e7 cf       	rjmp	.-50     	; 0x24da <_ZN12OrangutanLCD5clearEv+0x16>
    250c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <col>
    2510:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <row>
    2514:	08 95       	ret

00002516 <clear>:
    2516:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN12OrangutanLCD5clearEv>
    251a:	08 95       	ret

0000251c <_ZN12OrangutanLCD5printEPKc>:
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	ec 01       	movw	r28, r24
    2522:	89 91       	ld	r24, Y+
    2524:	88 23       	and	r24, r24
    2526:	19 f0       	breq	.+6      	; 0x252e <_ZN12OrangutanLCD5printEPKc+0x12>
    2528:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN12OrangutanLCD9send_dataEh>
    252c:	fa cf       	rjmp	.-12     	; 0x2522 <_ZN12OrangutanLCD5printEPKc+0x6>
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

00002534 <print>:
    2534:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN12OrangutanLCD5printEPKc>
    2538:	08 95       	ret

0000253a <_ZN12OrangutanLCD5printEm>:
    253a:	aa e0       	ldi	r26, 0x0A	; 10
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e3 ea       	ldi	r30, 0xA3	; 163
    2540:	f2 e1       	ldi	r31, 0x12	; 18
    2542:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__prologue_saves__+0x14>
    2546:	1a e0       	ldi	r17, 0x0A	; 10
    2548:	5a e0       	ldi	r21, 0x0A	; 10
    254a:	c5 2e       	mov	r12, r21
    254c:	d1 2c       	mov	r13, r1
    254e:	e1 2c       	mov	r14, r1
    2550:	f1 2c       	mov	r15, r1
    2552:	06 2f       	mov	r16, r22
    2554:	a7 01       	movw	r20, r14
    2556:	96 01       	movw	r18, r12
    2558:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    255c:	ca 01       	movw	r24, r20
    255e:	b9 01       	movw	r22, r18
    2560:	11 50       	subi	r17, 0x01	; 1
    2562:	e1 e0       	ldi	r30, 0x01	; 1
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	ec 0f       	add	r30, r28
    2568:	fd 1f       	adc	r31, r29
    256a:	e1 0f       	add	r30, r17
    256c:	f1 1d       	adc	r31, r1
    256e:	00 5d       	subi	r16, 0xD0	; 208
    2570:	2a e0       	ldi	r18, 0x0A	; 10
    2572:	62 9f       	mul	r22, r18
    2574:	00 19       	sub	r16, r0
    2576:	11 24       	eor	r1, r1
    2578:	00 83       	st	Z, r16
    257a:	61 15       	cp	r22, r1
    257c:	71 05       	cpc	r23, r1
    257e:	81 05       	cpc	r24, r1
    2580:	91 05       	cpc	r25, r1
    2582:	39 f7       	brne	.-50     	; 0x2552 <_ZN12OrangutanLCD5printEm+0x18>
    2584:	1a 30       	cpi	r17, 0x0A	; 10
    2586:	58 f4       	brcc	.+22     	; 0x259e <_ZN12OrangutanLCD5printEm+0x64>
    2588:	e1 e0       	ldi	r30, 0x01	; 1
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	ec 0f       	add	r30, r28
    258e:	fd 1f       	adc	r31, r29
    2590:	e1 0f       	add	r30, r17
    2592:	f1 1d       	adc	r31, r1
    2594:	80 81       	ld	r24, Z
    2596:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN12OrangutanLCD9send_dataEh>
    259a:	1f 5f       	subi	r17, 0xFF	; 255
    259c:	f3 cf       	rjmp	.-26     	; 0x2584 <_ZN12OrangutanLCD5printEm+0x4a>
    259e:	2a 96       	adiw	r28, 0x0a	; 10
    25a0:	e8 e0       	ldi	r30, 0x08	; 8
    25a2:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__epilogue_restores__+0x14>

000025a6 <_ZN12OrangutanLCD5printEl>:
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	6b 01       	movw	r12, r22
    25b0:	7c 01       	movw	r14, r24
    25b2:	97 ff       	sbrs	r25, 7
    25b4:	0b c0       	rjmp	.+22     	; 0x25cc <_ZN12OrangutanLCD5printEl+0x26>
    25b6:	f0 94       	com	r15
    25b8:	e0 94       	com	r14
    25ba:	d0 94       	com	r13
    25bc:	c0 94       	com	r12
    25be:	c1 1c       	adc	r12, r1
    25c0:	d1 1c       	adc	r13, r1
    25c2:	e1 1c       	adc	r14, r1
    25c4:	f1 1c       	adc	r15, r1
    25c6:	8d e2       	ldi	r24, 0x2D	; 45
    25c8:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN12OrangutanLCD9send_dataEh>
    25cc:	c7 01       	movw	r24, r14
    25ce:	b6 01       	movw	r22, r12
    25d0:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN12OrangutanLCD5printEm>
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	df 90       	pop	r13
    25da:	cf 90       	pop	r12
    25dc:	08 95       	ret

000025de <print_long>:
    25de:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_ZN12OrangutanLCD5printEl>
    25e2:	08 95       	ret

000025e4 <_ZN12OrangutanLCD6gotoXYEhh>:
    25e4:	a5 e0       	ldi	r26, 0x05	; 5
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e8 ef       	ldi	r30, 0xF8	; 248
    25ea:	f2 e1       	ldi	r31, 0x12	; 18
    25ec:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x1e>
    25f0:	18 2f       	mov	r17, r24
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	80 ec       	ldi	r24, 0xC0	; 192
    25f8:	8a 83       	std	Y+2, r24	; 0x02
    25fa:	84 e9       	ldi	r24, 0x94	; 148
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	84 ed       	ldi	r24, 0xD4	; 212
    2600:	8c 83       	std	Y+4, r24	; 0x04
    2602:	fe 01       	movw	r30, r28
    2604:	e6 0f       	add	r30, r22
    2606:	f1 1d       	adc	r31, r1
    2608:	81 81       	ldd	r24, Z+1	; 0x01
    260a:	81 0f       	add	r24, r17
    260c:	6d 83       	std	Y+5, r22	; 0x05
    260e:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8send_cmdEh>
    2612:	10 93 89 01 	sts	0x0189, r17	; 0x800189 <col>
    2616:	6d 81       	ldd	r22, Y+5	; 0x05
    2618:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <row>
    261c:	25 96       	adiw	r28, 0x05	; 5
    261e:	e3 e0       	ldi	r30, 0x03	; 3
    2620:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x1e>

00002624 <lcd_goto_xy>:
    2624:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN12OrangutanLCD6gotoXYEhh>
    2628:	08 95       	ret

0000262a <_ZN16OrangutanDigital9setOutputEhh>:
    262a:	88 30       	cpi	r24, 0x08	; 8
    262c:	58 f4       	brcc	.+22     	; 0x2644 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    262e:	91 e0       	ldi	r25, 0x01	; 1
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2632:	99 0f       	add	r25, r25
    2634:	8a 95       	dec	r24
    2636:	ea f7       	brpl	.-6      	; 0x2632 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2638:	89 2f       	mov	r24, r25
    263a:	aa e2       	ldi	r26, 0x2A	; 42
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	eb e2       	ldi	r30, 0x2B	; 43
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	21 c0       	rjmp	.+66     	; 0x2686 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2644:	8e 30       	cpi	r24, 0x0E	; 14
    2646:	60 f4       	brcc	.+24     	; 0x2660 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2648:	98 ef       	ldi	r25, 0xF8	; 248
    264a:	98 0f       	add	r25, r24
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2650:	88 0f       	add	r24, r24
    2652:	9a 95       	dec	r25
    2654:	ea f7       	brpl	.-6      	; 0x2650 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    2656:	a4 e2       	ldi	r26, 0x24	; 36
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e5 e2       	ldi	r30, 0x25	; 37
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	13 c0       	rjmp	.+38     	; 0x2686 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2660:	85 31       	cpi	r24, 0x15	; 21
    2662:	60 f4       	brcc	.+24     	; 0x267c <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2664:	92 ef       	ldi	r25, 0xF2	; 242
    2666:	98 0f       	add	r25, r24
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	01 c0       	rjmp	.+2      	; 0x266e <_ZN16OrangutanDigital9setOutputEhh+0x44>
    266c:	88 0f       	add	r24, r24
    266e:	9a 95       	dec	r25
    2670:	ea f7       	brpl	.-6      	; 0x266c <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2672:	a7 e2       	ldi	r26, 0x27	; 39
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e8 e2       	ldi	r30, 0x28	; 40
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e0 e0       	ldi	r30, 0x00	; 0
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	6f 3f       	cpi	r22, 0xFF	; 255
    2688:	19 f4       	brne	.+6      	; 0x2690 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    268a:	90 81       	ld	r25, Z
    268c:	98 27       	eor	r25, r24
    268e:	09 c0       	rjmp	.+18     	; 0x26a2 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2690:	66 23       	and	r22, r22
    2692:	19 f0       	breq	.+6      	; 0x269a <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2694:	90 81       	ld	r25, Z
    2696:	98 2b       	or	r25, r24
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    269a:	20 81       	ld	r18, Z
    269c:	98 2f       	mov	r25, r24
    269e:	90 95       	com	r25
    26a0:	92 23       	and	r25, r18
    26a2:	90 83       	st	Z, r25
    26a4:	9c 91       	ld	r25, X
    26a6:	98 2b       	or	r25, r24
    26a8:	9c 93       	st	X, r25
    26aa:	08 95       	ret

000026ac <_ZN15OrangutanMotors5init2Ev>:
    26ac:	83 ef       	ldi	r24, 0xF3	; 243
    26ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26b2:	84 bd       	out	0x24, r24	; 36
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26ba:	85 bd       	out	0x25, r24	; 37
    26bc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    26c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    26c4:	18 bc       	out	0x28, r1	; 40
    26c6:	17 bc       	out	0x27, r1	; 39
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	86 e0       	ldi	r24, 0x06	; 6
    26cc:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN16OrangutanDigital9setOutputEhh>
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	85 e0       	ldi	r24, 0x05	; 5
    26d4:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN16OrangutanDigital9setOutputEhh>
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	8b e0       	ldi	r24, 0x0B	; 11
    26dc:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN16OrangutanDigital9setOutputEhh>
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN16OrangutanDigital9setOutputEhh>
    26e8:	08 95       	ret

000026ea <_ZN15OrangutanMotors4initEv>:
    26ea:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZZN15OrangutanMotors4initEvE11initialized>
    26ee:	81 11       	cpse	r24, r1
    26f0:	05 c0       	rjmp	.+10     	; 0x26fc <_ZN15OrangutanMotors4initEv+0x12>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <_ZZN15OrangutanMotors4initEvE11initialized>
    26f8:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN15OrangutanMotors5init2Ev>
    26fc:	08 95       	ret

000026fe <_ZN15OrangutanMotors10setM1SpeedEi>:
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	ec 01       	movw	r28, r24
    2704:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN15OrangutanMotors4initEv>
    2708:	d7 ff       	sbrs	r29, 7
    270a:	05 c0       	rjmp	.+10     	; 0x2716 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    270c:	d1 95       	neg	r29
    270e:	c1 95       	neg	r28
    2710:	d1 09       	sbc	r29, r1
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	cf 3f       	cpi	r28, 0xFF	; 255
    271a:	d1 05       	cpc	r29, r1
    271c:	19 f0       	breq	.+6      	; 0x2724 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    271e:	14 f0       	brlt	.+4      	; 0x2724 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2720:	cf ef       	ldi	r28, 0xFF	; 255
    2722:	d0 e0       	ldi	r29, 0x00	; 0
    2724:	88 23       	and	r24, r24
    2726:	19 f0       	breq	.+6      	; 0x272e <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2728:	18 bc       	out	0x28, r1	; 40
    272a:	c7 bd       	out	0x27, r28	; 39
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    272e:	c8 bd       	out	0x28, r28	; 40
    2730:	17 bc       	out	0x27, r1	; 39
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	ec 01       	movw	r28, r24
    273e:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN15OrangutanMotors4initEv>
    2742:	d7 ff       	sbrs	r29, 7
    2744:	05 c0       	rjmp	.+10     	; 0x2750 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2746:	d1 95       	neg	r29
    2748:	c1 95       	neg	r28
    274a:	d1 09       	sbc	r29, r1
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	cf 3f       	cpi	r28, 0xFF	; 255
    2754:	d1 05       	cpc	r29, r1
    2756:	19 f0       	breq	.+6      	; 0x275e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2758:	14 f0       	brlt	.+4      	; 0x275e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    275a:	cf ef       	ldi	r28, 0xFF	; 255
    275c:	d0 e0       	ldi	r29, 0x00	; 0
    275e:	88 23       	and	r24, r24
    2760:	29 f0       	breq	.+10     	; 0x276c <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2762:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2766:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    276a:	04 c0       	rjmp	.+8      	; 0x2774 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    276c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2770:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <_ZN15OrangutanMotors9setSpeedsEii>:
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	eb 01       	movw	r28, r22
    2780:	0e 94 7f 13 	call	0x26fe	; 0x26fe <_ZN15OrangutanMotors10setM1SpeedEi>
    2784:	ce 01       	movw	r24, r28
    2786:	0e 94 9c 13 	call	0x2738	; 0x2738 <_ZN15OrangutanMotors10setM2SpeedEi>
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	08 95       	ret

00002790 <set_motors>:
    2790:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN15OrangutanMotors9setSpeedsEii>
    2794:	08 95       	ret

00002796 <_ZN20OrangutanPushbuttons5init2Ev>:
    2796:	84 b1       	in	r24, 0x04	; 4
    2798:	8d 7c       	andi	r24, 0xCD	; 205
    279a:	84 b9       	out	0x04, r24	; 4
    279c:	85 b1       	in	r24, 0x05	; 5
    279e:	82 63       	ori	r24, 0x32	; 50
    27a0:	85 b9       	out	0x05, r24	; 5
    27a2:	85 e0       	ldi	r24, 0x05	; 5
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	6f 93       	push	r22
    27a8:	64 e0       	ldi	r22, 0x04	; 4
    27aa:	6a 95       	dec	r22
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    27ae:	6f 91       	pop	r22
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	c9 f7       	brne	.-14     	; 0x27a6 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    27b4:	08 95       	ret

000027b6 <_ZN20OrangutanPushbuttons4initEv>:
    27b6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    27ba:	81 11       	cpse	r24, r1
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <_ZN20OrangutanPushbuttons4initEv+0x12>
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    27c4:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN20OrangutanPushbuttons5init2Ev>
    27c8:	08 95       	ret

000027ca <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    27ca:	cf 93       	push	r28
    27cc:	c8 2f       	mov	r28, r24
    27ce:	0e 94 db 13 	call	0x27b6	; 0x27b6 <_ZN20OrangutanPushbuttons4initEv>
    27d2:	83 b1       	in	r24, 0x03	; 3
    27d4:	8c 23       	and	r24, r28
    27d6:	e9 f3       	breq	.-6      	; 0x27d2 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    27d8:	8a e0       	ldi	r24, 0x0A	; 10
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 56 14 	call	0x28ac	; 0x28ac <delay_ms>
    27e0:	83 b1       	in	r24, 0x03	; 3
    27e2:	8c 23       	and	r24, r28
    27e4:	b1 f3       	breq	.-20     	; 0x27d2 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    27e6:	83 b1       	in	r24, 0x03	; 3
    27e8:	8c 23       	and	r24, r28
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <wait_for_button_release>:
    27ee:	0e 94 e5 13 	call	0x27ca	; 0x27ca <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    27f2:	08 95       	ret

000027f4 <_ZN20OrangutanPushbuttons9isPressedEh>:
    27f4:	a1 e0       	ldi	r26, 0x01	; 1
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e0 e0       	ldi	r30, 0x00	; 0
    27fa:	f4 e1       	ldi	r31, 0x14	; 20
    27fc:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x20>
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	0e 94 db 13 	call	0x27b6	; 0x27b6 <_ZN20OrangutanPushbuttons4initEv>
    2806:	93 b1       	in	r25, 0x03	; 3
    2808:	90 95       	com	r25
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	89 23       	and	r24, r25
    280e:	21 96       	adiw	r28, 0x01	; 1
    2810:	e2 e0       	ldi	r30, 0x02	; 2
    2812:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x20>

00002816 <button_is_pressed>:
    2816:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_ZN20OrangutanPushbuttons9isPressedEh>
    281a:	08 95       	ret

0000281c <__vector_9>:
    281c:	2f 92       	push	r2
    281e:	8f 93       	push	r24
    2820:	9f 93       	push	r25
    2822:	2f b6       	in	r2, 0x3f	; 63
    2824:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tickCount+0x1>
    2828:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tickCount+0x2>
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <tickCount+0x1>
    2832:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <tickCount+0x2>
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tickCount+0x3>
    283c:	89 1f       	adc	r24, r25
    283e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <tickCount+0x3>
    2842:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <us_over_10+0x1>
    2846:	9c 5f       	subi	r25, 0xFC	; 252
    2848:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <us_over_10+0x1>
    284c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <us_over_10>
    2850:	80 51       	subi	r24, 0x10	; 16
    2852:	97 42       	sbci	r25, 0x27	; 39
    2854:	c0 f0       	brcs	.+48     	; 0x2886 <end>
    2856:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <us_over_10+0x1>
    285a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <us_over_10>
    285e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <msCounter>
    2862:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <msCounter+0x1>
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <msCounter>
    286c:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <msCounter+0x1>
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <msCounter+0x2>
    2876:	89 1f       	adc	r24, r25
    2878:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <msCounter+0x2>
    287c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <msCounter+0x3>
    2880:	89 1f       	adc	r24, r25
    2882:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <msCounter+0x3>

00002886 <end>:
    2886:	2f be       	out	0x3f, r2	; 63
    2888:	9f 91       	pop	r25
    288a:	8f 91       	pop	r24
    288c:	2f 90       	pop	r2
    288e:	18 95       	reti

00002890 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2890:	28 ee       	ldi	r18, 0xE8	; 232
    2892:	33 e0       	ldi	r19, 0x03	; 3
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	48 f0       	brcs	.+18     	; 0x28aa <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2898:	f9 01       	movw	r30, r18
    289a:	6f 93       	push	r22
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	6a 95       	dec	r22
    28a0:	f1 f7       	brne	.-4      	; 0x289e <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    28a2:	6f 91       	pop	r22
    28a4:	31 97       	sbiw	r30, 0x01	; 1
    28a6:	c9 f7       	brne	.-14     	; 0x289a <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    28a8:	f5 cf       	rjmp	.-22     	; 0x2894 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    28aa:	08 95       	ret

000028ac <delay_ms>:
    28ac:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13OrangutanTime17delayMillisecondsEj>
    28b0:	08 95       	ret

000028b2 <_ZN13OrangutanTime5init2Ev>:
    28b2:	e0 e7       	ldi	r30, 0x70	; 112
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	8e 7f       	andi	r24, 0xFE	; 254
    28ba:	80 83       	st	Z, r24
    28bc:	a0 eb       	ldi	r26, 0xB0	; 176
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	8c 91       	ld	r24, X
    28c2:	83 60       	ori	r24, 0x03	; 3
    28c4:	8c 93       	st	X, r24
    28c6:	a1 eb       	ldi	r26, 0xB1	; 177
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	8c 91       	ld	r24, X
    28cc:	80 7f       	andi	r24, 0xF0	; 240
    28ce:	8c 93       	st	X, r24
    28d0:	8c 91       	ld	r24, X
    28d2:	82 60       	ori	r24, 0x02	; 2
    28d4:	8c 93       	st	X, r24
    28d6:	b8 9a       	sbi	0x17, 0	; 23
    28d8:	80 81       	ld	r24, Z
    28da:	81 60       	ori	r24, 0x01	; 1
    28dc:	80 83       	st	Z, r24
    28de:	78 94       	sei
    28e0:	08 95       	ret

000028e2 <_ZN13OrangutanTime4initEv>:
    28e2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <_ZZN13OrangutanTime4initEvE11initialized>
    28e6:	81 11       	cpse	r24, r1
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <_ZN13OrangutanTime4initEv+0x12>
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <_ZZN13OrangutanTime4initEvE11initialized>
    28f0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN13OrangutanTime5init2Ev>
    28f4:	08 95       	ret

000028f6 <_ZN13OrangutanTime5resetEv>:
    28f6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN13OrangutanTime4initEv>
    28fa:	e0 e7       	ldi	r30, 0x70	; 112
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	8e 7f       	andi	r24, 0xFE	; 254
    2902:	80 83       	st	Z, r24
    2904:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <msCounter>
    2908:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <msCounter+0x1>
    290c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <msCounter+0x2>
    2910:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <msCounter+0x3>
    2914:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <us_over_10+0x1>
    2918:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <us_over_10>
    291c:	80 81       	ld	r24, Z
    291e:	81 60       	ori	r24, 0x01	; 1
    2920:	80 83       	st	Z, r24
    2922:	08 95       	ret

00002924 <read_line_sensors>:
    2924:	46 2f       	mov	r20, r22
    2926:	bc 01       	movw	r22, r24
    2928:	87 e9       	ldi	r24, 0x97	; 151
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN16PololuQTRSensors4readEPjh>
    2930:	08 95       	ret

00002932 <_ZN9Pololu3pi4initEjh>:
    2932:	0f 93       	push	r16
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	00 d0       	rcall	.+0      	; 0x293a <_ZN9Pololu3pi4initEjh+0x8>
    293a:	00 d0       	rcall	.+0      	; 0x293c <_ZN9Pololu3pi4initEjh+0xa>
    293c:	1f 92       	push	r1
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	9c 01       	movw	r18, r24
    2944:	85 e0       	ldi	r24, 0x05	; 5
    2946:	ec e4       	ldi	r30, 0x4C	; 76
    2948:	f1 e0       	ldi	r31, 0x01	; 1
    294a:	de 01       	movw	r26, r28
    294c:	11 96       	adiw	r26, 0x01	; 1
    294e:	01 90       	ld	r0, Z+
    2950:	0d 92       	st	X+, r0
    2952:	8a 95       	dec	r24
    2954:	e1 f7       	brne	.-8      	; 0x294e <_ZN9Pololu3pi4initEjh+0x1c>
    2956:	66 23       	and	r22, r22
    2958:	11 f0       	breq	.+4      	; 0x295e <_ZN9Pololu3pi4initEjh+0x2c>
    295a:	0f ef       	ldi	r16, 0xFF	; 255
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <_ZN9Pololu3pi4initEjh+0x2e>
    295e:	03 e1       	ldi	r16, 0x13	; 19
    2960:	45 e0       	ldi	r20, 0x05	; 5
    2962:	be 01       	movw	r22, r28
    2964:	6f 5f       	subi	r22, 0xFF	; 255
    2966:	7f 4f       	sbci	r23, 0xFF	; 255
    2968:	87 e9       	ldi	r24, 0x97	; 151
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2970:	87 e9       	ldi	r24, 0x97	; 151
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_ZN16PololuQTRSensors11emittersOffEv>
    2978:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN13OrangutanTime5resetEv>
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	0f 91       	pop	r16
    298c:	08 95       	ret

0000298e <pololu_3pi_init>:
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN9Pololu3pi4initEjh>
    2994:	08 95       	ret

00002996 <_GLOBAL__sub_D_pololu_3pi_init>:
    2996:	87 e9       	ldi	r24, 0x97	; 151
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <_ZN16PololuQTRSensorsD1Ev>
    299e:	08 95       	ret

000029a0 <delay_us>:
    29a0:	6f 93       	push	r22
    29a2:	64 e0       	ldi	r22, 0x04	; 4
    29a4:	6a 95       	dec	r22
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <delay_us+0x4>
    29a8:	6f 91       	pop	r22
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	c9 f7       	brne	.-14     	; 0x29a0 <delay_us>
    29ae:	08 95       	ret

000029b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    29b0:	fc 01       	movw	r30, r24
    29b2:	11 82       	std	Z+1, r1	; 0x01
    29b4:	10 82       	st	Z, r1
    29b6:	13 82       	std	Z+3, r1	; 0x03
    29b8:	12 82       	std	Z+2, r1	; 0x02
    29ba:	15 82       	std	Z+5, r1	; 0x05
    29bc:	14 82       	std	Z+4, r1	; 0x04
    29be:	16 82       	std	Z+6, r1	; 0x06
    29c0:	68 30       	cpi	r22, 0x08	; 8
    29c2:	68 f4       	brcc	.+26     	; 0x29de <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    29c4:	89 e2       	ldi	r24, 0x29	; 41
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	8b e2       	ldi	r24, 0x2B	; 43
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	93 83       	std	Z+3, r25	; 0x03
    29d2:	82 83       	std	Z+2, r24	; 0x02
    29d4:	8a e2       	ldi	r24, 0x2A	; 42
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	95 83       	std	Z+5, r25	; 0x05
    29da:	84 83       	std	Z+4, r24	; 0x04
    29dc:	1f c0       	rjmp	.+62     	; 0x2a1c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    29de:	6e 30       	cpi	r22, 0x0E	; 14
    29e0:	70 f4       	brcc	.+28     	; 0x29fe <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    29e2:	83 e2       	ldi	r24, 0x23	; 35
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	85 e2       	ldi	r24, 0x25	; 37
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	93 83       	std	Z+3, r25	; 0x03
    29f0:	82 83       	std	Z+2, r24	; 0x02
    29f2:	84 e2       	ldi	r24, 0x24	; 36
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	95 83       	std	Z+5, r25	; 0x05
    29f8:	84 83       	std	Z+4, r24	; 0x04
    29fa:	68 50       	subi	r22, 0x08	; 8
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    29fe:	65 31       	cpi	r22, 0x15	; 21
    2a00:	98 f4       	brcc	.+38     	; 0x2a28 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2a02:	86 e2       	ldi	r24, 0x26	; 38
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
    2a0a:	88 e2       	ldi	r24, 0x28	; 40
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	93 83       	std	Z+3, r25	; 0x03
    2a10:	82 83       	std	Z+2, r24	; 0x02
    2a12:	87 e2       	ldi	r24, 0x27	; 39
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	95 83       	std	Z+5, r25	; 0x05
    2a18:	84 83       	std	Z+4, r24	; 0x04
    2a1a:	6e 50       	subi	r22, 0x0E	; 14
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2a20:	88 0f       	add	r24, r24
    2a22:	6a 95       	dec	r22
    2a24:	ea f7       	brpl	.-6      	; 0x2a20 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2a26:	86 83       	std	Z+6, r24	; 0x06
    2a28:	08 95       	ret

00002a2a <_ZN16PololuQTRSensors4initEhhh>:
    2a2a:	a7 e0       	ldi	r26, 0x07	; 7
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	eb e1       	ldi	r30, 0x1B	; 27
    2a30:	f5 e1       	ldi	r31, 0x15	; 21
    2a32:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__prologue_saves__+0x1c>
    2a36:	8c 01       	movw	r16, r24
    2a38:	fc 01       	movw	r30, r24
    2a3a:	11 82       	std	Z+1, r1	; 0x01
    2a3c:	10 82       	st	Z, r1
    2a3e:	13 82       	std	Z+3, r1	; 0x03
    2a40:	12 82       	std	Z+2, r1	; 0x02
    2a42:	15 82       	std	Z+5, r1	; 0x05
    2a44:	14 82       	std	Z+4, r1	; 0x04
    2a46:	17 82       	std	Z+7, r1	; 0x07
    2a48:	16 82       	std	Z+6, r1	; 0x06
    2a4a:	61 31       	cpi	r22, 0x11	; 17
    2a4c:	18 f0       	brcs	.+6      	; 0x2a54 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2a4e:	80 e1       	ldi	r24, 0x10	; 16
    2a50:	80 87       	std	Z+8, r24	; 0x08
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2a54:	fc 01       	movw	r30, r24
    2a56:	60 87       	std	Z+8, r22	; 0x08
    2a58:	f8 01       	movw	r30, r16
    2a5a:	20 8b       	std	Z+16, r18	; 0x10
    2a5c:	64 2f       	mov	r22, r20
    2a5e:	ce 01       	movw	r24, r28
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2a66:	8f 81       	ldd	r24, Y+7	; 0x07
    2a68:	f8 01       	movw	r30, r16
    2a6a:	81 87       	std	Z+9, r24	; 0x09
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	93 87       	std	Z+11, r25	; 0x0b
    2a72:	82 87       	std	Z+10, r24	; 0x0a
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	95 87       	std	Z+13, r25	; 0x0d
    2a7a:	84 87       	std	Z+12, r24	; 0x0c
    2a7c:	27 96       	adiw	r28, 0x07	; 7
    2a7e:	e4 e0       	ldi	r30, 0x04	; 4
    2a80:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__epilogue_restores__+0x1c>

00002a84 <_ZN16PololuQTRSensors11emittersOffEv>:
    2a84:	fc 01       	movw	r30, r24
    2a86:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a88:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a8a:	10 97       	sbiw	r26, 0x00	; 0
    2a8c:	79 f0       	breq	.+30     	; 0x2aac <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2a8e:	8c 91       	ld	r24, X
    2a90:	91 85       	ldd	r25, Z+9	; 0x09
    2a92:	89 2b       	or	r24, r25
    2a94:	8c 93       	st	X, r24
    2a96:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a98:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a9a:	9c 91       	ld	r25, X
    2a9c:	81 85       	ldd	r24, Z+9	; 0x09
    2a9e:	80 95       	com	r24
    2aa0:	89 23       	and	r24, r25
    2aa2:	8c 93       	st	X, r24
    2aa4:	88 ec       	ldi	r24, 0xC8	; 200
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <delay_us>
    2aac:	08 95       	ret

00002aae <_ZN16PololuQTRSensors10emittersOnEv>:
    2aae:	fc 01       	movw	r30, r24
    2ab0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ab2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ab4:	10 97       	sbiw	r26, 0x00	; 0
    2ab6:	71 f0       	breq	.+28     	; 0x2ad4 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2ab8:	8c 91       	ld	r24, X
    2aba:	91 85       	ldd	r25, Z+9	; 0x09
    2abc:	89 2b       	or	r24, r25
    2abe:	8c 93       	st	X, r24
    2ac0:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ac2:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ac4:	8c 91       	ld	r24, X
    2ac6:	91 85       	ldd	r25, Z+9	; 0x09
    2ac8:	89 2b       	or	r24, r25
    2aca:	8c 93       	st	X, r24
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <delay_us>
    2ad4:	08 95       	ret

00002ad6 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2ad6:	a7 e0       	ldi	r26, 0x07	; 7
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	e1 e7       	ldi	r30, 0x71	; 113
    2adc:	f5 e1       	ldi	r31, 0x15	; 21
    2ade:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x6>
    2ae2:	7c 01       	movw	r14, r24
    2ae4:	4b 01       	movw	r8, r22
    2ae6:	64 2f       	mov	r22, r20
    2ae8:	39 01       	movw	r6, r18
    2aea:	40 2f       	mov	r20, r16
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_ZN16PololuQTRSensors4initEhhh>
    2af2:	87 01       	movw	r16, r14
    2af4:	0f 5b       	subi	r16, 0xBF	; 191
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	f8 01       	movw	r30, r16
    2afa:	10 82       	st	Z, r1
    2afc:	67 01       	movw	r12, r14
    2afe:	f2 e4       	ldi	r31, 0x42	; 66
    2b00:	cf 0e       	add	r12, r31
    2b02:	d1 1c       	adc	r13, r1
    2b04:	f6 01       	movw	r30, r12
    2b06:	10 82       	st	Z, r1
    2b08:	57 01       	movw	r10, r14
    2b0a:	f3 e4       	ldi	r31, 0x43	; 67
    2b0c:	af 0e       	add	r10, r31
    2b0e:	b1 1c       	adc	r11, r1
    2b10:	f5 01       	movw	r30, r10
    2b12:	10 82       	st	Z, r1
    2b14:	f7 01       	movw	r30, r14
    2b16:	77 86       	std	Z+15, r7	; 0x0f
    2b18:	66 86       	std	Z+14, r6	; 0x0e
    2b1a:	51 2c       	mov	r5, r1
    2b1c:	f7 01       	movw	r30, r14
    2b1e:	80 85       	ldd	r24, Z+8	; 0x08
    2b20:	58 16       	cp	r5, r24
    2b22:	50 f5       	brcc	.+84     	; 0x2b78 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2b24:	65 2c       	mov	r6, r5
    2b26:	71 2c       	mov	r7, r1
    2b28:	f4 01       	movw	r30, r8
    2b2a:	e6 0d       	add	r30, r6
    2b2c:	f7 1d       	adc	r31, r7
    2b2e:	60 81       	ld	r22, Z
    2b30:	ce 01       	movw	r24, r28
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2b38:	2f 81       	ldd	r18, Y+7	; 0x07
    2b3a:	f7 01       	movw	r30, r14
    2b3c:	e6 0d       	add	r30, r6
    2b3e:	f7 1d       	adc	r31, r7
    2b40:	21 8b       	std	Z+17, r18	; 0x11
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	f3 01       	movw	r30, r6
    2b48:	ee 0f       	add	r30, r30
    2b4a:	ff 1f       	adc	r31, r31
    2b4c:	ee 0d       	add	r30, r14
    2b4e:	ff 1d       	adc	r31, r15
    2b50:	92 a3       	std	Z+34, r25	; 0x22
    2b52:	81 a3       	std	Z+33, r24	; 0x21
    2b54:	83 32       	cpi	r24, 0x23	; 35
    2b56:	91 05       	cpc	r25, r1
    2b58:	11 f4       	brne	.+4      	; 0x2b5e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	08 c0       	rjmp	.+16     	; 0x2b6e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2b5e:	86 32       	cpi	r24, 0x26	; 38
    2b60:	91 05       	cpc	r25, r1
    2b62:	11 f4       	brne	.+4      	; 0x2b68 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2b64:	f6 01       	movw	r30, r12
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2b68:	89 97       	sbiw	r24, 0x29	; 41
    2b6a:	21 f4       	brne	.+8      	; 0x2b74 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2b6c:	f5 01       	movw	r30, r10
    2b6e:	80 81       	ld	r24, Z
    2b70:	82 2b       	or	r24, r18
    2b72:	80 83       	st	Z, r24
    2b74:	53 94       	inc	r5
    2b76:	d2 cf       	rjmp	.-92     	; 0x2b1c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2b78:	27 96       	adiw	r28, 0x07	; 7
    2b7a:	ef e0       	ldi	r30, 0x0F	; 15
    2b7c:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x6>

00002b80 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e6 ec       	ldi	r30, 0xC6	; 198
    2b86:	f5 e1       	ldi	r31, 0x15	; 21
    2b88:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__prologue_saves__+0xa>
    2b8c:	ec 01       	movw	r28, r24
    2b8e:	5b 01       	movw	r10, r22
    2b90:	6c 01       	movw	r12, r24
    2b92:	81 e4       	ldi	r24, 0x41	; 65
    2b94:	c8 0e       	add	r12, r24
    2b96:	d1 1c       	adc	r13, r1
    2b98:	f6 01       	movw	r30, r12
    2b9a:	80 80       	ld	r8, Z
    2b9c:	7e 01       	movw	r14, r28
    2b9e:	f2 e4       	ldi	r31, 0x42	; 66
    2ba0:	ef 0e       	add	r14, r31
    2ba2:	f1 1c       	adc	r15, r1
    2ba4:	f7 01       	movw	r30, r14
    2ba6:	70 80       	ld	r7, Z
    2ba8:	8e 01       	movw	r16, r28
    2baa:	0d 5b       	subi	r16, 0xBD	; 189
    2bac:	1f 4f       	sbci	r17, 0xFF	; 255
    2bae:	f8 01       	movw	r30, r16
    2bb0:	90 80       	ld	r9, Z
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	98 85       	ldd	r25, Y+8	; 0x08
    2bb6:	89 17       	cp	r24, r25
    2bb8:	48 f4       	brcc	.+18     	; 0x2bcc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2bba:	f5 01       	movw	r30, r10
    2bbc:	e8 0f       	add	r30, r24
    2bbe:	f1 1d       	adc	r31, r1
    2bc0:	e8 0f       	add	r30, r24
    2bc2:	f1 1d       	adc	r31, r1
    2bc4:	11 82       	std	Z+1, r1	; 0x01
    2bc6:	10 82       	st	Z, r1
    2bc8:	8f 5f       	subi	r24, 0xFF	; 255
    2bca:	f4 cf       	rjmp	.-24     	; 0x2bb4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2bcc:	84 b1       	in	r24, 0x04	; 4
    2bce:	f6 01       	movw	r30, r12
    2bd0:	90 81       	ld	r25, Z
    2bd2:	89 2b       	or	r24, r25
    2bd4:	84 b9       	out	0x04, r24	; 4
    2bd6:	87 b1       	in	r24, 0x07	; 7
    2bd8:	f7 01       	movw	r30, r14
    2bda:	90 81       	ld	r25, Z
    2bdc:	89 2b       	or	r24, r25
    2bde:	87 b9       	out	0x07, r24	; 7
    2be0:	8a b1       	in	r24, 0x0a	; 10
    2be2:	f8 01       	movw	r30, r16
    2be4:	90 81       	ld	r25, Z
    2be6:	89 2b       	or	r24, r25
    2be8:	8a b9       	out	0x0a, r24	; 10
    2bea:	85 b1       	in	r24, 0x05	; 5
    2bec:	f6 01       	movw	r30, r12
    2bee:	90 81       	ld	r25, Z
    2bf0:	89 2b       	or	r24, r25
    2bf2:	85 b9       	out	0x05, r24	; 5
    2bf4:	88 b1       	in	r24, 0x08	; 8
    2bf6:	f7 01       	movw	r30, r14
    2bf8:	90 81       	ld	r25, Z
    2bfa:	89 2b       	or	r24, r25
    2bfc:	88 b9       	out	0x08, r24	; 8
    2bfe:	8b b1       	in	r24, 0x0b	; 11
    2c00:	f8 01       	movw	r30, r16
    2c02:	90 81       	ld	r25, Z
    2c04:	89 2b       	or	r24, r25
    2c06:	8b b9       	out	0x0b, r24	; 11
    2c08:	8a e0       	ldi	r24, 0x0A	; 10
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <delay_us>
    2c10:	94 b1       	in	r25, 0x04	; 4
    2c12:	f6 01       	movw	r30, r12
    2c14:	80 81       	ld	r24, Z
    2c16:	80 95       	com	r24
    2c18:	89 23       	and	r24, r25
    2c1a:	84 b9       	out	0x04, r24	; 4
    2c1c:	97 b1       	in	r25, 0x07	; 7
    2c1e:	f7 01       	movw	r30, r14
    2c20:	80 81       	ld	r24, Z
    2c22:	80 95       	com	r24
    2c24:	89 23       	and	r24, r25
    2c26:	87 b9       	out	0x07, r24	; 7
    2c28:	9a b1       	in	r25, 0x0a	; 10
    2c2a:	f8 01       	movw	r30, r16
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 95       	com	r24
    2c30:	89 23       	and	r24, r25
    2c32:	8a b9       	out	0x0a, r24	; 10
    2c34:	95 b1       	in	r25, 0x05	; 5
    2c36:	f6 01       	movw	r30, r12
    2c38:	80 81       	ld	r24, Z
    2c3a:	80 95       	com	r24
    2c3c:	89 23       	and	r24, r25
    2c3e:	85 b9       	out	0x05, r24	; 5
    2c40:	98 b1       	in	r25, 0x08	; 8
    2c42:	f7 01       	movw	r30, r14
    2c44:	80 81       	ld	r24, Z
    2c46:	80 95       	com	r24
    2c48:	89 23       	and	r24, r25
    2c4a:	88 b9       	out	0x08, r24	; 8
    2c4c:	9b b1       	in	r25, 0x0b	; 11
    2c4e:	f8 01       	movw	r30, r16
    2c50:	80 81       	ld	r24, Z
    2c52:	80 95       	com	r24
    2c54:	89 23       	and	r24, r25
    2c56:	8b b9       	out	0x0b, r24	; 11
    2c58:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c5c:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c64:	83 60       	ori	r24, 0x03	; 3
    2c66:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c70:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c7a:	3f 85       	ldd	r19, Y+15	; 0x0f
    2c7c:	82 17       	cp	r24, r18
    2c7e:	93 07       	cpc	r25, r19
    2c80:	20 f5       	brcc	.+72     	; 0x2cca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2c82:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2c86:	2c 2d       	mov	r18, r12
    2c88:	24 1b       	sub	r18, r20
    2c8a:	82 0f       	add	r24, r18
    2c8c:	91 1d       	adc	r25, r1
    2c8e:	03 b1       	in	r16, 0x03	; 3
    2c90:	08 11       	cpse	r16, r8
    2c92:	32 c0       	rjmp	.+100    	; 0x2cf8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c94:	f6 b0       	in	r15, 0x06	; 6
    2c96:	f7 10       	cpse	r15, r7
    2c98:	2f c0       	rjmp	.+94     	; 0x2cf8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c9a:	29 b1       	in	r18, 0x09	; 9
    2c9c:	29 11       	cpse	r18, r9
    2c9e:	2c c0       	rjmp	.+88     	; 0x2cf8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2ca0:	10 c0       	rjmp	.+32     	; 0x2cc2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2ca2:	21 2f       	mov	r18, r17
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	44 0f       	add	r20, r20
    2caa:	55 1f       	adc	r21, r21
    2cac:	f5 01       	movw	r30, r10
    2cae:	e4 0f       	add	r30, r20
    2cb0:	f5 1f       	adc	r31, r21
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	67 2b       	or	r22, r23
    2cb8:	21 f1       	breq	.+72     	; 0x2d02 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2cba:	1f 5f       	subi	r17, 0xFF	; 255
    2cbc:	28 85       	ldd	r18, Y+8	; 0x08
    2cbe:	12 17       	cp	r17, r18
    2cc0:	80 f3       	brcs	.-32     	; 0x2ca2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2cc2:	7f 2c       	mov	r7, r15
    2cc4:	80 2e       	mov	r8, r16
    2cc6:	4c 2d       	mov	r20, r12
    2cc8:	d7 cf       	rjmp	.-82     	; 0x2c78 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2cca:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2cce:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	88 85       	ldd	r24, Y+8	; 0x08
    2cd6:	28 17       	cp	r18, r24
    2cd8:	30 f5       	brcc	.+76     	; 0x2d26 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2cda:	f5 01       	movw	r30, r10
    2cdc:	e2 0f       	add	r30, r18
    2cde:	f1 1d       	adc	r31, r1
    2ce0:	e2 0f       	add	r30, r18
    2ce2:	f1 1d       	adc	r31, r1
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	89 2b       	or	r24, r25
    2cea:	21 f4       	brne	.+8      	; 0x2cf4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2cec:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cee:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	2f 5f       	subi	r18, 0xFF	; 255
    2cf6:	ee cf       	rjmp	.-36     	; 0x2cd4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2cf8:	03 b1       	in	r16, 0x03	; 3
    2cfa:	f6 b0       	in	r15, 0x06	; 6
    2cfc:	99 b0       	in	r9, 0x09	; 9
    2cfe:	10 e0       	ldi	r17, 0x00	; 0
    2d00:	dd cf       	rjmp	.-70     	; 0x2cbc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2d02:	de 01       	movw	r26, r28
    2d04:	a4 0f       	add	r26, r20
    2d06:	b5 1f       	adc	r27, r21
    2d08:	91 96       	adiw	r26, 0x21	; 33
    2d0a:	0d 90       	ld	r0, X+
    2d0c:	bc 91       	ld	r27, X
    2d0e:	a0 2d       	mov	r26, r0
    2d10:	4c 91       	ld	r20, X
    2d12:	de 01       	movw	r26, r28
    2d14:	a2 0f       	add	r26, r18
    2d16:	b3 1f       	adc	r27, r19
    2d18:	51 96       	adiw	r26, 0x11	; 17
    2d1a:	2c 91       	ld	r18, X
    2d1c:	42 23       	and	r20, r18
    2d1e:	69 f6       	brne	.-102    	; 0x2cba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	ca cf       	rjmp	.-108    	; 0x2cba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	ed e0       	ldi	r30, 0x0D	; 13
    2d2c:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__epilogue_restores__+0xa>

00002d30 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	9b 01       	movw	r18, r22
    2d40:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d44:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d48:	47 b1       	in	r20, 0x07	; 7
    2d4a:	18 b1       	in	r17, 0x08	; 8
    2d4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d50:	86 fd       	sbrc	r24, 6
    2d52:	fc cf       	rjmp	.-8      	; 0x2d4c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 85       	ldd	r25, Z+8	; 0x08
    2d58:	89 17       	cp	r24, r25
    2d5a:	48 f4       	brcc	.+18     	; 0x2d6e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2d5c:	d9 01       	movw	r26, r18
    2d5e:	a8 0f       	add	r26, r24
    2d60:	b1 1d       	adc	r27, r1
    2d62:	a8 0f       	add	r26, r24
    2d64:	b1 1d       	adc	r27, r1
    2d66:	1d 92       	st	X+, r1
    2d68:	1c 92       	st	X, r1
    2d6a:	8f 5f       	subi	r24, 0xFF	; 255
    2d6c:	f4 cf       	rjmp	.-24     	; 0x2d56 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2d6e:	97 b1       	in	r25, 0x07	; 7
    2d70:	82 a1       	ldd	r24, Z+34	; 0x22
    2d72:	80 95       	com	r24
    2d74:	89 23       	and	r24, r25
    2d76:	87 b9       	out	0x07, r24	; 7
    2d78:	98 b1       	in	r25, 0x08	; 8
    2d7a:	82 a1       	ldd	r24, Z+34	; 0x22
    2d7c:	80 95       	com	r24
    2d7e:	89 23       	and	r24, r25
    2d80:	88 b9       	out	0x08, r24	; 8
    2d82:	87 e8       	ldi	r24, 0x87	; 135
    2d84:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d88:	e1 2c       	mov	r14, r1
    2d8a:	81 a1       	ldd	r24, Z+33	; 0x21
    2d8c:	e8 16       	cp	r14, r24
    2d8e:	10 f0       	brcs	.+4      	; 0x2d94 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2d90:	e1 2c       	mov	r14, r1
    2d92:	29 c0       	rjmp	.+82     	; 0x2de6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	80 85       	ldd	r24, Z+8	; 0x08
    2d98:	58 17       	cp	r21, r24
    2d9a:	18 f5       	brcc	.+70     	; 0x2de2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2d9c:	a5 2f       	mov	r26, r21
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	ef 01       	movw	r28, r30
    2da2:	ca 0f       	add	r28, r26
    2da4:	db 1f       	adc	r29, r27
    2da6:	89 89       	ldd	r24, Y+17	; 0x11
    2da8:	80 64       	ori	r24, 0x40	; 64
    2daa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2dae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2db2:	80 64       	ori	r24, 0x40	; 64
    2db4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2db8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2dbc:	86 fd       	sbrc	r24, 6
    2dbe:	fc cf       	rjmp	.-8      	; 0x2db8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2dc0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2dc4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2dc8:	aa 0f       	add	r26, r26
    2dca:	bb 1f       	adc	r27, r27
    2dcc:	a2 0f       	add	r26, r18
    2dce:	b3 1f       	adc	r27, r19
    2dd0:	8d 91       	ld	r24, X+
    2dd2:	9c 91       	ld	r25, X
    2dd4:	11 97       	sbiw	r26, 0x01	; 1
    2dd6:	86 0f       	add	r24, r22
    2dd8:	97 1f       	adc	r25, r23
    2dda:	8d 93       	st	X+, r24
    2ddc:	9c 93       	st	X, r25
    2dde:	5f 5f       	subi	r21, 0xFF	; 255
    2de0:	da cf       	rjmp	.-76     	; 0x2d96 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2de2:	e3 94       	inc	r14
    2de4:	d2 cf       	rjmp	.-92     	; 0x2d8a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2de6:	80 85       	ldd	r24, Z+8	; 0x08
    2de8:	e8 16       	cp	r14, r24
    2dea:	a0 f4       	brcc	.+40     	; 0x2e14 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2dec:	e9 01       	movw	r28, r18
    2dee:	ce 0d       	add	r28, r14
    2df0:	d1 1d       	adc	r29, r1
    2df2:	ce 0d       	add	r28, r14
    2df4:	d1 1d       	adc	r29, r1
    2df6:	61 a1       	ldd	r22, Z+33	; 0x21
    2df8:	70 e0       	ldi	r23, 0x00	; 0
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	95 95       	asr	r25
    2dfe:	87 95       	ror	r24
    2e00:	a8 81       	ld	r26, Y
    2e02:	b9 81       	ldd	r27, Y+1	; 0x01
    2e04:	8a 0f       	add	r24, r26
    2e06:	9b 1f       	adc	r25, r27
    2e08:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    2e0c:	79 83       	std	Y+1, r23	; 0x01
    2e0e:	68 83       	st	Y, r22
    2e10:	e3 94       	inc	r14
    2e12:	e9 cf       	rjmp	.-46     	; 0x2de6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2e14:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2e18:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e1c:	18 b9       	out	0x08, r17	; 8
    2e1e:	47 b9       	out	0x07, r20	; 7
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	e6 e0       	ldi	r30, 0x06	; 6
    2e26:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__epilogue_restores__+0x18>

00002e2a <_ZN16PololuQTRSensors4readEPjh>:
    2e2a:	a0 e2       	ldi	r26, 0x20	; 32
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	eb e1       	ldi	r30, 0x1B	; 27
    2e30:	f7 e1       	ldi	r31, 0x17	; 23
    2e32:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x16>
    2e36:	8c 01       	movw	r16, r24
    2e38:	7b 01       	movw	r14, r22
    2e3a:	d4 2e       	mov	r13, r20
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	84 0f       	add	r24, r20
    2e40:	82 30       	cpi	r24, 0x02	; 2
    2e42:	18 f4       	brcc	.+6      	; 0x2e4a <_ZN16PololuQTRSensors4readEPjh+0x20>
    2e44:	c8 01       	movw	r24, r16
    2e46:	0e 94 57 15 	call	0x2aae	; 0x2aae <_ZN16PololuQTRSensors10emittersOnEv>
    2e4a:	d8 01       	movw	r26, r16
    2e4c:	50 96       	adiw	r26, 0x10	; 16
    2e4e:	8c 91       	ld	r24, X
    2e50:	b7 01       	movw	r22, r14
    2e52:	81 11       	cpse	r24, r1
    2e54:	10 c0       	rjmp	.+32     	; 0x2e76 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2e56:	c8 01       	movw	r24, r16
    2e58:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2e5c:	c8 01       	movw	r24, r16
    2e5e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_ZN16PololuQTRSensors11emittersOffEv>
    2e62:	b2 e0       	ldi	r27, 0x02	; 2
    2e64:	db 12       	cpse	r13, r27
    2e66:	3a c0       	rjmp	.+116    	; 0x2edc <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e68:	be 01       	movw	r22, r28
    2e6a:	6f 5f       	subi	r22, 0xFF	; 255
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	c8 01       	movw	r24, r16
    2e70:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2e76:	c8 01       	movw	r24, r16
    2e78:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2e7c:	c8 01       	movw	r24, r16
    2e7e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_ZN16PololuQTRSensors11emittersOffEv>
    2e82:	e2 e0       	ldi	r30, 0x02	; 2
    2e84:	de 12       	cpse	r13, r30
    2e86:	2a c0       	rjmp	.+84     	; 0x2edc <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e88:	be 01       	movw	r22, r28
    2e8a:	6f 5f       	subi	r22, 0xFF	; 255
    2e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8e:	c8 01       	movw	r24, r16
    2e90:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2e94:	40 e0       	ldi	r20, 0x00	; 0
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 85       	ldd	r24, Z+8	; 0x08
    2e9a:	48 17       	cp	r20, r24
    2e9c:	f8 f4       	brcc	.+62     	; 0x2edc <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e9e:	84 2f       	mov	r24, r20
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	f7 01       	movw	r30, r14
    2ea8:	e8 0f       	add	r30, r24
    2eaa:	f9 1f       	adc	r31, r25
    2eac:	21 e0       	ldi	r18, 0x01	; 1
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	2c 0f       	add	r18, r28
    2eb2:	3d 1f       	adc	r19, r29
    2eb4:	82 0f       	add	r24, r18
    2eb6:	93 1f       	adc	r25, r19
    2eb8:	d8 01       	movw	r26, r16
    2eba:	1e 96       	adiw	r26, 0x0e	; 14
    2ebc:	2d 91       	ld	r18, X+
    2ebe:	3c 91       	ld	r19, X
    2ec0:	1f 97       	sbiw	r26, 0x0f	; 15
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	8d 91       	ld	r24, X+
    2ec6:	9c 91       	ld	r25, X
    2ec8:	28 1b       	sub	r18, r24
    2eca:	39 0b       	sbc	r19, r25
    2ecc:	80 81       	ld	r24, Z
    2ece:	91 81       	ldd	r25, Z+1	; 0x01
    2ed0:	82 0f       	add	r24, r18
    2ed2:	93 1f       	adc	r25, r19
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
    2ed8:	4f 5f       	subi	r20, 0xFF	; 255
    2eda:	dd cf       	rjmp	.-70     	; 0x2e96 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2edc:	a0 96       	adiw	r28, 0x20	; 32
    2ede:	e7 e0       	ldi	r30, 0x07	; 7
    2ee0:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x16>

00002ee4 <_ZN16PololuQTRSensorsD1Ev>:
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	ec 01       	movw	r28, r24
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	9b 81       	ldd	r25, Y+3	; 0x03
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	11 f0       	breq	.+4      	; 0x2ef6 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2ef2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <free>
    2ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	11 f0       	breq	.+4      	; 0x2f02 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2efe:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <free>
    2f02:	88 81       	ld	r24, Y
    2f04:	99 81       	ldd	r25, Y+1	; 0x01
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	11 f0       	breq	.+4      	; 0x2f0e <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2f0a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <free>
    2f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f10:	9d 81       	ldd	r25, Y+5	; 0x05
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	11 f0       	breq	.+4      	; 0x2f1a <_ZN16PololuQTRSensorsD1Ev+0x36>
    2f16:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <free>
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <__udivmodqi4>:
    2f20:	99 1b       	sub	r25, r25
    2f22:	79 e0       	ldi	r23, 0x09	; 9
    2f24:	04 c0       	rjmp	.+8      	; 0x2f2e <__udivmodqi4_ep>

00002f26 <__udivmodqi4_loop>:
    2f26:	99 1f       	adc	r25, r25
    2f28:	96 17       	cp	r25, r22
    2f2a:	08 f0       	brcs	.+2      	; 0x2f2e <__udivmodqi4_ep>
    2f2c:	96 1b       	sub	r25, r22

00002f2e <__udivmodqi4_ep>:
    2f2e:	88 1f       	adc	r24, r24
    2f30:	7a 95       	dec	r23
    2f32:	c9 f7       	brne	.-14     	; 0x2f26 <__udivmodqi4_loop>
    2f34:	80 95       	com	r24
    2f36:	08 95       	ret

00002f38 <__udivmodhi4>:
    2f38:	aa 1b       	sub	r26, r26
    2f3a:	bb 1b       	sub	r27, r27
    2f3c:	51 e1       	ldi	r21, 0x11	; 17
    2f3e:	07 c0       	rjmp	.+14     	; 0x2f4e <__udivmodhi4_ep>

00002f40 <__udivmodhi4_loop>:
    2f40:	aa 1f       	adc	r26, r26
    2f42:	bb 1f       	adc	r27, r27
    2f44:	a6 17       	cp	r26, r22
    2f46:	b7 07       	cpc	r27, r23
    2f48:	10 f0       	brcs	.+4      	; 0x2f4e <__udivmodhi4_ep>
    2f4a:	a6 1b       	sub	r26, r22
    2f4c:	b7 0b       	sbc	r27, r23

00002f4e <__udivmodhi4_ep>:
    2f4e:	88 1f       	adc	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	5a 95       	dec	r21
    2f54:	a9 f7       	brne	.-22     	; 0x2f40 <__udivmodhi4_loop>
    2f56:	80 95       	com	r24
    2f58:	90 95       	com	r25
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	08 95       	ret

00002f60 <__divmodhi4>:
    2f60:	97 fb       	bst	r25, 7
    2f62:	07 2e       	mov	r0, r23
    2f64:	16 f4       	brtc	.+4      	; 0x2f6a <__divmodhi4+0xa>
    2f66:	00 94       	com	r0
    2f68:	07 d0       	rcall	.+14     	; 0x2f78 <__divmodhi4_neg1>
    2f6a:	77 fd       	sbrc	r23, 7
    2f6c:	09 d0       	rcall	.+18     	; 0x2f80 <__divmodhi4_neg2>
    2f6e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    2f72:	07 fc       	sbrc	r0, 7
    2f74:	05 d0       	rcall	.+10     	; 0x2f80 <__divmodhi4_neg2>
    2f76:	3e f4       	brtc	.+14     	; 0x2f86 <__divmodhi4_exit>

00002f78 <__divmodhi4_neg1>:
    2f78:	90 95       	com	r25
    2f7a:	81 95       	neg	r24
    2f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7e:	08 95       	ret

00002f80 <__divmodhi4_neg2>:
    2f80:	70 95       	com	r23
    2f82:	61 95       	neg	r22
    2f84:	7f 4f       	sbci	r23, 0xFF	; 255

00002f86 <__divmodhi4_exit>:
    2f86:	08 95       	ret

00002f88 <__udivmodsi4>:
    2f88:	a1 e2       	ldi	r26, 0x21	; 33
    2f8a:	1a 2e       	mov	r1, r26
    2f8c:	aa 1b       	sub	r26, r26
    2f8e:	bb 1b       	sub	r27, r27
    2f90:	fd 01       	movw	r30, r26
    2f92:	0d c0       	rjmp	.+26     	; 0x2fae <__udivmodsi4_ep>

00002f94 <__udivmodsi4_loop>:
    2f94:	aa 1f       	adc	r26, r26
    2f96:	bb 1f       	adc	r27, r27
    2f98:	ee 1f       	adc	r30, r30
    2f9a:	ff 1f       	adc	r31, r31
    2f9c:	a2 17       	cp	r26, r18
    2f9e:	b3 07       	cpc	r27, r19
    2fa0:	e4 07       	cpc	r30, r20
    2fa2:	f5 07       	cpc	r31, r21
    2fa4:	20 f0       	brcs	.+8      	; 0x2fae <__udivmodsi4_ep>
    2fa6:	a2 1b       	sub	r26, r18
    2fa8:	b3 0b       	sbc	r27, r19
    2faa:	e4 0b       	sbc	r30, r20
    2fac:	f5 0b       	sbc	r31, r21

00002fae <__udivmodsi4_ep>:
    2fae:	66 1f       	adc	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	1a 94       	dec	r1
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <__udivmodsi4_loop>
    2fba:	60 95       	com	r22
    2fbc:	70 95       	com	r23
    2fbe:	80 95       	com	r24
    2fc0:	90 95       	com	r25
    2fc2:	9b 01       	movw	r18, r22
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	bd 01       	movw	r22, r26
    2fc8:	cf 01       	movw	r24, r30
    2fca:	08 95       	ret

00002fcc <__divmodsi4>:
    2fcc:	05 2e       	mov	r0, r21
    2fce:	97 fb       	bst	r25, 7
    2fd0:	1e f4       	brtc	.+6      	; 0x2fd8 <__divmodsi4+0xc>
    2fd2:	00 94       	com	r0
    2fd4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__negsi2>
    2fd8:	57 fd       	sbrc	r21, 7
    2fda:	07 d0       	rcall	.+14     	; 0x2fea <__divmodsi4_neg2>
    2fdc:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    2fe0:	07 fc       	sbrc	r0, 7
    2fe2:	03 d0       	rcall	.+6      	; 0x2fea <__divmodsi4_neg2>
    2fe4:	4e f4       	brtc	.+18     	; 0x2ff8 <__divmodsi4_exit>
    2fe6:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__negsi2>

00002fea <__divmodsi4_neg2>:
    2fea:	50 95       	com	r21
    2fec:	40 95       	com	r20
    2fee:	30 95       	com	r19
    2ff0:	21 95       	neg	r18
    2ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ff6:	5f 4f       	sbci	r21, 0xFF	; 255

00002ff8 <__divmodsi4_exit>:
    2ff8:	08 95       	ret

00002ffa <__negsi2>:
    2ffa:	90 95       	com	r25
    2ffc:	80 95       	com	r24
    2ffe:	70 95       	com	r23
    3000:	61 95       	neg	r22
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	8f 4f       	sbci	r24, 0xFF	; 255
    3006:	9f 4f       	sbci	r25, 0xFF	; 255
    3008:	08 95       	ret

0000300a <__tablejump2__>:
    300a:	ee 0f       	add	r30, r30
    300c:	ff 1f       	adc	r31, r31
    300e:	05 90       	lpm	r0, Z+
    3010:	f4 91       	lpm	r31, Z
    3012:	e0 2d       	mov	r30, r0
    3014:	09 94       	ijmp

00003016 <__umulhisi3>:
    3016:	a2 9f       	mul	r26, r18
    3018:	b0 01       	movw	r22, r0
    301a:	b3 9f       	mul	r27, r19
    301c:	c0 01       	movw	r24, r0
    301e:	a3 9f       	mul	r26, r19
    3020:	70 0d       	add	r23, r0
    3022:	81 1d       	adc	r24, r1
    3024:	11 24       	eor	r1, r1
    3026:	91 1d       	adc	r25, r1
    3028:	b2 9f       	mul	r27, r18
    302a:	70 0d       	add	r23, r0
    302c:	81 1d       	adc	r24, r1
    302e:	11 24       	eor	r1, r1
    3030:	91 1d       	adc	r25, r1
    3032:	08 95       	ret

00003034 <__prologue_saves__>:
    3034:	2f 92       	push	r2
    3036:	3f 92       	push	r3
    3038:	4f 92       	push	r4
    303a:	5f 92       	push	r5
    303c:	6f 92       	push	r6
    303e:	7f 92       	push	r7
    3040:	8f 92       	push	r8
    3042:	9f 92       	push	r9
    3044:	af 92       	push	r10
    3046:	bf 92       	push	r11
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	ca 1b       	sub	r28, r26
    305e:	db 0b       	sbc	r29, r27
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	09 94       	ijmp

0000306c <__epilogue_restores__>:
    306c:	2a 88       	ldd	r2, Y+18	; 0x12
    306e:	39 88       	ldd	r3, Y+17	; 0x11
    3070:	48 88       	ldd	r4, Y+16	; 0x10
    3072:	5f 84       	ldd	r5, Y+15	; 0x0f
    3074:	6e 84       	ldd	r6, Y+14	; 0x0e
    3076:	7d 84       	ldd	r7, Y+13	; 0x0d
    3078:	8c 84       	ldd	r8, Y+12	; 0x0c
    307a:	9b 84       	ldd	r9, Y+11	; 0x0b
    307c:	aa 84       	ldd	r10, Y+10	; 0x0a
    307e:	b9 84       	ldd	r11, Y+9	; 0x09
    3080:	c8 84       	ldd	r12, Y+8	; 0x08
    3082:	df 80       	ldd	r13, Y+7	; 0x07
    3084:	ee 80       	ldd	r14, Y+6	; 0x06
    3086:	fd 80       	ldd	r15, Y+5	; 0x05
    3088:	0c 81       	ldd	r16, Y+4	; 0x04
    308a:	1b 81       	ldd	r17, Y+3	; 0x03
    308c:	aa 81       	ldd	r26, Y+2	; 0x02
    308e:	b9 81       	ldd	r27, Y+1	; 0x01
    3090:	ce 0f       	add	r28, r30
    3092:	d1 1d       	adc	r29, r1
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	ed 01       	movw	r28, r26
    30a0:	08 95       	ret

000030a2 <malloc>:
    30a2:	0f 93       	push	r16
    30a4:	1f 93       	push	r17
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	82 30       	cpi	r24, 0x02	; 2
    30ac:	91 05       	cpc	r25, r1
    30ae:	10 f4       	brcc	.+4      	; 0x30b4 <malloc+0x12>
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <__flp>
    30b8:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <__flp+0x1>
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	a0 e0       	ldi	r26, 0x00	; 0
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	30 97       	sbiw	r30, 0x00	; 0
    30c6:	19 f1       	breq	.+70     	; 0x310e <malloc+0x6c>
    30c8:	40 81       	ld	r20, Z
    30ca:	51 81       	ldd	r21, Z+1	; 0x01
    30cc:	02 81       	ldd	r16, Z+2	; 0x02
    30ce:	13 81       	ldd	r17, Z+3	; 0x03
    30d0:	48 17       	cp	r20, r24
    30d2:	59 07       	cpc	r21, r25
    30d4:	c8 f0       	brcs	.+50     	; 0x3108 <malloc+0x66>
    30d6:	84 17       	cp	r24, r20
    30d8:	95 07       	cpc	r25, r21
    30da:	69 f4       	brne	.+26     	; 0x30f6 <malloc+0x54>
    30dc:	10 97       	sbiw	r26, 0x00	; 0
    30de:	31 f0       	breq	.+12     	; 0x30ec <malloc+0x4a>
    30e0:	12 96       	adiw	r26, 0x02	; 2
    30e2:	0c 93       	st	X, r16
    30e4:	12 97       	sbiw	r26, 0x02	; 2
    30e6:	13 96       	adiw	r26, 0x03	; 3
    30e8:	1c 93       	st	X, r17
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <malloc+0x98>
    30ec:	00 93 28 07 	sts	0x0728, r16	; 0x800728 <__flp>
    30f0:	10 93 29 07 	sts	0x0729, r17	; 0x800729 <__flp+0x1>
    30f4:	22 c0       	rjmp	.+68     	; 0x313a <malloc+0x98>
    30f6:	21 15       	cp	r18, r1
    30f8:	31 05       	cpc	r19, r1
    30fa:	19 f0       	breq	.+6      	; 0x3102 <malloc+0x60>
    30fc:	42 17       	cp	r20, r18
    30fe:	53 07       	cpc	r21, r19
    3100:	18 f4       	brcc	.+6      	; 0x3108 <malloc+0x66>
    3102:	9a 01       	movw	r18, r20
    3104:	bd 01       	movw	r22, r26
    3106:	ef 01       	movw	r28, r30
    3108:	df 01       	movw	r26, r30
    310a:	f8 01       	movw	r30, r16
    310c:	db cf       	rjmp	.-74     	; 0x30c4 <malloc+0x22>
    310e:	21 15       	cp	r18, r1
    3110:	31 05       	cpc	r19, r1
    3112:	f9 f0       	breq	.+62     	; 0x3152 <malloc+0xb0>
    3114:	28 1b       	sub	r18, r24
    3116:	39 0b       	sbc	r19, r25
    3118:	24 30       	cpi	r18, 0x04	; 4
    311a:	31 05       	cpc	r19, r1
    311c:	80 f4       	brcc	.+32     	; 0x313e <malloc+0x9c>
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	9b 81       	ldd	r25, Y+3	; 0x03
    3122:	61 15       	cp	r22, r1
    3124:	71 05       	cpc	r23, r1
    3126:	21 f0       	breq	.+8      	; 0x3130 <malloc+0x8e>
    3128:	fb 01       	movw	r30, r22
    312a:	93 83       	std	Z+3, r25	; 0x03
    312c:	82 83       	std	Z+2, r24	; 0x02
    312e:	04 c0       	rjmp	.+8      	; 0x3138 <malloc+0x96>
    3130:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <__flp+0x1>
    3134:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <__flp>
    3138:	fe 01       	movw	r30, r28
    313a:	32 96       	adiw	r30, 0x02	; 2
    313c:	44 c0       	rjmp	.+136    	; 0x31c6 <malloc+0x124>
    313e:	fe 01       	movw	r30, r28
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	81 93       	st	Z+, r24
    3146:	91 93       	st	Z+, r25
    3148:	22 50       	subi	r18, 0x02	; 2
    314a:	31 09       	sbc	r19, r1
    314c:	39 83       	std	Y+1, r19	; 0x01
    314e:	28 83       	st	Y, r18
    3150:	3a c0       	rjmp	.+116    	; 0x31c6 <malloc+0x124>
    3152:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <__brkval>
    3156:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <__brkval+0x1>
    315a:	23 2b       	or	r18, r19
    315c:	41 f4       	brne	.+16     	; 0x316e <malloc+0xcc>
    315e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3162:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3166:	30 93 27 07 	sts	0x0727, r19	; 0x800727 <__brkval+0x1>
    316a:	20 93 26 07 	sts	0x0726, r18	; 0x800726 <__brkval>
    316e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3172:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3176:	21 15       	cp	r18, r1
    3178:	31 05       	cpc	r19, r1
    317a:	41 f4       	brne	.+16     	; 0x318c <malloc+0xea>
    317c:	2d b7       	in	r18, 0x3d	; 61
    317e:	3e b7       	in	r19, 0x3e	; 62
    3180:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3184:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3188:	24 1b       	sub	r18, r20
    318a:	35 0b       	sbc	r19, r21
    318c:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <__brkval>
    3190:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <__brkval+0x1>
    3194:	e2 17       	cp	r30, r18
    3196:	f3 07       	cpc	r31, r19
    3198:	a0 f4       	brcc	.+40     	; 0x31c2 <malloc+0x120>
    319a:	2e 1b       	sub	r18, r30
    319c:	3f 0b       	sbc	r19, r31
    319e:	28 17       	cp	r18, r24
    31a0:	39 07       	cpc	r19, r25
    31a2:	78 f0       	brcs	.+30     	; 0x31c2 <malloc+0x120>
    31a4:	ac 01       	movw	r20, r24
    31a6:	4e 5f       	subi	r20, 0xFE	; 254
    31a8:	5f 4f       	sbci	r21, 0xFF	; 255
    31aa:	24 17       	cp	r18, r20
    31ac:	35 07       	cpc	r19, r21
    31ae:	48 f0       	brcs	.+18     	; 0x31c2 <malloc+0x120>
    31b0:	4e 0f       	add	r20, r30
    31b2:	5f 1f       	adc	r21, r31
    31b4:	50 93 27 07 	sts	0x0727, r21	; 0x800727 <__brkval+0x1>
    31b8:	40 93 26 07 	sts	0x0726, r20	; 0x800726 <__brkval>
    31bc:	81 93       	st	Z+, r24
    31be:	91 93       	st	Z+, r25
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <malloc+0x124>
    31c2:	e0 e0       	ldi	r30, 0x00	; 0
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	cf 01       	movw	r24, r30
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	08 95       	ret

000031d2 <free>:
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	09 f4       	brne	.+2      	; 0x31dc <free+0xa>
    31da:	81 c0       	rjmp	.+258    	; 0x32de <free+0x10c>
    31dc:	fc 01       	movw	r30, r24
    31de:	32 97       	sbiw	r30, 0x02	; 2
    31e0:	13 82       	std	Z+3, r1	; 0x03
    31e2:	12 82       	std	Z+2, r1	; 0x02
    31e4:	a0 91 28 07 	lds	r26, 0x0728	; 0x800728 <__flp>
    31e8:	b0 91 29 07 	lds	r27, 0x0729	; 0x800729 <__flp+0x1>
    31ec:	10 97       	sbiw	r26, 0x00	; 0
    31ee:	81 f4       	brne	.+32     	; 0x3210 <free+0x3e>
    31f0:	20 81       	ld	r18, Z
    31f2:	31 81       	ldd	r19, Z+1	; 0x01
    31f4:	82 0f       	add	r24, r18
    31f6:	93 1f       	adc	r25, r19
    31f8:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <__brkval>
    31fc:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <__brkval+0x1>
    3200:	28 17       	cp	r18, r24
    3202:	39 07       	cpc	r19, r25
    3204:	51 f5       	brne	.+84     	; 0x325a <free+0x88>
    3206:	f0 93 27 07 	sts	0x0727, r31	; 0x800727 <__brkval+0x1>
    320a:	e0 93 26 07 	sts	0x0726, r30	; 0x800726 <__brkval>
    320e:	67 c0       	rjmp	.+206    	; 0x32de <free+0x10c>
    3210:	ed 01       	movw	r28, r26
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	ce 17       	cp	r28, r30
    3218:	df 07       	cpc	r29, r31
    321a:	40 f4       	brcc	.+16     	; 0x322c <free+0x5a>
    321c:	4a 81       	ldd	r20, Y+2	; 0x02
    321e:	5b 81       	ldd	r21, Y+3	; 0x03
    3220:	9e 01       	movw	r18, r28
    3222:	41 15       	cp	r20, r1
    3224:	51 05       	cpc	r21, r1
    3226:	f1 f0       	breq	.+60     	; 0x3264 <free+0x92>
    3228:	ea 01       	movw	r28, r20
    322a:	f5 cf       	rjmp	.-22     	; 0x3216 <free+0x44>
    322c:	d3 83       	std	Z+3, r29	; 0x03
    322e:	c2 83       	std	Z+2, r28	; 0x02
    3230:	40 81       	ld	r20, Z
    3232:	51 81       	ldd	r21, Z+1	; 0x01
    3234:	84 0f       	add	r24, r20
    3236:	95 1f       	adc	r25, r21
    3238:	c8 17       	cp	r28, r24
    323a:	d9 07       	cpc	r29, r25
    323c:	59 f4       	brne	.+22     	; 0x3254 <free+0x82>
    323e:	88 81       	ld	r24, Y
    3240:	99 81       	ldd	r25, Y+1	; 0x01
    3242:	84 0f       	add	r24, r20
    3244:	95 1f       	adc	r25, r21
    3246:	02 96       	adiw	r24, 0x02	; 2
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	9b 81       	ldd	r25, Y+3	; 0x03
    3250:	93 83       	std	Z+3, r25	; 0x03
    3252:	82 83       	std	Z+2, r24	; 0x02
    3254:	21 15       	cp	r18, r1
    3256:	31 05       	cpc	r19, r1
    3258:	29 f4       	brne	.+10     	; 0x3264 <free+0x92>
    325a:	f0 93 29 07 	sts	0x0729, r31	; 0x800729 <__flp+0x1>
    325e:	e0 93 28 07 	sts	0x0728, r30	; 0x800728 <__flp>
    3262:	3d c0       	rjmp	.+122    	; 0x32de <free+0x10c>
    3264:	e9 01       	movw	r28, r18
    3266:	fb 83       	std	Y+3, r31	; 0x03
    3268:	ea 83       	std	Y+2, r30	; 0x02
    326a:	49 91       	ld	r20, Y+
    326c:	59 91       	ld	r21, Y+
    326e:	c4 0f       	add	r28, r20
    3270:	d5 1f       	adc	r29, r21
    3272:	ec 17       	cp	r30, r28
    3274:	fd 07       	cpc	r31, r29
    3276:	61 f4       	brne	.+24     	; 0x3290 <free+0xbe>
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	84 0f       	add	r24, r20
    327e:	95 1f       	adc	r25, r21
    3280:	02 96       	adiw	r24, 0x02	; 2
    3282:	e9 01       	movw	r28, r18
    3284:	99 83       	std	Y+1, r25	; 0x01
    3286:	88 83       	st	Y, r24
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	9b 83       	std	Y+3, r25	; 0x03
    328e:	8a 83       	std	Y+2, r24	; 0x02
    3290:	e0 e0       	ldi	r30, 0x00	; 0
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	12 96       	adiw	r26, 0x02	; 2
    3296:	8d 91       	ld	r24, X+
    3298:	9c 91       	ld	r25, X
    329a:	13 97       	sbiw	r26, 0x03	; 3
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	19 f0       	breq	.+6      	; 0x32a6 <free+0xd4>
    32a0:	fd 01       	movw	r30, r26
    32a2:	dc 01       	movw	r26, r24
    32a4:	f7 cf       	rjmp	.-18     	; 0x3294 <free+0xc2>
    32a6:	8d 91       	ld	r24, X+
    32a8:	9c 91       	ld	r25, X
    32aa:	11 97       	sbiw	r26, 0x01	; 1
    32ac:	9d 01       	movw	r18, r26
    32ae:	2e 5f       	subi	r18, 0xFE	; 254
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	82 0f       	add	r24, r18
    32b4:	93 1f       	adc	r25, r19
    32b6:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <__brkval>
    32ba:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <__brkval+0x1>
    32be:	28 17       	cp	r18, r24
    32c0:	39 07       	cpc	r19, r25
    32c2:	69 f4       	brne	.+26     	; 0x32de <free+0x10c>
    32c4:	30 97       	sbiw	r30, 0x00	; 0
    32c6:	29 f4       	brne	.+10     	; 0x32d2 <free+0x100>
    32c8:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <__flp+0x1>
    32cc:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <__flp>
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <free+0x104>
    32d2:	13 82       	std	Z+3, r1	; 0x03
    32d4:	12 82       	std	Z+2, r1	; 0x02
    32d6:	b0 93 27 07 	sts	0x0727, r27	; 0x800727 <__brkval+0x1>
    32da:	a0 93 26 07 	sts	0x0726, r26	; 0x800726 <__brkval>
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <__do_global_dtors>:
    32e4:	10 e0       	ldi	r17, 0x00	; 0
    32e6:	c4 e5       	ldi	r28, 0x54	; 84
    32e8:	d0 e0       	ldi	r29, 0x00	; 0
    32ea:	04 c0       	rjmp	.+8      	; 0x32f4 <__do_global_dtors+0x10>
    32ec:	fe 01       	movw	r30, r28
    32ee:	0e 94 05 18 	call	0x300a	; 0x300a <__tablejump2__>
    32f2:	21 96       	adiw	r28, 0x01	; 1
    32f4:	c5 35       	cpi	r28, 0x55	; 85
    32f6:	d1 07       	cpc	r29, r17
    32f8:	c9 f7       	brne	.-14     	; 0x32ec <__do_global_dtors+0x8>
    32fa:	f8 94       	cli

000032fc <__stop_program>:
    32fc:	ff cf       	rjmp	.-2      	; 0x32fc <__stop_program>
