
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  0000325c  000032f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000325c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  0080017c  0080017c  0000336c  2**0
                  ALLOC
  3 .stab         00006414  00000000  00000000  0000336c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00012462  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000124a4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000080  00000000  00000000  000124e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002bb5  00000000  00000000  00012564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ade  00000000  00000000  00015119  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000d98  00000000  00000000  00015bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000140  00000000  00000000  00016990  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001471  00000000  00000000  00016ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bcb  00000000  00000000  00017f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  00019b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	c3 04       	cpc	r12, r3
      6a:	c0 04       	cpc	r12, r0
      6c:	cf 04       	cpc	r12, r15
      6e:	cb 08       	sbc	r12, r11
      70:	ce 08       	sbc	r12, r14
      72:	cc 04       	cpc	r12, r12
      74:	c9 04       	cpc	r12, r9
      76:	c6 04       	cpc	r12, r6
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	03 0a       	sbc	r0, r19

000000a8 <__ctors_end>:
      a8:	7a 14       	cp	r7, r10

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ec e5       	ldi	r30, 0x5C	; 92
      be:	f2 e3       	ldi	r31, 0x32	; 50
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ac 37       	cpi	r26, 0x7C	; 124
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	ac e7       	ldi	r26, 0x7C	; 124
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	aa 32       	cpi	r26, 0x2A	; 42
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 c8 09 	call	0x1390	; 0x1390 <main>
      f6:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	50 f4       	brcc	.+20     	; 0x11e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x20>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	50 f0       	brcs	.+20     	; 0x128 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x2a>
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	7e ef       	ldi	r23, 0xFE	; 254
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	96 e4       	ldi	r25, 0x46	; 70
     11c:	08 95       	ret
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	7e ef       	ldi	r23, 0xFE	; 254
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	96 e4       	ldi	r25, 0x46	; 70
     126:	08 95       	ret
     128:	ac 01       	movw	r20, r24
     12a:	44 0f       	add	r20, r20
     12c:	55 1f       	adc	r21, r21
     12e:	84 0f       	add	r24, r20
     130:	95 1f       	adc	r25, r21
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	4a e5       	ldi	r20, 0x5A	; 90
     138:	42 9f       	mul	r20, r18
     13a:	f0 01       	movw	r30, r0
     13c:	43 9f       	mul	r20, r19
     13e:	f0 0d       	add	r31, r0
     140:	11 24       	eor	r1, r1
     142:	8e 0f       	add	r24, r30
     144:	9f 1f       	adc	r25, r31
     146:	fc 01       	movw	r30, r24
     148:	e5 52       	subi	r30, 0x25	; 37
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	60 81       	ld	r22, Z
     14e:	71 81       	ldd	r23, Z+1	; 0x01
     150:	07 2e       	mov	r0, r23
     152:	00 0c       	add	r0, r0
     154:	88 0b       	sbc	r24, r24
     156:	99 0b       	sbc	r25, r25
     158:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     15c:	08 95       	ret

0000015e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     15e:	fc 01       	movw	r30, r24
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	2f 30       	cpi	r18, 0x0F	; 15
     166:	31 05       	cpc	r19, r1
     168:	28 f5       	brcc	.+74     	; 0x1b4 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x56>
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	8f 30       	cpi	r24, 0x0F	; 15
     170:	91 05       	cpc	r25, r1
     172:	28 f1       	brcs	.+74     	; 0x1be <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	7e ef       	ldi	r23, 0xFE	; 254
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	96 e4       	ldi	r25, 0x46	; 70
     17c:	08 95       	ret
     17e:	ac 01       	movw	r20, r24
     180:	44 0f       	add	r20, r20
     182:	55 1f       	adc	r21, r21
     184:	84 0f       	add	r24, r20
     186:	95 1f       	adc	r25, r21
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	4a e5       	ldi	r20, 0x5A	; 90
     18e:	42 9f       	mul	r20, r18
     190:	f0 01       	movw	r30, r0
     192:	43 9f       	mul	r20, r19
     194:	f0 0d       	add	r31, r0
     196:	11 24       	eor	r1, r1
     198:	8e 0f       	add	r24, r30
     19a:	9f 1f       	adc	r25, r31
     19c:	fc 01       	movw	r30, r24
     19e:	e5 52       	subi	r30, 0x25	; 37
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	60 81       	ld	r22, Z
     1a4:	71 81       	ldd	r23, Z+1	; 0x01
     1a6:	07 2e       	mov	r0, r23
     1a8:	00 0c       	add	r0, r0
     1aa:	88 0b       	sbc	r24, r24
     1ac:	99 0b       	sbc	r25, r25
     1ae:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     1b2:	08 95       	ret
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	7e ef       	ldi	r23, 0xFE	; 254
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	96 e4       	ldi	r25, 0x46	; 70
     1bc:	08 95       	ret
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e8 0f       	add	r30, r24
     1c6:	f9 1f       	adc	r31, r25
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	6a e5       	ldi	r22, 0x5A	; 90
     1ce:	62 9f       	mul	r22, r18
     1d0:	a0 01       	movw	r20, r0
     1d2:	63 9f       	mul	r22, r19
     1d4:	50 0d       	add	r21, r0
     1d6:	11 24       	eor	r1, r1
     1d8:	e4 0f       	add	r30, r20
     1da:	f5 1f       	adc	r31, r21
     1dc:	e5 52       	subi	r30, 0x25	; 37
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	45 81       	ldd	r20, Z+5	; 0x05
     1e2:	41 11       	cpse	r20, r1
     1e4:	cc cf       	rjmp	.-104    	; 0x17e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x20>
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	7e ef       	ldi	r23, 0xFE	; 254
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	96 e4       	ldi	r25, 0x46	; 70
     1ee:	08 95       	ret

000001f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 81       	ld	r18, Z
     1f4:	31 81       	ldd	r19, Z+1	; 0x01
     1f6:	2f 30       	cpi	r18, 0x0F	; 15
     1f8:	31 05       	cpc	r19, r1
     1fa:	28 f5       	brcc	.+74     	; 0x246 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x56>
     1fc:	82 81       	ldd	r24, Z+2	; 0x02
     1fe:	93 81       	ldd	r25, Z+3	; 0x03
     200:	8f 30       	cpi	r24, 0x0F	; 15
     202:	91 05       	cpc	r25, r1
     204:	50 f1       	brcs	.+84     	; 0x25a <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x6a>
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	7e ef       	ldi	r23, 0xFE	; 254
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	96 e4       	ldi	r25, 0x46	; 70
     20e:	08 95       	ret
     210:	ac 01       	movw	r20, r24
     212:	44 0f       	add	r20, r20
     214:	55 1f       	adc	r21, r21
     216:	84 0f       	add	r24, r20
     218:	95 1f       	adc	r25, r21
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	4a e5       	ldi	r20, 0x5A	; 90
     220:	42 9f       	mul	r20, r18
     222:	f0 01       	movw	r30, r0
     224:	43 9f       	mul	r20, r19
     226:	f0 0d       	add	r31, r0
     228:	11 24       	eor	r1, r1
     22a:	8e 0f       	add	r24, r30
     22c:	9f 1f       	adc	r25, r31
     22e:	fc 01       	movw	r30, r24
     230:	e5 52       	subi	r30, 0x25	; 37
     232:	fe 4f       	sbci	r31, 0xFE	; 254
     234:	62 81       	ldd	r22, Z+2	; 0x02
     236:	73 81       	ldd	r23, Z+3	; 0x03
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     244:	08 95       	ret
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	7e ef       	ldi	r23, 0xFE	; 254
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	96 e4       	ldi	r25, 0x46	; 70
     24e:	08 95       	ret
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	7e ef       	ldi	r23, 0xFE	; 254
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	96 e4       	ldi	r25, 0x46	; 70
     258:	08 95       	ret
     25a:	fc 01       	movw	r30, r24
     25c:	ee 0f       	add	r30, r30
     25e:	ff 1f       	adc	r31, r31
     260:	e8 0f       	add	r30, r24
     262:	f9 1f       	adc	r31, r25
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	6a e5       	ldi	r22, 0x5A	; 90
     26a:	62 9f       	mul	r22, r18
     26c:	a0 01       	movw	r20, r0
     26e:	63 9f       	mul	r22, r19
     270:	50 0d       	add	r21, r0
     272:	11 24       	eor	r1, r1
     274:	e4 0f       	add	r30, r20
     276:	f5 1f       	adc	r31, r21
     278:	e5 52       	subi	r30, 0x25	; 37
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	45 81       	ldd	r20, Z+5	; 0x05
     27e:	41 11       	cpse	r20, r1
     280:	e7 cf       	rjmp	.-50     	; 0x250 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     282:	c6 cf       	rjmp	.-116    	; 0x210 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x20>

00000284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	31 81       	ldd	r19, Z+1	; 0x01
     292:	2f 30       	cpi	r18, 0x0F	; 15
     294:	31 05       	cpc	r19, r1
     296:	08 f0       	brcs	.+2      	; 0x29a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x16>
     298:	50 c0       	rjmp	.+160    	; 0x33a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xb6>
     29a:	42 81       	ldd	r20, Z+2	; 0x02
     29c:	53 81       	ldd	r21, Z+3	; 0x03
     29e:	4f 30       	cpi	r20, 0x0F	; 15
     2a0:	51 05       	cpc	r21, r1
     2a2:	08 f4       	brcc	.+2      	; 0x2a6 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>
     2a4:	59 c0       	rjmp	.+178    	; 0x358 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xd4>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	7e ef       	ldi	r23, 0xFE	; 254
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	96 e4       	ldi	r25, 0x46	; 70
     2ae:	69 c0       	rjmp	.+210    	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     2b0:	fa 01       	movw	r30, r20
     2b2:	ee 0f       	add	r30, r30
     2b4:	ff 1f       	adc	r31, r31
     2b6:	e4 0f       	add	r30, r20
     2b8:	f5 1f       	adc	r31, r21
     2ba:	ee 0f       	add	r30, r30
     2bc:	ff 1f       	adc	r31, r31
     2be:	aa e5       	ldi	r26, 0x5A	; 90
     2c0:	a2 9f       	mul	r26, r18
     2c2:	c0 01       	movw	r24, r0
     2c4:	a3 9f       	mul	r26, r19
     2c6:	90 0d       	add	r25, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	e8 0f       	add	r30, r24
     2cc:	f9 1f       	adc	r31, r25
     2ce:	e5 52       	subi	r30, 0x25	; 37
     2d0:	fe 4f       	sbci	r31, 0xFE	; 254
     2d2:	85 81       	ldd	r24, Z+5	; 0x05
     2d4:	81 11       	cpse	r24, r1
     2d6:	36 c0       	rjmp	.+108    	; 0x344 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xc0>
     2d8:	fb 01       	movw	r30, r22
     2da:	80 81       	ld	r24, Z
     2dc:	91 81       	ldd	r25, Z+1	; 0x01
     2de:	fc 01       	movw	r30, r24
     2e0:	e2 1b       	sub	r30, r18
     2e2:	f3 0b       	sbc	r31, r19
     2e4:	cf 01       	movw	r24, r30
     2e6:	22 f4       	brpl	.+8      	; 0x2f0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x6c>
     2e8:	88 27       	eor	r24, r24
     2ea:	99 27       	eor	r25, r25
     2ec:	8e 1b       	sub	r24, r30
     2ee:	9f 0b       	sbc	r25, r31
     2f0:	fb 01       	movw	r30, r22
     2f2:	22 81       	ldd	r18, Z+2	; 0x02
     2f4:	33 81       	ldd	r19, Z+3	; 0x03
     2f6:	b9 01       	movw	r22, r18
     2f8:	64 1b       	sub	r22, r20
     2fa:	75 0b       	sbc	r23, r21
     2fc:	9b 01       	movw	r18, r22
     2fe:	22 f4       	brpl	.+8      	; 0x308 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x84>
     300:	22 27       	eor	r18, r18
     302:	33 27       	eor	r19, r19
     304:	26 1b       	sub	r18, r22
     306:	37 0b       	sbc	r19, r23
     308:	88 9f       	mul	r24, r24
     30a:	60 01       	movw	r12, r0
     30c:	89 9f       	mul	r24, r25
     30e:	d0 0c       	add	r13, r0
     310:	d0 0c       	add	r13, r0
     312:	11 24       	eor	r1, r1
     314:	22 9f       	mul	r18, r18
     316:	c0 01       	movw	r24, r0
     318:	23 9f       	mul	r18, r19
     31a:	90 0d       	add	r25, r0
     31c:	90 0d       	add	r25, r0
     31e:	11 24       	eor	r1, r1
     320:	c8 0e       	add	r12, r24
     322:	d9 1e       	adc	r13, r25
     324:	0d 2c       	mov	r0, r13
     326:	00 0c       	add	r0, r0
     328:	ee 08       	sbc	r14, r14
     32a:	ff 08       	sbc	r15, r15
     32c:	c7 01       	movw	r24, r14
     32e:	b6 01       	movw	r22, r12
     330:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     334:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <sqrt>
     338:	24 c0       	rjmp	.+72     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	7e ef       	ldi	r23, 0xFE	; 254
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	96 e4       	ldi	r25, 0x46	; 70
     342:	1f c0       	rjmp	.+62     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	7e ef       	ldi	r23, 0xFE	; 254
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	96 e4       	ldi	r25, 0x46	; 70
     34c:	1a c0       	rjmp	.+52     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	7e ef       	ldi	r23, 0xFE	; 254
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	96 e4       	ldi	r25, 0x46	; 70
     356:	15 c0       	rjmp	.+42     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     358:	fa 01       	movw	r30, r20
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	e4 0f       	add	r30, r20
     360:	f5 1f       	adc	r31, r21
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	aa e5       	ldi	r26, 0x5A	; 90
     368:	a2 9f       	mul	r26, r18
     36a:	c0 01       	movw	r24, r0
     36c:	a3 9f       	mul	r26, r19
     36e:	90 0d       	add	r25, r0
     370:	11 24       	eor	r1, r1
     372:	e8 0f       	add	r30, r24
     374:	f9 1f       	adc	r31, r25
     376:	e5 52       	subi	r30, 0x25	; 37
     378:	fe 4f       	sbci	r31, 0xFE	; 254
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	81 11       	cpse	r24, r1
     37e:	e7 cf       	rjmp	.-50     	; 0x34e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xca>
     380:	97 cf       	rjmp	.-210    	; 0x2b0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x2c>
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	08 95       	ret

0000038c <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
        }

        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     394:	fb 01       	movw	r30, r22
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	8f 30       	cpi	r24, 0x0F	; 15
     39c:	91 05       	cpc	r25, r1
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x16>
     3a0:	4f c0       	rjmp	.+158    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3a2:	22 81       	ldd	r18, Z+2	; 0x02
     3a4:	33 81       	ldd	r19, Z+3	; 0x03
     3a6:	2f 30       	cpi	r18, 0x0F	; 15
     3a8:	31 05       	cpc	r19, r1
     3aa:	08 f4       	brcc	.+2      	; 0x3ae <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>
     3ac:	58 c0       	rjmp	.+176    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	7e ef       	ldi	r23, 0xFE	; 254
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	96 e4       	ldi	r25, 0x46	; 70
     3b6:	68 c0       	rjmp	.+208    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     3b8:	f9 01       	movw	r30, r18
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	e2 0f       	add	r30, r18
     3c0:	f3 1f       	adc	r31, r19
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	aa e5       	ldi	r26, 0x5A	; 90
     3c8:	a8 9f       	mul	r26, r24
     3ca:	b0 01       	movw	r22, r0
     3cc:	a9 9f       	mul	r26, r25
     3ce:	70 0d       	add	r23, r0
     3d0:	11 24       	eor	r1, r1
     3d2:	e6 0f       	add	r30, r22
     3d4:	f7 1f       	adc	r31, r23
     3d6:	e5 52       	subi	r30, 0x25	; 37
     3d8:	fe 4f       	sbci	r31, 0xFE	; 254
     3da:	65 81       	ldd	r22, Z+5	; 0x05
     3dc:	61 11       	cpse	r22, r1
     3de:	35 c0       	rjmp	.+106    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
     3e0:	fa 01       	movw	r30, r20
     3e2:	60 81       	ld	r22, Z
     3e4:	71 81       	ldd	r23, Z+1	; 0x01
     3e6:	68 1b       	sub	r22, r24
     3e8:	79 0b       	sbc	r23, r25
     3ea:	cb 01       	movw	r24, r22
     3ec:	99 23       	and	r25, r25
     3ee:	24 f4       	brge	.+8      	; 0x3f8 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x6c>
     3f0:	88 27       	eor	r24, r24
     3f2:	99 27       	eor	r25, r25
     3f4:	86 1b       	sub	r24, r22
     3f6:	97 0b       	sbc	r25, r23
     3f8:	fa 01       	movw	r30, r20
     3fa:	42 81       	ldd	r20, Z+2	; 0x02
     3fc:	53 81       	ldd	r21, Z+3	; 0x03
     3fe:	42 1b       	sub	r20, r18
     400:	53 0b       	sbc	r21, r19
     402:	9a 01       	movw	r18, r20
     404:	22 f4       	brpl	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	22 27       	eor	r18, r18
     408:	33 27       	eor	r19, r19
     40a:	24 1b       	sub	r18, r20
     40c:	35 0b       	sbc	r19, r21
     40e:	88 9f       	mul	r24, r24
     410:	60 01       	movw	r12, r0
     412:	89 9f       	mul	r24, r25
     414:	d0 0c       	add	r13, r0
     416:	d0 0c       	add	r13, r0
     418:	11 24       	eor	r1, r1
     41a:	22 9f       	mul	r18, r18
     41c:	c0 01       	movw	r24, r0
     41e:	23 9f       	mul	r18, r19
     420:	90 0d       	add	r25, r0
     422:	90 0d       	add	r25, r0
     424:	11 24       	eor	r1, r1
     426:	c8 0e       	add	r12, r24
     428:	d9 1e       	adc	r13, r25
     42a:	0d 2c       	mov	r0, r13
     42c:	00 0c       	add	r0, r0
     42e:	ee 08       	sbc	r14, r14
     430:	ff 08       	sbc	r15, r15
     432:	c7 01       	movw	r24, r14
     434:	b6 01       	movw	r22, r12
     436:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     43a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <sqrt>
     43e:	24 c0       	rjmp	.+72     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	7e ef       	ldi	r23, 0xFE	; 254
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	96 e4       	ldi	r25, 0x46	; 70
     448:	1f c0       	rjmp	.+62     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	7e ef       	ldi	r23, 0xFE	; 254
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	96 e4       	ldi	r25, 0x46	; 70
     452:	1a c0       	rjmp	.+52     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	7e ef       	ldi	r23, 0xFE	; 254
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	96 e4       	ldi	r25, 0x46	; 70
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
                }

                return result;
     45c:	15 c0       	rjmp	.+42     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     45e:	f9 01       	movw	r30, r18
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e2 0f       	add	r30, r18
     466:	f3 1f       	adc	r31, r19
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	aa e5       	ldi	r26, 0x5A	; 90
     46e:	a8 9f       	mul	r26, r24
     470:	b0 01       	movw	r22, r0
     472:	a9 9f       	mul	r26, r25
     474:	70 0d       	add	r23, r0
     476:	11 24       	eor	r1, r1
     478:	e6 0f       	add	r30, r22
     47a:	f7 1f       	adc	r31, r23
     47c:	e5 52       	subi	r30, 0x25	; 37
     47e:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     480:	64 81       	ldd	r22, Z+4	; 0x04
     482:	61 11       	cpse	r22, r1
     484:	e7 cf       	rjmp	.-50     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     486:	98 cf       	rjmp	.-208    	; 0x3b8 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x2c>
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
                }

                return result;
            };
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	08 95       	ret

00000492 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     492:	fb 01       	movw	r30, r22
     494:	20 81       	ld	r18, Z
     496:	31 81       	ldd	r19, Z+1	; 0x01
     498:	2f 30       	cpi	r18, 0x0F	; 15
     49a:	31 05       	cpc	r19, r1
     49c:	50 f4       	brcc	.+20     	; 0x4b2 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x20>
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	8f 30       	cpi	r24, 0x0F	; 15
     4a4:	91 05       	cpc	r25, r1
     4a6:	50 f0       	brcs	.+20     	; 0x4bc <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x2a>

                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
                {
                    float result = SHRT_MAX;
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	7e ef       	ldi	r23, 0xFE	; 254
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	96 e4       	ldi	r25, 0x46	; 70
     4b0:	08 95       	ret
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	7e ef       	ldi	r23, 0xFE	; 254
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	96 e4       	ldi	r25, 0x46	; 70
     4ba:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     4bc:	ac 01       	movw	r20, r24
     4be:	44 0f       	add	r20, r20
     4c0:	55 1f       	adc	r21, r21
     4c2:	84 0f       	add	r24, r20
     4c4:	95 1f       	adc	r25, r21
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	4a e5       	ldi	r20, 0x5A	; 90
     4cc:	42 9f       	mul	r20, r18
     4ce:	f0 01       	movw	r30, r0
     4d0:	43 9f       	mul	r20, r19
     4d2:	f0 0d       	add	r31, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8e 0f       	add	r24, r30
     4d8:	9f 1f       	adc	r25, r31
     4da:	fc 01       	movw	r30, r24
     4dc:	e5 52       	subi	r30, 0x25	; 37
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	60 81       	ld	r22, Z
     4e2:	71 81       	ldd	r23, Z+1	; 0x01
     4e4:	07 2e       	mov	r0, r23
     4e6:	00 0c       	add	r0, r0
     4e8:	88 0b       	sbc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
                    }

                    return result;
                };
     4f0:	08 95       	ret

000004f2 <_ZN5Robot14initializeMenuEv>:
            print( ", " );
            print_long( pos.y );
            print( ")" );
        }

        void initializeMenu()
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
        {
            clear();
     4fc:	0e 94 3a 12 	call	0x2474	; 0x2474 <clear>

            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     500:	0f e0       	ldi	r16, 0x0F	; 15
     502:	10 e0       	ldi	r17, 0x00	; 0

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     504:	80 e1       	ldi	r24, 0x10	; 16
     506:	0e 94 ba 13 	call	0x2774	; 0x2774 <button_is_pressed>
     50a:	81 11       	cpse	r24, r1
     50c:	45 c0       	rjmp	.+138    	; 0x598 <_ZN5Robot14initializeMenuEv+0xa6>
            {
                if ( button_is_pressed( BUTTON_A ) )
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 ba 13 	call	0x2774	; 0x2774 <button_is_pressed>
     514:	88 23       	and	r24, r24
     516:	41 f0       	breq	.+16     	; 0x528 <_ZN5Robot14initializeMenuEv+0x36>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	9e 81       	ldd	r25, Y+6	; 0x06
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	b8 01       	movw	r22, r16
     520:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__divmodhi4>
     524:	9e 83       	std	Y+6, r25	; 0x06
     526:	8d 83       	std	Y+5, r24	; 0x05
                }

                if ( button_is_pressed( BUTTON_C ) )
     528:	80 e2       	ldi	r24, 0x20	; 32
     52a:	0e 94 ba 13 	call	0x2774	; 0x2774 <button_is_pressed>
     52e:	88 23       	and	r24, r24
     530:	41 f0       	breq	.+16     	; 0x542 <_ZN5Robot14initializeMenuEv+0x50>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     532:	8f 81       	ldd	r24, Y+7	; 0x07
     534:	98 85       	ldd	r25, Y+8	; 0x08
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	b8 01       	movw	r22, r16
     53a:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__divmodhi4>
     53e:	98 87       	std	Y+8, r25	; 0x08
     540:	8f 83       	std	Y+7, r24	; 0x07
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     542:	0e 94 3a 12 	call	0x2474	; 0x2474 <clear>
            print( "(" );
     546:	81 e5       	ldi	r24, 0x51	; 81
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 49 12 	call	0x2492	; 0x2492 <print>
            print_long( pos.x );
     54e:	6d 81       	ldd	r22, Y+5	; 0x05
     550:	7e 81       	ldd	r23, Y+6	; 0x06
     552:	07 2e       	mov	r0, r23
     554:	00 0c       	add	r0, r0
     556:	88 0b       	sbc	r24, r24
     558:	99 0b       	sbc	r25, r25
     55a:	0e 94 9e 12 	call	0x253c	; 0x253c <print_long>
            print( ", " );
     55e:	83 e5       	ldi	r24, 0x53	; 83
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 49 12 	call	0x2492	; 0x2492 <print>
            print_long( pos.y );
     566:	6f 81       	ldd	r22, Y+7	; 0x07
     568:	78 85       	ldd	r23, Y+8	; 0x08
     56a:	07 2e       	mov	r0, r23
     56c:	00 0c       	add	r0, r0
     56e:	88 0b       	sbc	r24, r24
     570:	99 0b       	sbc	r25, r25
     572:	0e 94 9e 12 	call	0x253c	; 0x253c <print_long>
            print( ")" );
     576:	86 e5       	ldi	r24, 0x56	; 86
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 49 12 	call	0x2492	; 0x2492 <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos );

                lcd_goto_xy( 0, 1 );
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 c1 12 	call	0x2582	; 0x2582 <lcd_goto_xy>
                print( " A B C " );
     586:	88 e5       	ldi	r24, 0x58	; 88
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 49 12 	call	0x2492	; 0x2492 <print>

                delay_ms( 100 );
     58e:	84 e6       	ldi	r24, 0x64	; 100
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     596:	b6 cf       	rjmp	.-148    	; 0x504 <_ZN5Robot14initializeMenuEv+0x12>

                delay_ms( 100 );
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     598:	80 e1       	ldi	r24, 0x10	; 16
     59a:	0e 94 a6 13 	call	0x274c	; 0x274c <wait_for_button_release>
            delay_ms( 1000 );
     59e:	88 ee       	ldi	r24, 0xE8	; 232
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
        }
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <_ZN5Robot8mainMenuEv>:

        //Main program menu
        void mainMenu()
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	a3 97       	sbiw	r28, 0x23	; 35
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	1c 01       	movw	r2, r24
        {
            clear();
     5c6:	0e 94 3a 12 	call	0x2474	; 0x2474 <clear>
            print( "A - Test" );
     5ca:	80 e6       	ldi	r24, 0x60	; 96
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 49 12 	call	0x2492	; 0x2492 <print>
            lcd_goto_xy( 0, 1 );
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 c1 12 	call	0x2582	; 0x2582 <lcd_goto_xy>
            print( "B - Main" );
     5da:	89 e6       	ldi	r24, 0x69	; 105
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 49 12 	call	0x2492	; 0x2492 <print>
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= LAPS_COUNT )
            {
                stepToGoal( finishPos );
     5e2:	91 01       	movw	r18, r2
     5e4:	2b 5f       	subi	r18, 0xFB	; 251
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	3d 8f       	std	Y+29, r19	; 0x1d
     5ea:	2c 8f       	std	Y+28, r18	; 0x1c
            //clear();
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     5ec:	c1 01       	movw	r24, r2
     5ee:	09 96       	adiw	r24, 0x09	; 9
     5f0:	99 a3       	std	Y+33, r25	; 0x21
     5f2:	88 a3       	std	Y+32, r24	; 0x20

            bool isSelectedProgram = false;

            while ( !isSelectedProgram )
            {
                if ( button_is_pressed( BUTTON_A ) )
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	0e 94 ba 13 	call	0x2774	; 0x2774 <button_is_pressed>
     5fa:	88 23       	and	r24, r24
     5fc:	31 f1       	breq	.+76     	; 0x64a <_ZN5Robot8mainMenuEv+0x9a>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0e 94 a6 13 	call	0x274c	; 0x274c <wait_for_button_release>
        // Displays the data returned from the sensors
        void testSensors()
        {
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );
     604:	61 01       	movw	r12, r2
     606:	99 e0       	ldi	r25, 0x09	; 9
     608:	c9 0e       	add	r12, r25
     60a:	d1 1c       	adc	r13, r1
     60c:	71 01       	movw	r14, r2
     60e:	a3 e1       	ldi	r26, 0x13	; 19
     610:	ea 0e       	add	r14, r26
     612:	f1 1c       	adc	r15, r1
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	c6 01       	movw	r24, r12
     618:	0e 94 41 14 	call	0x2882	; 0x2882 <read_line_sensors>
     61c:	86 01       	movw	r16, r12

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
                {
                    print_long( sensors[ i ] );
     61e:	f8 01       	movw	r30, r16
     620:	61 91       	ld	r22, Z+
     622:	71 91       	ld	r23, Z+
     624:	8f 01       	movw	r16, r30
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 9e 12 	call	0x253c	; 0x253c <print_long>
                    delay_ms( 500 );
     62e:	84 ef       	ldi	r24, 0xF4	; 244
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
                    clear();
     636:	0e 94 3a 12 	call	0x2474	; 0x2474 <clear>
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
     63a:	0e 15       	cp	r16, r14
     63c:	1f 05       	cpc	r17, r15
     63e:	79 f7       	brne	.-34     	; 0x61e <_ZN5Robot8mainMenuEv+0x6e>
                    delay_ms( 500 );
                    clear();
                }

                // Play sound to notify that the next iteration will begin.
                play( ">>a32" );
     640:	82 e7       	ldi	r24, 0x72	; 114
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 31 11 	call	0x2262	; 0x2262 <play>
     648:	e5 cf       	rjmp	.-54     	; 0x614 <_ZN5Robot8mainMenuEv+0x64>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
                    testSensors();
                }

                if ( button_is_pressed( BUTTON_B ) )
     64a:	80 e1       	ldi	r24, 0x10	; 16
     64c:	0e 94 ba 13 	call	0x2774	; 0x2774 <button_is_pressed>
     650:	88 23       	and	r24, r24
     652:	81 f2       	breq	.-96     	; 0x5f4 <_ZN5Robot8mainMenuEv+0x44>
                {
                    wait_for_button_release( BUTTON_B );//wait for the button to be released before run the program
     654:	80 e1       	ldi	r24, 0x10	; 16
     656:	0e 94 a6 13 	call	0x274c	; 0x274c <wait_for_button_release>
                    // mainRobotLogic the initialization menu
                    initializeMenu();
     65a:	c1 01       	movw	r24, r2
     65c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN5Robot14initializeMenuEv>
        }

        // Main logic function
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
     660:	d1 01       	movw	r26, r2
     662:	4d 91       	ld	r20, X+
     664:	5c 91       	ld	r21, X
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	12 96       	adiw	r26, 0x02	; 2
     66a:	8d 91       	ld	r24, X+
     66c:	9c 91       	ld	r25, X
     66e:	13 97       	sbiw	r26, 0x03	; 3
     670:	9c 01       	movw	r18, r24
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	2a e5       	ldi	r18, 0x5A	; 90
     680:	24 9f       	mul	r18, r20
     682:	f0 01       	movw	r30, r0
     684:	25 9f       	mul	r18, r21
     686:	f0 0d       	add	r31, r0
     688:	11 24       	eor	r1, r1
     68a:	8e 0f       	add	r24, r30
     68c:	9f 1f       	adc	r25, r31
     68e:	fc 01       	movw	r30, r24
     690:	e5 52       	subi	r30, 0x25	; 37
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	11 82       	std	Z+1, r1	; 0x01
     696:	10 82       	st	Z, r1
            matrix[ position.x ][ position.y ].isVisited	= true;
     698:	4d 91       	ld	r20, X+
     69a:	5c 91       	ld	r21, X
     69c:	11 97       	sbiw	r26, 0x01	; 1
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	8d 91       	ld	r24, X+
     6a2:	9c 91       	ld	r25, X
     6a4:	13 97       	sbiw	r26, 0x03	; 3
     6a6:	bc 01       	movw	r22, r24
     6a8:	66 0f       	add	r22, r22
     6aa:	77 1f       	adc	r23, r23
     6ac:	86 0f       	add	r24, r22
     6ae:	97 1f       	adc	r25, r23
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	24 9f       	mul	r18, r20
     6b6:	f0 01       	movw	r30, r0
     6b8:	25 9f       	mul	r18, r21
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	8e 0f       	add	r24, r30
     6c0:	9f 1f       	adc	r25, r31
     6c2:	fc 01       	movw	r30, r24
     6c4:	e5 52       	subi	r30, 0x25	; 37
     6c6:	fe 4f       	sbci	r31, 0xFE	; 254
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	85 83       	std	Z+5, r24	; 0x05

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     6cc:	1c 8a       	std	Y+20, r1	; 0x14
     6ce:	1e 8a       	std	Y+22, r1	; 0x16
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     6d0:	f1 01       	movw	r30, r2
     6d2:	20 81       	ld	r18, Z
     6d4:	31 81       	ldd	r19, Z+1	; 0x01
     6d6:	85 81       	ldd	r24, Z+5	; 0x05
     6d8:	96 81       	ldd	r25, Z+6	; 0x06
     6da:	28 17       	cp	r18, r24
     6dc:	39 07       	cpc	r19, r25
     6de:	41 f4       	brne	.+16     	; 0x6f0 <_ZN5Robot8mainMenuEv+0x140>
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= LAPS_COUNT )
     6e0:	22 81       	ldd	r18, Z+2	; 0x02
     6e2:	33 81       	ldd	r19, Z+3	; 0x03
     6e4:	87 81       	ldd	r24, Z+7	; 0x07
     6e6:	90 85       	ldd	r25, Z+8	; 0x08
     6e8:	28 17       	cp	r18, r24
     6ea:	39 07       	cpc	r19, r25
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <_ZN5Robot8mainMenuEv+0x140>
     6ee:	82 cf       	rjmp	.-252    	; 0x5f4 <_ZN5Robot8mainMenuEv+0x44>
     6f0:	d1 01       	movw	r26, r2
     6f2:	53 96       	adiw	r26, 0x13	; 19
     6f4:	8d 91       	ld	r24, X+
     6f6:	9c 91       	ld	r25, X
     6f8:	54 97       	sbiw	r26, 0x14	; 20
     6fa:	03 97       	sbiw	r24, 0x03	; 3
     6fc:	0c f0       	brlt	.+2      	; 0x700 <_ZN5Robot8mainMenuEv+0x150>
     6fe:	7a cf       	rjmp	.-268    	; 0x5f4 <_ZN5Robot8mainMenuEv+0x44>
            {
                stepToGoal( finishPos );
     700:	e8 e0       	ldi	r30, 0x08	; 8
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	ff 8f       	std	Y+31, r31	; 0x1f
     706:	ee 8f       	std	Y+30, r30	; 0x1e
                {
                    nextPos = this->getNextPos( goalPos );
                }
                else
                {
                    nextPos = this->getNearestToFinishAdjacent( position );
     708:	2a 8a       	std	Y+18, r2	; 0x12
     70a:	3b 8a       	std	Y+19, r3	; 0x13

            while ( count < 8 )
            {
                count++;

                if ( lap < LAPS_COUNT )
     70c:	d1 01       	movw	r26, r2
     70e:	53 96       	adiw	r26, 0x13	; 19
     710:	8d 91       	ld	r24, X+
     712:	9c 91       	ld	r25, X
     714:	54 97       	sbiw	r26, 0x14	; 20
     716:	02 97       	sbiw	r24, 0x02	; 2
     718:	0c f0       	brlt	.+2      	; 0x71c <_ZN5Robot8mainMenuEv+0x16c>
     71a:	c1 c0       	rjmp	.+386    	; 0x89e <_ZN5Robot8mainMenuEv+0x2ee>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     71c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     71e:	7d 8d       	ldd	r23, Y+29	; 0x1d
     720:	8a 89       	ldd	r24, Y+18	; 0x12
     722:	9b 89       	ldd	r25, Y+19	; 0x13
     724:	0e 94 42 01 	call	0x284	; 0x284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     728:	76 2e       	mov	r7, r22
     72a:	67 2e       	mov	r6, r23
     72c:	8f 87       	std	Y+15, r24	; 0x0f
     72e:	98 8b       	std	Y+16, r25	; 0x10
            Point2D	minPos( from );
     730:	d1 01       	movw	r26, r2
     732:	8d 91       	ld	r24, X+
     734:	9d 91       	ld	r25, X+
     736:	0d 90       	ld	r0, X+
     738:	bc 91       	ld	r27, X
     73a:	a0 2d       	mov	r26, r0
     73c:	88 8f       	std	Y+24, r24	; 0x18
     73e:	99 8f       	std	Y+25, r25	; 0x19
     740:	aa 8f       	std	Y+26, r26	; 0x1a
     742:	bb 8f       	std	Y+27, r27	; 0x1b
            short	pos			= ( short )orientation;
     744:	f1 01       	movw	r30, r2
     746:	84 80       	ldd	r8, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
     748:	8c 89       	ldd	r24, Y+20	; 0x14
     74a:	9e 89       	ldd	r25, Y+22	; 0x16
     74c:	91 2c       	mov	r9, r1
     74e:	24 01       	movw	r4, r8
     750:	8c 01       	movw	r16, r24
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     752:	88 0d       	add	r24, r8
     754:	99 1d       	adc	r25, r9
     756:	87 70       	andi	r24, 0x07	; 7
     758:	90 78       	andi	r25, 0x80	; 128
     75a:	99 23       	and	r25, r25
     75c:	24 f4       	brge	.+8      	; 0x766 <_ZN5Robot8mainMenuEv+0x1b6>
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	88 6f       	ori	r24, 0xF8	; 248
     762:	9f 6f       	ori	r25, 0xFF	; 255
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	fc 01       	movw	r30, r24
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	ec 5e       	subi	r30, 0xEC	; 236
     76e:	fe 4f       	sbci	r31, 0xFE	; 254
     770:	d1 01       	movw	r26, r2
     772:	4d 91       	ld	r20, X+
     774:	5c 91       	ld	r21, X
     776:	11 97       	sbiw	r26, 0x01	; 1
     778:	20 81       	ld	r18, Z
     77a:	31 81       	ldd	r19, Z+1	; 0x01
     77c:	24 0f       	add	r18, r20
     77e:	35 1f       	adc	r19, r21
     780:	3a 83       	std	Y+2, r19	; 0x02
     782:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	ad 90       	ld	r10, X+
     788:	bc 90       	ld	r11, X
     78a:	13 97       	sbiw	r26, 0x03	; 3
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	fc 01       	movw	r30, r24
     792:	ec 5d       	subi	r30, 0xDC	; 220
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	8a 0d       	add	r24, r10
     79c:	9b 1d       	adc	r25, r11
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     7a2:	6c 8d       	ldd	r22, Y+28	; 0x1c
     7a4:	7d 8d       	ldd	r23, Y+29	; 0x1d
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	0e 94 42 01 	call	0x284	; 0x284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     7ae:	c6 2e       	mov	r12, r22
     7b0:	d7 2e       	mov	r13, r23
     7b2:	e8 2e       	mov	r14, r24
     7b4:	f9 2e       	mov	r15, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     7b6:	27 2d       	mov	r18, r7
     7b8:	36 2d       	mov	r19, r6
     7ba:	4f 85       	ldd	r20, Y+15	; 0x0f
     7bc:	58 89       	ldd	r21, Y+16	; 0x10
     7be:	0e 94 49 0a 	call	0x1492	; 0x1492 <__cmpsf2>
     7c2:	88 23       	and	r24, r24
     7c4:	64 f4       	brge	.+24     	; 0x7de <_ZN5Robot8mainMenuEv+0x22e>
                {
                    minDist = currDist;
                    minPos	= currPos;
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	ab 81       	ldd	r26, Y+3	; 0x03
     7cc:	bc 81       	ldd	r27, Y+4	; 0x04
     7ce:	88 8f       	std	Y+24, r24	; 0x18
     7d0:	99 8f       	std	Y+25, r25	; 0x19
     7d2:	aa 8f       	std	Y+26, r26	; 0x1a
     7d4:	bb 8f       	std	Y+27, r27	; 0x1b
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     7d6:	7c 2c       	mov	r7, r12
     7d8:	6d 2c       	mov	r6, r13
     7da:	ef 86       	std	Y+15, r14	; 0x0f
     7dc:	f8 8a       	std	Y+16, r15	; 0x10
     7de:	c8 01       	movw	r24, r16
     7e0:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	91 05       	cpc	r25, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <_ZN5Robot8mainMenuEv+0x23a>
     7e8:	b2 cf       	rjmp	.-156    	; 0x74e <_ZN5Robot8mainMenuEv+0x19e>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     7ea:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
     7ee:	68 8c       	ldd	r6, Y+24	; 0x18
     7f0:	79 8c       	ldd	r7, Y+25	; 0x19
     7f2:	ea 8c       	ldd	r14, Y+26	; 0x1a
     7f4:	fb 8c       	ldd	r15, Y+27	; 0x1b
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     7f6:	d1 01       	movw	r26, r2
     7f8:	8d 90       	ld	r8, X+
     7fa:	9c 90       	ld	r9, X
     7fc:	86 14       	cp	r8, r6
     7fe:	97 04       	cpc	r9, r7
     800:	09 f0       	breq	.+2      	; 0x804 <_ZN5Robot8mainMenuEv+0x254>
     802:	bc c4       	rjmp	.+2424   	; 0x117c <__stack+0x87d>
     804:	ae 14       	cp	r10, r14
     806:	bf 04       	cpc	r11, r15
     808:	09 f4       	brne	.+2      	; 0x80c <_ZN5Robot8mainMenuEv+0x25c>
     80a:	a4 c4       	rjmp	.+2376   	; 0x1154 <__stack+0x855>

                return result;
            };

            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );
     80c:	34 01       	movw	r6, r8
     80e:	ae c0       	rjmp	.+348    	; 0x96c <__stack+0x6d>
     810:	99 8f       	std	Y+25, r25	; 0x19
     812:	88 8f       	std	Y+24, r24	; 0x18

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     814:	84 0d       	add	r24, r4
     816:	95 1d       	adc	r25, r5
     818:	87 70       	andi	r24, 0x07	; 7
     81a:	90 78       	andi	r25, 0x80	; 128
     81c:	99 23       	and	r25, r25
     81e:	24 f4       	brge	.+8      	; 0x828 <_ZN5Robot8mainMenuEv+0x278>
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	88 6f       	ori	r24, 0xF8	; 248
     824:	9f 6f       	ori	r25, 0xFF	; 255
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	fc 01       	movw	r30, r24
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	ec 5e       	subi	r30, 0xEC	; 236
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	20 81       	ld	r18, Z
     834:	31 81       	ldd	r19, Z+1	; 0x01
     836:	28 0d       	add	r18, r8
     838:	39 1d       	adc	r19, r9
     83a:	3a 83       	std	Y+2, r19	; 0x02
     83c:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	fc 01       	movw	r30, r24
     844:	ec 5d       	subi	r30, 0xDC	; 220
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	8a 0d       	add	r24, r10
     84e:	9b 1d       	adc	r25, r11
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     854:	6a 89       	ldd	r22, Y+18	; 0x12
     856:	7b 89       	ldd	r23, Y+19	; 0x13
     858:	ce 01       	movw	r24, r28
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
     860:	06 2f       	mov	r16, r22
     862:	17 2f       	mov	r17, r23
     864:	28 2e       	mov	r2, r24
     866:	39 2e       	mov	r3, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     868:	27 2d       	mov	r18, r7
     86a:	36 2d       	mov	r19, r6
     86c:	4f 85       	ldd	r20, Y+15	; 0x0f
     86e:	58 89       	ldd	r21, Y+16	; 0x10
     870:	0e 94 49 0a 	call	0x1492	; 0x1492 <__cmpsf2>
     874:	88 23       	and	r24, r24
     876:	44 f4       	brge	.+16     	; 0x888 <_ZN5Robot8mainMenuEv+0x2d8>
                {
                    minDist = currDist;
                    minPos	= currPos;
     878:	c9 80       	ldd	r12, Y+1	; 0x01
     87a:	da 80       	ldd	r13, Y+2	; 0x02
     87c:	eb 80       	ldd	r14, Y+3	; 0x03
     87e:	fc 80       	ldd	r15, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     880:	70 2e       	mov	r7, r16
     882:	61 2e       	mov	r6, r17
     884:	2f 86       	std	Y+15, r2	; 0x0f
     886:	38 8a       	std	Y+16, r3	; 0x10
     888:	88 8d       	ldd	r24, Y+24	; 0x18
     88a:	99 8d       	ldd	r25, Y+25	; 0x19
     88c:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     88e:	88 30       	cpi	r24, 0x08	; 8
     890:	91 05       	cpc	r25, r1
     892:	09 f0       	breq	.+2      	; 0x896 <_ZN5Robot8mainMenuEv+0x2e6>
     894:	bd cf       	rjmp	.-134    	; 0x810 <_ZN5Robot8mainMenuEv+0x260>
     896:	2a a0       	ldd	r2, Y+34	; 0x22
     898:	3b a0       	ldd	r3, Y+35	; 0x23
     89a:	36 01       	movw	r6, r12
     89c:	60 c0       	rjmp	.+192    	; 0x95e <__stack+0x5f>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     89e:	6a 89       	ldd	r22, Y+18	; 0x12
     8a0:	7b 89       	ldd	r23, Y+19	; 0x13
     8a2:	86 2f       	mov	r24, r22
     8a4:	97 2f       	mov	r25, r23
     8a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     8aa:	56 2e       	mov	r5, r22
     8ac:	47 2e       	mov	r4, r23
     8ae:	8f 87       	std	Y+15, r24	; 0x0f
     8b0:	98 8b       	std	Y+16, r25	; 0x10
            Point2D	minPos( from );
     8b2:	f1 01       	movw	r30, r2
     8b4:	80 80       	ld	r8, Z
     8b6:	91 80       	ldd	r9, Z+1	; 0x01
     8b8:	a2 80       	ldd	r10, Z+2	; 0x02
     8ba:	b3 80       	ldd	r11, Z+3	; 0x03
            short	pos			= ( short )orientation;
     8bc:	64 80       	ldd	r6, Z+4	; 0x04

            for ( short i = 0; i < 8; i++ )
     8be:	8c 89       	ldd	r24, Y+20	; 0x14
     8c0:	9e 89       	ldd	r25, Y+22	; 0x16
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     8c2:	71 2c       	mov	r7, r1
     8c4:	6c 01       	movw	r12, r24
     8c6:	86 0d       	add	r24, r6
     8c8:	97 1d       	adc	r25, r7
     8ca:	87 70       	andi	r24, 0x07	; 7
     8cc:	90 78       	andi	r25, 0x80	; 128
     8ce:	99 23       	and	r25, r25
     8d0:	24 f4       	brge	.+8      	; 0x8da <_ZN5Robot8mainMenuEv+0x32a>
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	88 6f       	ori	r24, 0xF8	; 248
     8d6:	9f 6f       	ori	r25, 0xFF	; 255
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	fc 01       	movw	r30, r24
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ec 5e       	subi	r30, 0xEC	; 236
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	d1 01       	movw	r26, r2
     8e6:	4d 91       	ld	r20, X+
     8e8:	5c 91       	ld	r21, X
     8ea:	11 97       	sbiw	r26, 0x01	; 1
     8ec:	20 81       	ld	r18, Z
     8ee:	31 81       	ldd	r19, Z+1	; 0x01
     8f0:	24 0f       	add	r18, r20
     8f2:	35 1f       	adc	r19, r21
     8f4:	3a 83       	std	Y+2, r19	; 0x02
     8f6:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	fc 01       	movw	r30, r24
     8fe:	ec 5d       	subi	r30, 0xDC	; 220
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	12 96       	adiw	r26, 0x02	; 2
     904:	8d 91       	ld	r24, X+
     906:	9c 91       	ld	r25, X
     908:	13 97       	sbiw	r26, 0x03	; 3
     90a:	20 81       	ld	r18, Z
     90c:	31 81       	ldd	r19, Z+1	; 0x01
     90e:	82 0f       	add	r24, r18
     910:	93 1f       	adc	r25, r19
     912:	9c 83       	std	Y+4, r25	; 0x04
     914:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     916:	6a 89       	ldd	r22, Y+18	; 0x12
     918:	7b 89       	ldd	r23, Y+19	; 0x13
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     922:	06 2f       	mov	r16, r22
     924:	17 2f       	mov	r17, r23
     926:	f8 2e       	mov	r15, r24
     928:	e9 2e       	mov	r14, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     92a:	25 2d       	mov	r18, r5
     92c:	34 2d       	mov	r19, r4
     92e:	4f 85       	ldd	r20, Y+15	; 0x0f
     930:	58 89       	ldd	r21, Y+16	; 0x10
     932:	0e 94 49 0a 	call	0x1492	; 0x1492 <__cmpsf2>
     936:	88 23       	and	r24, r24
     938:	44 f4       	brge	.+16     	; 0x94a <__stack+0x4b>
                {
                    minDist = currDist;
                    minPos	= currPos;
     93a:	89 80       	ldd	r8, Y+1	; 0x01
     93c:	9a 80       	ldd	r9, Y+2	; 0x02
     93e:	ab 80       	ldd	r10, Y+3	; 0x03
     940:	bc 80       	ldd	r11, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     942:	50 2e       	mov	r5, r16
     944:	41 2e       	mov	r4, r17
     946:	ff 86       	std	Y+15, r15	; 0x0f
     948:	e8 8a       	std	Y+16, r14	; 0x10
     94a:	c6 01       	movw	r24, r12
     94c:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     94e:	88 30       	cpi	r24, 0x08	; 8
     950:	91 05       	cpc	r25, r1
     952:	09 f0       	breq	.+2      	; 0x956 <__stack+0x57>
     954:	b7 cf       	rjmp	.-146    	; 0x8c4 <_ZN5Robot8mainMenuEv+0x314>
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     956:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
     95a:	34 01       	movw	r6, r8
     95c:	75 01       	movw	r14, r10
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     95e:	f1 01       	movw	r30, r2
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	86 15       	cp	r24, r6
     966:	97 05       	cpc	r25, r7
     968:	09 f0       	breq	.+2      	; 0x96c <__stack+0x6d>
     96a:	08 c4       	rjmp	.+2064   	; 0x117c <__stack+0x87d>
     96c:	d1 01       	movw	r26, r2
     96e:	12 96       	adiw	r26, 0x02	; 2
     970:	8d 91       	ld	r24, X+
     972:	9c 91       	ld	r25, X
     974:	13 97       	sbiw	r26, 0x03	; 3
     976:	8e 15       	cp	r24, r14
     978:	9f 05       	cpc	r25, r15
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x7f>
     97c:	ff c3       	rjmp	.+2046   	; 0x117c <__stack+0x87d>
     97e:	fe c0       	rjmp	.+508    	; 0xb7c <__stack+0x27d>

                case EOrientation::East:
                    return 0;

                case EOrientation::NorthEast:
                    return 45;
     980:	0d e2       	ldi	r16, 0x2D	; 45
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__stack+0xa3>

                case EOrientation::North:
                    return 90;
     986:	0a e5       	ldi	r16, 0x5A	; 90
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <__stack+0xa3>

                case EOrientation::NorthWest:
                    return 135;
     98c:	07 e8       	ldi	r16, 0x87	; 135
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	08 c0       	rjmp	.+16     	; 0x9a2 <__stack+0xa3>

                case EOrientation::West:
                    return 180;
     992:	04 eb       	ldi	r16, 0xB4	; 180
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <__stack+0xa3>

                case EOrientation::SouthWest:
                default:
                    return 225;
     998:	01 ee       	ldi	r16, 0xE1	; 225
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     99e:	0c 89       	ldd	r16, Y+20	; 0x14
     9a0:	1e 89       	ldd	r17, Y+22	; 0x16
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     9a2:	f1 01       	movw	r30, r2
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	53 01       	movw	r10, r6
     9aa:	a8 1a       	sub	r10, r24
     9ac:	b9 0a       	sbc	r11, r25
            short	y			= -startPoint.y + endPoint.y;
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	93 81       	ldd	r25, Z+3	; 0x03
     9b2:	97 01       	movw	r18, r14
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	c9 01       	movw	r24, r18
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     9ba:	a1 14       	cp	r10, r1
     9bc:	b1 04       	cpc	r11, r1
     9be:	61 f4       	brne	.+24     	; 0x9d8 <__stack+0xd9>
            {
                if ( y > 0 )
     9c0:	18 16       	cp	r1, r24
     9c2:	19 06       	cpc	r1, r25
     9c4:	4c f1       	brlt	.+82     	; 0xa18 <__stack+0x119>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     9c6:	99 23       	and	r25, r25
     9c8:	6c f5       	brge	.+90     	; 0xa24 <__stack+0x125>
                {
                    angle = -90;
     9ca:	0f 2e       	mov	r0, r31
     9cc:	f6 ea       	ldi	r31, 0xA6	; 166
     9ce:	cf 2e       	mov	r12, r31
     9d0:	f0 2d       	mov	r31, r0
     9d2:	dd 24       	eor	r13, r13
     9d4:	da 94       	dec	r13
     9d6:	28 c0       	rjmp	.+80     	; 0xa28 <__stack+0x129>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     9d8:	b5 01       	movw	r22, r10
     9da:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__divmodhi4>
     9de:	07 2e       	mov	r0, r23
     9e0:	00 0c       	add	r0, r0
     9e2:	88 0b       	sbc	r24, r24
     9e4:	99 0b       	sbc	r25, r25
     9e6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     9ea:	0e 94 1a 0a 	call	0x1434	; 0x1434 <atan>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	44 e3       	ldi	r20, 0x34	; 52
     9f4:	53 e4       	ldi	r21, 0x43	; 67
     9f6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     9fa:	2b ed       	ldi	r18, 0xDB	; 219
     9fc:	3f e0       	ldi	r19, 0x0F	; 15
     9fe:	49 e4       	ldi	r20, 0x49	; 73
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 4e 0a 	call	0x149c	; 0x149c <__divsf3>
     a06:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__fixsfsi>
     a0a:	6b 01       	movw	r12, r22

                if ( x < 0 )
     a0c:	bb 20       	and	r11, r11
     a0e:	64 f4       	brge	.+24     	; 0xa28 <__stack+0x129>
                {
                    angle += 180;
     a10:	34 eb       	ldi	r19, 0xB4	; 180
     a12:	c3 0e       	add	r12, r19
     a14:	d1 1c       	adc	r13, r1
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <__stack+0x129>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     a18:	0f 2e       	mov	r0, r31
     a1a:	fa e5       	ldi	r31, 0x5A	; 90
     a1c:	cf 2e       	mov	r12, r31
     a1e:	d1 2c       	mov	r13, r1
     a20:	f0 2d       	mov	r31, r0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x129>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     a24:	cc 88       	ldd	r12, Y+20	; 0x14
     a26:	de 88       	ldd	r13, Y+22	; 0x16
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     a28:	c8 01       	movw	r24, r16
     a2a:	8c 19       	sub	r24, r12
     a2c:	9d 09       	sbc	r25, r13
     a2e:	6d e2       	ldi	r22, 0x2D	; 45
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__divmodhi4>
     a36:	07 2e       	mov	r0, r23
     a38:	00 0c       	add	r0, r0
     a3a:	88 0b       	sbc	r24, r24
     a3c:	99 0b       	sbc	r25, r25
     a3e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
     a42:	0e 94 44 0c 	call	0x1888	; 0x1888 <round>
     a46:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__fixsfsi>
     a4a:	8b 01       	movw	r16, r22

            if ( direction > 4 )
     a4c:	65 30       	cpi	r22, 0x05	; 5
     a4e:	71 05       	cpc	r23, r1
     a50:	14 f0       	brlt	.+4      	; 0xa56 <__stack+0x157>
            {
                direction = -8 + direction;
     a52:	08 50       	subi	r16, 0x08	; 8
     a54:	11 09       	sbc	r17, r1
            }

            if ( direction < -4 )
     a56:	0c 3f       	cpi	r16, 0xFC	; 252
     a58:	4f ef       	ldi	r20, 0xFF	; 255
     a5a:	14 07       	cpc	r17, r20
     a5c:	14 f4       	brge	.+4      	; 0xa62 <__stack+0x163>
            {
                direction = 8 + direction;
     a5e:	08 5f       	subi	r16, 0xF8	; 248
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     a62:	6d e2       	ldi	r22, 0x2D	; 45
     a64:	c6 16       	cp	r12, r22
     a66:	d1 04       	cpc	r13, r1
     a68:	81 f1       	breq	.+96     	; 0xaca <__stack+0x1cb>
     a6a:	74 f4       	brge	.+28     	; 0xa88 <__stack+0x189>
     a6c:	93 ed       	ldi	r25, 0xD3	; 211
     a6e:	c9 16       	cp	r12, r25
     a70:	9f ef       	ldi	r25, 0xFF	; 255
     a72:	d9 06       	cpc	r13, r25
     a74:	09 f1       	breq	.+66     	; 0xab8 <__stack+0x1b9>
     a76:	c1 14       	cp	r12, r1
     a78:	d1 04       	cpc	r13, r1
     a7a:	11 f1       	breq	.+68     	; 0xac0 <__stack+0x1c1>
     a7c:	a6 ea       	ldi	r26, 0xA6	; 166
     a7e:	ca 16       	cp	r12, r26
     a80:	af ef       	ldi	r26, 0xFF	; 255
     a82:	da 06       	cpc	r13, r26
     a84:	b9 f5       	brne	.+110    	; 0xaf4 <__stack+0x1f5>
     a86:	13 c0       	rjmp	.+38     	; 0xaae <__stack+0x1af>
     a88:	b7 e8       	ldi	r27, 0x87	; 135
     a8a:	cb 16       	cp	r12, r27
     a8c:	d1 04       	cpc	r13, r1
     a8e:	29 f1       	breq	.+74     	; 0xada <__stack+0x1db>
     a90:	2c f4       	brge	.+10     	; 0xa9c <__stack+0x19d>
     a92:	fa e5       	ldi	r31, 0x5A	; 90
     a94:	cf 16       	cp	r12, r31
     a96:	d1 04       	cpc	r13, r1
     a98:	e1 f0       	breq	.+56     	; 0xad2 <__stack+0x1d3>
     a9a:	2c c0       	rjmp	.+88     	; 0xaf4 <__stack+0x1f5>
     a9c:	24 eb       	ldi	r18, 0xB4	; 180
     a9e:	c2 16       	cp	r12, r18
     aa0:	d1 04       	cpc	r13, r1
     aa2:	f9 f0       	breq	.+62     	; 0xae2 <__stack+0x1e3>
     aa4:	31 ee       	ldi	r19, 0xE1	; 225
     aa6:	c3 16       	cp	r12, r19
     aa8:	d1 04       	cpc	r13, r1
     aaa:	01 f1       	breq	.+64     	; 0xaec <__stack+0x1ed>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__stack+0x1f5>
            {
                case -90:
                    orientation = EOrientation::South;
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	d1 01       	movw	r26, r2
     ab2:	14 96       	adiw	r26, 0x04	; 4
     ab4:	8c 93       	st	X, r24
     ab6:	1e c0       	rjmp	.+60     	; 0xaf4 <__stack+0x1f5>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	f1 01       	movw	r30, r2
     abc:	84 83       	std	Z+4, r24	; 0x04
     abe:	1a c0       	rjmp	.+52     	; 0xaf4 <__stack+0x1f5>
                    break;

                case 0:
                    orientation = EOrientation::East;
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	d1 01       	movw	r26, r2
     ac4:	14 96       	adiw	r26, 0x04	; 4
     ac6:	8c 93       	st	X, r24
     ac8:	15 c0       	rjmp	.+42     	; 0xaf4 <__stack+0x1f5>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	f1 01       	movw	r30, r2
     ace:	24 83       	std	Z+4, r18	; 0x04
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <__stack+0x1f5>
                    break;

                case 90:
                    orientation = EOrientation::North;
     ad2:	d1 01       	movw	r26, r2
     ad4:	14 96       	adiw	r26, 0x04	; 4
     ad6:	1c 92       	st	X, r1
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__stack+0x1f5>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     ada:	27 e0       	ldi	r18, 0x07	; 7
     adc:	f1 01       	movw	r30, r2
     ade:	24 83       	std	Z+4, r18	; 0x04
     ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <__stack+0x1f5>
                    break;

                case 180:
                    orientation = EOrientation::West;
     ae2:	e6 e0       	ldi	r30, 0x06	; 6
     ae4:	d1 01       	movw	r26, r2
     ae6:	14 96       	adiw	r26, 0x04	; 4
     ae8:	ec 93       	st	X, r30
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <__stack+0x1f5>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     aec:	85 e0       	ldi	r24, 0x05	; 5
     aee:	d1 01       	movw	r26, r2
     af0:	14 96       	adiw	r26, 0x04	; 4
     af2:	8c 93       	st	X, r24
            //print_long( angle );
            //delay_ms( 1000 );

            setDeviceOrientation( angle );

            if ( direction < 0 )
     af4:	11 23       	and	r17, r17
     af6:	ec f4       	brge	.+58     	; 0xb32 <__stack+0x233>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     af8:	6a e2       	ldi	r22, 0x2A	; 42
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	86 ed       	ldi	r24, 0xD6	; 214
     afe:	9f ef       	ldi	r25, 0xFF	; 255
     b00:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>

            delay_ms( 200 * turns );
     b04:	c8 01       	movw	r24, r16
     b06:	99 23       	and	r25, r25
     b08:	24 f4       	brge	.+8      	; 0xb12 <__stack+0x213>
     b0a:	88 27       	eor	r24, r24
     b0c:	99 27       	eor	r25, r25
     b0e:	80 1b       	sub	r24, r16
     b10:	91 0b       	sbc	r25, r17
     b12:	28 ec       	ldi	r18, 0xC8	; 200
     b14:	fc 01       	movw	r30, r24
     b16:	2e 9f       	mul	r18, r30
     b18:	c0 01       	movw	r24, r0
     b1a:	2f 9f       	mul	r18, r31
     b1c:	90 0d       	add	r25, r0
     b1e:	11 24       	eor	r1, r1
     b20:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>

            set_motors( 0, 0 );
     b24:	6c 89       	ldd	r22, Y+20	; 0x14
     b26:	7e 89       	ldd	r23, Y+22	; 0x16
     b28:	86 2f       	mov	r24, r22
     b2a:	97 2f       	mov	r25, r23
     b2c:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
     b30:	1f c0       	rjmp	.+62     	; 0xb70 <__stack+0x271>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     b32:	10 16       	cp	r1, r16
     b34:	11 06       	cpc	r1, r17
     b36:	e4 f4       	brge	.+56     	; 0xb70 <__stack+0x271>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     b38:	66 ed       	ldi	r22, 0xD6	; 214
     b3a:	7f ef       	ldi	r23, 0xFF	; 255
     b3c:	8a e2       	ldi	r24, 0x2A	; 42
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>

            delay_ms( 200 * turns );
     b44:	c8 01       	movw	r24, r16
     b46:	99 23       	and	r25, r25
     b48:	24 f4       	brge	.+8      	; 0xb52 <__stack+0x253>
     b4a:	88 27       	eor	r24, r24
     b4c:	99 27       	eor	r25, r25
     b4e:	80 1b       	sub	r24, r16
     b50:	91 0b       	sbc	r25, r17
     b52:	e8 ec       	ldi	r30, 0xC8	; 200
     b54:	dc 01       	movw	r26, r24
     b56:	ea 9f       	mul	r30, r26
     b58:	c0 01       	movw	r24, r0
     b5a:	eb 9f       	mul	r30, r27
     b5c:	90 0d       	add	r25, r0
     b5e:	11 24       	eor	r1, r1
     b60:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>

            set_motors( 0, 0 );
     b64:	6c 89       	ldd	r22, Y+20	; 0x14
     b66:	7e 89       	ldd	r23, Y+22	; 0x16
     b68:	86 2f       	mov	r24, r22
     b6a:	97 2f       	mov	r25, r23
     b6c:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     b70:	6c 89       	ldd	r22, Y+20	; 0x14
     b72:	7e 89       	ldd	r23, Y+22	; 0x16
     b74:	86 2f       	mov	r24, r22
     b76:	97 2f       	mov	r25, r23
     b78:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensors[ 5 ];
            read_line_sensors( sensors, IR_EMITTERS_ON );
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	0e 94 41 14 	call	0x2882	; 0x2882 <read_line_sensors>

            if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	81 3b       	cpi	r24, 0xB1	; 177
     b8c:	94 40       	sbci	r25, 0x04	; 4
     b8e:	50 f4       	brcc	.+20     	; 0xba4 <__stack+0x2a5>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	81 3b       	cpi	r24, 0xB1	; 177
     b96:	94 40       	sbci	r25, 0x04	; 4
     b98:	28 f4       	brcc	.+10     	; 0xba4 <__stack+0x2a5>
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
                    setDirection( position, nextPos );
                }

                // TODO: Check isObstacle or maybe isVisited

                if ( isDirectionTraversable() )
     b9e:	81 3b       	cpi	r24, 0xB1	; 177
     ba0:	94 40       	sbci	r25, 0x04	; 4
     ba2:	d8 f0       	brcs	.+54     	; 0xbda <__stack+0x2db>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     ba4:	f7 01       	movw	r30, r14
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	ee 0d       	add	r30, r14
     bac:	ff 1d       	adc	r31, r15
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	2a e5       	ldi	r18, 0x5A	; 90
     bb4:	26 9d       	mul	r18, r6
     bb6:	c0 01       	movw	r24, r0
     bb8:	27 9d       	mul	r18, r7
     bba:	90 0d       	add	r25, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	e8 0f       	add	r30, r24
     bc0:	f9 1f       	adc	r31, r25
     bc2:	e5 52       	subi	r30, 0x25	; 37
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	44 83       	std	Z+4, r20	; 0x04
     bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	9f 8f       	std	Y+31, r25	; 0x1f
     bd2:	8e 8f       	std	Y+30, r24	; 0x1e
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     bd4:	89 2b       	or	r24, r25
     bd6:	09 f0       	breq	.+2      	; 0xbda <__stack+0x2db>
     bd8:	99 cd       	rjmp	.-1230   	; 0x70c <_ZN5Robot8mainMenuEv+0x15c>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     bda:	7c 86       	std	Y+12, r7	; 0x0c
     bdc:	6b 86       	std	Y+11, r6	; 0x0b
     bde:	fe 86       	std	Y+14, r15	; 0x0e
     be0:	ed 86       	std	Y+13, r14	; 0x0d

            //printPos( nextPos );
            //delay_ms( 1000 );

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     be2:	43 01       	movw	r8, r6
     be4:	57 01       	movw	r10, r14
     be6:	c7 01       	movw	r24, r14
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	8e 0d       	add	r24, r14
     bee:	9f 1d       	adc	r25, r15
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	2a e5       	ldi	r18, 0x5A	; 90
     bf6:	26 9d       	mul	r18, r6
     bf8:	f0 01       	movw	r30, r0
     bfa:	27 9d       	mul	r18, r7
     bfc:	f0 0d       	add	r31, r0
     bfe:	11 24       	eor	r1, r1
     c00:	8e 0f       	add	r24, r30
     c02:	9f 1f       	adc	r25, r31
     c04:	fc 01       	movw	r30, r24
     c06:	e5 52       	subi	r30, 0x25	; 37
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	85 81       	ldd	r24, Z+5	; 0x05
     c0c:	81 11       	cpse	r24, r1
     c0e:	c4 c0       	rjmp	.+392    	; 0xd98 <__stack+0x499>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     c10:	be 01       	movw	r22, r28
     c12:	65 5f       	subi	r22, 0xF5	; 245
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	cb 01       	movw	r24, r22
     c18:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     c1c:	6a 8b       	std	Y+18, r22	; 0x12
     c1e:	7b 8b       	std	Y+19, r23	; 0x13
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	98 8b       	std	Y+16, r25	; 0x10
            Point2D	minPos( from );
     c24:	4b 84       	ldd	r4, Y+11	; 0x0b
     c26:	5c 84       	ldd	r5, Y+12	; 0x0c
     c28:	6d 84       	ldd	r6, Y+13	; 0x0d
     c2a:	7e 84       	ldd	r7, Y+14	; 0x0e
            short	pos			= ( short )orientation;
     c2c:	d1 01       	movw	r26, r2
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	2c 91       	ld	r18, X

            for ( short i = 0; i < 8; i++ )
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     c36:	02 2f       	mov	r16, r18
     c38:	10 e0       	ldi	r17, 0x00	; 0
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                float	currDist = getDist( currPos, to );
     c3a:	39 8e       	std	Y+25, r3	; 0x19
     c3c:	28 8e       	std	Y+24, r2	; 0x18
     c3e:	7c 01       	movw	r14, r24

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     c40:	80 0f       	add	r24, r16
     c42:	91 1f       	adc	r25, r17
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	90 78       	andi	r25, 0x80	; 128
     c48:	99 23       	and	r25, r25
     c4a:	24 f4       	brge	.+8      	; 0xc54 <__stack+0x355>
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	88 6f       	ori	r24, 0xF8	; 248
     c50:	9f 6f       	ori	r25, 0xFF	; 255
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	fc 01       	movw	r30, r24
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	ec 5e       	subi	r30, 0xEC	; 236
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	20 81       	ld	r18, Z
     c60:	31 81       	ldd	r19, Z+1	; 0x01
     c62:	28 0d       	add	r18, r8
     c64:	39 1d       	adc	r19, r9
     c66:	3a 83       	std	Y+2, r19	; 0x02
     c68:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	fc 01       	movw	r30, r24
     c70:	ec 5d       	subi	r30, 0xDC	; 220
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	8a 0d       	add	r24, r10
     c7a:	9b 1d       	adc	r25, r11
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     c80:	be 01       	movw	r22, r28
     c82:	65 5f       	subi	r22, 0xF5	; 245
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     c8e:	26 2e       	mov	r2, r22
     c90:	37 2e       	mov	r3, r23
     c92:	c8 2e       	mov	r12, r24
     c94:	d9 2e       	mov	r13, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     c96:	2a 89       	ldd	r18, Y+18	; 0x12
     c98:	3b 89       	ldd	r19, Y+19	; 0x13
     c9a:	4f 85       	ldd	r20, Y+15	; 0x0f
     c9c:	58 89       	ldd	r21, Y+16	; 0x10
     c9e:	0e 94 49 0a 	call	0x1492	; 0x1492 <__cmpsf2>
     ca2:	88 23       	and	r24, r24
     ca4:	44 f4       	brge	.+16     	; 0xcb6 <__stack+0x3b7>
                {
                    minDist = currDist;
                    minPos	= currPos;
     ca6:	49 80       	ldd	r4, Y+1	; 0x01
     ca8:	5a 80       	ldd	r5, Y+2	; 0x02
     caa:	6b 80       	ldd	r6, Y+3	; 0x03
     cac:	7c 80       	ldd	r7, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     cae:	2a 8a       	std	Y+18, r2	; 0x12
     cb0:	3b 8a       	std	Y+19, r3	; 0x13
     cb2:	cf 86       	std	Y+15, r12	; 0x0f
     cb4:	d8 8a       	std	Y+16, r13	; 0x10
     cb6:	c7 01       	movw	r24, r14
     cb8:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__stack+0x3c3>
     cc0:	be cf       	rjmp	.-132    	; 0xc3e <__stack+0x33f>
     cc2:	28 8c       	ldd	r2, Y+24	; 0x18
     cc4:	39 8c       	ldd	r3, Y+25	; 0x19
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     cc6:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     cca:	95 01       	movw	r18, r10
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	2a 0d       	add	r18, r10
     cd2:	3b 1d       	adc	r19, r11
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	ea e5       	ldi	r30, 0x5A	; 90
     cda:	e8 9d       	mul	r30, r8
     cdc:	c0 01       	movw	r24, r0
     cde:	e9 9d       	mul	r30, r9
     ce0:	90 0d       	add	r25, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	82 0f       	add	r24, r18
     ce6:	93 1f       	adc	r25, r19
     ce8:	dc 01       	movw	r26, r24
     cea:	a5 52       	subi	r26, 0x25	; 37
     cec:	be 4f       	sbci	r27, 0xFE	; 254
     cee:	6d 91       	ld	r22, X+
     cf0:	7c 91       	ld	r23, X
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     cf2:	93 01       	movw	r18, r6
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	26 0d       	add	r18, r6
     cfa:	37 1d       	adc	r19, r7
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	e4 9d       	mul	r30, r4
     d02:	c0 01       	movw	r24, r0
     d04:	e5 9d       	mul	r30, r5
     d06:	90 0d       	add	r25, r0
     d08:	11 24       	eor	r1, r1
     d0a:	82 0f       	add	r24, r18
     d0c:	93 1f       	adc	r25, r19
     d0e:	fc 01       	movw	r30, r24
     d10:	e5 52       	subi	r30, 0x25	; 37
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     d18:	84 14       	cp	r8, r4
     d1a:	95 04       	cpc	r9, r5
     d1c:	31 f0       	breq	.+12     	; 0xd2a <__stack+0x42b>
     d1e:	a6 14       	cp	r10, r6
     d20:	b7 04       	cpc	r11, r7
     d22:	49 f4       	brne	.+18     	; 0xd36 <__stack+0x437>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     d24:	22 e0       	ldi	r18, 0x02	; 2
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	0b c0       	rjmp	.+22     	; 0xd40 <__stack+0x441>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     d2a:	a6 14       	cp	r10, r6
     d2c:	b7 04       	cpc	r11, r7
     d2e:	31 f0       	breq	.+12     	; 0xd3c <__stack+0x43d>
            {
                distance = 2;
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <__stack+0x441>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     d36:	23 e0       	ldi	r18, 0x03	; 3
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <__stack+0x441>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19

                if ( savedDist > currDist )
     d44:	86 17       	cp	r24, r22
     d46:	97 07       	cpc	r25, r23
     d48:	9c f4       	brge	.+38     	; 0xd70 <__stack+0x471>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     d4a:	f5 01       	movw	r30, r10
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	ea 0d       	add	r30, r10
     d52:	fb 1d       	adc	r31, r11
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	4a e5       	ldi	r20, 0x5A	; 90
     d5a:	48 9d       	mul	r20, r8
     d5c:	90 01       	movw	r18, r0
     d5e:	49 9d       	mul	r20, r9
     d60:	30 0d       	add	r19, r0
     d62:	11 24       	eor	r1, r1
     d64:	e2 0f       	add	r30, r18
     d66:	f3 1f       	adc	r31, r19
     d68:	e5 52       	subi	r30, 0x25	; 37
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     d70:	c5 01       	movw	r24, r10
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	8a 0d       	add	r24, r10
     d78:	9b 1d       	adc	r25, r11
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	2a e5       	ldi	r18, 0x5A	; 90
     d80:	28 9d       	mul	r18, r8
     d82:	f0 01       	movw	r30, r0
     d84:	29 9d       	mul	r18, r9
     d86:	f0 0d       	add	r31, r0
     d88:	11 24       	eor	r1, r1
     d8a:	8e 0f       	add	r24, r30
     d8c:	9f 1f       	adc	r25, r31
     d8e:	fc 01       	movw	r30, r24
     d90:	e5 52       	subi	r30, 0x25	; 37
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	85 83       	std	Z+5, r24	; 0x05
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     d98:	f1 01       	movw	r30, r2
     d9a:	20 81       	ld	r18, Z
     d9c:	31 81       	ldd	r19, Z+1	; 0x01
     d9e:	85 81       	ldd	r24, Z+5	; 0x05
     da0:	96 81       	ldd	r25, Z+6	; 0x06
     da2:	28 17       	cp	r18, r24
     da4:	39 07       	cpc	r19, r25
     da6:	41 f4       	brne	.+16     	; 0xdb8 <__stack+0x4b9>

                matrix[nextPos.x][nextPos.y].isVisited = true;
            }

            // Move until stepping on the goal position
            if ( position != goalPos )
     da8:	22 81       	ldd	r18, Z+2	; 0x02
     daa:	33 81       	ldd	r19, Z+3	; 0x03
     dac:	87 81       	ldd	r24, Z+7	; 0x07
     dae:	90 85       	ldd	r25, Z+8	; 0x08
     db0:	28 17       	cp	r18, r24
     db2:	39 07       	cpc	r19, r25
     db4:	09 f4       	brne	.+2      	; 0xdb8 <__stack+0x4b9>
     db6:	83 c0       	rjmp	.+262    	; 0xebe <__stack+0x5bf>
            {
                position = nextPos;
     db8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dba:	9c 85       	ldd	r25, Y+12	; 0x0c
     dbc:	ad 85       	ldd	r26, Y+13	; 0x0d
     dbe:	be 85       	ldd	r27, Y+14	; 0x0e
     dc0:	f1 01       	movw	r30, r2
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	a2 83       	std	Z+2, r26	; 0x02
     dc8:	b3 83       	std	Z+3, r27	; 0x03
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 19, 19 );
     dca:	63 e1       	ldi	r22, 0x13	; 19
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	83 e1       	ldi	r24, 0x13	; 19
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
            //clear();
        }

        bool isOnMarker()
        {
            read_line_sensors( sensors, IR_EMITTERS_ON );
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	88 a1       	ldd	r24, Y+32	; 0x20
     dda:	99 a1       	ldd	r25, Y+33	; 0x21
     ddc:	0e 94 41 14 	call	0x2882	; 0x2882 <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     de0:	d1 01       	movw	r26, r2
     de2:	1b 96       	adiw	r26, 0x0b	; 11
     de4:	8d 91       	ld	r24, X+
     de6:	9c 91       	ld	r25, X
     de8:	1c 97       	sbiw	r26, 0x0c	; 12
     dea:	81 3b       	cpi	r24, 0xB1	; 177
     dec:	b4 e0       	ldi	r27, 0x04	; 4
     dee:	9b 07       	cpc	r25, r27
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <__stack+0x4f5>
     df2:	d7 c1       	rjmp	.+942    	; 0x11a2 <__stack+0x8a3>
     df4:	f1 01       	movw	r30, r2
     df6:	45 85       	ldd	r20, Z+13	; 0x0d
     df8:	56 85       	ldd	r21, Z+14	; 0x0e
     dfa:	41 3b       	cpi	r20, 0xB1	; 177
     dfc:	f4 e0       	ldi	r31, 0x04	; 4
     dfe:	5f 07       	cpc	r21, r31
     e00:	08 f0       	brcs	.+2      	; 0xe04 <__stack+0x505>
     e02:	cf c1       	rjmp	.+926    	; 0x11a2 <__stack+0x8a3>
     e04:	d1 01       	movw	r26, r2
     e06:	1f 96       	adiw	r26, 0x0f	; 15
     e08:	2d 91       	ld	r18, X+
     e0a:	3c 91       	ld	r19, X
     e0c:	50 97       	sbiw	r26, 0x10	; 16
     e0e:	21 3b       	cpi	r18, 0xB1	; 177
     e10:	b4 e0       	ldi	r27, 0x04	; 4
     e12:	3b 07       	cpc	r19, r27
     e14:	08 f0       	brcs	.+2      	; 0xe18 <__stack+0x519>
     e16:	c5 c1       	rjmp	.+906    	; 0x11a2 <__stack+0x8a3>
            {
                return true;
            }
            else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     e18:	8f 35       	cpi	r24, 0x5F	; 95
     e1a:	e1 e0       	ldi	r30, 0x01	; 1
     e1c:	9e 07       	cpc	r25, r30
     e1e:	38 f4       	brcc	.+14     	; 0xe2e <__stack+0x52f>
     e20:	4f 35       	cpi	r20, 0x5F	; 95
     e22:	51 40       	sbci	r21, 0x01	; 1
     e24:	20 f4       	brcc	.+8      	; 0xe2e <__stack+0x52f>
     e26:	2f 35       	cpi	r18, 0x5F	; 95
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	34 07       	cpc	r19, r20
     e2c:	a0 f2       	brcs	.-88     	; 0xdd6 <__stack+0x4d7>
            {
                short currentOffset = sensors[1] - sensors[3];
     e2e:	82 1b       	sub	r24, r18
     e30:	93 0b       	sbc	r25, r19

                if ( abs( currentOffset ) >= 20 )
     e32:	9c 01       	movw	r18, r24
     e34:	22 f4       	brpl	.+8      	; 0xe3e <__stack+0x53f>
     e36:	22 27       	eor	r18, r18
     e38:	33 27       	eor	r19, r19
     e3a:	28 1b       	sub	r18, r24
     e3c:	39 0b       	sbc	r19, r25
     e3e:	24 31       	cpi	r18, 0x14	; 20
     e40:	31 05       	cpc	r19, r1
     e42:	7c f0       	brlt	.+30     	; 0xe62 <__stack+0x563>
                {
                    if ( currentOffset < 0 )
     e44:	99 23       	and	r25, r25
     e46:	44 f4       	brge	.+16     	; 0xe58 <__stack+0x559>
                    {
                        boostLeftWheel = true;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	d1 01       	movw	r26, r2
     e4c:	55 96       	adiw	r26, 0x15	; 21
     e4e:	8c 93       	st	X, r24
     e50:	55 97       	sbiw	r26, 0x15	; 21
                        boostRightWheel = false;
     e52:	56 96       	adiw	r26, 0x16	; 22
     e54:	1c 92       	st	X, r1
     e56:	a5 c1       	rjmp	.+842    	; 0x11a2 <__stack+0x8a3>
                    }
                    else
                    {
                        boostLeftWheel = false;
     e58:	f1 01       	movw	r30, r2
     e5a:	15 8a       	std	Z+21, r1	; 0x15
                        boostRightWheel = true;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	86 8b       	std	Z+22, r24	; 0x16
     e60:	a0 c1       	rjmp	.+832    	; 0x11a2 <__stack+0x8a3>
                    }
                }
                else
                {
                    boostLeftWheel = false;
     e62:	d1 01       	movw	r26, r2
     e64:	55 96       	adiw	r26, 0x15	; 21
     e66:	1c 92       	st	X, r1
     e68:	55 97       	sbiw	r26, 0x15	; 21
                    boostRightWheel = false;
     e6a:	56 96       	adiw	r26, 0x16	; 22
     e6c:	1c 92       	st	X, r1
     e6e:	99 c1       	rjmp	.+818    	; 0x11a2 <__stack+0x8a3>

            while ( !isOnMarker() ) {}

            play( ">>a32" );

            if ( boostLeftWheel && !boostRightWheel )
     e70:	f1 01       	movw	r30, r2
     e72:	86 89       	ldd	r24, Z+22	; 0x16
     e74:	81 11       	cpse	r24, r1
     e76:	13 c0       	rjmp	.+38     	; 0xe9e <__stack+0x59f>
            {
                set_motors( 20, 19 );
     e78:	63 e1       	ldi	r22, 0x13	; 19
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	84 e1       	ldi	r24, 0x14	; 20
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <__stack+0x5ab>
            }
            else if ( !boostLeftWheel && boostRightWheel )
     e86:	d1 01       	movw	r26, r2
     e88:	56 96       	adiw	r26, 0x16	; 22
     e8a:	8c 91       	ld	r24, X
     e8c:	88 23       	and	r24, r24
     e8e:	39 f0       	breq	.+14     	; 0xe9e <__stack+0x59f>
            {
                set_motors( 19, 20 );
     e90:	64 e1       	ldi	r22, 0x14	; 20
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	83 e1       	ldi	r24, 0x13	; 19
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <__stack+0x5ab>
            }
            else
            {
                set_motors( 19, 19 );
     e9e:	63 e1       	ldi	r22, 0x13	; 19
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	83 e1       	ldi	r24, 0x13	; 19
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
            }

            delay_ms( 900 );
     eaa:	84 e8       	ldi	r24, 0x84	; 132
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
            set_motors( 0, 0 );
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     ebe:	f1 01       	movw	r30, r2
     ec0:	20 81       	ld	r18, Z
     ec2:	31 81       	ldd	r19, Z+1	; 0x01
     ec4:	85 81       	ldd	r24, Z+5	; 0x05
     ec6:	96 81       	ldd	r25, Z+6	; 0x06
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	09 f0       	breq	.+2      	; 0xed0 <__stack+0x5d1>
     ece:	00 cc       	rjmp	.-2048   	; 0x6d0 <_ZN5Robot8mainMenuEv+0x120>
     ed0:	42 81       	ldd	r20, Z+2	; 0x02
     ed2:	53 81       	ldd	r21, Z+3	; 0x03
     ed4:	87 81       	ldd	r24, Z+7	; 0x07
     ed6:	90 85       	ldd	r25, Z+8	; 0x08
     ed8:	48 17       	cp	r20, r24
     eda:	59 07       	cpc	r21, r25
     edc:	09 f0       	breq	.+2      	; 0xee0 <__stack+0x5e1>
     ede:	f8 cb       	rjmp	.-2064   	; 0x6d0 <_ZN5Robot8mainMenuEv+0x120>
     ee0:	69 c1       	rjmp	.+722    	; 0x11b4 <__stack+0x8b5>

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
     ee2:	93 01       	movw	r18, r6
     ee4:	28 1b       	sub	r18, r24
     ee6:	39 0b       	sbc	r19, r25
     ee8:	f2 01       	movw	r30, r4
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e4 0d       	add	r30, r4
     ef0:	f5 1d       	adc	r31, r5
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	b8 9c       	mul	r11, r8
     ef8:	c0 01       	movw	r24, r0
     efa:	b9 9c       	mul	r11, r9
     efc:	90 0d       	add	r25, r0
     efe:	11 24       	eor	r1, r1
     f00:	e8 0f       	add	r30, r24
     f02:	f9 1f       	adc	r31, r25
     f04:	e5 52       	subi	r30, 0x25	; 37
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	82 17       	cp	r24, r18
     f0e:	93 07       	cpc	r25, r19
     f10:	94 f4       	brge	.+36     	; 0xf36 <__stack+0x637>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     f12:	f2 01       	movw	r30, r4
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	e4 0d       	add	r30, r4
     f1a:	f5 1d       	adc	r31, r5
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	b8 9c       	mul	r11, r8
     f22:	c0 01       	movw	r24, r0
     f24:	b9 9c       	mul	r11, r9
     f26:	90 0d       	add	r25, r0
     f28:	11 24       	eor	r1, r1
     f2a:	e8 0f       	add	r30, r24
     f2c:	f9 1f       	adc	r31, r25
     f2e:	e5 52       	subi	r30, 0x25	; 37
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	33 83       	std	Z+3, r19	; 0x03
     f34:	22 83       	std	Z+2, r18	; 0x02
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
     f36:	be 01       	movw	r22, r28
     f38:	65 5f       	subi	r22, 0xF5	; 245
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	cb 01       	movw	r24, r22
     f3e:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     f42:	a6 2e       	mov	r10, r22
     f44:	7b 8b       	std	Y+19, r23	; 0x13
     f46:	8f 87       	std	Y+15, r24	; 0x0f
     f48:	39 2e       	mov	r3, r25
            Point2D	minPos( from );
     f4a:	cb 84       	ldd	r12, Y+11	; 0x0b
     f4c:	dc 84       	ldd	r13, Y+12	; 0x0c
     f4e:	ed 84       	ldd	r14, Y+13	; 0x0d
     f50:	fe 84       	ldd	r15, Y+14	; 0x0e
            short	pos			= ( short )orientation;
     f52:	a8 89       	ldd	r26, Y+16	; 0x10
     f54:	b9 89       	ldd	r27, Y+17	; 0x11
     f56:	14 96       	adiw	r26, 0x04	; 4
     f58:	2c 91       	ld	r18, X

            for ( short i = 0; i < 8; i++ )
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     f5e:	02 2f       	mov	r16, r18
     f60:	10 e0       	ldi	r17, 0x00	; 0
     f62:	7f 8a       	std	Y+23, r7	; 0x17
     f64:	6e 8a       	std	Y+22, r6	; 0x16
     f66:	9d 8b       	std	Y+21, r25	; 0x15
     f68:	8c 8b       	std	Y+20, r24	; 0x14
     f6a:	80 0f       	add	r24, r16
     f6c:	91 1f       	adc	r25, r17
     f6e:	87 70       	andi	r24, 0x07	; 7
     f70:	90 78       	andi	r25, 0x80	; 128
     f72:	99 23       	and	r25, r25
     f74:	24 f4       	brge	.+8      	; 0xf7e <__stack+0x67f>
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	88 6f       	ori	r24, 0xF8	; 248
     f7a:	9f 6f       	ori	r25, 0xFF	; 255
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	fc 01       	movw	r30, r24
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ec 5e       	subi	r30, 0xEC	; 236
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	20 81       	ld	r18, Z
     f8a:	31 81       	ldd	r19, Z+1	; 0x01
     f8c:	28 0d       	add	r18, r8
     f8e:	39 1d       	adc	r19, r9
     f90:	3a 83       	std	Y+2, r19	; 0x02
     f92:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	fc 01       	movw	r30, r24
     f9a:	ec 5d       	subi	r30, 0xDC	; 220
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	84 0d       	add	r24, r4
     fa4:	95 1d       	adc	r25, r5
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03

                float	currDist = getDist( currPos, to );
     faa:	be 01       	movw	r22, r28
     fac:	65 5f       	subi	r22, 0xF5	; 245
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	ce 01       	movw	r24, r28
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
     fb8:	6a 8b       	std	Y+18, r22	; 0x12
     fba:	67 2e       	mov	r6, r23
     fbc:	78 2e       	mov	r7, r24
     fbe:	29 2e       	mov	r2, r25
                    //print( " | " );
                    //print_long( minDist );
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
     fc0:	2a 2d       	mov	r18, r10
     fc2:	3b 89       	ldd	r19, Y+19	; 0x13
     fc4:	4f 85       	ldd	r20, Y+15	; 0x0f
     fc6:	53 2d       	mov	r21, r3
     fc8:	0e 94 49 0a 	call	0x1492	; 0x1492 <__cmpsf2>
     fcc:	88 23       	and	r24, r24
     fce:	44 f4       	brge	.+16     	; 0xfe0 <__stack+0x6e1>
                {
                    minDist = currDist;
                    minPos	= currPos;
     fd0:	c9 80       	ldd	r12, Y+1	; 0x01
     fd2:	da 80       	ldd	r13, Y+2	; 0x02
     fd4:	eb 80       	ldd	r14, Y+3	; 0x03
     fd6:	fc 80       	ldd	r15, Y+4	; 0x04
                    //delay_ms( 4000 );
                }

                if ( currDist < minDist )
                {
                    minDist = currDist;
     fd8:	aa 88       	ldd	r10, Y+18	; 0x12
     fda:	6b 8a       	std	Y+19, r6	; 0x13
     fdc:	7f 86       	std	Y+15, r7	; 0x0f
     fde:	32 2c       	mov	r3, r2
     fe0:	8c 89       	ldd	r24, Y+20	; 0x14
     fe2:	9d 89       	ldd	r25, Y+21	; 0x15
     fe4:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= getDist( from, to );
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     fe6:	88 30       	cpi	r24, 0x08	; 8
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f0       	breq	.+2      	; 0xfee <__stack+0x6ef>
     fec:	bc cf       	rjmp	.-136    	; 0xf66 <__stack+0x667>
     fee:	6e 88       	ldd	r6, Y+22	; 0x16
     ff0:	7f 88       	ldd	r7, Y+23	; 0x17
                    minDist = currDist;
                    minPos	= currPos;
                }
            }

            doPrint = false;
     ff2:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
                if ( currCell.distToFinish < dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
     ff6:	cb 86       	std	Y+11, r12	; 0x0b
     ff8:	dc 86       	std	Y+12, r13	; 0x0c
     ffa:	ed 86       	std	Y+13, r14	; 0x0d
     ffc:	fe 86       	std	Y+14, r15	; 0x0e
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     ffe:	8c 2c       	mov	r8, r12
    1000:	9d 2c       	mov	r9, r13
    1002:	4d 84       	ldd	r4, Y+13	; 0x0d
    1004:	5e 84       	ldd	r5, Y+14	; 0x0e
    1006:	f2 01       	movw	r30, r4
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	e4 0d       	add	r30, r4
    100e:	f5 1d       	adc	r31, r5
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	b8 9c       	mul	r11, r8
    1016:	c0 01       	movw	r24, r0
    1018:	b9 9c       	mul	r11, r9
    101a:	90 0d       	add	r25, r0
    101c:	11 24       	eor	r1, r1
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	e5 52       	subi	r30, 0x25	; 37
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	09 f0       	breq	.+2      	; 0x1030 <__stack+0x731>
    102e:	59 cf       	rjmp	.-334    	; 0xee2 <__stack+0x5e3>
    1030:	28 88       	ldd	r2, Y+16	; 0x10
    1032:	39 88       	ldd	r3, Y+17	; 0x11
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish < dist - currCell.distToStart )
    1034:	f2 01       	movw	r30, r4
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	e4 0d       	add	r30, r4
    103c:	f5 1d       	adc	r31, r5
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	2a e5       	ldi	r18, 0x5A	; 90
    1044:	28 9d       	mul	r18, r8
    1046:	c0 01       	movw	r24, r0
    1048:	29 9d       	mul	r18, r9
    104a:	90 0d       	add	r25, r0
    104c:	11 24       	eor	r1, r1
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	e5 52       	subi	r30, 0x25	; 37
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	86 15       	cp	r24, r6
    105c:	97 05       	cpc	r25, r7
    105e:	94 f4       	brge	.+36     	; 0x1084 <__stack+0x785>
            {
                currCell.distToFinish = dist - currCell.distToStart;
    1060:	f2 01       	movw	r30, r4
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	e4 0d       	add	r30, r4
    1068:	f5 1d       	adc	r31, r5
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	28 9d       	mul	r18, r8
    1070:	c0 01       	movw	r24, r0
    1072:	29 9d       	mul	r18, r9
    1074:	90 0d       	add	r25, r0
    1076:	11 24       	eor	r1, r1
    1078:	e8 0f       	add	r30, r24
    107a:	f9 1f       	adc	r31, r25
    107c:	e5 52       	subi	r30, 0x25	; 37
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	73 82       	std	Z+3, r7	; 0x03
    1082:	62 82       	std	Z+2, r6	; 0x02

        void reverseDirection()
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );
    1084:	f1 01       	movw	r30, r2
    1086:	b5 80       	ldd	r11, Z+5	; 0x05
    1088:	e6 80       	ldd	r14, Z+6	; 0x06
    108a:	f7 80       	ldd	r15, Z+7	; 0x07
    108c:	50 85       	ldd	r21, Z+8	; 0x08
    108e:	0b ed       	ldi	r16, 0xDB	; 219
    1090:	11 e0       	ldi	r17, 0x01	; 1

            for ( short i = 0; i < MAX_ROWS; i++ )
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	f8 01       	movw	r30, r16
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    109c:	96 2e       	mov	r9, r22
    109e:	a7 2e       	mov	r10, r23
    10a0:	df 01       	movw	r26, r30

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {
                    if ( matrix[ i ][ j ].isVisited )
    10a2:	25 81       	ldd	r18, Z+5	; 0x05
    10a4:	22 23       	and	r18, r18
    10a6:	b1 f0       	breq	.+44     	; 0x10d4 <__stack+0x7d5>
                    {
                        if ( matrix[ i ][ j ].distToStart == 0 )
    10a8:	c0 80       	ld	r12, Z
    10aa:	d1 80       	ldd	r13, Z+1	; 0x01
    10ac:	c1 14       	cp	r12, r1
    10ae:	d1 04       	cpc	r13, r1
    10b0:	21 f4       	brne	.+8      	; 0x10ba <__stack+0x7bb>
    10b2:	f8 2e       	mov	r15, r24
    10b4:	59 2f       	mov	r21, r25
    10b6:	b9 2c       	mov	r11, r9
    10b8:	ea 2c       	mov	r14, r10
                        {
                            // Save the start position.
                            startPos = Point2D( i, j );
                        }

                        short tmp						= matrix[ i ][ j ].distToFinish;
    10ba:	12 96       	adiw	r26, 0x02	; 2
    10bc:	2d 91       	ld	r18, X+
    10be:	3c 91       	ld	r19, X
    10c0:	13 97       	sbiw	r26, 0x03	; 3
                        matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
    10c2:	13 96       	adiw	r26, 0x03	; 3
    10c4:	dc 92       	st	X, r13
    10c6:	ce 92       	st	-X, r12
    10c8:	12 97       	sbiw	r26, 0x02	; 2
                        matrix[ i ][ j ].distToStart	= tmp;
    10ca:	11 96       	adiw	r26, 0x01	; 1
    10cc:	3c 93       	st	X, r19
    10ce:	2e 93       	st	-X, r18
                        matrix[ i ][ j ].isVisited		= false;
    10d0:	15 96       	adiw	r26, 0x05	; 5
    10d2:	1c 92       	st	X, r1
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	36 96       	adiw	r30, 0x06	; 6
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
    10d8:	8f 30       	cpi	r24, 0x0F	; 15
    10da:	91 05       	cpc	r25, r1
    10dc:	09 f7       	brne	.-62     	; 0x10a0 <__stack+0x7a1>
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	06 5a       	subi	r16, 0xA6	; 166
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
    10e6:	6f 30       	cpi	r22, 0x0F	; 15
    10e8:	71 05       	cpc	r23, r1
    10ea:	a9 f6       	brne	.-86     	; 0x1096 <__stack+0x797>
                    }
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
    10ec:	d1 01       	movw	r26, r2
    10ee:	15 96       	adiw	r26, 0x05	; 5
    10f0:	bc 92       	st	X, r11
    10f2:	15 97       	sbiw	r26, 0x05	; 5
    10f4:	16 96       	adiw	r26, 0x06	; 6
    10f6:	ec 92       	st	X, r14
    10f8:	16 97       	sbiw	r26, 0x06	; 6
    10fa:	17 96       	adiw	r26, 0x07	; 7
    10fc:	fc 92       	st	X, r15
    10fe:	17 97       	sbiw	r26, 0x07	; 7
    1100:	18 96       	adiw	r26, 0x08	; 8
    1102:	5c 93       	st	X, r21
    1104:	18 97       	sbiw	r26, 0x08	; 8

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
                    this->reverseDirection();
                    doPrint = false;
    1106:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <doPrint>
                    matrix[ position.x ][ position.y ].isVisited	= true;
    110a:	2d 91       	ld	r18, X+
    110c:	3c 91       	ld	r19, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	12 96       	adiw	r26, 0x02	; 2
    1112:	8d 91       	ld	r24, X+
    1114:	9c 91       	ld	r25, X
    1116:	13 97       	sbiw	r26, 0x03	; 3
    1118:	ac 01       	movw	r20, r24
    111a:	44 0f       	add	r20, r20
    111c:	55 1f       	adc	r21, r21
    111e:	84 0f       	add	r24, r20
    1120:	95 1f       	adc	r25, r21
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	4a e5       	ldi	r20, 0x5A	; 90
    1128:	42 9f       	mul	r20, r18
    112a:	f0 01       	movw	r30, r0
    112c:	43 9f       	mul	r20, r19
    112e:	f0 0d       	add	r31, r0
    1130:	11 24       	eor	r1, r1
    1132:	8e 0f       	add	r24, r30
    1134:	9f 1f       	adc	r25, r31
    1136:	fc 01       	movw	r30, r24
    1138:	e5 52       	subi	r30, 0x25	; 37
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	85 83       	std	Z+5, r24	; 0x05

                    lap++;
    1140:	53 96       	adiw	r26, 0x13	; 19
    1142:	8d 91       	ld	r24, X+
    1144:	9c 91       	ld	r25, X
    1146:	54 97       	sbiw	r26, 0x14	; 20
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	54 96       	adiw	r26, 0x14	; 20
    114c:	9c 93       	st	X, r25
    114e:	8e 93       	st	-X, r24
    1150:	53 97       	sbiw	r26, 0x13	; 19
    1152:	bc ca       	rjmp	.-2696   	; 0x6cc <_ZN5Robot8mainMenuEv+0x11c>
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= getDist( from, to );
    1154:	6a 89       	ldd	r22, Y+18	; 0x12
    1156:	7b 89       	ldd	r23, Y+19	; 0x13
    1158:	86 2f       	mov	r24, r22
    115a:	97 2f       	mov	r25, r23
    115c:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
    1160:	76 2e       	mov	r7, r22
    1162:	67 2e       	mov	r6, r23
    1164:	8f 87       	std	Y+15, r24	; 0x0f
    1166:	98 8b       	std	Y+16, r25	; 0x10
            Point2D	minPos( from );
    1168:	f1 01       	movw	r30, r2
    116a:	c0 80       	ld	r12, Z
    116c:	d1 80       	ldd	r13, Z+1	; 0x01
    116e:	e2 80       	ldd	r14, Z+2	; 0x02
    1170:	f3 80       	ldd	r15, Z+3	; 0x03
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
    1172:	8c 89       	ldd	r24, Y+20	; 0x14
    1174:	9e 89       	ldd	r25, Y+22	; 0x16
    1176:	3b a2       	std	Y+35, r3	; 0x23
    1178:	2a a2       	std	Y+34, r2	; 0x22
    117a:	4a cb       	rjmp	.-2412   	; 0x810 <_ZN5Robot8mainMenuEv+0x260>
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
    117c:	d1 01       	movw	r26, r2
    117e:	14 96       	adiw	r26, 0x04	; 4
    1180:	8c 91       	ld	r24, X
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	91 05       	cpc	r25, r1
    1188:	08 f0       	brcs	.+2      	; 0x118c <__stack+0x88d>
    118a:	06 cc       	rjmp	.-2036   	; 0x998 <__stack+0x99>
    118c:	fc 01       	movw	r30, r24
    118e:	ec 5c       	subi	r30, 0xCC	; 204
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
    1196:	03 ed       	ldi	r16, 0xD3	; 211
    1198:	1f ef       	ldi	r17, 0xFF	; 255
    119a:	03 cc       	rjmp	.-2042   	; 0x9a2 <__stack+0xa3>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
    119c:	06 ea       	ldi	r16, 0xA6	; 166
    119e:	1f ef       	ldi	r17, 0xFF	; 255
    11a0:	00 cc       	rjmp	.-2048   	; 0x9a2 <__stack+0xa3>
        {
            set_motors( 19, 19 );

            while ( !isOnMarker() ) {}

            play( ">>a32" );
    11a2:	82 e7       	ldi	r24, 0x72	; 114
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 31 11 	call	0x2262	; 0x2262 <play>

            if ( boostLeftWheel && !boostRightWheel )
    11aa:	f1 01       	movw	r30, r2
    11ac:	85 89       	ldd	r24, Z+21	; 0x15
    11ae:	81 11       	cpse	r24, r1
    11b0:	5f ce       	rjmp	.-834    	; 0xe70 <__stack+0x571>
    11b2:	69 ce       	rjmp	.-814    	; 0xe86 <__stack+0x587>
            {
                stepToGoal( finishPos );

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
    11b4:	d1 01       	movw	r26, r2
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	ac 01       	movw	r20, r24
    11bc:	44 0f       	add	r20, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	84 0f       	add	r24, r20
    11c2:	95 1f       	adc	r25, r21
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	4a e5       	ldi	r20, 0x5A	; 90
    11ca:	42 9f       	mul	r20, r18
    11cc:	f0 01       	movw	r30, r0
    11ce:	43 9f       	mul	r20, r19
    11d0:	f0 0d       	add	r31, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	8e 0f       	add	r24, r30
    11d6:	9f 1f       	adc	r25, r31
    11d8:	fc 01       	movw	r30, r24
    11da:	e5 52       	subi	r30, 0x25	; 37
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
    11de:	13 82       	std	Z+3, r1	; 0x03
    11e0:	12 82       	std	Z+2, r1	; 0x02
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
    11e2:	15 96       	adiw	r26, 0x05	; 5
    11e4:	8d 91       	ld	r24, X+
    11e6:	9d 91       	ld	r25, X+
    11e8:	0d 90       	ld	r0, X+
    11ea:	bc 91       	ld	r27, X
    11ec:	a0 2d       	mov	r26, r0
    11ee:	38 2f       	mov	r19, r24
    11f0:	29 2f       	mov	r18, r25
    11f2:	8b 87       	std	Y+11, r24	; 0x0b
    11f4:	9c 87       	std	Y+12, r25	; 0x0c
    11f6:	ad 87       	std	Y+13, r26	; 0x0d
    11f8:	be 87       	std	Y+14, r27	; 0x0e
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
    11fa:	f1 01       	movw	r30, r2
    11fc:	87 81       	ldd	r24, Z+7	; 0x07
    11fe:	90 85       	ldd	r25, Z+8	; 0x08
    1200:	65 81       	ldd	r22, Z+5	; 0x05
    1202:	76 81       	ldd	r23, Z+6	; 0x06
    1204:	fc 01       	movw	r30, r24
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	8e 0f       	add	r24, r30
    120c:	9f 1f       	adc	r25, r31
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	46 9f       	mul	r20, r22
    1214:	f0 01       	movw	r30, r0
    1216:	47 9f       	mul	r20, r23
    1218:	f0 0d       	add	r31, r0
    121a:	11 24       	eor	r1, r1
    121c:	8e 0f       	add	r24, r30
    121e:	9f 1f       	adc	r25, r31
    1220:	fc 01       	movw	r30, r24
    1222:	e5 52       	subi	r30, 0x25	; 37
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	60 80       	ld	r6, Z
    1228:	71 80       	ldd	r7, Z+1	; 0x01

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    122a:	83 2e       	mov	r8, r19
    122c:	92 2e       	mov	r9, r18
    122e:	4d 84       	ldd	r4, Y+13	; 0x0d
    1230:	5e 84       	ldd	r5, Y+14	; 0x0e
    1232:	f2 01       	movw	r30, r4
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	e4 0d       	add	r30, r4
    123a:	f5 1d       	adc	r31, r5
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	48 9d       	mul	r20, r8
    1242:	c0 01       	movw	r24, r0
    1244:	49 9d       	mul	r20, r9
    1246:	90 0d       	add	r25, r0
    1248:	11 24       	eor	r1, r1
    124a:	e8 0f       	add	r30, r24
    124c:	f9 1f       	adc	r31, r25
    124e:	e5 52       	subi	r30, 0x25	; 37
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	09 f4       	brne	.+2      	; 0x125c <__stack+0x95d>
    125a:	ec ce       	rjmp	.-552    	; 0x1034 <__stack+0x735>
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish < dist - currCell.distToStart )
    125c:	0f 2e       	mov	r0, r31
    125e:	fa e5       	ldi	r31, 0x5A	; 90
    1260:	bf 2e       	mov	r11, r31
    1262:	f0 2d       	mov	r31, r0
    1264:	39 8a       	std	Y+17, r3	; 0x11
    1266:	28 8a       	std	Y+16, r2	; 0x10
    1268:	3c ce       	rjmp	.-904    	; 0xee2 <__stack+0x5e3>

0000126a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    126a:	fb 01       	movw	r30, r22
    126c:	20 81       	ld	r18, Z
    126e:	31 81       	ldd	r19, Z+1	; 0x01
    1270:	2f 30       	cpi	r18, 0x0F	; 15
    1272:	31 05       	cpc	r19, r1
    1274:	28 f5       	brcc	.+74     	; 0x12c0 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x56>
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	8f 30       	cpi	r24, 0x0F	; 15
    127c:	91 05       	cpc	r25, r1
    127e:	28 f1       	brcs	.+74     	; 0x12ca <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	7e ef       	ldi	r23, 0xFE	; 254
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	96 e4       	ldi	r25, 0x46	; 70
    1288:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
    128a:	ac 01       	movw	r20, r24
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	84 0f       	add	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	4a e5       	ldi	r20, 0x5A	; 90
    129a:	42 9f       	mul	r20, r18
    129c:	f0 01       	movw	r30, r0
    129e:	43 9f       	mul	r20, r19
    12a0:	f0 0d       	add	r31, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	8e 0f       	add	r24, r30
    12a6:	9f 1f       	adc	r25, r31
    12a8:	fc 01       	movw	r30, r24
    12aa:	e5 52       	subi	r30, 0x25	; 37
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	07 2e       	mov	r0, r23
    12b4:	00 0c       	add	r0, r0
    12b6:	88 0b       	sbc	r24, r24
    12b8:	99 0b       	sbc	r25, r25
    12ba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
    12be:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	7e ef       	ldi	r23, 0xFE	; 254
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	96 e4       	ldi	r25, 0x46	; 70
    12c8:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
    12ca:	fc 01       	movw	r30, r24
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	6a e5       	ldi	r22, 0x5A	; 90
    12da:	62 9f       	mul	r22, r18
    12dc:	a0 01       	movw	r20, r0
    12de:	63 9f       	mul	r22, r19
    12e0:	50 0d       	add	r21, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	e4 0f       	add	r30, r20
    12e6:	f5 1f       	adc	r31, r21
    12e8:	e5 52       	subi	r30, 0x25	; 37
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	45 81       	ldd	r20, Z+5	; 0x05
    12ee:	41 11       	cpse	r20, r1
    12f0:	cc cf       	rjmp	.-104    	; 0x128a <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x20>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	7e ef       	ldi	r23, 0xFE	; 254
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	96 e4       	ldi	r25, 0x46	; 70
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
    12fa:	08 95       	ret

000012fc <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    12fc:	fb 01       	movw	r30, r22
    12fe:	20 81       	ld	r18, Z
    1300:	31 81       	ldd	r19, Z+1	; 0x01
    1302:	2f 30       	cpi	r18, 0x0F	; 15
    1304:	31 05       	cpc	r19, r1
    1306:	28 f5       	brcc	.+74     	; 0x1352 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x56>
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	8f 30       	cpi	r24, 0x0F	; 15
    130e:	91 05       	cpc	r25, r1
    1310:	50 f1       	brcs	.+84     	; 0x1366 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x6a>

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	7e ef       	ldi	r23, 0xFE	; 254
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	96 e4       	ldi	r25, 0x46	; 70
    131a:	08 95       	ret

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
    131c:	ac 01       	movw	r20, r24
    131e:	44 0f       	add	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	84 0f       	add	r24, r20
    1324:	95 1f       	adc	r25, r21
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	4a e5       	ldi	r20, 0x5A	; 90
    132c:	42 9f       	mul	r20, r18
    132e:	f0 01       	movw	r30, r0
    1330:	43 9f       	mul	r20, r19
    1332:	f0 0d       	add	r31, r0
    1334:	11 24       	eor	r1, r1
    1336:	8e 0f       	add	r24, r30
    1338:	9f 1f       	adc	r25, r31
    133a:	fc 01       	movw	r30, r24
    133c:	e5 52       	subi	r30, 0x25	; 37
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	62 81       	ldd	r22, Z+2	; 0x02
    1342:	73 81       	ldd	r23, Z+3	; 0x03
    1344:	07 2e       	mov	r0, r23
    1346:	00 0c       	add	r0, r0
    1348:	88 0b       	sbc	r24, r24
    134a:	99 0b       	sbc	r25, r25
    134c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatsisf>
    1350:	08 95       	ret

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	7e ef       	ldi	r23, 0xFE	; 254
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	96 e4       	ldi	r25, 0x46	; 70
    135a:	08 95       	ret
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	7e ef       	ldi	r23, 0xFE	; 254
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	96 e4       	ldi	r25, 0x46	; 70
                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
                }

                return result;
    1364:	08 95       	ret
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
    1366:	fc 01       	movw	r30, r24
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	e8 0f       	add	r30, r24
    136e:	f9 1f       	adc	r31, r25
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	6a e5       	ldi	r22, 0x5A	; 90
    1376:	62 9f       	mul	r22, r18
    1378:	a0 01       	movw	r20, r0
    137a:	63 9f       	mul	r22, r19
    137c:	50 0d       	add	r21, r0
    137e:	11 24       	eor	r1, r1
    1380:	e4 0f       	add	r30, r20
    1382:	f5 1f       	adc	r31, r21
    1384:	e5 52       	subi	r30, 0x25	; 37
    1386:	fe 4f       	sbci	r31, 0xFE	; 254
    1388:	45 81       	ldd	r20, Z+5	; 0x05
    138a:	41 11       	cpse	r20, r1
    138c:	e7 cf       	rjmp	.-50     	; 0x135c <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>
    138e:	c6 cf       	rjmp	.-116    	; 0x131c <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x20>

00001390 <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	67 97       	sbiw	r28, 0x17	; 23
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	1c 82       	std	Y+4, r1	; 0x04
    13ae:	1b 82       	std	Y+3, r1	; 0x03
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
            , boostLeftWheel( false )
            , boostRightWheel( false )
    13b0:	1d 82       	std	Y+5, r1	; 0x05

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    13b2:	9f 83       	std	Y+7, r25	; 0x07
    13b4:	8e 83       	std	Y+6, r24	; 0x06
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	99 87       	std	Y+9, r25	; 0x09
    13bc:	88 87       	std	Y+8, r24	; 0x08
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
            , boostLeftWheel( false )
            , boostRightWheel( false )
    13be:	1d 8a       	std	Y+21, r1	; 0x15
    13c0:	1c 8a       	std	Y+20, r1	; 0x14
    13c2:	1e 8a       	std	Y+22, r1	; 0x16
    13c4:	1f 8a       	std	Y+23, r1	; 0x17
        {}
        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
    13c6:	80 ed       	ldi	r24, 0xD0	; 208
    13c8:	97 e0       	ldi	r25, 0x07	; 7
    13ca:	0e 94 76 14 	call	0x28ec	; 0x28ec <pololu_3pi_init>

            set_motors( 0, 0 );
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 77 13 	call	0x26ee	; 0x26ee <set_motors>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    13da:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <read_battery_millivolts_3pi>
    13de:	8c 01       	movw	r16, r24

            // Display battery voltage and wait two seconds
            unsigned short bat = read_battery_millivolts();

            clear();
    13e0:	0e 94 3a 12 	call	0x2474	; 0x2474 <clear>
            print_long( bat );
    13e4:	b8 01       	movw	r22, r16
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 9e 12 	call	0x253c	; 0x253c <print_long>
            print( "mV" );
    13ee:	88 e7       	ldi	r24, 0x78	; 120
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 49 12 	call	0x2492	; 0x2492 <print>
            delay_ms( 1000 );
    13f6:	88 ee       	ldi	r24, 0xE8	; 232
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>

            this->mainMenu();
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN5Robot8mainMenuEv>

00001406 <_GLOBAL__sub_I_doPrint>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1406:	4b ed       	ldi	r20, 0xDB	; 219
    1408:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( SHRT_MAX )
            , distToFinish( SHRT_MAX )
            , isObstacle( false )
            , isVisited( false )
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	9f e7       	ldi	r25, 0x7F	; 127
    140e:	fa 01       	movw	r30, r20
    1410:	46 5a       	subi	r20, 0xA6	; 166
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	9a 01       	movw	r18, r20
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	82 83       	std	Z+2, r24	; 0x02
    141e:	14 82       	std	Z+4, r1	; 0x04
    1420:	15 82       	std	Z+5, r1	; 0x05
    1422:	36 96       	adiw	r30, 0x06	; 6
        }
};

typedef float ( *getDistFunc )( const Point2D&, const Point2D& );

Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    1424:	e2 17       	cp	r30, r18
    1426:	f3 07       	cpc	r31, r19
    1428:	b1 f7       	brne	.-20     	; 0x1416 <_GLOBAL__sub_I_doPrint+0x10>
    142a:	27 e0       	ldi	r18, 0x07	; 7
    142c:	41 32       	cpi	r20, 0x21	; 33
    142e:	52 07       	cpc	r21, r18
    1430:	71 f7       	brne	.-36     	; 0x140e <_GLOBAL__sub_I_doPrint+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1432:	08 95       	ret

00001434 <atan>:
    1434:	df 93       	push	r29
    1436:	dd 27       	eor	r29, r29
    1438:	b9 2f       	mov	r27, r25
    143a:	bf 77       	andi	r27, 0x7F	; 127
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	16 16       	cp	r1, r22
    1442:	17 06       	cpc	r1, r23
    1444:	48 07       	cpc	r20, r24
    1446:	5b 07       	cpc	r21, r27
    1448:	18 f4       	brcc	.+6      	; 0x1450 <atan+0x1c>
    144a:	d9 2f       	mov	r29, r25
    144c:	0e 94 cf 0b 	call	0x179e	; 0x179e <inverse>
    1450:	9f 93       	push	r25
    1452:	8f 93       	push	r24
    1454:	7f 93       	push	r23
    1456:	6f 93       	push	r22
    1458:	0e 94 ae 0c 	call	0x195c	; 0x195c <square>
    145c:	e8 e7       	ldi	r30, 0x78	; 120
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__fp_powser>
    1464:	0e 94 95 0b 	call	0x172a	; 0x172a <__fp_round>
    1468:	2f 91       	pop	r18
    146a:	3f 91       	pop	r19
    146c:	4f 91       	pop	r20
    146e:	5f 91       	pop	r21
    1470:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__mulsf3x>
    1474:	dd 23       	and	r29, r29
    1476:	51 f0       	breq	.+20     	; 0x148c <atan+0x58>
    1478:	90 58       	subi	r25, 0x80	; 128
    147a:	a2 ea       	ldi	r26, 0xA2	; 162
    147c:	2a ed       	ldi	r18, 0xDA	; 218
    147e:	3f e0       	ldi	r19, 0x0F	; 15
    1480:	49 ec       	ldi	r20, 0xC9	; 201
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	d0 78       	andi	r29, 0x80	; 128
    1486:	5d 27       	eor	r21, r29
    1488:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__addsf3x>
    148c:	df 91       	pop	r29
    148e:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_round>

00001492 <__cmpsf2>:
    1492:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fp_cmp>
    1496:	08 f4       	brcc	.+2      	; 0x149a <__cmpsf2+0x8>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	08 95       	ret

0000149c <__divsf3>:
    149c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__divsf3x>
    14a0:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_round>
    14a4:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_pscB>
    14a8:	58 f0       	brcs	.+22     	; 0x14c0 <__divsf3+0x24>
    14aa:	0e 94 87 0b 	call	0x170e	; 0x170e <__fp_pscA>
    14ae:	40 f0       	brcs	.+16     	; 0x14c0 <__divsf3+0x24>
    14b0:	29 f4       	brne	.+10     	; 0x14bc <__divsf3+0x20>
    14b2:	5f 3f       	cpi	r21, 0xFF	; 255
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <__divsf3+0x24>
    14b6:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_inf>
    14ba:	51 11       	cpse	r21, r1
    14bc:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_szero>
    14c0:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_nan>

000014c4 <__divsf3x>:
    14c4:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fp_split3>
    14c8:	68 f3       	brcs	.-38     	; 0x14a4 <__divsf3+0x8>

000014ca <__divsf3_pse>:
    14ca:	99 23       	and	r25, r25
    14cc:	b1 f3       	breq	.-20     	; 0x14ba <__divsf3+0x1e>
    14ce:	55 23       	and	r21, r21
    14d0:	91 f3       	breq	.-28     	; 0x14b6 <__divsf3+0x1a>
    14d2:	95 1b       	sub	r25, r21
    14d4:	55 0b       	sbc	r21, r21
    14d6:	bb 27       	eor	r27, r27
    14d8:	aa 27       	eor	r26, r26
    14da:	62 17       	cp	r22, r18
    14dc:	73 07       	cpc	r23, r19
    14de:	84 07       	cpc	r24, r20
    14e0:	38 f0       	brcs	.+14     	; 0x14f0 <__divsf3_pse+0x26>
    14e2:	9f 5f       	subi	r25, 0xFF	; 255
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	22 0f       	add	r18, r18
    14e8:	33 1f       	adc	r19, r19
    14ea:	44 1f       	adc	r20, r20
    14ec:	aa 1f       	adc	r26, r26
    14ee:	a9 f3       	breq	.-22     	; 0x14da <__divsf3_pse+0x10>
    14f0:	35 d0       	rcall	.+106    	; 0x155c <__divsf3_pse+0x92>
    14f2:	0e 2e       	mov	r0, r30
    14f4:	3a f0       	brmi	.+14     	; 0x1504 <__divsf3_pse+0x3a>
    14f6:	e0 e8       	ldi	r30, 0x80	; 128
    14f8:	32 d0       	rcall	.+100    	; 0x155e <__divsf3_pse+0x94>
    14fa:	91 50       	subi	r25, 0x01	; 1
    14fc:	50 40       	sbci	r21, 0x00	; 0
    14fe:	e6 95       	lsr	r30
    1500:	00 1c       	adc	r0, r0
    1502:	ca f7       	brpl	.-14     	; 0x14f6 <__divsf3_pse+0x2c>
    1504:	2b d0       	rcall	.+86     	; 0x155c <__divsf3_pse+0x92>
    1506:	fe 2f       	mov	r31, r30
    1508:	29 d0       	rcall	.+82     	; 0x155c <__divsf3_pse+0x92>
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	bb 1f       	adc	r27, r27
    1512:	26 17       	cp	r18, r22
    1514:	37 07       	cpc	r19, r23
    1516:	48 07       	cpc	r20, r24
    1518:	ab 07       	cpc	r26, r27
    151a:	b0 e8       	ldi	r27, 0x80	; 128
    151c:	09 f0       	breq	.+2      	; 0x1520 <__divsf3_pse+0x56>
    151e:	bb 0b       	sbc	r27, r27
    1520:	80 2d       	mov	r24, r0
    1522:	bf 01       	movw	r22, r30
    1524:	ff 27       	eor	r31, r31
    1526:	93 58       	subi	r25, 0x83	; 131
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	3a f0       	brmi	.+14     	; 0x153a <__divsf3_pse+0x70>
    152c:	9e 3f       	cpi	r25, 0xFE	; 254
    152e:	51 05       	cpc	r21, r1
    1530:	78 f0       	brcs	.+30     	; 0x1550 <__divsf3_pse+0x86>
    1532:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_inf>
    1536:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_szero>
    153a:	5f 3f       	cpi	r21, 0xFF	; 255
    153c:	e4 f3       	brlt	.-8      	; 0x1536 <__divsf3_pse+0x6c>
    153e:	98 3e       	cpi	r25, 0xE8	; 232
    1540:	d4 f3       	brlt	.-12     	; 0x1536 <__divsf3_pse+0x6c>
    1542:	86 95       	lsr	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	b7 95       	ror	r27
    154a:	f7 95       	ror	r31
    154c:	9f 5f       	subi	r25, 0xFF	; 255
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__divsf3_pse+0x78>
    1550:	88 0f       	add	r24, r24
    1552:	91 1d       	adc	r25, r1
    1554:	96 95       	lsr	r25
    1556:	87 95       	ror	r24
    1558:	97 f9       	bld	r25, 7
    155a:	08 95       	ret
    155c:	e1 e0       	ldi	r30, 0x01	; 1
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	bb 1f       	adc	r27, r27
    1566:	62 17       	cp	r22, r18
    1568:	73 07       	cpc	r23, r19
    156a:	84 07       	cpc	r24, r20
    156c:	ba 07       	cpc	r27, r26
    156e:	20 f0       	brcs	.+8      	; 0x1578 <__divsf3_pse+0xae>
    1570:	62 1b       	sub	r22, r18
    1572:	73 0b       	sbc	r23, r19
    1574:	84 0b       	sbc	r24, r20
    1576:	ba 0b       	sbc	r27, r26
    1578:	ee 1f       	adc	r30, r30
    157a:	88 f7       	brcc	.-30     	; 0x155e <__divsf3_pse+0x94>
    157c:	e0 95       	com	r30
    157e:	08 95       	ret

00001580 <__fixsfsi>:
    1580:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    1584:	68 94       	set
    1586:	b1 11       	cpse	r27, r1
    1588:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_szero>
    158c:	08 95       	ret

0000158e <__fixunssfsi>:
    158e:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_splitA>
    1592:	88 f0       	brcs	.+34     	; 0x15b6 <__fixunssfsi+0x28>
    1594:	9f 57       	subi	r25, 0x7F	; 127
    1596:	98 f0       	brcs	.+38     	; 0x15be <__fixunssfsi+0x30>
    1598:	b9 2f       	mov	r27, r25
    159a:	99 27       	eor	r25, r25
    159c:	b7 51       	subi	r27, 0x17	; 23
    159e:	b0 f0       	brcs	.+44     	; 0x15cc <__fixunssfsi+0x3e>
    15a0:	e1 f0       	breq	.+56     	; 0x15da <__fixunssfsi+0x4c>
    15a2:	66 0f       	add	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 1f       	adc	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	1a f0       	brmi	.+6      	; 0x15b2 <__fixunssfsi+0x24>
    15ac:	ba 95       	dec	r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__fixunssfsi+0x14>
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <__fixunssfsi+0x4c>
    15b2:	b1 30       	cpi	r27, 0x01	; 1
    15b4:	91 f0       	breq	.+36     	; 0x15da <__fixunssfsi+0x4c>
    15b6:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_zero>
    15ba:	b1 e0       	ldi	r27, 0x01	; 1
    15bc:	08 95       	ret
    15be:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_zero>
    15c2:	67 2f       	mov	r22, r23
    15c4:	78 2f       	mov	r23, r24
    15c6:	88 27       	eor	r24, r24
    15c8:	b8 5f       	subi	r27, 0xF8	; 248
    15ca:	39 f0       	breq	.+14     	; 0x15da <__fixunssfsi+0x4c>
    15cc:	b9 3f       	cpi	r27, 0xF9	; 249
    15ce:	cc f3       	brlt	.-14     	; 0x15c2 <__fixunssfsi+0x34>
    15d0:	86 95       	lsr	r24
    15d2:	77 95       	ror	r23
    15d4:	67 95       	ror	r22
    15d6:	b3 95       	inc	r27
    15d8:	d9 f7       	brne	.-10     	; 0x15d0 <__fixunssfsi+0x42>
    15da:	3e f4       	brtc	.+14     	; 0x15ea <__fixunssfsi+0x5c>
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	08 95       	ret

000015ec <__floatunsisf>:
    15ec:	e8 94       	clt
    15ee:	09 c0       	rjmp	.+18     	; 0x1602 <__floatsisf+0x12>

000015f0 <__floatsisf>:
    15f0:	97 fb       	bst	r25, 7
    15f2:	3e f4       	brtc	.+14     	; 0x1602 <__floatsisf+0x12>
    15f4:	90 95       	com	r25
    15f6:	80 95       	com	r24
    15f8:	70 95       	com	r23
    15fa:	61 95       	neg	r22
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	99 23       	and	r25, r25
    1604:	a9 f0       	breq	.+42     	; 0x1630 <__floatsisf+0x40>
    1606:	f9 2f       	mov	r31, r25
    1608:	96 e9       	ldi	r25, 0x96	; 150
    160a:	bb 27       	eor	r27, r27
    160c:	93 95       	inc	r25
    160e:	f6 95       	lsr	r31
    1610:	87 95       	ror	r24
    1612:	77 95       	ror	r23
    1614:	67 95       	ror	r22
    1616:	b7 95       	ror	r27
    1618:	f1 11       	cpse	r31, r1
    161a:	f8 cf       	rjmp	.-16     	; 0x160c <__floatsisf+0x1c>
    161c:	fa f4       	brpl	.+62     	; 0x165c <__floatsisf+0x6c>
    161e:	bb 0f       	add	r27, r27
    1620:	11 f4       	brne	.+4      	; 0x1626 <__floatsisf+0x36>
    1622:	60 ff       	sbrs	r22, 0
    1624:	1b c0       	rjmp	.+54     	; 0x165c <__floatsisf+0x6c>
    1626:	6f 5f       	subi	r22, 0xFF	; 255
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	8f 4f       	sbci	r24, 0xFF	; 255
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	16 c0       	rjmp	.+44     	; 0x165c <__floatsisf+0x6c>
    1630:	88 23       	and	r24, r24
    1632:	11 f0       	breq	.+4      	; 0x1638 <__floatsisf+0x48>
    1634:	96 e9       	ldi	r25, 0x96	; 150
    1636:	11 c0       	rjmp	.+34     	; 0x165a <__floatsisf+0x6a>
    1638:	77 23       	and	r23, r23
    163a:	21 f0       	breq	.+8      	; 0x1644 <__floatsisf+0x54>
    163c:	9e e8       	ldi	r25, 0x8E	; 142
    163e:	87 2f       	mov	r24, r23
    1640:	76 2f       	mov	r23, r22
    1642:	05 c0       	rjmp	.+10     	; 0x164e <__floatsisf+0x5e>
    1644:	66 23       	and	r22, r22
    1646:	71 f0       	breq	.+28     	; 0x1664 <__floatsisf+0x74>
    1648:	96 e8       	ldi	r25, 0x86	; 134
    164a:	86 2f       	mov	r24, r22
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	2a f0       	brmi	.+10     	; 0x165c <__floatsisf+0x6c>
    1652:	9a 95       	dec	r25
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	da f7       	brpl	.-10     	; 0x1652 <__floatsisf+0x62>
    165c:	88 0f       	add	r24, r24
    165e:	96 95       	lsr	r25
    1660:	87 95       	ror	r24
    1662:	97 f9       	bld	r25, 7
    1664:	08 95       	ret

00001666 <__fp_cmp>:
    1666:	99 0f       	add	r25, r25
    1668:	00 08       	sbc	r0, r0
    166a:	55 0f       	add	r21, r21
    166c:	aa 0b       	sbc	r26, r26
    166e:	e0 e8       	ldi	r30, 0x80	; 128
    1670:	fe ef       	ldi	r31, 0xFE	; 254
    1672:	16 16       	cp	r1, r22
    1674:	17 06       	cpc	r1, r23
    1676:	e8 07       	cpc	r30, r24
    1678:	f9 07       	cpc	r31, r25
    167a:	c0 f0       	brcs	.+48     	; 0x16ac <__fp_cmp+0x46>
    167c:	12 16       	cp	r1, r18
    167e:	13 06       	cpc	r1, r19
    1680:	e4 07       	cpc	r30, r20
    1682:	f5 07       	cpc	r31, r21
    1684:	98 f0       	brcs	.+38     	; 0x16ac <__fp_cmp+0x46>
    1686:	62 1b       	sub	r22, r18
    1688:	73 0b       	sbc	r23, r19
    168a:	84 0b       	sbc	r24, r20
    168c:	95 0b       	sbc	r25, r21
    168e:	39 f4       	brne	.+14     	; 0x169e <__fp_cmp+0x38>
    1690:	0a 26       	eor	r0, r26
    1692:	61 f0       	breq	.+24     	; 0x16ac <__fp_cmp+0x46>
    1694:	23 2b       	or	r18, r19
    1696:	24 2b       	or	r18, r20
    1698:	25 2b       	or	r18, r21
    169a:	21 f4       	brne	.+8      	; 0x16a4 <__fp_cmp+0x3e>
    169c:	08 95       	ret
    169e:	0a 26       	eor	r0, r26
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <__fp_cmp+0x3e>
    16a2:	a1 40       	sbci	r26, 0x01	; 1
    16a4:	a6 95       	lsr	r26
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	81 1d       	adc	r24, r1
    16aa:	81 1d       	adc	r24, r1
    16ac:	08 95       	ret

000016ae <__fp_inf>:
    16ae:	97 f9       	bld	r25, 7
    16b0:	9f 67       	ori	r25, 0x7F	; 127
    16b2:	80 e8       	ldi	r24, 0x80	; 128
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	08 95       	ret

000016ba <__fp_nan>:
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	80 ec       	ldi	r24, 0xC0	; 192
    16be:	08 95       	ret

000016c0 <__fp_powser>:
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	1f 93       	push	r17
    16c6:	0f 93       	push	r16
    16c8:	ff 92       	push	r15
    16ca:	ef 92       	push	r14
    16cc:	df 92       	push	r13
    16ce:	7b 01       	movw	r14, r22
    16d0:	8c 01       	movw	r16, r24
    16d2:	68 94       	set
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <__fp_powser+0x22>
    16d6:	da 2e       	mov	r13, r26
    16d8:	ef 01       	movw	r28, r30
    16da:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__mulsf3x>
    16de:	fe 01       	movw	r30, r28
    16e0:	e8 94       	clt
    16e2:	a5 91       	lpm	r26, Z+
    16e4:	25 91       	lpm	r18, Z+
    16e6:	35 91       	lpm	r19, Z+
    16e8:	45 91       	lpm	r20, Z+
    16ea:	55 91       	lpm	r21, Z+
    16ec:	a6 f3       	brts	.-24     	; 0x16d6 <__fp_powser+0x16>
    16ee:	ef 01       	movw	r28, r30
    16f0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__addsf3x>
    16f4:	fe 01       	movw	r30, r28
    16f6:	97 01       	movw	r18, r14
    16f8:	a8 01       	movw	r20, r16
    16fa:	da 94       	dec	r13
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <__fp_powser+0x18>
    16fe:	df 90       	pop	r13
    1700:	ef 90       	pop	r14
    1702:	ff 90       	pop	r15
    1704:	0f 91       	pop	r16
    1706:	1f 91       	pop	r17
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <__fp_pscA>:
    170e:	00 24       	eor	r0, r0
    1710:	0a 94       	dec	r0
    1712:	16 16       	cp	r1, r22
    1714:	17 06       	cpc	r1, r23
    1716:	18 06       	cpc	r1, r24
    1718:	09 06       	cpc	r0, r25
    171a:	08 95       	ret

0000171c <__fp_pscB>:
    171c:	00 24       	eor	r0, r0
    171e:	0a 94       	dec	r0
    1720:	12 16       	cp	r1, r18
    1722:	13 06       	cpc	r1, r19
    1724:	14 06       	cpc	r1, r20
    1726:	05 06       	cpc	r0, r21
    1728:	08 95       	ret

0000172a <__fp_round>:
    172a:	09 2e       	mov	r0, r25
    172c:	03 94       	inc	r0
    172e:	00 0c       	add	r0, r0
    1730:	11 f4       	brne	.+4      	; 0x1736 <__fp_round+0xc>
    1732:	88 23       	and	r24, r24
    1734:	52 f0       	brmi	.+20     	; 0x174a <__fp_round+0x20>
    1736:	bb 0f       	add	r27, r27
    1738:	40 f4       	brcc	.+16     	; 0x174a <__fp_round+0x20>
    173a:	bf 2b       	or	r27, r31
    173c:	11 f4       	brne	.+4      	; 0x1742 <__fp_round+0x18>
    173e:	60 ff       	sbrs	r22, 0
    1740:	04 c0       	rjmp	.+8      	; 0x174a <__fp_round+0x20>
    1742:	6f 5f       	subi	r22, 0xFF	; 255
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__fp_split3>:
    174c:	57 fd       	sbrc	r21, 7
    174e:	90 58       	subi	r25, 0x80	; 128
    1750:	44 0f       	add	r20, r20
    1752:	55 1f       	adc	r21, r21
    1754:	59 f0       	breq	.+22     	; 0x176c <__fp_splitA+0x10>
    1756:	5f 3f       	cpi	r21, 0xFF	; 255
    1758:	71 f0       	breq	.+28     	; 0x1776 <__fp_splitA+0x1a>
    175a:	47 95       	ror	r20

0000175c <__fp_splitA>:
    175c:	88 0f       	add	r24, r24
    175e:	97 fb       	bst	r25, 7
    1760:	99 1f       	adc	r25, r25
    1762:	61 f0       	breq	.+24     	; 0x177c <__fp_splitA+0x20>
    1764:	9f 3f       	cpi	r25, 0xFF	; 255
    1766:	79 f0       	breq	.+30     	; 0x1786 <__fp_splitA+0x2a>
    1768:	87 95       	ror	r24
    176a:	08 95       	ret
    176c:	12 16       	cp	r1, r18
    176e:	13 06       	cpc	r1, r19
    1770:	14 06       	cpc	r1, r20
    1772:	55 1f       	adc	r21, r21
    1774:	f2 cf       	rjmp	.-28     	; 0x175a <__fp_split3+0xe>
    1776:	46 95       	lsr	r20
    1778:	f1 df       	rcall	.-30     	; 0x175c <__fp_splitA>
    177a:	08 c0       	rjmp	.+16     	; 0x178c <__fp_splitA+0x30>
    177c:	16 16       	cp	r1, r22
    177e:	17 06       	cpc	r1, r23
    1780:	18 06       	cpc	r1, r24
    1782:	99 1f       	adc	r25, r25
    1784:	f1 cf       	rjmp	.-30     	; 0x1768 <__fp_splitA+0xc>
    1786:	86 95       	lsr	r24
    1788:	71 05       	cpc	r23, r1
    178a:	61 05       	cpc	r22, r1
    178c:	08 94       	sec
    178e:	08 95       	ret

00001790 <__fp_zero>:
    1790:	e8 94       	clt

00001792 <__fp_szero>:
    1792:	bb 27       	eor	r27, r27
    1794:	66 27       	eor	r22, r22
    1796:	77 27       	eor	r23, r23
    1798:	cb 01       	movw	r24, r22
    179a:	97 f9       	bld	r25, 7
    179c:	08 95       	ret

0000179e <inverse>:
    179e:	9b 01       	movw	r18, r22
    17a0:	ac 01       	movw	r20, r24
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	80 e8       	ldi	r24, 0x80	; 128
    17a8:	9f e3       	ldi	r25, 0x3F	; 63
    17aa:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__divsf3>

000017ae <__mulsf3>:
    17ae:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__mulsf3x>
    17b2:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_round>
    17b6:	0e 94 87 0b 	call	0x170e	; 0x170e <__fp_pscA>
    17ba:	38 f0       	brcs	.+14     	; 0x17ca <__mulsf3+0x1c>
    17bc:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_pscB>
    17c0:	20 f0       	brcs	.+8      	; 0x17ca <__mulsf3+0x1c>
    17c2:	95 23       	and	r25, r21
    17c4:	11 f0       	breq	.+4      	; 0x17ca <__mulsf3+0x1c>
    17c6:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_inf>
    17ca:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_nan>
    17ce:	11 24       	eor	r1, r1
    17d0:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_szero>

000017d4 <__mulsf3x>:
    17d4:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fp_split3>
    17d8:	70 f3       	brcs	.-36     	; 0x17b6 <__mulsf3+0x8>

000017da <__mulsf3_pse>:
    17da:	95 9f       	mul	r25, r21
    17dc:	c1 f3       	breq	.-16     	; 0x17ce <__mulsf3+0x20>
    17de:	95 0f       	add	r25, r21
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	55 1f       	adc	r21, r21
    17e4:	62 9f       	mul	r22, r18
    17e6:	f0 01       	movw	r30, r0
    17e8:	72 9f       	mul	r23, r18
    17ea:	bb 27       	eor	r27, r27
    17ec:	f0 0d       	add	r31, r0
    17ee:	b1 1d       	adc	r27, r1
    17f0:	63 9f       	mul	r22, r19
    17f2:	aa 27       	eor	r26, r26
    17f4:	f0 0d       	add	r31, r0
    17f6:	b1 1d       	adc	r27, r1
    17f8:	aa 1f       	adc	r26, r26
    17fa:	64 9f       	mul	r22, r20
    17fc:	66 27       	eor	r22, r22
    17fe:	b0 0d       	add	r27, r0
    1800:	a1 1d       	adc	r26, r1
    1802:	66 1f       	adc	r22, r22
    1804:	82 9f       	mul	r24, r18
    1806:	22 27       	eor	r18, r18
    1808:	b0 0d       	add	r27, r0
    180a:	a1 1d       	adc	r26, r1
    180c:	62 1f       	adc	r22, r18
    180e:	73 9f       	mul	r23, r19
    1810:	b0 0d       	add	r27, r0
    1812:	a1 1d       	adc	r26, r1
    1814:	62 1f       	adc	r22, r18
    1816:	83 9f       	mul	r24, r19
    1818:	a0 0d       	add	r26, r0
    181a:	61 1d       	adc	r22, r1
    181c:	22 1f       	adc	r18, r18
    181e:	74 9f       	mul	r23, r20
    1820:	33 27       	eor	r19, r19
    1822:	a0 0d       	add	r26, r0
    1824:	61 1d       	adc	r22, r1
    1826:	23 1f       	adc	r18, r19
    1828:	84 9f       	mul	r24, r20
    182a:	60 0d       	add	r22, r0
    182c:	21 1d       	adc	r18, r1
    182e:	82 2f       	mov	r24, r18
    1830:	76 2f       	mov	r23, r22
    1832:	6a 2f       	mov	r22, r26
    1834:	11 24       	eor	r1, r1
    1836:	9f 57       	subi	r25, 0x7F	; 127
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	9a f0       	brmi	.+38     	; 0x1862 <__mulsf3_pse+0x88>
    183c:	f1 f0       	breq	.+60     	; 0x187a <__mulsf3_pse+0xa0>
    183e:	88 23       	and	r24, r24
    1840:	4a f0       	brmi	.+18     	; 0x1854 <__mulsf3_pse+0x7a>
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	bb 1f       	adc	r27, r27
    1848:	66 1f       	adc	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	91 50       	subi	r25, 0x01	; 1
    1850:	50 40       	sbci	r21, 0x00	; 0
    1852:	a9 f7       	brne	.-22     	; 0x183e <__mulsf3_pse+0x64>
    1854:	9e 3f       	cpi	r25, 0xFE	; 254
    1856:	51 05       	cpc	r21, r1
    1858:	80 f0       	brcs	.+32     	; 0x187a <__mulsf3_pse+0xa0>
    185a:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_inf>
    185e:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_szero>
    1862:	5f 3f       	cpi	r21, 0xFF	; 255
    1864:	e4 f3       	brlt	.-8      	; 0x185e <__mulsf3_pse+0x84>
    1866:	98 3e       	cpi	r25, 0xE8	; 232
    1868:	d4 f3       	brlt	.-12     	; 0x185e <__mulsf3_pse+0x84>
    186a:	86 95       	lsr	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b7 95       	ror	r27
    1872:	f7 95       	ror	r31
    1874:	e7 95       	ror	r30
    1876:	9f 5f       	subi	r25, 0xFF	; 255
    1878:	c1 f7       	brne	.-16     	; 0x186a <__mulsf3_pse+0x90>
    187a:	fe 2b       	or	r31, r30
    187c:	88 0f       	add	r24, r24
    187e:	91 1d       	adc	r25, r1
    1880:	96 95       	lsr	r25
    1882:	87 95       	ror	r24
    1884:	97 f9       	bld	r25, 7
    1886:	08 95       	ret

00001888 <round>:
    1888:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_splitA>
    188c:	e8 f0       	brcs	.+58     	; 0x18c8 <round+0x40>
    188e:	9e 37       	cpi	r25, 0x7E	; 126
    1890:	e8 f0       	brcs	.+58     	; 0x18cc <round+0x44>
    1892:	96 39       	cpi	r25, 0x96	; 150
    1894:	b8 f4       	brcc	.+46     	; 0x18c4 <round+0x3c>
    1896:	9e 38       	cpi	r25, 0x8E	; 142
    1898:	48 f4       	brcc	.+18     	; 0x18ac <round+0x24>
    189a:	67 2f       	mov	r22, r23
    189c:	78 2f       	mov	r23, r24
    189e:	88 27       	eor	r24, r24
    18a0:	98 5f       	subi	r25, 0xF8	; 248
    18a2:	f9 cf       	rjmp	.-14     	; 0x1896 <round+0xe>
    18a4:	86 95       	lsr	r24
    18a6:	77 95       	ror	r23
    18a8:	67 95       	ror	r22
    18aa:	93 95       	inc	r25
    18ac:	95 39       	cpi	r25, 0x95	; 149
    18ae:	d0 f3       	brcs	.-12     	; 0x18a4 <round+0x1c>
    18b0:	b6 2f       	mov	r27, r22
    18b2:	b1 70       	andi	r27, 0x01	; 1
    18b4:	6b 0f       	add	r22, r27
    18b6:	71 1d       	adc	r23, r1
    18b8:	81 1d       	adc	r24, r1
    18ba:	20 f4       	brcc	.+8      	; 0x18c4 <round+0x3c>
    18bc:	87 95       	ror	r24
    18be:	77 95       	ror	r23
    18c0:	67 95       	ror	r22
    18c2:	93 95       	inc	r25
    18c4:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_mintl>
    18c8:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_mpack>
    18cc:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_szero>
    18d0:	19 f4       	brne	.+6      	; 0x18d8 <round+0x50>
    18d2:	16 f4       	brtc	.+4      	; 0x18d8 <round+0x50>
    18d4:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_nan>
    18d8:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_mpack>

000018dc <sqrt>:
    18dc:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_splitA>
    18e0:	b8 f3       	brcs	.-18     	; 0x18d0 <round+0x48>
    18e2:	99 23       	and	r25, r25
    18e4:	c9 f3       	breq	.-14     	; 0x18d8 <round+0x50>
    18e6:	b6 f3       	brts	.-20     	; 0x18d4 <round+0x4c>
    18e8:	9f 57       	subi	r25, 0x7F	; 127
    18ea:	55 0b       	sbc	r21, r21
    18ec:	87 ff       	sbrs	r24, 7
    18ee:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_norm2>
    18f2:	00 24       	eor	r0, r0
    18f4:	a0 e6       	ldi	r26, 0x60	; 96
    18f6:	40 ea       	ldi	r20, 0xA0	; 160
    18f8:	90 01       	movw	r18, r0
    18fa:	80 58       	subi	r24, 0x80	; 128
    18fc:	56 95       	lsr	r21
    18fe:	97 95       	ror	r25
    1900:	28 f4       	brcc	.+10     	; 0x190c <sqrt+0x30>
    1902:	80 5c       	subi	r24, 0xC0	; 192
    1904:	66 0f       	add	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	20 f0       	brcs	.+8      	; 0x1914 <sqrt+0x38>
    190c:	26 17       	cp	r18, r22
    190e:	37 07       	cpc	r19, r23
    1910:	48 07       	cpc	r20, r24
    1912:	30 f4       	brcc	.+12     	; 0x1920 <sqrt+0x44>
    1914:	62 1b       	sub	r22, r18
    1916:	73 0b       	sbc	r23, r19
    1918:	84 0b       	sbc	r24, r20
    191a:	20 29       	or	r18, r0
    191c:	31 29       	or	r19, r1
    191e:	4a 2b       	or	r20, r26
    1920:	a6 95       	lsr	r26
    1922:	17 94       	ror	r1
    1924:	07 94       	ror	r0
    1926:	20 25       	eor	r18, r0
    1928:	31 25       	eor	r19, r1
    192a:	4a 27       	eor	r20, r26
    192c:	58 f7       	brcc	.-42     	; 0x1904 <sqrt+0x28>
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	20 f0       	brcs	.+8      	; 0x193e <sqrt+0x62>
    1936:	26 17       	cp	r18, r22
    1938:	37 07       	cpc	r19, r23
    193a:	48 07       	cpc	r20, r24
    193c:	30 f4       	brcc	.+12     	; 0x194a <sqrt+0x6e>
    193e:	62 0b       	sbc	r22, r18
    1940:	73 0b       	sbc	r23, r19
    1942:	84 0b       	sbc	r24, r20
    1944:	20 0d       	add	r18, r0
    1946:	31 1d       	adc	r19, r1
    1948:	41 1d       	adc	r20, r1
    194a:	a0 95       	com	r26
    194c:	81 f7       	brne	.-32     	; 0x192e <sqrt+0x52>
    194e:	b9 01       	movw	r22, r18
    1950:	84 2f       	mov	r24, r20
    1952:	91 58       	subi	r25, 0x81	; 129
    1954:	88 0f       	add	r24, r24
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	08 95       	ret

0000195c <square>:
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__mulsf3>
    1964:	0e 94 87 0b 	call	0x170e	; 0x170e <__fp_pscA>
    1968:	38 f0       	brcs	.+14     	; 0x1978 <square+0x1c>
    196a:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_pscB>
    196e:	20 f0       	brcs	.+8      	; 0x1978 <square+0x1c>
    1970:	39 f4       	brne	.+14     	; 0x1980 <square+0x24>
    1972:	9f 3f       	cpi	r25, 0xFF	; 255
    1974:	19 f4       	brne	.+6      	; 0x197c <square+0x20>
    1976:	26 f4       	brtc	.+8      	; 0x1980 <square+0x24>
    1978:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_nan>
    197c:	0e f4       	brtc	.+2      	; 0x1980 <square+0x24>
    197e:	e0 95       	com	r30
    1980:	e7 fb       	bst	r30, 7
    1982:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_inf>

00001986 <__addsf3x>:
    1986:	e9 2f       	mov	r30, r25
    1988:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fp_split3>
    198c:	58 f3       	brcs	.-42     	; 0x1964 <square+0x8>
    198e:	ba 17       	cp	r27, r26
    1990:	62 07       	cpc	r22, r18
    1992:	73 07       	cpc	r23, r19
    1994:	84 07       	cpc	r24, r20
    1996:	95 07       	cpc	r25, r21
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <__addsf3x+0x1c>
    199a:	79 f4       	brne	.+30     	; 0x19ba <__addsf3x+0x34>
    199c:	a6 f5       	brtc	.+104    	; 0x1a06 <__addsf3x+0x80>
    199e:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_zero>
    19a2:	0e f4       	brtc	.+2      	; 0x19a6 <__addsf3x+0x20>
    19a4:	e0 95       	com	r30
    19a6:	0b 2e       	mov	r0, r27
    19a8:	ba 2f       	mov	r27, r26
    19aa:	a0 2d       	mov	r26, r0
    19ac:	0b 01       	movw	r0, r22
    19ae:	b9 01       	movw	r22, r18
    19b0:	90 01       	movw	r18, r0
    19b2:	0c 01       	movw	r0, r24
    19b4:	ca 01       	movw	r24, r20
    19b6:	a0 01       	movw	r20, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	ff 27       	eor	r31, r31
    19bc:	59 1b       	sub	r21, r25
    19be:	99 f0       	breq	.+38     	; 0x19e6 <__addsf3x+0x60>
    19c0:	59 3f       	cpi	r21, 0xF9	; 249
    19c2:	50 f4       	brcc	.+20     	; 0x19d8 <__addsf3x+0x52>
    19c4:	50 3e       	cpi	r21, 0xE0	; 224
    19c6:	68 f1       	brcs	.+90     	; 0x1a22 <__addsf3x+0x9c>
    19c8:	1a 16       	cp	r1, r26
    19ca:	f0 40       	sbci	r31, 0x00	; 0
    19cc:	a2 2f       	mov	r26, r18
    19ce:	23 2f       	mov	r18, r19
    19d0:	34 2f       	mov	r19, r20
    19d2:	44 27       	eor	r20, r20
    19d4:	58 5f       	subi	r21, 0xF8	; 248
    19d6:	f3 cf       	rjmp	.-26     	; 0x19be <__addsf3x+0x38>
    19d8:	46 95       	lsr	r20
    19da:	37 95       	ror	r19
    19dc:	27 95       	ror	r18
    19de:	a7 95       	ror	r26
    19e0:	f0 40       	sbci	r31, 0x00	; 0
    19e2:	53 95       	inc	r21
    19e4:	c9 f7       	brne	.-14     	; 0x19d8 <__addsf3x+0x52>
    19e6:	7e f4       	brtc	.+30     	; 0x1a06 <__addsf3x+0x80>
    19e8:	1f 16       	cp	r1, r31
    19ea:	ba 0b       	sbc	r27, r26
    19ec:	62 0b       	sbc	r22, r18
    19ee:	73 0b       	sbc	r23, r19
    19f0:	84 0b       	sbc	r24, r20
    19f2:	ba f0       	brmi	.+46     	; 0x1a22 <__addsf3x+0x9c>
    19f4:	91 50       	subi	r25, 0x01	; 1
    19f6:	a1 f0       	breq	.+40     	; 0x1a20 <__addsf3x+0x9a>
    19f8:	ff 0f       	add	r31, r31
    19fa:	bb 1f       	adc	r27, r27
    19fc:	66 1f       	adc	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	c2 f7       	brpl	.-16     	; 0x19f4 <__addsf3x+0x6e>
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <__addsf3x+0x9c>
    1a06:	ba 0f       	add	r27, r26
    1a08:	62 1f       	adc	r22, r18
    1a0a:	73 1f       	adc	r23, r19
    1a0c:	84 1f       	adc	r24, r20
    1a0e:	48 f4       	brcc	.+18     	; 0x1a22 <__addsf3x+0x9c>
    1a10:	87 95       	ror	r24
    1a12:	77 95       	ror	r23
    1a14:	67 95       	ror	r22
    1a16:	b7 95       	ror	r27
    1a18:	f7 95       	ror	r31
    1a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <__addsf3x+0x9a>
    1a1e:	b0 cf       	rjmp	.-160    	; 0x1980 <square+0x24>
    1a20:	93 95       	inc	r25
    1a22:	88 0f       	add	r24, r24
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <__addsf3x+0xa2>
    1a26:	99 27       	eor	r25, r25
    1a28:	ee 0f       	add	r30, r30
    1a2a:	97 95       	ror	r25
    1a2c:	87 95       	ror	r24
    1a2e:	08 95       	ret

00001a30 <__fp_mintl>:
    1a30:	88 23       	and	r24, r24
    1a32:	71 f4       	brne	.+28     	; 0x1a50 <__fp_mintl+0x20>
    1a34:	77 23       	and	r23, r23
    1a36:	21 f0       	breq	.+8      	; 0x1a40 <__fp_mintl+0x10>
    1a38:	98 50       	subi	r25, 0x08	; 8
    1a3a:	87 2b       	or	r24, r23
    1a3c:	76 2f       	mov	r23, r22
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <__fp_mintl+0x1e>
    1a40:	66 23       	and	r22, r22
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <__fp_mintl+0x18>
    1a44:	99 27       	eor	r25, r25
    1a46:	0d c0       	rjmp	.+26     	; 0x1a62 <__fp_mintl+0x32>
    1a48:	90 51       	subi	r25, 0x10	; 16
    1a4a:	86 2b       	or	r24, r22
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	2a f0       	brmi	.+10     	; 0x1a5c <__fp_mintl+0x2c>
    1a52:	9a 95       	dec	r25
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	da f7       	brpl	.-10     	; 0x1a52 <__fp_mintl+0x22>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	96 95       	lsr	r25
    1a60:	87 95       	ror	r24
    1a62:	97 f9       	bld	r25, 7
    1a64:	08 95       	ret

00001a66 <__fp_mpack>:
    1a66:	9f 3f       	cpi	r25, 0xFF	; 255
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <__fp_mpack_finite+0xc>

00001a6a <__fp_mpack_finite>:
    1a6a:	91 50       	subi	r25, 0x01	; 1
    1a6c:	20 f4       	brcc	.+8      	; 0x1a76 <__fp_mpack_finite+0xc>
    1a6e:	87 95       	ror	r24
    1a70:	77 95       	ror	r23
    1a72:	67 95       	ror	r22
    1a74:	b7 95       	ror	r27
    1a76:	88 0f       	add	r24, r24
    1a78:	91 1d       	adc	r25, r1
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	97 f9       	bld	r25, 7
    1a80:	08 95       	ret

00001a82 <__fp_norm2>:
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	50 40       	sbci	r21, 0x00	; 0
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	d2 f7       	brpl	.-12     	; 0x1a82 <__fp_norm2>
    1a8e:	08 95       	ret

00001a90 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1a90:	ec e7       	ldi	r30, 0x7C	; 124
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7d       	andi	r24, 0xDF	; 223
    1a98:	80 83       	st	Z, r24
    1a9a:	08 95       	ret

00001a9c <_ZN15OrangutanAnalog7setModeEh>:
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1aa0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1aa4:	08 95       	ret
    1aa6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1aaa:	80 62       	ori	r24, 0x20	; 32
    1aac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1ab0:	08 95       	ret

00001ab2 <_ZN15OrangutanAnalog7getModeEv>:
    1ab2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1ab6:	85 fb       	bst	r24, 5
    1ab8:	88 27       	eor	r24, r24
    1aba:	80 f9       	bld	r24, 0
    1abc:	08 95       	ret

00001abe <_ZN15OrangutanAnalog16conversionResultEv>:
    1abe:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN15OrangutanAnalog7getModeEv>
    1ac2:	88 23       	and	r24, r24
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1ac6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	08 95       	ret
    1ace:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1ad2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1ad6:	08 95       	ret

00001ad8 <_ZN15OrangutanAnalog15startConversionEhh>:
    1ad8:	80 32       	cpi	r24, 0x20	; 32
    1ada:	a0 f4       	brcc	.+40     	; 0x1b04 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1adc:	97 e8       	ldi	r25, 0x87	; 135
    1ade:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1ae2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1ae6:	66 23       	and	r22, r22
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1aea:	90 6c       	ori	r25, 0xC0	; 192
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1aee:	9f 77       	andi	r25, 0x7F	; 127
    1af0:	90 64       	ori	r25, 0x40	; 64
    1af2:	90 7e       	andi	r25, 0xE0	; 224
    1af4:	98 2b       	or	r25, r24
    1af6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1afa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1afe:	80 64       	ori	r24, 0x40	; 64
    1b00:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b04:	08 95       	ret

00001b06 <_ZN15OrangutanAnalog11readAverageEhj>:
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e9 e8       	ldi	r30, 0x89	; 137
    1b0c:	fd e0       	ldi	r31, 0x0D	; 13
    1b0e:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__prologue_saves__+0x14>
    1b12:	eb 01       	movw	r28, r22
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN15OrangutanAnalog15startConversionEhh>
    1b1a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b1e:	86 fd       	sbrc	r24, 6
    1b20:	fc cf       	rjmp	.-8      	; 0x1b1a <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1b22:	8e 01       	movw	r16, r28
    1b24:	c1 2c       	mov	r12, r1
    1b26:	d1 2c       	mov	r13, r1
    1b28:	76 01       	movw	r14, r12
    1b2a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b34:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b38:	86 fd       	sbrc	r24, 6
    1b3a:	fc cf       	rjmp	.-8      	; 0x1b34 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1b3c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_ZN15OrangutanAnalog16conversionResultEv>
    1b40:	c8 0e       	add	r12, r24
    1b42:	d9 1e       	adc	r13, r25
    1b44:	e1 1c       	adc	r14, r1
    1b46:	f1 1c       	adc	r15, r1
    1b48:	01 50       	subi	r16, 0x01	; 1
    1b4a:	11 09       	sbc	r17, r1
    1b4c:	01 15       	cp	r16, r1
    1b4e:	11 05       	cpc	r17, r1
    1b50:	61 f7       	brne	.-40     	; 0x1b2a <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1b52:	ce 01       	movw	r24, r28
    1b54:	96 95       	lsr	r25
    1b56:	87 95       	ror	r24
    1b58:	c0 34       	cpi	r28, 0x40	; 64
    1b5a:	d1 05       	cpc	r29, r1
    1b5c:	38 f4       	brcc	.+14     	; 0x1b6c <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1b5e:	8c 0d       	add	r24, r12
    1b60:	9d 1d       	adc	r25, r13
    1b62:	be 01       	movw	r22, r28
    1b64:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    1b68:	cb 01       	movw	r24, r22
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1b6c:	a7 01       	movw	r20, r14
    1b6e:	96 01       	movw	r18, r12
    1b70:	28 0f       	add	r18, r24
    1b72:	39 1f       	adc	r19, r25
    1b74:	41 1d       	adc	r20, r1
    1b76:	51 1d       	adc	r21, r1
    1b78:	ca 01       	movw	r24, r20
    1b7a:	b9 01       	movw	r22, r18
    1b7c:	9e 01       	movw	r18, r28
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    1b86:	c9 01       	movw	r24, r18
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	e8 e0       	ldi	r30, 0x08	; 8
    1b8e:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__epilogue_restores__+0x14>

00001b92 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1b92:	cf 92       	push	r12
    1b94:	df 92       	push	r13
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1b9e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1ba2:	9c 01       	movw	r18, r24
    1ba4:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__umulhisi3>
    1ba8:	6b 01       	movw	r12, r22
    1baa:	7c 01       	movw	r14, r24
    1bac:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN15OrangutanAnalog7getModeEv>
    1bb0:	88 23       	and	r24, r24
    1bb2:	59 f0       	breq	.+22     	; 0x1bca <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	b6 01       	movw	r22, r12
    1bb8:	61 58       	subi	r22, 0x81	; 129
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1bca:	c7 01       	movw	r24, r14
    1bcc:	b6 01       	movw	r22, r12
    1bce:	61 50       	subi	r22, 0x01	; 1
    1bd0:	7e 4f       	sbci	r23, 0xFE	; 254
    1bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	33 e0       	ldi	r19, 0x03	; 3
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    1be2:	c9 01       	movw	r24, r18
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1bee:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN15OrangutanAnalog11readAverageEhj>
    1bf2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1bf6:	08 95       	ret

00001bf8 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN15OrangutanAnalog7getModeEv>
    1c02:	18 2f       	mov	r17, r24
    1c04:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1c08:	6a e0       	ldi	r22, 0x0A	; 10
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	86 e0       	ldi	r24, 0x06	; 6
    1c0e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1c12:	ec 01       	movw	r28, r24
    1c14:	81 2f       	mov	r24, r17
    1c16:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN15OrangutanAnalog7setModeEh>
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	8c 0f       	add	r24, r28
    1c22:	9d 1f       	adc	r25, r29
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	08 95       	ret

00001c32 <read_battery_millivolts_3pi>:
    1c32:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1c36:	08 95       	ret

00001c38 <_ZL16currentCharacterv>:
    1c38:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_ZL17use_program_space>
    1c3c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <__data_end>
    1c40:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <__data_end+0x1>
    1c44:	99 23       	and	r25, r25
    1c46:	11 f0       	breq	.+4      	; 0x1c4c <_ZL16currentCharacterv+0x14>
    1c48:	84 91       	lpm	r24, Z
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <_ZL16currentCharacterv+0x16>
    1c4c:	80 81       	ld	r24, Z
    1c4e:	2f eb       	ldi	r18, 0xBF	; 191
    1c50:	28 0f       	add	r18, r24
    1c52:	2a 31       	cpi	r18, 0x1A	; 26
    1c54:	10 f4       	brcc	.+4      	; 0x1c5a <_ZL16currentCharacterv+0x22>
    1c56:	80 5e       	subi	r24, 0xE0	; 224
    1c58:	08 95       	ret
    1c5a:	80 32       	cpi	r24, 0x20	; 32
    1c5c:	49 f4       	brne	.+18     	; 0x1c70 <_ZL16currentCharacterv+0x38>
    1c5e:	9f 01       	movw	r18, r30
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1c68:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1c6c:	ef 2b       	or	r30, r31
    1c6e:	31 f7       	brne	.-52     	; 0x1c3c <_ZL16currentCharacterv+0x4>
    1c70:	08 95       	ret

00001c72 <_ZL9getNumberv>:
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    1c7c:	c0 e0       	ldi	r28, 0x00	; 0
    1c7e:	d0 e0       	ldi	r29, 0x00	; 0
    1c80:	1a e0       	ldi	r17, 0x0A	; 10
    1c82:	90 ed       	ldi	r25, 0xD0	; 208
    1c84:	98 0f       	add	r25, r24
    1c86:	9a 30       	cpi	r25, 0x0A	; 10
    1c88:	b8 f4       	brcc	.+46     	; 0x1cb8 <_ZL9getNumberv+0x46>
    1c8a:	9e 01       	movw	r18, r28
    1c8c:	12 9f       	mul	r17, r18
    1c8e:	e0 01       	movw	r28, r0
    1c90:	13 9f       	mul	r17, r19
    1c92:	d0 0d       	add	r29, r0
    1c94:	11 24       	eor	r1, r1
    1c96:	c8 0f       	add	r28, r24
    1c98:	d1 1d       	adc	r29, r1
    1c9a:	87 fd       	sbrc	r24, 7
    1c9c:	da 95       	dec	r29
    1c9e:	e0 97       	sbiw	r28, 0x30	; 48
    1ca0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    1ca4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
    1cae:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    1cb2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    1cb6:	e5 cf       	rjmp	.-54     	; 0x1c82 <_ZL9getNumberv+0x10>
    1cb8:	ce 01       	movw	r24, r28
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	08 95       	ret

00001cc2 <_ZN15OrangutanBuzzer5init2Ev>:
    1cc2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1cc6:	83 e2       	ldi	r24, 0x23	; 35
    1cc8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ccc:	81 e1       	ldi	r24, 0x11	; 17
    1cce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1cd2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1cd6:	80 e1       	ldi	r24, 0x10	; 16
    1cd8:	97 e2       	ldi	r25, 0x27	; 39
    1cda:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cde:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1ce2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1ce6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1cea:	22 9a       	sbi	0x04, 2	; 4
    1cec:	78 94       	sei
    1cee:	08 95       	ret

00001cf0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	5c 01       	movw	r10, r24
    1d08:	8b 01       	movw	r16, r22
    1d0a:	d4 2e       	mov	r13, r20
    1d0c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <buzzerInitialized>
    1d10:	81 11       	cpse	r24, r1
    1d12:	05 c0       	rjmp	.+10     	; 0x1d1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <buzzerInitialized>
    1d1a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN15OrangutanBuzzer5init2Ev>
    1d1e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1d22:	b7 fe       	sbrs	r11, 7
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1d26:	e8 94       	clt
    1d28:	b7 f8       	bld	r11, 7
    1d2a:	2a e0       	ldi	r18, 0x0A	; 10
    1d2c:	f2 2e       	mov	r15, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1d30:	ff 24       	eor	r15, r15
    1d32:	f3 94       	inc	r15
    1d34:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1d38:	2e 2d       	mov	r18, r14
    1d3a:	28 7f       	andi	r18, 0xF8	; 248
    1d3c:	e2 2e       	mov	r14, r18
    1d3e:	48 ec       	ldi	r20, 0xC8	; 200
    1d40:	f4 9e       	mul	r15, r20
    1d42:	c0 01       	movw	r24, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	8a 15       	cp	r24, r10
    1d48:	9b 05       	cpc	r25, r11
    1d4a:	e0 f4       	brcc	.+56     	; 0x1d84 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1d4c:	e5 01       	movw	r28, r10
    1d4e:	51 e1       	ldi	r21, 0x11	; 17
    1d50:	a5 16       	cp	r10, r21
    1d52:	57 e2       	ldi	r21, 0x27	; 39
    1d54:	b5 06       	cpc	r11, r21
    1d56:	10 f0       	brcs	.+4      	; 0x1d5c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1d58:	c0 e1       	ldi	r28, 0x10	; 16
    1d5a:	d7 e2       	ldi	r29, 0x27	; 39
    1d5c:	be 01       	movw	r22, r28
    1d5e:	76 95       	lsr	r23
    1d60:	67 95       	ror	r22
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	60 58       	subi	r22, 0x80	; 128
    1d68:	79 46       	sbci	r23, 0x69	; 105
    1d6a:	87 46       	sbci	r24, 0x67	; 103
    1d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6e:	4e 01       	movw	r8, r28
    1d70:	a1 2c       	mov	r10, r1
    1d72:	b1 2c       	mov	r11, r1
    1d74:	a5 01       	movw	r20, r10
    1d76:	94 01       	movw	r18, r8
    1d78:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    1d7c:	59 01       	movw	r10, r18
    1d7e:	8e 2d       	mov	r24, r14
    1d80:	81 60       	ori	r24, 0x01	; 1
    1d82:	24 c0       	rjmp	.+72     	; 0x1dcc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1d84:	c8 e2       	ldi	r28, 0x28	; 40
    1d86:	fc 9e       	mul	r15, r28
    1d88:	c0 2d       	mov	r28, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	d0 e0       	ldi	r29, 0x00	; 0
    1d8e:	ca 15       	cp	r28, r10
    1d90:	db 05       	cpc	r29, r11
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1d94:	e5 01       	movw	r28, r10
    1d96:	be 01       	movw	r22, r28
    1d98:	76 95       	lsr	r23
    1d9a:	67 95       	ror	r22
    1d9c:	9e 01       	movw	r18, r28
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	8a e0       	ldi	r24, 0x0A	; 10
    1da4:	f8 12       	cpse	r15, r24
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	60 5e       	subi	r22, 0xE0	; 224
    1dae:	73 44       	sbci	r23, 0x43	; 67
    1db0:	81 44       	sbci	r24, 0x41	; 65
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	60 53       	subi	r22, 0x30	; 48
    1dbc:	7d 4e       	sbci	r23, 0xED	; 237
    1dbe:	8c 4e       	sbci	r24, 0xEC	; 236
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    1dc6:	59 01       	movw	r10, r18
    1dc8:	8e 2d       	mov	r24, r14
    1dca:	82 60       	ori	r24, 0x02	; 2
    1dcc:	88 2e       	mov	r8, r24
    1dce:	2a e0       	ldi	r18, 0x0A	; 10
    1dd0:	f2 12       	cpse	r15, r18
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	05 96       	adiw	r24, 0x05	; 5
    1dd8:	6a e0       	ldi	r22, 0x0A	; 10
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    1de0:	eb 01       	movw	r28, r22
    1de2:	c8 3e       	cpi	r28, 0xE8	; 232
    1de4:	43 e0       	ldi	r20, 0x03	; 3
    1de6:	d4 07       	cpc	r29, r20
    1de8:	59 f0       	breq	.+22     	; 0x1e00 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1dea:	98 01       	movw	r18, r16
    1dec:	de 01       	movw	r26, r28
    1dee:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__umulhisi3>
    1df2:	28 ee       	ldi	r18, 0xE8	; 232
    1df4:	33 e0       	ldi	r19, 0x03	; 3
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__divmodsi4>
    1dfe:	89 01       	movw	r16, r18
    1e00:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e04:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e08:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e0c:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e10:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e14:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e18:	4d 2d       	mov	r20, r13
    1e1a:	40 31       	cpi	r20, 0x10	; 16
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1e1e:	4f e0       	ldi	r20, 0x0F	; 15
    1e20:	80 e1       	ldi	r24, 0x10	; 16
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	84 1b       	sub	r24, r20
    1e26:	91 09       	sbc	r25, r1
    1e28:	a9 01       	movw	r20, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1e2c:	56 95       	lsr	r21
    1e2e:	47 95       	ror	r20
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1e34:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e38:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1e3c:	10 93 84 01 	sts	0x0184, r17	; 0x800184 <_ZL13buzzerTimeout+0x1>
    1e40:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <_ZL13buzzerTimeout>
    1e44:	86 b3       	in	r24, 0x16	; 22
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	86 bb       	out	0x16, r24	; 22
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	df 90       	pop	r13
    1e5e:	bf 90       	pop	r11
    1e60:	af 90       	pop	r10
    1e62:	9f 90       	pop	r9
    1e64:	8f 90       	pop	r8
    1e66:	08 95       	ret

00001e68 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	eb 01       	movw	r28, r22
    1e6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1e72:	41 11       	cpse	r20, r1
    1e74:	05 c0       	rjmp	.+10     	; 0x1e80 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	be 01       	movw	r22, r28
    1e7a:	88 ee       	ldi	r24, 0xE8	; 232
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	43 c0       	rjmp	.+134    	; 0x1f06 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1e80:	81 31       	cpi	r24, 0x11	; 17
    1e82:	30 f0       	brcs	.+12     	; 0x1e90 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1e84:	50 ef       	ldi	r21, 0xF0	; 240
    1e86:	58 0f       	add	r21, r24
    1e88:	50 36       	cpi	r21, 0x60	; 96
    1e8a:	18 f0       	brcs	.+6      	; 0x1e92 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1e8c:	5f e5       	ldi	r21, 0x5F	; 95
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	85 2f       	mov	r24, r21
    1e94:	6c e0       	ldi	r22, 0x0C	; 12
    1e96:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__udivmodqi4>
    1e9a:	68 2f       	mov	r22, r24
    1e9c:	74 ef       	ldi	r23, 0xF4	; 244
    1e9e:	76 03       	mulsu	r23, r22
    1ea0:	90 01       	movw	r18, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	25 0f       	add	r18, r21
    1ea6:	31 1d       	adc	r19, r1
    1ea8:	2c 30       	cpi	r18, 0x0C	; 12
    1eaa:	31 05       	cpc	r19, r1
    1eac:	40 f4       	brcc	.+16     	; 0x1ebe <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1eae:	f9 01       	movw	r30, r18
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	ec 5c       	subi	r30, 0xCC	; 204
    1eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb8:	20 81       	ld	r18, Z
    1eba:	31 81       	ldd	r19, Z+1	; 0x01
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	87 30       	cpi	r24, 0x07	; 7
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1ec6:	08 2e       	mov	r0, r24
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1eca:	22 0f       	add	r18, r18
    1ecc:	33 1f       	adc	r19, r19
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1ed2:	82 30       	cpi	r24, 0x02	; 2
    1ed4:	28 f0       	brcs	.+10     	; 0x1ee0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	05 96       	adiw	r24, 0x05	; 5
    1eda:	6a e0       	ldi	r22, 0x0A	; 10
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	0c c0       	rjmp	.+24     	; 0x1ef8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1ee0:	c9 01       	movw	r24, r18
    1ee2:	90 58       	subi	r25, 0x80	; 128
    1ee4:	0c c0       	rjmp	.+24     	; 0x1efe <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1ee6:	c9 01       	movw	r24, r18
    1ee8:	36 e0       	ldi	r19, 0x06	; 6
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	3a 95       	dec	r19
    1ef0:	e1 f7       	brne	.-8      	; 0x1eea <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1ef2:	02 96       	adiw	r24, 0x02	; 2
    1ef4:	65 e0       	ldi	r22, 0x05	; 5
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    1efc:	cb 01       	movw	r24, r22
    1efe:	40 31       	cpi	r20, 0x10	; 16
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1f02:	4f e0       	ldi	r20, 0x0F	; 15
    1f04:	be 01       	movw	r22, r28
    1f06:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <_ZL8nextNotev>:
    1f10:	a2 e0       	ldi	r26, 0x02	; 2
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ee e8       	ldi	r30, 0x8E	; 142
    1f16:	ff e0       	ldi	r31, 0x0F	; 15
    1f18:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x4>
    1f1c:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1f20:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL8staccato>
    1f24:	88 23       	and	r24, r24
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <_ZL8nextNotev+0x20>
    1f28:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <_ZL22staccato_rest_duration>
    1f2c:	61 11       	cpse	r22, r1
    1f2e:	17 c0       	rjmp	.+46     	; 0x1f5e <_ZL8nextNotev+0x4e>
    1f30:	77 24       	eor	r7, r7
    1f32:	73 94       	inc	r7
    1f34:	b0 ec       	ldi	r27, 0xC0	; 192
    1f36:	ab 2e       	mov	r10, r27
    1f38:	bd e5       	ldi	r27, 0x5D	; 93
    1f3a:	bb 2e       	mov	r11, r27
    1f3c:	1a e0       	ldi	r17, 0x0A	; 10
    1f3e:	61 2e       	mov	r6, r17
    1f40:	04 e0       	ldi	r16, 0x04	; 4
    1f42:	80 2e       	mov	r8, r16
    1f44:	80 ed       	ldi	r24, 0xD0	; 208
    1f46:	c8 2e       	mov	r12, r24
    1f48:	87 e0       	ldi	r24, 0x07	; 7
    1f4a:	d8 2e       	mov	r13, r24
    1f4c:	94 e0       	ldi	r25, 0x04	; 4
    1f4e:	e9 2e       	mov	r14, r25
    1f50:	f1 2c       	mov	r15, r1
    1f52:	04 ef       	ldi	r16, 0xF4	; 244
    1f54:	11 e0       	ldi	r17, 0x01	; 1
    1f56:	2f e0       	ldi	r18, 0x0F	; 15
    1f58:	42 2e       	mov	r4, r18
    1f5a:	51 2c       	mov	r5, r1
    1f5c:	15 c0       	rjmp	.+42     	; 0x1f88 <_ZL8nextNotev+0x78>
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	88 ee       	ldi	r24, 0xE8	; 232
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1f6a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    1f6e:	17 c1       	rjmp	.+558    	; 0x219e <_ZL8nextNotev+0x28e>
    1f70:	86 36       	cpi	r24, 0x66	; 102
    1f72:	d4 f5       	brge	.+116    	; 0x1fe8 <_ZL8nextNotev+0xd8>
    1f74:	81 36       	cpi	r24, 0x61	; 97
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <_ZL8nextNotev+0x6a>
    1f78:	a9 c0       	rjmp	.+338    	; 0x20cc <_ZL8nextNotev+0x1bc>
    1f7a:	7c f5       	brge	.+94     	; 0x1fda <_ZL8nextNotev+0xca>
    1f7c:	8c 33       	cpi	r24, 0x3C	; 60
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <_ZL8nextNotev+0x72>
    1f80:	60 c0       	rjmp	.+192    	; 0x2042 <_ZL8nextNotev+0x132>
    1f82:	8e 33       	cpi	r24, 0x3E	; 62
    1f84:	81 f4       	brne	.+32     	; 0x1fa6 <_ZL8nextNotev+0x96>
    1f86:	93 94       	inc	r9
    1f88:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    1f8c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    1f90:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    1f94:	2f 5f       	subi	r18, 0xFF	; 255
    1f96:	3f 4f       	sbci	r19, 0xFF	; 255
    1f98:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1f9c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1fa0:	85 36       	cpi	r24, 0x65	; 101
    1fa2:	31 f7       	brne	.-52     	; 0x1f70 <_ZL8nextNotev+0x60>
    1fa4:	52 c0       	rjmp	.+164    	; 0x204a <_ZL8nextNotev+0x13a>
    1fa6:	81 32       	cpi	r24, 0x21	; 33
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <_ZL8nextNotev+0x9c>
    1faa:	8b c0       	rjmp	.+278    	; 0x20c2 <_ZL8nextNotev+0x1b2>
    1fac:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1fb0:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1fb4:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1fb8:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1fbc:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1fc0:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1fc4:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1fc8:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1fcc:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1fd0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_ZL8staccato>
    1fd4:	a4 e0       	ldi	r26, 0x04	; 4
    1fd6:	9a 2e       	mov	r9, r26
    1fd8:	d7 cf       	rjmp	.-82     	; 0x1f88 <_ZL8nextNotev+0x78>
    1fda:	83 36       	cpi	r24, 0x63	; 99
    1fdc:	a1 f1       	breq	.+104    	; 0x2046 <_ZL8nextNotev+0x136>
    1fde:	0c f4       	brge	.+2      	; 0x1fe2 <_ZL8nextNotev+0xd2>
    1fe0:	78 c0       	rjmp	.+240    	; 0x20d2 <_ZL8nextNotev+0x1c2>
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	77 c0       	rjmp	.+238    	; 0x20d6 <_ZL8nextNotev+0x1c6>
    1fe8:	8d 36       	cpi	r24, 0x6D	; 109
    1fea:	c1 f1       	breq	.+112    	; 0x205c <_ZL8nextNotev+0x14c>
    1fec:	94 f4       	brge	.+36     	; 0x2012 <_ZL8nextNotev+0x102>
    1fee:	87 36       	cpi	r24, 0x67	; 103
    1ff0:	91 f1       	breq	.+100    	; 0x2056 <_ZL8nextNotev+0x146>
    1ff2:	74 f1       	brlt	.+92     	; 0x2050 <_ZL8nextNotev+0x140>
    1ff4:	8c 36       	cpi	r24, 0x6C	; 108
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <_ZL8nextNotev+0xea>
    1ff8:	64 c0       	rjmp	.+200    	; 0x20c2 <_ZL8nextNotev+0x1b2>
    1ffa:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZL9getNumberv>
    1ffe:	bc 01       	movw	r22, r24
    2000:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    2004:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    2008:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    200c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2010:	51 c0       	rjmp	.+162    	; 0x20b4 <_ZL8nextNotev+0x1a4>
    2012:	82 37       	cpi	r24, 0x72	; 114
    2014:	c9 f1       	breq	.+114    	; 0x2088 <_ZL8nextNotev+0x178>
    2016:	4c f4       	brge	.+18     	; 0x202a <_ZL8nextNotev+0x11a>
    2018:	8f 36       	cpi	r24, 0x6F	; 111
    201a:	09 f0       	breq	.+2      	; 0x201e <_ZL8nextNotev+0x10e>
    201c:	52 c0       	rjmp	.+164    	; 0x20c2 <_ZL8nextNotev+0x1b2>
    201e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZL9getNumberv>
    2022:	98 2e       	mov	r9, r24
    2024:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    2028:	af cf       	rjmp	.-162    	; 0x1f88 <_ZL8nextNotev+0x78>
    202a:	84 37       	cpi	r24, 0x74	; 116
    202c:	81 f1       	breq	.+96     	; 0x208e <_ZL8nextNotev+0x17e>
    202e:	86 37       	cpi	r24, 0x76	; 118
    2030:	09 f0       	breq	.+2      	; 0x2034 <_ZL8nextNotev+0x124>
    2032:	47 c0       	rjmp	.+142    	; 0x20c2 <_ZL8nextNotev+0x1b2>
    2034:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZL9getNumberv>
    2038:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    203c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    2040:	a3 cf       	rjmp	.-186    	; 0x1f88 <_ZL8nextNotev+0x78>
    2042:	9a 94       	dec	r9
    2044:	a1 cf       	rjmp	.-190    	; 0x1f88 <_ZL8nextNotev+0x78>
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	20 c0       	rjmp	.+64     	; 0x208a <_ZL8nextNotev+0x17a>
    204a:	10 e0       	ldi	r17, 0x00	; 0
    204c:	84 e0       	ldi	r24, 0x04	; 4
    204e:	43 c0       	rjmp	.+134    	; 0x20d6 <_ZL8nextNotev+0x1c6>
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	85 e0       	ldi	r24, 0x05	; 5
    2054:	40 c0       	rjmp	.+128    	; 0x20d6 <_ZL8nextNotev+0x1c6>
    2056:	10 e0       	ldi	r17, 0x00	; 0
    2058:	87 e0       	ldi	r24, 0x07	; 7
    205a:	3d c0       	rjmp	.+122    	; 0x20d6 <_ZL8nextNotev+0x1c6>
    205c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    2060:	8c 36       	cpi	r24, 0x6C	; 108
    2062:	19 f4       	brne	.+6      	; 0x206a <_ZL8nextNotev+0x15a>
    2064:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_ZL8staccato>
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <_ZL8nextNotev+0x162>
    206a:	70 92 80 01 	sts	0x0180, r7	; 0x800180 <_ZL8staccato>
    206e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    2072:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    2076:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    207a:	2f 5f       	subi	r18, 0xFF	; 255
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    2082:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    2086:	80 cf       	rjmp	.-256    	; 0x1f88 <_ZL8nextNotev+0x78>
    2088:	11 e0       	ldi	r17, 0x01	; 1
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	24 c0       	rjmp	.+72     	; 0x20d6 <_ZL8nextNotev+0x1c6>
    208e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZL9getNumberv>
    2092:	bc 01       	movw	r22, r24
    2094:	c5 01       	movw	r24, r10
    2096:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    209a:	66 9e       	mul	r6, r22
    209c:	c0 01       	movw	r24, r0
    209e:	67 9e       	mul	r6, r23
    20a0:	90 0d       	add	r25, r0
    20a2:	11 24       	eor	r1, r1
    20a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    20a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    20ac:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    20b0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    20b4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    20b8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    20bc:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    20c0:	63 cf       	rjmp	.-314    	; 0x1f88 <_ZL8nextNotev+0x78>
    20c2:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <__data_end+0x1>
    20c6:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
    20ca:	69 c0       	rjmp	.+210    	; 0x219e <_ZL8nextNotev+0x28e>
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	89 e0       	ldi	r24, 0x09	; 9
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <_ZL8nextNotev+0x1c6>
    20d2:	10 e0       	ldi	r17, 0x00	; 0
    20d4:	8b e0       	ldi	r24, 0x0B	; 11
    20d6:	08 2f       	mov	r16, r24
    20d8:	9c e0       	ldi	r25, 0x0C	; 12
    20da:	99 9e       	mul	r9, r25
    20dc:	00 0d       	add	r16, r0
    20de:	11 24       	eor	r1, r1
    20e0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    20e4:	98 2f       	mov	r25, r24
    20e6:	97 7f       	andi	r25, 0xF7	; 247
    20e8:	93 32       	cpi	r25, 0x23	; 35
    20ea:	61 f4       	brne	.+24     	; 0x2104 <_ZL8nextNotev+0x1f4>
    20ec:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    20f0:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    20f4:	2f 5f       	subi	r18, 0xFF	; 255
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    20fc:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    2100:	0f 5f       	subi	r16, 0xFF	; 255
    2102:	ee cf       	rjmp	.-36     	; 0x20e0 <_ZL8nextNotev+0x1d0>
    2104:	8d 32       	cpi	r24, 0x2D	; 45
    2106:	71 f4       	brne	.+28     	; 0x2124 <_ZL8nextNotev+0x214>
    2108:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    210c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    2110:	2f 5f       	subi	r18, 0xFF	; 255
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    2118:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    211c:	01 50       	subi	r16, 0x01	; 1
    211e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    2122:	f0 cf       	rjmp	.-32     	; 0x2104 <_ZL8nextNotev+0x1f4>
    2124:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    2128:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    212c:	81 53       	subi	r24, 0x31	; 49
    212e:	88 30       	cpi	r24, 0x08	; 8
    2130:	50 f4       	brcc	.+20     	; 0x2146 <_ZL8nextNotev+0x236>
    2132:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2136:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    213a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZL9getNumberv>
    213e:	bc 01       	movw	r22, r24
    2140:	c7 01       	movw	r24, r14
    2142:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    2146:	7b 01       	movw	r14, r22
    2148:	f6 94       	lsr	r15
    214a:	e7 94       	ror	r14
    214c:	69 83       	std	Y+1, r22	; 0x01
    214e:	7a 83       	std	Y+2, r23	; 0x02
    2150:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL16currentCharacterv>
    2154:	69 81       	ldd	r22, Y+1	; 0x01
    2156:	7a 81       	ldd	r23, Y+2	; 0x02
    2158:	8e 32       	cpi	r24, 0x2E	; 46
    215a:	69 f4       	brne	.+26     	; 0x2176 <_ZL8nextNotev+0x266>
    215c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    2160:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    2164:	2f 5f       	subi	r18, 0xFF	; 255
    2166:	3f 4f       	sbci	r19, 0xFF	; 255
    2168:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    216c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    2170:	6e 0d       	add	r22, r14
    2172:	7f 1d       	adc	r23, r15
    2174:	e9 cf       	rjmp	.-46     	; 0x2148 <_ZL8nextNotev+0x238>
    2176:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL8staccato>
    217a:	88 23       	and	r24, r24
    217c:	39 f0       	breq	.+14     	; 0x218c <_ZL8nextNotev+0x27c>
    217e:	9b 01       	movw	r18, r22
    2180:	36 95       	lsr	r19
    2182:	27 95       	ror	r18
    2184:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <_ZL22staccato_rest_duration>
    2188:	62 1b       	sub	r22, r18
    218a:	71 09       	sbc	r23, r1
    218c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    2190:	11 23       	and	r17, r17
    2192:	11 f0       	breq	.+4      	; 0x2198 <_ZL8nextNotev+0x288>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	01 c0       	rjmp	.+2      	; 0x219a <_ZL8nextNotev+0x28a>
    2198:	80 2f       	mov	r24, r16
    219a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN15OrangutanBuzzer8playNoteEhjh>
    219e:	22 96       	adiw	r28, 0x02	; 2
    21a0:	e0 e1       	ldi	r30, 0x10	; 16
    21a2:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x4>

000021a6 <__vector_13>:
    21a6:	1f 92       	push	r1
    21a8:	0f 92       	push	r0
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	0f 92       	push	r0
    21ae:	11 24       	eor	r1, r1
    21b0:	2f 93       	push	r18
    21b2:	3f 93       	push	r19
    21b4:	4f 93       	push	r20
    21b6:	5f 93       	push	r21
    21b8:	6f 93       	push	r22
    21ba:	7f 93       	push	r23
    21bc:	8f 93       	push	r24
    21be:	9f 93       	push	r25
    21c0:	af 93       	push	r26
    21c2:	bf 93       	push	r27
    21c4:	ef 93       	push	r30
    21c6:	ff 93       	push	r31
    21c8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <_ZL13buzzerTimeout>
    21cc:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <_ZL13buzzerTimeout+0x1>
    21d0:	9c 01       	movw	r18, r24
    21d2:	21 50       	subi	r18, 0x01	; 1
    21d4:	31 09       	sbc	r19, r1
    21d6:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <_ZL13buzzerTimeout+0x1>
    21da:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <_ZL13buzzerTimeout>
    21de:	89 2b       	or	r24, r25
    21e0:	11 f5       	brne	.+68     	; 0x2226 <__vector_13+0x80>
    21e2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    21e6:	78 94       	sei
    21e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    21ec:	88 7f       	andi	r24, 0xF8	; 248
    21ee:	81 60       	ori	r24, 0x01	; 1
    21f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    21f4:	80 e1       	ldi	r24, 0x10	; 16
    21f6:	97 e2       	ldi	r25, 0x27	; 39
    21f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    21fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2200:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2204:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    220e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    2212:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
    2216:	89 2b       	or	r24, r25
    2218:	31 f0       	breq	.+12     	; 0x2226 <__vector_13+0x80>
    221a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL17play_mode_setting>
    221e:	81 11       	cpse	r24, r1
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <__vector_13+0x80>
    2222:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZL8nextNotev>
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	7f 91       	pop	r23
    2234:	6f 91       	pop	r22
    2236:	5f 91       	pop	r21
    2238:	4f 91       	pop	r20
    223a:	3f 91       	pop	r19
    223c:	2f 91       	pop	r18
    223e:	0f 90       	pop	r0
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	0f 90       	pop	r0
    2244:	1f 90       	pop	r1
    2246:	18 95       	reti

00002248 <_ZN15OrangutanBuzzer4playEPKc>:
    2248:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    224c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
    2250:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    2254:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL17use_program_space>
    2258:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    225c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZL8nextNotev>
    2260:	08 95       	ret

00002262 <play>:
    2262:	0e 94 24 11 	call	0x2248	; 0x2248 <_ZN15OrangutanBuzzer4playEPKc>
    2266:	08 95       	ret

00002268 <delay_us.constprop.0>:
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	6f 93       	push	r22
    226e:	64 e0       	ldi	r22, 0x04	; 4
    2270:	6a 95       	dec	r22
    2272:	f1 f7       	brne	.-4      	; 0x2270 <delay_us.constprop.0+0x8>
    2274:	6f 91       	pop	r22
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	c9 f7       	brne	.-14     	; 0x226c <delay_us.constprop.0+0x4>
    227a:	08 95       	ret

0000227c <_ZN12OrangutanLCD8busyWaitEv>:
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	1a b1       	in	r17, 0x0a	; 10
    2286:	57 98       	cbi	0x0a, 7	; 10
    2288:	5a 98       	cbi	0x0b, 2	; 11
    228a:	28 9a       	sbi	0x05, 0	; 5
    228c:	c0 e0       	ldi	r28, 0x00	; 0
    228e:	d0 e0       	ldi	r29, 0x00	; 0
    2290:	0e 94 34 11 	call	0x2268	; 0x2268 <delay_us.constprop.0>
    2294:	5c 9a       	sbi	0x0b, 4	; 11
    2296:	0e 94 34 11 	call	0x2268	; 0x2268 <delay_us.constprop.0>
    229a:	09 b1       	in	r16, 0x09	; 9
    229c:	5c 98       	cbi	0x0b, 4	; 11
    229e:	0e 94 34 11 	call	0x2268	; 0x2268 <delay_us.constprop.0>
    22a2:	5c 9a       	sbi	0x0b, 4	; 11
    22a4:	0e 94 34 11 	call	0x2268	; 0x2268 <delay_us.constprop.0>
    22a8:	5c 98       	cbi	0x0b, 4	; 11
    22aa:	24 96       	adiw	r28, 0x04	; 4
    22ac:	07 ff       	sbrs	r16, 7
    22ae:	10 c0       	rjmp	.+32     	; 0x22d0 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    22b0:	ae 01       	movw	r20, r28
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <lcdTimeout>
    22ba:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <lcdTimeout+0x1>
    22be:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <lcdTimeout+0x2>
    22c2:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <lcdTimeout+0x3>
    22c6:	48 17       	cp	r20, r24
    22c8:	59 07       	cpc	r21, r25
    22ca:	6a 07       	cpc	r22, r26
    22cc:	7b 07       	cpc	r23, r27
    22ce:	00 f3       	brcs	.-64     	; 0x2290 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    22d0:	1a b9       	out	0x0a, r17	; 10
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <_ZN12OrangutanLCD8sendDataEh>:
    22dc:	95 b1       	in	r25, 0x05	; 5
    22de:	28 2f       	mov	r18, r24
    22e0:	21 70       	andi	r18, 0x01	; 1
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	48 2f       	mov	r20, r24
    22ea:	46 70       	andi	r20, 0x06	; 6
    22ec:	68 e0       	ldi	r22, 0x08	; 8
    22ee:	46 9f       	mul	r20, r22
    22f0:	a0 01       	movw	r20, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	24 2b       	or	r18, r20
    22f6:	9d 7c       	andi	r25, 0xCD	; 205
    22f8:	29 2b       	or	r18, r25
    22fa:	25 b9       	out	0x05, r18	; 5
    22fc:	9b b1       	in	r25, 0x0b	; 11
    22fe:	88 70       	andi	r24, 0x08	; 8
    2300:	82 95       	swap	r24
    2302:	80 7f       	andi	r24, 0xF0	; 240
    2304:	9f 77       	andi	r25, 0x7F	; 127
    2306:	89 2b       	or	r24, r25
    2308:	8b b9       	out	0x0b, r24	; 11
    230a:	5c 9a       	sbi	0x0b, 4	; 11
    230c:	0e 94 34 11 	call	0x2268	; 0x2268 <delay_us.constprop.0>
    2310:	5c 98       	cbi	0x0b, 4	; 11
    2312:	0e 94 34 11 	call	0x2268	; 0x2268 <delay_us.constprop.0>
    2316:	08 95       	ret

00002318 <_ZN12OrangutanLCD4sendEhhh>:
    2318:	a0 e0       	ldi	r26, 0x00	; 0
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e2 e9       	ldi	r30, 0x92	; 146
    231e:	f1 e1       	ldi	r31, 0x11	; 17
    2320:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__prologue_saves__+0x16>
    2324:	c8 2f       	mov	r28, r24
    2326:	d6 2e       	mov	r13, r22
    2328:	e4 2e       	mov	r14, r20
    232a:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZZN12OrangutanLCD4initEvE11initialized>
    232e:	81 11       	cpse	r24, r1
    2330:	05 c0       	rjmp	.+10     	; 0x233c <_ZN12OrangutanLCD4sendEhhh+0x24>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <_ZZN12OrangutanLCD4initEvE11initialized>
    2338:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN12OrangutanLCD5init2Ev>
    233c:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN12OrangutanLCD8busyWaitEv>
    2340:	14 b1       	in	r17, 0x04	; 4
    2342:	d5 b1       	in	r29, 0x05	; 5
    2344:	fa b0       	in	r15, 0x0a	; 10
    2346:	0b b1       	in	r16, 0x0b	; 11
    2348:	28 98       	cbi	0x05, 0	; 5
    234a:	dd 20       	and	r13, r13
    234c:	11 f0       	breq	.+4      	; 0x2352 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    234e:	5a 9a       	sbi	0x0b, 2	; 11
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2352:	5a 98       	cbi	0x0b, 2	; 11
    2354:	94 b1       	in	r25, 0x04	; 4
    2356:	92 63       	ori	r25, 0x32	; 50
    2358:	94 b9       	out	0x04, r25	; 4
    235a:	57 9a       	sbi	0x0a, 7	; 10
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	e8 16       	cp	r14, r24
    2360:	29 f0       	breq	.+10     	; 0x236c <_ZN12OrangutanLCD4sendEhhh+0x54>
    2362:	8c 2f       	mov	r24, r28
    2364:	82 95       	swap	r24
    2366:	8f 70       	andi	r24, 0x0F	; 15
    2368:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN12OrangutanLCD8sendDataEh>
    236c:	8c 2f       	mov	r24, r28
    236e:	8f 70       	andi	r24, 0x0F	; 15
    2370:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN12OrangutanLCD8sendDataEh>
    2374:	fa b8       	out	0x0a, r15	; 10
    2376:	0b b9       	out	0x0b, r16	; 11
    2378:	14 b9       	out	0x04, r17	; 4
    237a:	d5 b9       	out	0x05, r29	; 5
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	e7 e0       	ldi	r30, 0x07	; 7
    2382:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__epilogue_restores__+0x16>

00002386 <_ZN12OrangutanLCD8send_cmdEh>:
    2386:	42 e0       	ldi	r20, 0x02	; 2
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	0e 94 8c 11 	call	0x2318	; 0x2318 <_ZN12OrangutanLCD4sendEhhh>
    238e:	08 95       	ret

00002390 <_ZN12OrangutanLCD9send_dataEh>:
    2390:	42 e0       	ldi	r20, 0x02	; 2
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	0e 94 8c 11 	call	0x2318	; 0x2318 <_ZN12OrangutanLCD4sendEhhh>
    2398:	08 95       	ret

0000239a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 8c 11 	call	0x2318	; 0x2318 <_ZN12OrangutanLCD4sendEhhh>
    23a2:	08 95       	ret

000023a4 <_ZN12OrangutanLCD5init2Ev>:
    23a4:	80 e1       	ldi	r24, 0x10	; 16
    23a6:	97 e2       	ldi	r25, 0x27	; 39
    23a8:	a0 e0       	ldi	r26, 0x00	; 0
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <lcdTimeout>
    23b0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <lcdTimeout+0x1>
    23b4:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <lcdTimeout+0x2>
    23b8:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <lcdTimeout+0x3>
    23bc:	52 9a       	sbi	0x0a, 2	; 10
    23be:	20 9a       	sbi	0x04, 0	; 4
    23c0:	54 9a       	sbi	0x0a, 4	; 10
    23c2:	8e e1       	ldi	r24, 0x1E	; 30
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
    23ca:	83 e0       	ldi	r24, 0x03	; 3
    23cc:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23d0:	86 e0       	ldi	r24, 0x06	; 6
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
    23d8:	83 e0       	ldi	r24, 0x03	; 3
    23da:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
    2402:	88 e2       	ldi	r24, 0x28	; 40
    2404:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    2408:	88 e0       	ldi	r24, 0x08	; 8
    240a:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    2414:	86 e0       	ldi	r24, 0x06	; 6
    2416:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    241a:	8c e0       	ldi	r24, 0x0C	; 12
    241c:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    2420:	08 95       	ret

00002422 <_ZN12OrangutanLCD5clearEv>:
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    2428:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <printf_chars>
    242c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <printf_chars+0x1>
    2430:	89 2b       	or	r24, r25
    2432:	f9 f0       	breq	.+62     	; 0x2472 <_ZN12OrangutanLCD5clearEv+0x50>
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	a0 e2       	ldi	r26, 0x20	; 32
    2438:	26 2f       	mov	r18, r22
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2440:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	78 9f       	mul	r23, r24
    244a:	a0 01       	movw	r20, r0
    244c:	79 9f       	mul	r23, r25
    244e:	50 0d       	add	r21, r0
    2450:	11 24       	eor	r1, r1
    2452:	24 17       	cp	r18, r20
    2454:	35 07       	cpc	r19, r21
    2456:	4c f4       	brge	.+18     	; 0x246a <_ZN12OrangutanLCD5clearEv+0x48>
    2458:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <printf_chars>
    245c:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <printf_chars+0x1>
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	a0 83       	st	Z, r26
    2466:	6f 5f       	subi	r22, 0xFF	; 255
    2468:	e7 cf       	rjmp	.-50     	; 0x2438 <_ZN12OrangutanLCD5clearEv+0x16>
    246a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <col>
    246e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <row>
    2472:	08 95       	ret

00002474 <clear>:
    2474:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN12OrangutanLCD5clearEv>
    2478:	08 95       	ret

0000247a <_ZN12OrangutanLCD5printEPKc>:
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	ec 01       	movw	r28, r24
    2480:	89 91       	ld	r24, Y+
    2482:	88 23       	and	r24, r24
    2484:	19 f0       	breq	.+6      	; 0x248c <_ZN12OrangutanLCD5printEPKc+0x12>
    2486:	0e 94 c8 11 	call	0x2390	; 0x2390 <_ZN12OrangutanLCD9send_dataEh>
    248a:	fa cf       	rjmp	.-12     	; 0x2480 <_ZN12OrangutanLCD5printEPKc+0x6>
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <print>:
    2492:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN12OrangutanLCD5printEPKc>
    2496:	08 95       	ret

00002498 <_ZN12OrangutanLCD5printEm>:
    2498:	aa e0       	ldi	r26, 0x0A	; 10
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e2 e5       	ldi	r30, 0x52	; 82
    249e:	f2 e1       	ldi	r31, 0x12	; 18
    24a0:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__prologue_saves__+0x14>
    24a4:	1a e0       	ldi	r17, 0x0A	; 10
    24a6:	5a e0       	ldi	r21, 0x0A	; 10
    24a8:	c5 2e       	mov	r12, r21
    24aa:	d1 2c       	mov	r13, r1
    24ac:	e1 2c       	mov	r14, r1
    24ae:	f1 2c       	mov	r15, r1
    24b0:	06 2f       	mov	r16, r22
    24b2:	a7 01       	movw	r20, r14
    24b4:	96 01       	movw	r18, r12
    24b6:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    24ba:	ca 01       	movw	r24, r20
    24bc:	b9 01       	movw	r22, r18
    24be:	11 50       	subi	r17, 0x01	; 1
    24c0:	e1 e0       	ldi	r30, 0x01	; 1
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	ec 0f       	add	r30, r28
    24c6:	fd 1f       	adc	r31, r29
    24c8:	e1 0f       	add	r30, r17
    24ca:	f1 1d       	adc	r31, r1
    24cc:	00 5d       	subi	r16, 0xD0	; 208
    24ce:	2a e0       	ldi	r18, 0x0A	; 10
    24d0:	62 9f       	mul	r22, r18
    24d2:	00 19       	sub	r16, r0
    24d4:	11 24       	eor	r1, r1
    24d6:	00 83       	st	Z, r16
    24d8:	61 15       	cp	r22, r1
    24da:	71 05       	cpc	r23, r1
    24dc:	81 05       	cpc	r24, r1
    24de:	91 05       	cpc	r25, r1
    24e0:	39 f7       	brne	.-50     	; 0x24b0 <_ZN12OrangutanLCD5printEm+0x18>
    24e2:	1a 30       	cpi	r17, 0x0A	; 10
    24e4:	58 f4       	brcc	.+22     	; 0x24fc <_ZN12OrangutanLCD5printEm+0x64>
    24e6:	e1 e0       	ldi	r30, 0x01	; 1
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	ec 0f       	add	r30, r28
    24ec:	fd 1f       	adc	r31, r29
    24ee:	e1 0f       	add	r30, r17
    24f0:	f1 1d       	adc	r31, r1
    24f2:	80 81       	ld	r24, Z
    24f4:	0e 94 c8 11 	call	0x2390	; 0x2390 <_ZN12OrangutanLCD9send_dataEh>
    24f8:	1f 5f       	subi	r17, 0xFF	; 255
    24fa:	f3 cf       	rjmp	.-26     	; 0x24e2 <_ZN12OrangutanLCD5printEm+0x4a>
    24fc:	2a 96       	adiw	r28, 0x0a	; 10
    24fe:	e8 e0       	ldi	r30, 0x08	; 8
    2500:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__epilogue_restores__+0x14>

00002504 <_ZN12OrangutanLCD5printEl>:
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	6b 01       	movw	r12, r22
    250e:	7c 01       	movw	r14, r24
    2510:	97 ff       	sbrs	r25, 7
    2512:	0b c0       	rjmp	.+22     	; 0x252a <_ZN12OrangutanLCD5printEl+0x26>
    2514:	f0 94       	com	r15
    2516:	e0 94       	com	r14
    2518:	d0 94       	com	r13
    251a:	c0 94       	com	r12
    251c:	c1 1c       	adc	r12, r1
    251e:	d1 1c       	adc	r13, r1
    2520:	e1 1c       	adc	r14, r1
    2522:	f1 1c       	adc	r15, r1
    2524:	8d e2       	ldi	r24, 0x2D	; 45
    2526:	0e 94 c8 11 	call	0x2390	; 0x2390 <_ZN12OrangutanLCD9send_dataEh>
    252a:	c7 01       	movw	r24, r14
    252c:	b6 01       	movw	r22, r12
    252e:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN12OrangutanLCD5printEm>
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	08 95       	ret

0000253c <print_long>:
    253c:	0e 94 82 12 	call	0x2504	; 0x2504 <_ZN12OrangutanLCD5printEl>
    2540:	08 95       	ret

00002542 <_ZN12OrangutanLCD6gotoXYEhh>:
    2542:	a5 e0       	ldi	r26, 0x05	; 5
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 ea       	ldi	r30, 0xA7	; 167
    2548:	f2 e1       	ldi	r31, 0x12	; 18
    254a:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__prologue_saves__+0x1e>
    254e:	18 2f       	mov	r17, r24
    2550:	80 e8       	ldi	r24, 0x80	; 128
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	80 ec       	ldi	r24, 0xC0	; 192
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	84 e9       	ldi	r24, 0x94	; 148
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	84 ed       	ldi	r24, 0xD4	; 212
    255e:	8c 83       	std	Y+4, r24	; 0x04
    2560:	fe 01       	movw	r30, r28
    2562:	e6 0f       	add	r30, r22
    2564:	f1 1d       	adc	r31, r1
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	81 0f       	add	r24, r17
    256a:	6d 83       	std	Y+5, r22	; 0x05
    256c:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD8send_cmdEh>
    2570:	10 93 89 01 	sts	0x0189, r17	; 0x800189 <col>
    2574:	6d 81       	ldd	r22, Y+5	; 0x05
    2576:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <row>
    257a:	25 96       	adiw	r28, 0x05	; 5
    257c:	e3 e0       	ldi	r30, 0x03	; 3
    257e:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__epilogue_restores__+0x1e>

00002582 <lcd_goto_xy>:
    2582:	0e 94 a1 12 	call	0x2542	; 0x2542 <_ZN12OrangutanLCD6gotoXYEhh>
    2586:	08 95       	ret

00002588 <_ZN16OrangutanDigital9setOutputEhh>:
    2588:	88 30       	cpi	r24, 0x08	; 8
    258a:	58 f4       	brcc	.+22     	; 0x25a2 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2590:	99 0f       	add	r25, r25
    2592:	8a 95       	dec	r24
    2594:	ea f7       	brpl	.-6      	; 0x2590 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2596:	89 2f       	mov	r24, r25
    2598:	aa e2       	ldi	r26, 0x2A	; 42
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e2       	ldi	r30, 0x2B	; 43
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	21 c0       	rjmp	.+66     	; 0x25e4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25a2:	8e 30       	cpi	r24, 0x0E	; 14
    25a4:	60 f4       	brcc	.+24     	; 0x25be <_ZN16OrangutanDigital9setOutputEhh+0x36>
    25a6:	98 ef       	ldi	r25, 0xF8	; 248
    25a8:	98 0f       	add	r25, r24
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    25ae:	88 0f       	add	r24, r24
    25b0:	9a 95       	dec	r25
    25b2:	ea f7       	brpl	.-6      	; 0x25ae <_ZN16OrangutanDigital9setOutputEhh+0x26>
    25b4:	a4 e2       	ldi	r26, 0x24	; 36
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e5 e2       	ldi	r30, 0x25	; 37
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	13 c0       	rjmp	.+38     	; 0x25e4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25be:	85 31       	cpi	r24, 0x15	; 21
    25c0:	60 f4       	brcc	.+24     	; 0x25da <_ZN16OrangutanDigital9setOutputEhh+0x52>
    25c2:	92 ef       	ldi	r25, 0xF2	; 242
    25c4:	98 0f       	add	r25, r24
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <_ZN16OrangutanDigital9setOutputEhh+0x44>
    25ca:	88 0f       	add	r24, r24
    25cc:	9a 95       	dec	r25
    25ce:	ea f7       	brpl	.-6      	; 0x25ca <_ZN16OrangutanDigital9setOutputEhh+0x42>
    25d0:	a7 e2       	ldi	r26, 0x27	; 39
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e8 e2       	ldi	r30, 0x28	; 40
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	05 c0       	rjmp	.+10     	; 0x25e4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e0 e0       	ldi	r30, 0x00	; 0
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	6f 3f       	cpi	r22, 0xFF	; 255
    25e6:	19 f4       	brne	.+6      	; 0x25ee <_ZN16OrangutanDigital9setOutputEhh+0x66>
    25e8:	90 81       	ld	r25, Z
    25ea:	98 27       	eor	r25, r24
    25ec:	09 c0       	rjmp	.+18     	; 0x2600 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    25ee:	66 23       	and	r22, r22
    25f0:	19 f0       	breq	.+6      	; 0x25f8 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    25f2:	90 81       	ld	r25, Z
    25f4:	98 2b       	or	r25, r24
    25f6:	04 c0       	rjmp	.+8      	; 0x2600 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    25f8:	20 81       	ld	r18, Z
    25fa:	98 2f       	mov	r25, r24
    25fc:	90 95       	com	r25
    25fe:	92 23       	and	r25, r18
    2600:	90 83       	st	Z, r25
    2602:	9c 91       	ld	r25, X
    2604:	98 2b       	or	r25, r24
    2606:	9c 93       	st	X, r25
    2608:	08 95       	ret

0000260a <_ZN15OrangutanMotors5init2Ev>:
    260a:	83 ef       	ldi	r24, 0xF3	; 243
    260c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2610:	84 bd       	out	0x24, r24	; 36
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2618:	85 bd       	out	0x25, r24	; 37
    261a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    261e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2622:	18 bc       	out	0x28, r1	; 40
    2624:	17 bc       	out	0x27, r1	; 39
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	86 e0       	ldi	r24, 0x06	; 6
    262a:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN16OrangutanDigital9setOutputEhh>
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	85 e0       	ldi	r24, 0x05	; 5
    2632:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN16OrangutanDigital9setOutputEhh>
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	8b e0       	ldi	r24, 0x0B	; 11
    263a:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN16OrangutanDigital9setOutputEhh>
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	83 e0       	ldi	r24, 0x03	; 3
    2642:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN16OrangutanDigital9setOutputEhh>
    2646:	08 95       	ret

00002648 <_ZN15OrangutanMotors4initEv>:
    2648:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZZN15OrangutanMotors4initEvE11initialized>
    264c:	81 11       	cpse	r24, r1
    264e:	05 c0       	rjmp	.+10     	; 0x265a <_ZN15OrangutanMotors4initEv+0x12>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <_ZZN15OrangutanMotors4initEvE11initialized>
    2656:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN15OrangutanMotors5init2Ev>
    265a:	08 95       	ret

0000265c <_ZN15OrangutanMotors10setM1SpeedEi>:
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	ec 01       	movw	r28, r24
    2662:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN15OrangutanMotors4initEv>
    2666:	d7 ff       	sbrs	r29, 7
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    266a:	d1 95       	neg	r29
    266c:	c1 95       	neg	r28
    266e:	d1 09       	sbc	r29, r1
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	01 c0       	rjmp	.+2      	; 0x2676 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	cf 3f       	cpi	r28, 0xFF	; 255
    2678:	d1 05       	cpc	r29, r1
    267a:	19 f0       	breq	.+6      	; 0x2682 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    267c:	14 f0       	brlt	.+4      	; 0x2682 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    267e:	cf ef       	ldi	r28, 0xFF	; 255
    2680:	d0 e0       	ldi	r29, 0x00	; 0
    2682:	88 23       	and	r24, r24
    2684:	19 f0       	breq	.+6      	; 0x268c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2686:	18 bc       	out	0x28, r1	; 40
    2688:	c7 bd       	out	0x27, r28	; 39
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    268c:	c8 bd       	out	0x28, r28	; 40
    268e:	17 bc       	out	0x27, r1	; 39
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	08 95       	ret

00002696 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	ec 01       	movw	r28, r24
    269c:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN15OrangutanMotors4initEv>
    26a0:	d7 ff       	sbrs	r29, 7
    26a2:	05 c0       	rjmp	.+10     	; 0x26ae <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    26a4:	d1 95       	neg	r29
    26a6:	c1 95       	neg	r28
    26a8:	d1 09       	sbc	r29, r1
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	cf 3f       	cpi	r28, 0xFF	; 255
    26b2:	d1 05       	cpc	r29, r1
    26b4:	19 f0       	breq	.+6      	; 0x26bc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    26b6:	14 f0       	brlt	.+4      	; 0x26bc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    26b8:	cf ef       	ldi	r28, 0xFF	; 255
    26ba:	d0 e0       	ldi	r29, 0x00	; 0
    26bc:	88 23       	and	r24, r24
    26be:	29 f0       	breq	.+10     	; 0x26ca <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    26c0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    26c4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    26ca:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    26ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <_ZN15OrangutanMotors9setSpeedsEii>:
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	eb 01       	movw	r28, r22
    26de:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN15OrangutanMotors10setM1SpeedEi>
    26e2:	ce 01       	movw	r24, r28
    26e4:	0e 94 4b 13 	call	0x2696	; 0x2696 <_ZN15OrangutanMotors10setM2SpeedEi>
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <set_motors>:
    26ee:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN15OrangutanMotors9setSpeedsEii>
    26f2:	08 95       	ret

000026f4 <_ZN20OrangutanPushbuttons5init2Ev>:
    26f4:	84 b1       	in	r24, 0x04	; 4
    26f6:	8d 7c       	andi	r24, 0xCD	; 205
    26f8:	84 b9       	out	0x04, r24	; 4
    26fa:	85 b1       	in	r24, 0x05	; 5
    26fc:	82 63       	ori	r24, 0x32	; 50
    26fe:	85 b9       	out	0x05, r24	; 5
    2700:	85 e0       	ldi	r24, 0x05	; 5
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	6f 93       	push	r22
    2706:	64 e0       	ldi	r22, 0x04	; 4
    2708:	6a 95       	dec	r22
    270a:	f1 f7       	brne	.-4      	; 0x2708 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    270c:	6f 91       	pop	r22
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	c9 f7       	brne	.-14     	; 0x2704 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2712:	08 95       	ret

00002714 <_ZN20OrangutanPushbuttons4initEv>:
    2714:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2718:	81 11       	cpse	r24, r1
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <_ZN20OrangutanPushbuttons4initEv+0x12>
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2722:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN20OrangutanPushbuttons5init2Ev>
    2726:	08 95       	ret

00002728 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2728:	cf 93       	push	r28
    272a:	c8 2f       	mov	r28, r24
    272c:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN20OrangutanPushbuttons4initEv>
    2730:	83 b1       	in	r24, 0x03	; 3
    2732:	8c 23       	and	r24, r28
    2734:	e9 f3       	breq	.-6      	; 0x2730 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2736:	8a e0       	ldi	r24, 0x0A	; 10
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 05 14 	call	0x280a	; 0x280a <delay_ms>
    273e:	83 b1       	in	r24, 0x03	; 3
    2740:	8c 23       	and	r24, r28
    2742:	b1 f3       	breq	.-20     	; 0x2730 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2744:	83 b1       	in	r24, 0x03	; 3
    2746:	8c 23       	and	r24, r28
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <wait_for_button_release>:
    274c:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2750:	08 95       	ret

00002752 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2752:	a1 e0       	ldi	r26, 0x01	; 1
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef ea       	ldi	r30, 0xAF	; 175
    2758:	f3 e1       	ldi	r31, 0x13	; 19
    275a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x20>
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN20OrangutanPushbuttons4initEv>
    2764:	93 b1       	in	r25, 0x03	; 3
    2766:	90 95       	com	r25
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	89 23       	and	r24, r25
    276c:	21 96       	adiw	r28, 0x01	; 1
    276e:	e2 e0       	ldi	r30, 0x02	; 2
    2770:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x20>

00002774 <button_is_pressed>:
    2774:	0e 94 a9 13 	call	0x2752	; 0x2752 <_ZN20OrangutanPushbuttons9isPressedEh>
    2778:	08 95       	ret

0000277a <__vector_9>:
    277a:	2f 92       	push	r2
    277c:	8f 93       	push	r24
    277e:	9f 93       	push	r25
    2780:	2f b6       	in	r2, 0x3f	; 63
    2782:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tickCount+0x1>
    2786:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tickCount+0x2>
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <tickCount+0x1>
    2790:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <tickCount+0x2>
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tickCount+0x3>
    279a:	89 1f       	adc	r24, r25
    279c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <tickCount+0x3>
    27a0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <us_over_10+0x1>
    27a4:	9c 5f       	subi	r25, 0xFC	; 252
    27a6:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <us_over_10+0x1>
    27aa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <us_over_10>
    27ae:	80 51       	subi	r24, 0x10	; 16
    27b0:	97 42       	sbci	r25, 0x27	; 39
    27b2:	c0 f0       	brcs	.+48     	; 0x27e4 <end>
    27b4:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <us_over_10+0x1>
    27b8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <us_over_10>
    27bc:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <msCounter>
    27c0:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <msCounter+0x1>
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <msCounter>
    27ca:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <msCounter+0x1>
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <msCounter+0x2>
    27d4:	89 1f       	adc	r24, r25
    27d6:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <msCounter+0x2>
    27da:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <msCounter+0x3>
    27de:	89 1f       	adc	r24, r25
    27e0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <msCounter+0x3>

000027e4 <end>:
    27e4:	2f be       	out	0x3f, r2	; 63
    27e6:	9f 91       	pop	r25
    27e8:	8f 91       	pop	r24
    27ea:	2f 90       	pop	r2
    27ec:	18 95       	reti

000027ee <_ZN13OrangutanTime17delayMillisecondsEj>:
    27ee:	28 ee       	ldi	r18, 0xE8	; 232
    27f0:	33 e0       	ldi	r19, 0x03	; 3
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	48 f0       	brcs	.+18     	; 0x2808 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    27f6:	f9 01       	movw	r30, r18
    27f8:	6f 93       	push	r22
    27fa:	64 e0       	ldi	r22, 0x04	; 4
    27fc:	6a 95       	dec	r22
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2800:	6f 91       	pop	r22
    2802:	31 97       	sbiw	r30, 0x01	; 1
    2804:	c9 f7       	brne	.-14     	; 0x27f8 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2806:	f5 cf       	rjmp	.-22     	; 0x27f2 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2808:	08 95       	ret

0000280a <delay_ms>:
    280a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN13OrangutanTime17delayMillisecondsEj>
    280e:	08 95       	ret

00002810 <_ZN13OrangutanTime5init2Ev>:
    2810:	e0 e7       	ldi	r30, 0x70	; 112
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	8e 7f       	andi	r24, 0xFE	; 254
    2818:	80 83       	st	Z, r24
    281a:	a0 eb       	ldi	r26, 0xB0	; 176
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	8c 91       	ld	r24, X
    2820:	83 60       	ori	r24, 0x03	; 3
    2822:	8c 93       	st	X, r24
    2824:	a1 eb       	ldi	r26, 0xB1	; 177
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	8c 91       	ld	r24, X
    282a:	80 7f       	andi	r24, 0xF0	; 240
    282c:	8c 93       	st	X, r24
    282e:	8c 91       	ld	r24, X
    2830:	82 60       	ori	r24, 0x02	; 2
    2832:	8c 93       	st	X, r24
    2834:	b8 9a       	sbi	0x17, 0	; 23
    2836:	80 81       	ld	r24, Z
    2838:	81 60       	ori	r24, 0x01	; 1
    283a:	80 83       	st	Z, r24
    283c:	78 94       	sei
    283e:	08 95       	ret

00002840 <_ZN13OrangutanTime4initEv>:
    2840:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <_ZZN13OrangutanTime4initEvE11initialized>
    2844:	81 11       	cpse	r24, r1
    2846:	05 c0       	rjmp	.+10     	; 0x2852 <_ZN13OrangutanTime4initEv+0x12>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <_ZZN13OrangutanTime4initEvE11initialized>
    284e:	0e 94 08 14 	call	0x2810	; 0x2810 <_ZN13OrangutanTime5init2Ev>
    2852:	08 95       	ret

00002854 <_ZN13OrangutanTime5resetEv>:
    2854:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN13OrangutanTime4initEv>
    2858:	e0 e7       	ldi	r30, 0x70	; 112
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	8e 7f       	andi	r24, 0xFE	; 254
    2860:	80 83       	st	Z, r24
    2862:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <msCounter>
    2866:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <msCounter+0x1>
    286a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <msCounter+0x2>
    286e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <msCounter+0x3>
    2872:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <us_over_10+0x1>
    2876:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <us_over_10>
    287a:	80 81       	ld	r24, Z
    287c:	81 60       	ori	r24, 0x01	; 1
    287e:	80 83       	st	Z, r24
    2880:	08 95       	ret

00002882 <read_line_sensors>:
    2882:	46 2f       	mov	r20, r22
    2884:	bc 01       	movw	r22, r24
    2886:	87 e9       	ldi	r24, 0x97	; 151
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_ZN16PololuQTRSensors4readEPjh>
    288e:	08 95       	ret

00002890 <_ZN9Pololu3pi4initEjh>:
    2890:	0f 93       	push	r16
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	00 d0       	rcall	.+0      	; 0x2898 <_ZN9Pololu3pi4initEjh+0x8>
    2898:	00 d0       	rcall	.+0      	; 0x289a <_ZN9Pololu3pi4initEjh+0xa>
    289a:	1f 92       	push	r1
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9c 01       	movw	r18, r24
    28a2:	85 e0       	ldi	r24, 0x05	; 5
    28a4:	ec e4       	ldi	r30, 0x4C	; 76
    28a6:	f1 e0       	ldi	r31, 0x01	; 1
    28a8:	de 01       	movw	r26, r28
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	01 90       	ld	r0, Z+
    28ae:	0d 92       	st	X+, r0
    28b0:	8a 95       	dec	r24
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <_ZN9Pololu3pi4initEjh+0x1c>
    28b4:	66 23       	and	r22, r22
    28b6:	11 f0       	breq	.+4      	; 0x28bc <_ZN9Pololu3pi4initEjh+0x2c>
    28b8:	0f ef       	ldi	r16, 0xFF	; 255
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <_ZN9Pololu3pi4initEjh+0x2e>
    28bc:	03 e1       	ldi	r16, 0x13	; 19
    28be:	45 e0       	ldi	r20, 0x05	; 5
    28c0:	be 01       	movw	r22, r28
    28c2:	6f 5f       	subi	r22, 0xFF	; 255
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255
    28c6:	87 e9       	ldi	r24, 0x97	; 151
    28c8:	91 e0       	ldi	r25, 0x01	; 1
    28ca:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    28ce:	87 e9       	ldi	r24, 0x97	; 151
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_ZN16PololuQTRSensors11emittersOffEv>
    28d6:	0e 94 2a 14 	call	0x2854	; 0x2854 <_ZN13OrangutanTime5resetEv>
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	0f 91       	pop	r16
    28ea:	08 95       	ret

000028ec <pololu_3pi_init>:
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN9Pololu3pi4initEjh>
    28f2:	08 95       	ret

000028f4 <_GLOBAL__sub_D_pololu_3pi_init>:
    28f4:	87 e9       	ldi	r24, 0x97	; 151
    28f6:	91 e0       	ldi	r25, 0x01	; 1
    28f8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <_ZN16PololuQTRSensorsD1Ev>
    28fc:	08 95       	ret

000028fe <delay_us>:
    28fe:	6f 93       	push	r22
    2900:	64 e0       	ldi	r22, 0x04	; 4
    2902:	6a 95       	dec	r22
    2904:	f1 f7       	brne	.-4      	; 0x2902 <delay_us+0x4>
    2906:	6f 91       	pop	r22
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	c9 f7       	brne	.-14     	; 0x28fe <delay_us>
    290c:	08 95       	ret

0000290e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    290e:	fc 01       	movw	r30, r24
    2910:	11 82       	std	Z+1, r1	; 0x01
    2912:	10 82       	st	Z, r1
    2914:	13 82       	std	Z+3, r1	; 0x03
    2916:	12 82       	std	Z+2, r1	; 0x02
    2918:	15 82       	std	Z+5, r1	; 0x05
    291a:	14 82       	std	Z+4, r1	; 0x04
    291c:	16 82       	std	Z+6, r1	; 0x06
    291e:	68 30       	cpi	r22, 0x08	; 8
    2920:	68 f4       	brcc	.+26     	; 0x293c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2922:	89 e2       	ldi	r24, 0x29	; 41
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	8b e2       	ldi	r24, 0x2B	; 43
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	93 83       	std	Z+3, r25	; 0x03
    2930:	82 83       	std	Z+2, r24	; 0x02
    2932:	8a e2       	ldi	r24, 0x2A	; 42
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	95 83       	std	Z+5, r25	; 0x05
    2938:	84 83       	std	Z+4, r24	; 0x04
    293a:	1f c0       	rjmp	.+62     	; 0x297a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    293c:	6e 30       	cpi	r22, 0x0E	; 14
    293e:	70 f4       	brcc	.+28     	; 0x295c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2940:	83 e2       	ldi	r24, 0x23	; 35
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	85 e2       	ldi	r24, 0x25	; 37
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	93 83       	std	Z+3, r25	; 0x03
    294e:	82 83       	std	Z+2, r24	; 0x02
    2950:	84 e2       	ldi	r24, 0x24	; 36
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	95 83       	std	Z+5, r25	; 0x05
    2956:	84 83       	std	Z+4, r24	; 0x04
    2958:	68 50       	subi	r22, 0x08	; 8
    295a:	0f c0       	rjmp	.+30     	; 0x297a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    295c:	65 31       	cpi	r22, 0x15	; 21
    295e:	98 f4       	brcc	.+38     	; 0x2986 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2960:	86 e2       	ldi	r24, 0x26	; 38
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	80 83       	st	Z, r24
    2968:	88 e2       	ldi	r24, 0x28	; 40
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	93 83       	std	Z+3, r25	; 0x03
    296e:	82 83       	std	Z+2, r24	; 0x02
    2970:	87 e2       	ldi	r24, 0x27	; 39
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	95 83       	std	Z+5, r25	; 0x05
    2976:	84 83       	std	Z+4, r24	; 0x04
    2978:	6e 50       	subi	r22, 0x0E	; 14
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    297e:	88 0f       	add	r24, r24
    2980:	6a 95       	dec	r22
    2982:	ea f7       	brpl	.-6      	; 0x297e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2984:	86 83       	std	Z+6, r24	; 0x06
    2986:	08 95       	ret

00002988 <_ZN16PololuQTRSensors4initEhhh>:
    2988:	a7 e0       	ldi	r26, 0x07	; 7
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	ea ec       	ldi	r30, 0xCA	; 202
    298e:	f4 e1       	ldi	r31, 0x14	; 20
    2990:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__prologue_saves__+0x1c>
    2994:	8c 01       	movw	r16, r24
    2996:	fc 01       	movw	r30, r24
    2998:	11 82       	std	Z+1, r1	; 0x01
    299a:	10 82       	st	Z, r1
    299c:	13 82       	std	Z+3, r1	; 0x03
    299e:	12 82       	std	Z+2, r1	; 0x02
    29a0:	15 82       	std	Z+5, r1	; 0x05
    29a2:	14 82       	std	Z+4, r1	; 0x04
    29a4:	17 82       	std	Z+7, r1	; 0x07
    29a6:	16 82       	std	Z+6, r1	; 0x06
    29a8:	61 31       	cpi	r22, 0x11	; 17
    29aa:	18 f0       	brcs	.+6      	; 0x29b2 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    29ac:	80 e1       	ldi	r24, 0x10	; 16
    29ae:	80 87       	std	Z+8, r24	; 0x08
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    29b2:	fc 01       	movw	r30, r24
    29b4:	60 87       	std	Z+8, r22	; 0x08
    29b6:	f8 01       	movw	r30, r16
    29b8:	20 8b       	std	Z+16, r18	; 0x10
    29ba:	64 2f       	mov	r22, r20
    29bc:	ce 01       	movw	r24, r28
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    29c4:	8f 81       	ldd	r24, Y+7	; 0x07
    29c6:	f8 01       	movw	r30, r16
    29c8:	81 87       	std	Z+9, r24	; 0x09
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	93 87       	std	Z+11, r25	; 0x0b
    29d0:	82 87       	std	Z+10, r24	; 0x0a
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	95 87       	std	Z+13, r25	; 0x0d
    29d8:	84 87       	std	Z+12, r24	; 0x0c
    29da:	27 96       	adiw	r28, 0x07	; 7
    29dc:	e4 e0       	ldi	r30, 0x04	; 4
    29de:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <__epilogue_restores__+0x1c>

000029e2 <_ZN16PololuQTRSensors11emittersOffEv>:
    29e2:	fc 01       	movw	r30, r24
    29e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    29e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    29e8:	10 97       	sbiw	r26, 0x00	; 0
    29ea:	79 f0       	breq	.+30     	; 0x2a0a <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    29ec:	8c 91       	ld	r24, X
    29ee:	91 85       	ldd	r25, Z+9	; 0x09
    29f0:	89 2b       	or	r24, r25
    29f2:	8c 93       	st	X, r24
    29f4:	a2 85       	ldd	r26, Z+10	; 0x0a
    29f6:	b3 85       	ldd	r27, Z+11	; 0x0b
    29f8:	9c 91       	ld	r25, X
    29fa:	81 85       	ldd	r24, Z+9	; 0x09
    29fc:	80 95       	com	r24
    29fe:	89 23       	and	r24, r25
    2a00:	8c 93       	st	X, r24
    2a02:	88 ec       	ldi	r24, 0xC8	; 200
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 7f 14 	call	0x28fe	; 0x28fe <delay_us>
    2a0a:	08 95       	ret

00002a0c <_ZN16PololuQTRSensors10emittersOnEv>:
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a10:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a12:	10 97       	sbiw	r26, 0x00	; 0
    2a14:	71 f0       	breq	.+28     	; 0x2a32 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2a16:	8c 91       	ld	r24, X
    2a18:	91 85       	ldd	r25, Z+9	; 0x09
    2a1a:	89 2b       	or	r24, r25
    2a1c:	8c 93       	st	X, r24
    2a1e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a20:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a22:	8c 91       	ld	r24, X
    2a24:	91 85       	ldd	r25, Z+9	; 0x09
    2a26:	89 2b       	or	r24, r25
    2a28:	8c 93       	st	X, r24
    2a2a:	88 ec       	ldi	r24, 0xC8	; 200
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <delay_us>
    2a32:	08 95       	ret

00002a34 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2a34:	a7 e0       	ldi	r26, 0x07	; 7
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e0 e2       	ldi	r30, 0x20	; 32
    2a3a:	f5 e1       	ldi	r31, 0x15	; 21
    2a3c:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__prologue_saves__+0x6>
    2a40:	7c 01       	movw	r14, r24
    2a42:	4b 01       	movw	r8, r22
    2a44:	64 2f       	mov	r22, r20
    2a46:	39 01       	movw	r6, r18
    2a48:	40 2f       	mov	r20, r16
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN16PololuQTRSensors4initEhhh>
    2a50:	87 01       	movw	r16, r14
    2a52:	0f 5b       	subi	r16, 0xBF	; 191
    2a54:	1f 4f       	sbci	r17, 0xFF	; 255
    2a56:	f8 01       	movw	r30, r16
    2a58:	10 82       	st	Z, r1
    2a5a:	67 01       	movw	r12, r14
    2a5c:	f2 e4       	ldi	r31, 0x42	; 66
    2a5e:	cf 0e       	add	r12, r31
    2a60:	d1 1c       	adc	r13, r1
    2a62:	f6 01       	movw	r30, r12
    2a64:	10 82       	st	Z, r1
    2a66:	57 01       	movw	r10, r14
    2a68:	f3 e4       	ldi	r31, 0x43	; 67
    2a6a:	af 0e       	add	r10, r31
    2a6c:	b1 1c       	adc	r11, r1
    2a6e:	f5 01       	movw	r30, r10
    2a70:	10 82       	st	Z, r1
    2a72:	f7 01       	movw	r30, r14
    2a74:	77 86       	std	Z+15, r7	; 0x0f
    2a76:	66 86       	std	Z+14, r6	; 0x0e
    2a78:	51 2c       	mov	r5, r1
    2a7a:	f7 01       	movw	r30, r14
    2a7c:	80 85       	ldd	r24, Z+8	; 0x08
    2a7e:	58 16       	cp	r5, r24
    2a80:	50 f5       	brcc	.+84     	; 0x2ad6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2a82:	65 2c       	mov	r6, r5
    2a84:	71 2c       	mov	r7, r1
    2a86:	f4 01       	movw	r30, r8
    2a88:	e6 0d       	add	r30, r6
    2a8a:	f7 1d       	adc	r31, r7
    2a8c:	60 81       	ld	r22, Z
    2a8e:	ce 01       	movw	r24, r28
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2a96:	2f 81       	ldd	r18, Y+7	; 0x07
    2a98:	f7 01       	movw	r30, r14
    2a9a:	e6 0d       	add	r30, r6
    2a9c:	f7 1d       	adc	r31, r7
    2a9e:	21 8b       	std	Z+17, r18	; 0x11
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa4:	f3 01       	movw	r30, r6
    2aa6:	ee 0f       	add	r30, r30
    2aa8:	ff 1f       	adc	r31, r31
    2aaa:	ee 0d       	add	r30, r14
    2aac:	ff 1d       	adc	r31, r15
    2aae:	92 a3       	std	Z+34, r25	; 0x22
    2ab0:	81 a3       	std	Z+33, r24	; 0x21
    2ab2:	83 32       	cpi	r24, 0x23	; 35
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	11 f4       	brne	.+4      	; 0x2abc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2ab8:	f8 01       	movw	r30, r16
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2abc:	86 32       	cpi	r24, 0x26	; 38
    2abe:	91 05       	cpc	r25, r1
    2ac0:	11 f4       	brne	.+4      	; 0x2ac6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2ac2:	f6 01       	movw	r30, r12
    2ac4:	03 c0       	rjmp	.+6      	; 0x2acc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2ac6:	89 97       	sbiw	r24, 0x29	; 41
    2ac8:	21 f4       	brne	.+8      	; 0x2ad2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2aca:	f5 01       	movw	r30, r10
    2acc:	80 81       	ld	r24, Z
    2ace:	82 2b       	or	r24, r18
    2ad0:	80 83       	st	Z, r24
    2ad2:	53 94       	inc	r5
    2ad4:	d2 cf       	rjmp	.-92     	; 0x2a7a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2ad6:	27 96       	adiw	r28, 0x07	; 7
    2ad8:	ef e0       	ldi	r30, 0x0F	; 15
    2ada:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__epilogue_restores__+0x6>

00002ade <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e5 e7       	ldi	r30, 0x75	; 117
    2ae4:	f5 e1       	ldi	r31, 0x15	; 21
    2ae6:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0xa>
    2aea:	ec 01       	movw	r28, r24
    2aec:	5b 01       	movw	r10, r22
    2aee:	6c 01       	movw	r12, r24
    2af0:	81 e4       	ldi	r24, 0x41	; 65
    2af2:	c8 0e       	add	r12, r24
    2af4:	d1 1c       	adc	r13, r1
    2af6:	f6 01       	movw	r30, r12
    2af8:	80 80       	ld	r8, Z
    2afa:	7e 01       	movw	r14, r28
    2afc:	f2 e4       	ldi	r31, 0x42	; 66
    2afe:	ef 0e       	add	r14, r31
    2b00:	f1 1c       	adc	r15, r1
    2b02:	f7 01       	movw	r30, r14
    2b04:	70 80       	ld	r7, Z
    2b06:	8e 01       	movw	r16, r28
    2b08:	0d 5b       	subi	r16, 0xBD	; 189
    2b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	90 80       	ld	r9, Z
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	98 85       	ldd	r25, Y+8	; 0x08
    2b14:	89 17       	cp	r24, r25
    2b16:	48 f4       	brcc	.+18     	; 0x2b2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2b18:	f5 01       	movw	r30, r10
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f1 1d       	adc	r31, r1
    2b1e:	e8 0f       	add	r30, r24
    2b20:	f1 1d       	adc	r31, r1
    2b22:	11 82       	std	Z+1, r1	; 0x01
    2b24:	10 82       	st	Z, r1
    2b26:	8f 5f       	subi	r24, 0xFF	; 255
    2b28:	f4 cf       	rjmp	.-24     	; 0x2b12 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2b2a:	84 b1       	in	r24, 0x04	; 4
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	90 81       	ld	r25, Z
    2b30:	89 2b       	or	r24, r25
    2b32:	84 b9       	out	0x04, r24	; 4
    2b34:	87 b1       	in	r24, 0x07	; 7
    2b36:	f7 01       	movw	r30, r14
    2b38:	90 81       	ld	r25, Z
    2b3a:	89 2b       	or	r24, r25
    2b3c:	87 b9       	out	0x07, r24	; 7
    2b3e:	8a b1       	in	r24, 0x0a	; 10
    2b40:	f8 01       	movw	r30, r16
    2b42:	90 81       	ld	r25, Z
    2b44:	89 2b       	or	r24, r25
    2b46:	8a b9       	out	0x0a, r24	; 10
    2b48:	85 b1       	in	r24, 0x05	; 5
    2b4a:	f6 01       	movw	r30, r12
    2b4c:	90 81       	ld	r25, Z
    2b4e:	89 2b       	or	r24, r25
    2b50:	85 b9       	out	0x05, r24	; 5
    2b52:	88 b1       	in	r24, 0x08	; 8
    2b54:	f7 01       	movw	r30, r14
    2b56:	90 81       	ld	r25, Z
    2b58:	89 2b       	or	r24, r25
    2b5a:	88 b9       	out	0x08, r24	; 8
    2b5c:	8b b1       	in	r24, 0x0b	; 11
    2b5e:	f8 01       	movw	r30, r16
    2b60:	90 81       	ld	r25, Z
    2b62:	89 2b       	or	r24, r25
    2b64:	8b b9       	out	0x0b, r24	; 11
    2b66:	8a e0       	ldi	r24, 0x0A	; 10
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <delay_us>
    2b6e:	94 b1       	in	r25, 0x04	; 4
    2b70:	f6 01       	movw	r30, r12
    2b72:	80 81       	ld	r24, Z
    2b74:	80 95       	com	r24
    2b76:	89 23       	and	r24, r25
    2b78:	84 b9       	out	0x04, r24	; 4
    2b7a:	97 b1       	in	r25, 0x07	; 7
    2b7c:	f7 01       	movw	r30, r14
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 95       	com	r24
    2b82:	89 23       	and	r24, r25
    2b84:	87 b9       	out	0x07, r24	; 7
    2b86:	9a b1       	in	r25, 0x0a	; 10
    2b88:	f8 01       	movw	r30, r16
    2b8a:	80 81       	ld	r24, Z
    2b8c:	80 95       	com	r24
    2b8e:	89 23       	and	r24, r25
    2b90:	8a b9       	out	0x0a, r24	; 10
    2b92:	95 b1       	in	r25, 0x05	; 5
    2b94:	f6 01       	movw	r30, r12
    2b96:	80 81       	ld	r24, Z
    2b98:	80 95       	com	r24
    2b9a:	89 23       	and	r24, r25
    2b9c:	85 b9       	out	0x05, r24	; 5
    2b9e:	98 b1       	in	r25, 0x08	; 8
    2ba0:	f7 01       	movw	r30, r14
    2ba2:	80 81       	ld	r24, Z
    2ba4:	80 95       	com	r24
    2ba6:	89 23       	and	r24, r25
    2ba8:	88 b9       	out	0x08, r24	; 8
    2baa:	9b b1       	in	r25, 0x0b	; 11
    2bac:	f8 01       	movw	r30, r16
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 95       	com	r24
    2bb2:	89 23       	and	r24, r25
    2bb4:	8b b9       	out	0x0b, r24	; 11
    2bb6:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2bba:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2bbe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2bc2:	83 60       	ori	r24, 0x03	; 3
    2bc4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2bce:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	2e 85       	ldd	r18, Y+14	; 0x0e
    2bd8:	3f 85       	ldd	r19, Y+15	; 0x0f
    2bda:	82 17       	cp	r24, r18
    2bdc:	93 07       	cpc	r25, r19
    2bde:	20 f5       	brcc	.+72     	; 0x2c28 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2be0:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2be4:	2c 2d       	mov	r18, r12
    2be6:	24 1b       	sub	r18, r20
    2be8:	82 0f       	add	r24, r18
    2bea:	91 1d       	adc	r25, r1
    2bec:	03 b1       	in	r16, 0x03	; 3
    2bee:	08 11       	cpse	r16, r8
    2bf0:	32 c0       	rjmp	.+100    	; 0x2c56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2bf2:	f6 b0       	in	r15, 0x06	; 6
    2bf4:	f7 10       	cpse	r15, r7
    2bf6:	2f c0       	rjmp	.+94     	; 0x2c56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2bf8:	29 b1       	in	r18, 0x09	; 9
    2bfa:	29 11       	cpse	r18, r9
    2bfc:	2c c0       	rjmp	.+88     	; 0x2c56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2bfe:	10 c0       	rjmp	.+32     	; 0x2c20 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2c00:	21 2f       	mov	r18, r17
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	a9 01       	movw	r20, r18
    2c06:	44 0f       	add	r20, r20
    2c08:	55 1f       	adc	r21, r21
    2c0a:	f5 01       	movw	r30, r10
    2c0c:	e4 0f       	add	r30, r20
    2c0e:	f5 1f       	adc	r31, r21
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	67 2b       	or	r22, r23
    2c16:	21 f1       	breq	.+72     	; 0x2c60 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2c18:	1f 5f       	subi	r17, 0xFF	; 255
    2c1a:	28 85       	ldd	r18, Y+8	; 0x08
    2c1c:	12 17       	cp	r17, r18
    2c1e:	80 f3       	brcs	.-32     	; 0x2c00 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2c20:	7f 2c       	mov	r7, r15
    2c22:	80 2e       	mov	r8, r16
    2c24:	4c 2d       	mov	r20, r12
    2c26:	d7 cf       	rjmp	.-82     	; 0x2bd6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2c28:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c2c:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	88 85       	ldd	r24, Y+8	; 0x08
    2c34:	28 17       	cp	r18, r24
    2c36:	30 f5       	brcc	.+76     	; 0x2c84 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2c38:	f5 01       	movw	r30, r10
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f1 1d       	adc	r31, r1
    2c3e:	e2 0f       	add	r30, r18
    2c40:	f1 1d       	adc	r31, r1
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	89 2b       	or	r24, r25
    2c48:	21 f4       	brne	.+8      	; 0x2c52 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2c4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	2f 5f       	subi	r18, 0xFF	; 255
    2c54:	ee cf       	rjmp	.-36     	; 0x2c32 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2c56:	03 b1       	in	r16, 0x03	; 3
    2c58:	f6 b0       	in	r15, 0x06	; 6
    2c5a:	99 b0       	in	r9, 0x09	; 9
    2c5c:	10 e0       	ldi	r17, 0x00	; 0
    2c5e:	dd cf       	rjmp	.-70     	; 0x2c1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2c60:	de 01       	movw	r26, r28
    2c62:	a4 0f       	add	r26, r20
    2c64:	b5 1f       	adc	r27, r21
    2c66:	91 96       	adiw	r26, 0x21	; 33
    2c68:	0d 90       	ld	r0, X+
    2c6a:	bc 91       	ld	r27, X
    2c6c:	a0 2d       	mov	r26, r0
    2c6e:	4c 91       	ld	r20, X
    2c70:	de 01       	movw	r26, r28
    2c72:	a2 0f       	add	r26, r18
    2c74:	b3 1f       	adc	r27, r19
    2c76:	51 96       	adiw	r26, 0x11	; 17
    2c78:	2c 91       	ld	r18, X
    2c7a:	42 23       	and	r20, r18
    2c7c:	69 f6       	brne	.-102    	; 0x2c18 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	80 83       	st	Z, r24
    2c82:	ca cf       	rjmp	.-108    	; 0x2c18 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	ed e0       	ldi	r30, 0x0D	; 13
    2c8a:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0xa>

00002c8e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	9b 01       	movw	r18, r22
    2c9e:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2ca2:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ca6:	47 b1       	in	r20, 0x07	; 7
    2ca8:	18 b1       	in	r17, 0x08	; 8
    2caa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2cae:	86 fd       	sbrc	r24, 6
    2cb0:	fc cf       	rjmp	.-8      	; 0x2caa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 85       	ldd	r25, Z+8	; 0x08
    2cb6:	89 17       	cp	r24, r25
    2cb8:	48 f4       	brcc	.+18     	; 0x2ccc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2cba:	d9 01       	movw	r26, r18
    2cbc:	a8 0f       	add	r26, r24
    2cbe:	b1 1d       	adc	r27, r1
    2cc0:	a8 0f       	add	r26, r24
    2cc2:	b1 1d       	adc	r27, r1
    2cc4:	1d 92       	st	X+, r1
    2cc6:	1c 92       	st	X, r1
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	f4 cf       	rjmp	.-24     	; 0x2cb4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2ccc:	97 b1       	in	r25, 0x07	; 7
    2cce:	82 a1       	ldd	r24, Z+34	; 0x22
    2cd0:	80 95       	com	r24
    2cd2:	89 23       	and	r24, r25
    2cd4:	87 b9       	out	0x07, r24	; 7
    2cd6:	98 b1       	in	r25, 0x08	; 8
    2cd8:	82 a1       	ldd	r24, Z+34	; 0x22
    2cda:	80 95       	com	r24
    2cdc:	89 23       	and	r24, r25
    2cde:	88 b9       	out	0x08, r24	; 8
    2ce0:	87 e8       	ldi	r24, 0x87	; 135
    2ce2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ce6:	e1 2c       	mov	r14, r1
    2ce8:	81 a1       	ldd	r24, Z+33	; 0x21
    2cea:	e8 16       	cp	r14, r24
    2cec:	10 f0       	brcs	.+4      	; 0x2cf2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2cee:	e1 2c       	mov	r14, r1
    2cf0:	29 c0       	rjmp	.+82     	; 0x2d44 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	80 85       	ldd	r24, Z+8	; 0x08
    2cf6:	58 17       	cp	r21, r24
    2cf8:	18 f5       	brcc	.+70     	; 0x2d40 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2cfa:	a5 2f       	mov	r26, r21
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	ef 01       	movw	r28, r30
    2d00:	ca 0f       	add	r28, r26
    2d02:	db 1f       	adc	r29, r27
    2d04:	89 89       	ldd	r24, Y+17	; 0x11
    2d06:	80 64       	ori	r24, 0x40	; 64
    2d08:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d0c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d10:	80 64       	ori	r24, 0x40	; 64
    2d12:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d16:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d1a:	86 fd       	sbrc	r24, 6
    2d1c:	fc cf       	rjmp	.-8      	; 0x2d16 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2d1e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2d22:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2d26:	aa 0f       	add	r26, r26
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	a2 0f       	add	r26, r18
    2d2c:	b3 1f       	adc	r27, r19
    2d2e:	8d 91       	ld	r24, X+
    2d30:	9c 91       	ld	r25, X
    2d32:	11 97       	sbiw	r26, 0x01	; 1
    2d34:	86 0f       	add	r24, r22
    2d36:	97 1f       	adc	r25, r23
    2d38:	8d 93       	st	X+, r24
    2d3a:	9c 93       	st	X, r25
    2d3c:	5f 5f       	subi	r21, 0xFF	; 255
    2d3e:	da cf       	rjmp	.-76     	; 0x2cf4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2d40:	e3 94       	inc	r14
    2d42:	d2 cf       	rjmp	.-92     	; 0x2ce8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2d44:	80 85       	ldd	r24, Z+8	; 0x08
    2d46:	e8 16       	cp	r14, r24
    2d48:	a0 f4       	brcc	.+40     	; 0x2d72 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2d4a:	e9 01       	movw	r28, r18
    2d4c:	ce 0d       	add	r28, r14
    2d4e:	d1 1d       	adc	r29, r1
    2d50:	ce 0d       	add	r28, r14
    2d52:	d1 1d       	adc	r29, r1
    2d54:	61 a1       	ldd	r22, Z+33	; 0x21
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	cb 01       	movw	r24, r22
    2d5a:	95 95       	asr	r25
    2d5c:	87 95       	ror	r24
    2d5e:	a8 81       	ld	r26, Y
    2d60:	b9 81       	ldd	r27, Y+1	; 0x01
    2d62:	8a 0f       	add	r24, r26
    2d64:	9b 1f       	adc	r25, r27
    2d66:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    2d6a:	79 83       	std	Y+1, r23	; 0x01
    2d6c:	68 83       	st	Y, r22
    2d6e:	e3 94       	inc	r14
    2d70:	e9 cf       	rjmp	.-46     	; 0x2d44 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2d72:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d76:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d7a:	18 b9       	out	0x08, r17	; 8
    2d7c:	47 b9       	out	0x07, r20	; 7
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	e6 e0       	ldi	r30, 0x06	; 6
    2d84:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__epilogue_restores__+0x18>

00002d88 <_ZN16PololuQTRSensors4readEPjh>:
    2d88:	a0 e2       	ldi	r26, 0x20	; 32
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	ea ec       	ldi	r30, 0xCA	; 202
    2d8e:	f6 e1       	ldi	r31, 0x16	; 22
    2d90:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__prologue_saves__+0x16>
    2d94:	8c 01       	movw	r16, r24
    2d96:	7b 01       	movw	r14, r22
    2d98:	d4 2e       	mov	r13, r20
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	84 0f       	add	r24, r20
    2d9e:	82 30       	cpi	r24, 0x02	; 2
    2da0:	18 f4       	brcc	.+6      	; 0x2da8 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2da2:	c8 01       	movw	r24, r16
    2da4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN16PololuQTRSensors10emittersOnEv>
    2da8:	d8 01       	movw	r26, r16
    2daa:	50 96       	adiw	r26, 0x10	; 16
    2dac:	8c 91       	ld	r24, X
    2dae:	b7 01       	movw	r22, r14
    2db0:	81 11       	cpse	r24, r1
    2db2:	10 c0       	rjmp	.+32     	; 0x2dd4 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2db4:	c8 01       	movw	r24, r16
    2db6:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2dba:	c8 01       	movw	r24, r16
    2dbc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_ZN16PololuQTRSensors11emittersOffEv>
    2dc0:	b2 e0       	ldi	r27, 0x02	; 2
    2dc2:	db 12       	cpse	r13, r27
    2dc4:	3a c0       	rjmp	.+116    	; 0x2e3a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2dc6:	be 01       	movw	r22, r28
    2dc8:	6f 5f       	subi	r22, 0xFF	; 255
    2dca:	7f 4f       	sbci	r23, 0xFF	; 255
    2dcc:	c8 01       	movw	r24, r16
    2dce:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2dd2:	0f c0       	rjmp	.+30     	; 0x2df2 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2dd4:	c8 01       	movw	r24, r16
    2dd6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2dda:	c8 01       	movw	r24, r16
    2ddc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_ZN16PololuQTRSensors11emittersOffEv>
    2de0:	e2 e0       	ldi	r30, 0x02	; 2
    2de2:	de 12       	cpse	r13, r30
    2de4:	2a c0       	rjmp	.+84     	; 0x2e3a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2de6:	be 01       	movw	r22, r28
    2de8:	6f 5f       	subi	r22, 0xFF	; 255
    2dea:	7f 4f       	sbci	r23, 0xFF	; 255
    2dec:	c8 01       	movw	r24, r16
    2dee:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	f8 01       	movw	r30, r16
    2df6:	80 85       	ldd	r24, Z+8	; 0x08
    2df8:	48 17       	cp	r20, r24
    2dfa:	f8 f4       	brcc	.+62     	; 0x2e3a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2dfc:	84 2f       	mov	r24, r20
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	f7 01       	movw	r30, r14
    2e06:	e8 0f       	add	r30, r24
    2e08:	f9 1f       	adc	r31, r25
    2e0a:	21 e0       	ldi	r18, 0x01	; 1
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	2c 0f       	add	r18, r28
    2e10:	3d 1f       	adc	r19, r29
    2e12:	82 0f       	add	r24, r18
    2e14:	93 1f       	adc	r25, r19
    2e16:	d8 01       	movw	r26, r16
    2e18:	1e 96       	adiw	r26, 0x0e	; 14
    2e1a:	2d 91       	ld	r18, X+
    2e1c:	3c 91       	ld	r19, X
    2e1e:	1f 97       	sbiw	r26, 0x0f	; 15
    2e20:	dc 01       	movw	r26, r24
    2e22:	8d 91       	ld	r24, X+
    2e24:	9c 91       	ld	r25, X
    2e26:	28 1b       	sub	r18, r24
    2e28:	39 0b       	sbc	r19, r25
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	82 0f       	add	r24, r18
    2e30:	93 1f       	adc	r25, r19
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
    2e36:	4f 5f       	subi	r20, 0xFF	; 255
    2e38:	dd cf       	rjmp	.-70     	; 0x2df4 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2e3a:	a0 96       	adiw	r28, 0x20	; 32
    2e3c:	e7 e0       	ldi	r30, 0x07	; 7
    2e3e:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__epilogue_restores__+0x16>

00002e42 <_ZN16PololuQTRSensorsD1Ev>:
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	ec 01       	movw	r28, r24
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	11 f0       	breq	.+4      	; 0x2e54 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2e50:	0e 94 98 18 	call	0x3130	; 0x3130 <free>
    2e54:	8e 81       	ldd	r24, Y+6	; 0x06
    2e56:	9f 81       	ldd	r25, Y+7	; 0x07
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	11 f0       	breq	.+4      	; 0x2e60 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2e5c:	0e 94 98 18 	call	0x3130	; 0x3130 <free>
    2e60:	88 81       	ld	r24, Y
    2e62:	99 81       	ldd	r25, Y+1	; 0x01
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	11 f0       	breq	.+4      	; 0x2e6c <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2e68:	0e 94 98 18 	call	0x3130	; 0x3130 <free>
    2e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	11 f0       	breq	.+4      	; 0x2e78 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2e74:	0e 94 98 18 	call	0x3130	; 0x3130 <free>
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <__udivmodqi4>:
    2e7e:	99 1b       	sub	r25, r25
    2e80:	79 e0       	ldi	r23, 0x09	; 9
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <__udivmodqi4_ep>

00002e84 <__udivmodqi4_loop>:
    2e84:	99 1f       	adc	r25, r25
    2e86:	96 17       	cp	r25, r22
    2e88:	08 f0       	brcs	.+2      	; 0x2e8c <__udivmodqi4_ep>
    2e8a:	96 1b       	sub	r25, r22

00002e8c <__udivmodqi4_ep>:
    2e8c:	88 1f       	adc	r24, r24
    2e8e:	7a 95       	dec	r23
    2e90:	c9 f7       	brne	.-14     	; 0x2e84 <__udivmodqi4_loop>
    2e92:	80 95       	com	r24
    2e94:	08 95       	ret

00002e96 <__udivmodhi4>:
    2e96:	aa 1b       	sub	r26, r26
    2e98:	bb 1b       	sub	r27, r27
    2e9a:	51 e1       	ldi	r21, 0x11	; 17
    2e9c:	07 c0       	rjmp	.+14     	; 0x2eac <__udivmodhi4_ep>

00002e9e <__udivmodhi4_loop>:
    2e9e:	aa 1f       	adc	r26, r26
    2ea0:	bb 1f       	adc	r27, r27
    2ea2:	a6 17       	cp	r26, r22
    2ea4:	b7 07       	cpc	r27, r23
    2ea6:	10 f0       	brcs	.+4      	; 0x2eac <__udivmodhi4_ep>
    2ea8:	a6 1b       	sub	r26, r22
    2eaa:	b7 0b       	sbc	r27, r23

00002eac <__udivmodhi4_ep>:
    2eac:	88 1f       	adc	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	5a 95       	dec	r21
    2eb2:	a9 f7       	brne	.-22     	; 0x2e9e <__udivmodhi4_loop>
    2eb4:	80 95       	com	r24
    2eb6:	90 95       	com	r25
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	08 95       	ret

00002ebe <__divmodhi4>:
    2ebe:	97 fb       	bst	r25, 7
    2ec0:	07 2e       	mov	r0, r23
    2ec2:	16 f4       	brtc	.+4      	; 0x2ec8 <__divmodhi4+0xa>
    2ec4:	00 94       	com	r0
    2ec6:	07 d0       	rcall	.+14     	; 0x2ed6 <__divmodhi4_neg1>
    2ec8:	77 fd       	sbrc	r23, 7
    2eca:	09 d0       	rcall	.+18     	; 0x2ede <__divmodhi4_neg2>
    2ecc:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodhi4>
    2ed0:	07 fc       	sbrc	r0, 7
    2ed2:	05 d0       	rcall	.+10     	; 0x2ede <__divmodhi4_neg2>
    2ed4:	3e f4       	brtc	.+14     	; 0x2ee4 <__divmodhi4_exit>

00002ed6 <__divmodhi4_neg1>:
    2ed6:	90 95       	com	r25
    2ed8:	81 95       	neg	r24
    2eda:	9f 4f       	sbci	r25, 0xFF	; 255
    2edc:	08 95       	ret

00002ede <__divmodhi4_neg2>:
    2ede:	70 95       	com	r23
    2ee0:	61 95       	neg	r22
    2ee2:	7f 4f       	sbci	r23, 0xFF	; 255

00002ee4 <__divmodhi4_exit>:
    2ee4:	08 95       	ret

00002ee6 <__udivmodsi4>:
    2ee6:	a1 e2       	ldi	r26, 0x21	; 33
    2ee8:	1a 2e       	mov	r1, r26
    2eea:	aa 1b       	sub	r26, r26
    2eec:	bb 1b       	sub	r27, r27
    2eee:	fd 01       	movw	r30, r26
    2ef0:	0d c0       	rjmp	.+26     	; 0x2f0c <__udivmodsi4_ep>

00002ef2 <__udivmodsi4_loop>:
    2ef2:	aa 1f       	adc	r26, r26
    2ef4:	bb 1f       	adc	r27, r27
    2ef6:	ee 1f       	adc	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	a2 17       	cp	r26, r18
    2efc:	b3 07       	cpc	r27, r19
    2efe:	e4 07       	cpc	r30, r20
    2f00:	f5 07       	cpc	r31, r21
    2f02:	20 f0       	brcs	.+8      	; 0x2f0c <__udivmodsi4_ep>
    2f04:	a2 1b       	sub	r26, r18
    2f06:	b3 0b       	sbc	r27, r19
    2f08:	e4 0b       	sbc	r30, r20
    2f0a:	f5 0b       	sbc	r31, r21

00002f0c <__udivmodsi4_ep>:
    2f0c:	66 1f       	adc	r22, r22
    2f0e:	77 1f       	adc	r23, r23
    2f10:	88 1f       	adc	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	1a 94       	dec	r1
    2f16:	69 f7       	brne	.-38     	; 0x2ef2 <__udivmodsi4_loop>
    2f18:	60 95       	com	r22
    2f1a:	70 95       	com	r23
    2f1c:	80 95       	com	r24
    2f1e:	90 95       	com	r25
    2f20:	9b 01       	movw	r18, r22
    2f22:	ac 01       	movw	r20, r24
    2f24:	bd 01       	movw	r22, r26
    2f26:	cf 01       	movw	r24, r30
    2f28:	08 95       	ret

00002f2a <__divmodsi4>:
    2f2a:	05 2e       	mov	r0, r21
    2f2c:	97 fb       	bst	r25, 7
    2f2e:	1e f4       	brtc	.+6      	; 0x2f36 <__divmodsi4+0xc>
    2f30:	00 94       	com	r0
    2f32:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__negsi2>
    2f36:	57 fd       	sbrc	r21, 7
    2f38:	07 d0       	rcall	.+14     	; 0x2f48 <__divmodsi4_neg2>
    2f3a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    2f3e:	07 fc       	sbrc	r0, 7
    2f40:	03 d0       	rcall	.+6      	; 0x2f48 <__divmodsi4_neg2>
    2f42:	4e f4       	brtc	.+18     	; 0x2f56 <__divmodsi4_exit>
    2f44:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__negsi2>

00002f48 <__divmodsi4_neg2>:
    2f48:	50 95       	com	r21
    2f4a:	40 95       	com	r20
    2f4c:	30 95       	com	r19
    2f4e:	21 95       	neg	r18
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	4f 4f       	sbci	r20, 0xFF	; 255
    2f54:	5f 4f       	sbci	r21, 0xFF	; 255

00002f56 <__divmodsi4_exit>:
    2f56:	08 95       	ret

00002f58 <__negsi2>:
    2f58:	90 95       	com	r25
    2f5a:	80 95       	com	r24
    2f5c:	70 95       	com	r23
    2f5e:	61 95       	neg	r22
    2f60:	7f 4f       	sbci	r23, 0xFF	; 255
    2f62:	8f 4f       	sbci	r24, 0xFF	; 255
    2f64:	9f 4f       	sbci	r25, 0xFF	; 255
    2f66:	08 95       	ret

00002f68 <__tablejump2__>:
    2f68:	ee 0f       	add	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	05 90       	lpm	r0, Z+
    2f6e:	f4 91       	lpm	r31, Z
    2f70:	e0 2d       	mov	r30, r0
    2f72:	09 94       	ijmp

00002f74 <__umulhisi3>:
    2f74:	a2 9f       	mul	r26, r18
    2f76:	b0 01       	movw	r22, r0
    2f78:	b3 9f       	mul	r27, r19
    2f7a:	c0 01       	movw	r24, r0
    2f7c:	a3 9f       	mul	r26, r19
    2f7e:	70 0d       	add	r23, r0
    2f80:	81 1d       	adc	r24, r1
    2f82:	11 24       	eor	r1, r1
    2f84:	91 1d       	adc	r25, r1
    2f86:	b2 9f       	mul	r27, r18
    2f88:	70 0d       	add	r23, r0
    2f8a:	81 1d       	adc	r24, r1
    2f8c:	11 24       	eor	r1, r1
    2f8e:	91 1d       	adc	r25, r1
    2f90:	08 95       	ret

00002f92 <__prologue_saves__>:
    2f92:	2f 92       	push	r2
    2f94:	3f 92       	push	r3
    2f96:	4f 92       	push	r4
    2f98:	5f 92       	push	r5
    2f9a:	6f 92       	push	r6
    2f9c:	7f 92       	push	r7
    2f9e:	8f 92       	push	r8
    2fa0:	9f 92       	push	r9
    2fa2:	af 92       	push	r10
    2fa4:	bf 92       	push	r11
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	ca 1b       	sub	r28, r26
    2fbc:	db 0b       	sbc	r29, r27
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	09 94       	ijmp

00002fca <__epilogue_restores__>:
    2fca:	2a 88       	ldd	r2, Y+18	; 0x12
    2fcc:	39 88       	ldd	r3, Y+17	; 0x11
    2fce:	48 88       	ldd	r4, Y+16	; 0x10
    2fd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fda:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fdc:	b9 84       	ldd	r11, Y+9	; 0x09
    2fde:	c8 84       	ldd	r12, Y+8	; 0x08
    2fe0:	df 80       	ldd	r13, Y+7	; 0x07
    2fe2:	ee 80       	ldd	r14, Y+6	; 0x06
    2fe4:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe6:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe8:	1b 81       	ldd	r17, Y+3	; 0x03
    2fea:	aa 81       	ldd	r26, Y+2	; 0x02
    2fec:	b9 81       	ldd	r27, Y+1	; 0x01
    2fee:	ce 0f       	add	r28, r30
    2ff0:	d1 1d       	adc	r29, r1
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	ed 01       	movw	r28, r26
    2ffe:	08 95       	ret

00003000 <malloc>:
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	82 30       	cpi	r24, 0x02	; 2
    300a:	91 05       	cpc	r25, r1
    300c:	10 f4       	brcc	.+4      	; 0x3012 <malloc+0x12>
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <__flp>
    3016:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <__flp+0x1>
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	a0 e0       	ldi	r26, 0x00	; 0
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	30 97       	sbiw	r30, 0x00	; 0
    3024:	19 f1       	breq	.+70     	; 0x306c <malloc+0x6c>
    3026:	40 81       	ld	r20, Z
    3028:	51 81       	ldd	r21, Z+1	; 0x01
    302a:	02 81       	ldd	r16, Z+2	; 0x02
    302c:	13 81       	ldd	r17, Z+3	; 0x03
    302e:	48 17       	cp	r20, r24
    3030:	59 07       	cpc	r21, r25
    3032:	c8 f0       	brcs	.+50     	; 0x3066 <malloc+0x66>
    3034:	84 17       	cp	r24, r20
    3036:	95 07       	cpc	r25, r21
    3038:	69 f4       	brne	.+26     	; 0x3054 <malloc+0x54>
    303a:	10 97       	sbiw	r26, 0x00	; 0
    303c:	31 f0       	breq	.+12     	; 0x304a <malloc+0x4a>
    303e:	12 96       	adiw	r26, 0x02	; 2
    3040:	0c 93       	st	X, r16
    3042:	12 97       	sbiw	r26, 0x02	; 2
    3044:	13 96       	adiw	r26, 0x03	; 3
    3046:	1c 93       	st	X, r17
    3048:	27 c0       	rjmp	.+78     	; 0x3098 <malloc+0x98>
    304a:	00 93 28 07 	sts	0x0728, r16	; 0x800728 <__flp>
    304e:	10 93 29 07 	sts	0x0729, r17	; 0x800729 <__flp+0x1>
    3052:	22 c0       	rjmp	.+68     	; 0x3098 <malloc+0x98>
    3054:	21 15       	cp	r18, r1
    3056:	31 05       	cpc	r19, r1
    3058:	19 f0       	breq	.+6      	; 0x3060 <malloc+0x60>
    305a:	42 17       	cp	r20, r18
    305c:	53 07       	cpc	r21, r19
    305e:	18 f4       	brcc	.+6      	; 0x3066 <malloc+0x66>
    3060:	9a 01       	movw	r18, r20
    3062:	bd 01       	movw	r22, r26
    3064:	ef 01       	movw	r28, r30
    3066:	df 01       	movw	r26, r30
    3068:	f8 01       	movw	r30, r16
    306a:	db cf       	rjmp	.-74     	; 0x3022 <malloc+0x22>
    306c:	21 15       	cp	r18, r1
    306e:	31 05       	cpc	r19, r1
    3070:	f9 f0       	breq	.+62     	; 0x30b0 <malloc+0xb0>
    3072:	28 1b       	sub	r18, r24
    3074:	39 0b       	sbc	r19, r25
    3076:	24 30       	cpi	r18, 0x04	; 4
    3078:	31 05       	cpc	r19, r1
    307a:	80 f4       	brcc	.+32     	; 0x309c <malloc+0x9c>
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	61 15       	cp	r22, r1
    3082:	71 05       	cpc	r23, r1
    3084:	21 f0       	breq	.+8      	; 0x308e <malloc+0x8e>
    3086:	fb 01       	movw	r30, r22
    3088:	93 83       	std	Z+3, r25	; 0x03
    308a:	82 83       	std	Z+2, r24	; 0x02
    308c:	04 c0       	rjmp	.+8      	; 0x3096 <malloc+0x96>
    308e:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <__flp+0x1>
    3092:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <__flp>
    3096:	fe 01       	movw	r30, r28
    3098:	32 96       	adiw	r30, 0x02	; 2
    309a:	44 c0       	rjmp	.+136    	; 0x3124 <malloc+0x124>
    309c:	fe 01       	movw	r30, r28
    309e:	e2 0f       	add	r30, r18
    30a0:	f3 1f       	adc	r31, r19
    30a2:	81 93       	st	Z+, r24
    30a4:	91 93       	st	Z+, r25
    30a6:	22 50       	subi	r18, 0x02	; 2
    30a8:	31 09       	sbc	r19, r1
    30aa:	39 83       	std	Y+1, r19	; 0x01
    30ac:	28 83       	st	Y, r18
    30ae:	3a c0       	rjmp	.+116    	; 0x3124 <malloc+0x124>
    30b0:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <__brkval>
    30b4:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <__brkval+0x1>
    30b8:	23 2b       	or	r18, r19
    30ba:	41 f4       	brne	.+16     	; 0x30cc <malloc+0xcc>
    30bc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    30c0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    30c4:	30 93 27 07 	sts	0x0727, r19	; 0x800727 <__brkval+0x1>
    30c8:	20 93 26 07 	sts	0x0726, r18	; 0x800726 <__brkval>
    30cc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    30d0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    30d4:	21 15       	cp	r18, r1
    30d6:	31 05       	cpc	r19, r1
    30d8:	41 f4       	brne	.+16     	; 0x30ea <malloc+0xea>
    30da:	2d b7       	in	r18, 0x3d	; 61
    30dc:	3e b7       	in	r19, 0x3e	; 62
    30de:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    30e2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    30e6:	24 1b       	sub	r18, r20
    30e8:	35 0b       	sbc	r19, r21
    30ea:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <__brkval>
    30ee:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <__brkval+0x1>
    30f2:	e2 17       	cp	r30, r18
    30f4:	f3 07       	cpc	r31, r19
    30f6:	a0 f4       	brcc	.+40     	; 0x3120 <malloc+0x120>
    30f8:	2e 1b       	sub	r18, r30
    30fa:	3f 0b       	sbc	r19, r31
    30fc:	28 17       	cp	r18, r24
    30fe:	39 07       	cpc	r19, r25
    3100:	78 f0       	brcs	.+30     	; 0x3120 <malloc+0x120>
    3102:	ac 01       	movw	r20, r24
    3104:	4e 5f       	subi	r20, 0xFE	; 254
    3106:	5f 4f       	sbci	r21, 0xFF	; 255
    3108:	24 17       	cp	r18, r20
    310a:	35 07       	cpc	r19, r21
    310c:	48 f0       	brcs	.+18     	; 0x3120 <malloc+0x120>
    310e:	4e 0f       	add	r20, r30
    3110:	5f 1f       	adc	r21, r31
    3112:	50 93 27 07 	sts	0x0727, r21	; 0x800727 <__brkval+0x1>
    3116:	40 93 26 07 	sts	0x0726, r20	; 0x800726 <__brkval>
    311a:	81 93       	st	Z+, r24
    311c:	91 93       	st	Z+, r25
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <malloc+0x124>
    3120:	e0 e0       	ldi	r30, 0x00	; 0
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	cf 01       	movw	r24, r30
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <free>:
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	09 f4       	brne	.+2      	; 0x313a <free+0xa>
    3138:	81 c0       	rjmp	.+258    	; 0x323c <free+0x10c>
    313a:	fc 01       	movw	r30, r24
    313c:	32 97       	sbiw	r30, 0x02	; 2
    313e:	13 82       	std	Z+3, r1	; 0x03
    3140:	12 82       	std	Z+2, r1	; 0x02
    3142:	a0 91 28 07 	lds	r26, 0x0728	; 0x800728 <__flp>
    3146:	b0 91 29 07 	lds	r27, 0x0729	; 0x800729 <__flp+0x1>
    314a:	10 97       	sbiw	r26, 0x00	; 0
    314c:	81 f4       	brne	.+32     	; 0x316e <free+0x3e>
    314e:	20 81       	ld	r18, Z
    3150:	31 81       	ldd	r19, Z+1	; 0x01
    3152:	82 0f       	add	r24, r18
    3154:	93 1f       	adc	r25, r19
    3156:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <__brkval>
    315a:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <__brkval+0x1>
    315e:	28 17       	cp	r18, r24
    3160:	39 07       	cpc	r19, r25
    3162:	51 f5       	brne	.+84     	; 0x31b8 <free+0x88>
    3164:	f0 93 27 07 	sts	0x0727, r31	; 0x800727 <__brkval+0x1>
    3168:	e0 93 26 07 	sts	0x0726, r30	; 0x800726 <__brkval>
    316c:	67 c0       	rjmp	.+206    	; 0x323c <free+0x10c>
    316e:	ed 01       	movw	r28, r26
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	ce 17       	cp	r28, r30
    3176:	df 07       	cpc	r29, r31
    3178:	40 f4       	brcc	.+16     	; 0x318a <free+0x5a>
    317a:	4a 81       	ldd	r20, Y+2	; 0x02
    317c:	5b 81       	ldd	r21, Y+3	; 0x03
    317e:	9e 01       	movw	r18, r28
    3180:	41 15       	cp	r20, r1
    3182:	51 05       	cpc	r21, r1
    3184:	f1 f0       	breq	.+60     	; 0x31c2 <free+0x92>
    3186:	ea 01       	movw	r28, r20
    3188:	f5 cf       	rjmp	.-22     	; 0x3174 <free+0x44>
    318a:	d3 83       	std	Z+3, r29	; 0x03
    318c:	c2 83       	std	Z+2, r28	; 0x02
    318e:	40 81       	ld	r20, Z
    3190:	51 81       	ldd	r21, Z+1	; 0x01
    3192:	84 0f       	add	r24, r20
    3194:	95 1f       	adc	r25, r21
    3196:	c8 17       	cp	r28, r24
    3198:	d9 07       	cpc	r29, r25
    319a:	59 f4       	brne	.+22     	; 0x31b2 <free+0x82>
    319c:	88 81       	ld	r24, Y
    319e:	99 81       	ldd	r25, Y+1	; 0x01
    31a0:	84 0f       	add	r24, r20
    31a2:	95 1f       	adc	r25, r21
    31a4:	02 96       	adiw	r24, 0x02	; 2
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	80 83       	st	Z, r24
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	9b 81       	ldd	r25, Y+3	; 0x03
    31ae:	93 83       	std	Z+3, r25	; 0x03
    31b0:	82 83       	std	Z+2, r24	; 0x02
    31b2:	21 15       	cp	r18, r1
    31b4:	31 05       	cpc	r19, r1
    31b6:	29 f4       	brne	.+10     	; 0x31c2 <free+0x92>
    31b8:	f0 93 29 07 	sts	0x0729, r31	; 0x800729 <__flp+0x1>
    31bc:	e0 93 28 07 	sts	0x0728, r30	; 0x800728 <__flp>
    31c0:	3d c0       	rjmp	.+122    	; 0x323c <free+0x10c>
    31c2:	e9 01       	movw	r28, r18
    31c4:	fb 83       	std	Y+3, r31	; 0x03
    31c6:	ea 83       	std	Y+2, r30	; 0x02
    31c8:	49 91       	ld	r20, Y+
    31ca:	59 91       	ld	r21, Y+
    31cc:	c4 0f       	add	r28, r20
    31ce:	d5 1f       	adc	r29, r21
    31d0:	ec 17       	cp	r30, r28
    31d2:	fd 07       	cpc	r31, r29
    31d4:	61 f4       	brne	.+24     	; 0x31ee <free+0xbe>
    31d6:	80 81       	ld	r24, Z
    31d8:	91 81       	ldd	r25, Z+1	; 0x01
    31da:	84 0f       	add	r24, r20
    31dc:	95 1f       	adc	r25, r21
    31de:	02 96       	adiw	r24, 0x02	; 2
    31e0:	e9 01       	movw	r28, r18
    31e2:	99 83       	std	Y+1, r25	; 0x01
    31e4:	88 83       	st	Y, r24
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	9b 83       	std	Y+3, r25	; 0x03
    31ec:	8a 83       	std	Y+2, r24	; 0x02
    31ee:	e0 e0       	ldi	r30, 0x00	; 0
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	12 96       	adiw	r26, 0x02	; 2
    31f4:	8d 91       	ld	r24, X+
    31f6:	9c 91       	ld	r25, X
    31f8:	13 97       	sbiw	r26, 0x03	; 3
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	19 f0       	breq	.+6      	; 0x3204 <free+0xd4>
    31fe:	fd 01       	movw	r30, r26
    3200:	dc 01       	movw	r26, r24
    3202:	f7 cf       	rjmp	.-18     	; 0x31f2 <free+0xc2>
    3204:	8d 91       	ld	r24, X+
    3206:	9c 91       	ld	r25, X
    3208:	11 97       	sbiw	r26, 0x01	; 1
    320a:	9d 01       	movw	r18, r26
    320c:	2e 5f       	subi	r18, 0xFE	; 254
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	82 0f       	add	r24, r18
    3212:	93 1f       	adc	r25, r19
    3214:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <__brkval>
    3218:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <__brkval+0x1>
    321c:	28 17       	cp	r18, r24
    321e:	39 07       	cpc	r19, r25
    3220:	69 f4       	brne	.+26     	; 0x323c <free+0x10c>
    3222:	30 97       	sbiw	r30, 0x00	; 0
    3224:	29 f4       	brne	.+10     	; 0x3230 <free+0x100>
    3226:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <__flp+0x1>
    322a:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <__flp>
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <free+0x104>
    3230:	13 82       	std	Z+3, r1	; 0x03
    3232:	12 82       	std	Z+2, r1	; 0x02
    3234:	b0 93 27 07 	sts	0x0727, r27	; 0x800727 <__brkval+0x1>
    3238:	a0 93 26 07 	sts	0x0726, r26	; 0x800726 <__brkval>
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	08 95       	ret

00003242 <__do_global_dtors>:
    3242:	10 e0       	ldi	r17, 0x00	; 0
    3244:	c4 e5       	ldi	r28, 0x54	; 84
    3246:	d0 e0       	ldi	r29, 0x00	; 0
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <__do_global_dtors+0x10>
    324a:	fe 01       	movw	r30, r28
    324c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__tablejump2__>
    3250:	21 96       	adiw	r28, 0x01	; 1
    3252:	c5 35       	cpi	r28, 0x55	; 85
    3254:	d1 07       	cpc	r29, r17
    3256:	c9 f7       	brne	.-14     	; 0x324a <__do_global_dtors+0x8>
    3258:	f8 94       	cli

0000325a <__stop_program>:
    325a:	ff cf       	rjmp	.-2      	; 0x325a <__stop_program>
