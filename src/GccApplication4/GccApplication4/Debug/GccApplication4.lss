
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000033be  00003452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  0080017e  0080017e  000034d0  2**0
                  ALLOC
  3 .stab         00006414  00000000  00000000  000034d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  000098e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000125c6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012608  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000088  00000000  00000000  00012648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002c80  00000000  00000000  000126d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000aeb  00000000  00000000  00015350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000df9  00000000  00000000  00015e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000160  00000000  00000000  00016c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000149e  00000000  00000000  00016d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d32  00000000  00000000  00018232  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000428  00000000  00000000  00019f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	14 05       	cpc	r17, r4
      6a:	0e 05       	cpc	r16, r14
      6c:	2c 05       	cpc	r18, r12
      6e:	44 09       	sbc	r20, r4
      70:	4b 09       	sbc	r20, r11
      72:	26 05       	cpc	r18, r6
      74:	20 05       	cpc	r18, r0
      76:	1a 05       	cpc	r17, r10
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	b4 0a       	sbc	r11, r20

000000a8 <__ctors_end>:
      a8:	2b 15       	cp	r18, r11

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ee eb       	ldi	r30, 0xBE	; 190
      be:	f3 e3       	ldi	r31, 0x33	; 51
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ae 37       	cpi	r26, 0x7E	; 126
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	ae e7       	ldi	r26, 0x7E	; 126
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	ac 32       	cpi	r26, 0x2C	; 44
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 65 18 	call	0x30ca	; 0x30ca <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <main>
      f6:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	31 81       	ldd	r19, Z+1	; 0x01
     104:	2f 30       	cpi	r18, 0x0F	; 15
     106:	31 05       	cpc	r19, r1
     108:	50 f4       	brcc	.+20     	; 0x11e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x20>
     10a:	82 81       	ldd	r24, Z+2	; 0x02
     10c:	93 81       	ldd	r25, Z+3	; 0x03
     10e:	8f 30       	cpi	r24, 0x0F	; 15
     110:	91 05       	cpc	r25, r1
     112:	50 f0       	brcs	.+20     	; 0x128 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_+0x2a>
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	7e ef       	ldi	r23, 0xFE	; 254
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	96 e4       	ldi	r25, 0x46	; 70
     11c:	08 95       	ret
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	7e ef       	ldi	r23, 0xFE	; 254
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	96 e4       	ldi	r25, 0x46	; 70
     126:	08 95       	ret
     128:	ac 01       	movw	r20, r24
     12a:	44 0f       	add	r20, r20
     12c:	55 1f       	adc	r21, r21
     12e:	84 0f       	add	r24, r20
     130:	95 1f       	adc	r25, r21
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	4a e5       	ldi	r20, 0x5A	; 90
     138:	42 9f       	mul	r20, r18
     13a:	f0 01       	movw	r30, r0
     13c:	43 9f       	mul	r20, r19
     13e:	f0 0d       	add	r31, r0
     140:	11 24       	eor	r1, r1
     142:	8e 0f       	add	r24, r30
     144:	9f 1f       	adc	r25, r31
     146:	fc 01       	movw	r30, r24
     148:	e3 52       	subi	r30, 0x23	; 35
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	60 81       	ld	r22, Z
     14e:	71 81       	ldd	r23, Z+1	; 0x01
     150:	07 2e       	mov	r0, r23
     152:	00 0c       	add	r0, r0
     154:	88 0b       	sbc	r24, r24
     156:	99 0b       	sbc	r25, r25
     158:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     15c:	08 95       	ret

0000015e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     15e:	fc 01       	movw	r30, r24
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	2f 30       	cpi	r18, 0x0F	; 15
     166:	31 05       	cpc	r19, r1
     168:	28 f5       	brcc	.+74     	; 0x1b4 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x56>
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	8f 30       	cpi	r24, 0x0F	; 15
     170:	91 05       	cpc	r25, r1
     172:	28 f1       	brcs	.+74     	; 0x1be <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	7e ef       	ldi	r23, 0xFE	; 254
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	96 e4       	ldi	r25, 0x46	; 70
     17c:	08 95       	ret
     17e:	ac 01       	movw	r20, r24
     180:	44 0f       	add	r20, r20
     182:	55 1f       	adc	r21, r21
     184:	84 0f       	add	r24, r20
     186:	95 1f       	adc	r25, r21
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	4a e5       	ldi	r20, 0x5A	; 90
     18e:	42 9f       	mul	r20, r18
     190:	f0 01       	movw	r30, r0
     192:	43 9f       	mul	r20, r19
     194:	f0 0d       	add	r31, r0
     196:	11 24       	eor	r1, r1
     198:	8e 0f       	add	r24, r30
     19a:	9f 1f       	adc	r25, r31
     19c:	fc 01       	movw	r30, r24
     19e:	e3 52       	subi	r30, 0x23	; 35
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	60 81       	ld	r22, Z
     1a4:	71 81       	ldd	r23, Z+1	; 0x01
     1a6:	07 2e       	mov	r0, r23
     1a8:	00 0c       	add	r0, r0
     1aa:	88 0b       	sbc	r24, r24
     1ac:	99 0b       	sbc	r25, r25
     1ae:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     1b2:	08 95       	ret
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	7e ef       	ldi	r23, 0xFE	; 254
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	96 e4       	ldi	r25, 0x46	; 70
     1bc:	08 95       	ret
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e8 0f       	add	r30, r24
     1c6:	f9 1f       	adc	r31, r25
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	6a e5       	ldi	r22, 0x5A	; 90
     1ce:	62 9f       	mul	r22, r18
     1d0:	a0 01       	movw	r20, r0
     1d2:	63 9f       	mul	r22, r19
     1d4:	50 0d       	add	r21, r0
     1d6:	11 24       	eor	r1, r1
     1d8:	e4 0f       	add	r30, r20
     1da:	f5 1f       	adc	r31, r21
     1dc:	e3 52       	subi	r30, 0x23	; 35
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	45 81       	ldd	r20, Z+5	; 0x05
     1e2:	41 11       	cpse	r20, r1
     1e4:	cc cf       	rjmp	.-104    	; 0x17e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x20>
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	7e ef       	ldi	r23, 0xFE	; 254
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	96 e4       	ldi	r25, 0x46	; 70
     1ee:	08 95       	ret

000001f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 81       	ld	r18, Z
     1f4:	31 81       	ldd	r19, Z+1	; 0x01
     1f6:	2f 30       	cpi	r18, 0x0F	; 15
     1f8:	31 05       	cpc	r19, r1
     1fa:	28 f5       	brcc	.+74     	; 0x246 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x56>
     1fc:	82 81       	ldd	r24, Z+2	; 0x02
     1fe:	93 81       	ldd	r25, Z+3	; 0x03
     200:	8f 30       	cpi	r24, 0x0F	; 15
     202:	91 05       	cpc	r25, r1
     204:	50 f1       	brcs	.+84     	; 0x25a <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x6a>
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	7e ef       	ldi	r23, 0xFE	; 254
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	96 e4       	ldi	r25, 0x46	; 70
     20e:	08 95       	ret
     210:	ac 01       	movw	r20, r24
     212:	44 0f       	add	r20, r20
     214:	55 1f       	adc	r21, r21
     216:	84 0f       	add	r24, r20
     218:	95 1f       	adc	r25, r21
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	4a e5       	ldi	r20, 0x5A	; 90
     220:	42 9f       	mul	r20, r18
     222:	f0 01       	movw	r30, r0
     224:	43 9f       	mul	r20, r19
     226:	f0 0d       	add	r31, r0
     228:	11 24       	eor	r1, r1
     22a:	8e 0f       	add	r24, r30
     22c:	9f 1f       	adc	r25, r31
     22e:	fc 01       	movw	r30, r24
     230:	e3 52       	subi	r30, 0x23	; 35
     232:	fe 4f       	sbci	r31, 0xFE	; 254
     234:	62 81       	ldd	r22, Z+2	; 0x02
     236:	73 81       	ldd	r23, Z+3	; 0x03
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     244:	08 95       	ret
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	7e ef       	ldi	r23, 0xFE	; 254
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	96 e4       	ldi	r25, 0x46	; 70
     24e:	08 95       	ret
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	7e ef       	ldi	r23, 0xFE	; 254
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	96 e4       	ldi	r25, 0x46	; 70
     258:	08 95       	ret
     25a:	fc 01       	movw	r30, r24
     25c:	ee 0f       	add	r30, r30
     25e:	ff 1f       	adc	r31, r31
     260:	e8 0f       	add	r30, r24
     262:	f9 1f       	adc	r31, r25
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	6a e5       	ldi	r22, 0x5A	; 90
     26a:	62 9f       	mul	r22, r18
     26c:	a0 01       	movw	r20, r0
     26e:	63 9f       	mul	r22, r19
     270:	50 0d       	add	r21, r0
     272:	11 24       	eor	r1, r1
     274:	e4 0f       	add	r30, r20
     276:	f5 1f       	adc	r31, r21
     278:	e3 52       	subi	r30, 0x23	; 35
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	45 81       	ldd	r20, Z+5	; 0x05
     27e:	41 11       	cpse	r20, r1
     280:	e7 cf       	rjmp	.-50     	; 0x250 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x60>
     282:	c6 cf       	rjmp	.-116    	; 0x210 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x20>

00000284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>:
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	31 81       	ldd	r19, Z+1	; 0x01
     292:	2f 30       	cpi	r18, 0x0F	; 15
     294:	31 05       	cpc	r19, r1
     296:	08 f0       	brcs	.+2      	; 0x29a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x16>
     298:	50 c0       	rjmp	.+160    	; 0x33a <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xb6>
     29a:	42 81       	ldd	r20, Z+2	; 0x02
     29c:	53 81       	ldd	r21, Z+3	; 0x03
     29e:	4f 30       	cpi	r20, 0x0F	; 15
     2a0:	51 05       	cpc	r21, r1
     2a2:	08 f4       	brcc	.+2      	; 0x2a6 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x22>
     2a4:	59 c0       	rjmp	.+178    	; 0x358 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xd4>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	7e ef       	ldi	r23, 0xFE	; 254
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	96 e4       	ldi	r25, 0x46	; 70
     2ae:	69 c0       	rjmp	.+210    	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     2b0:	fa 01       	movw	r30, r20
     2b2:	ee 0f       	add	r30, r30
     2b4:	ff 1f       	adc	r31, r31
     2b6:	e4 0f       	add	r30, r20
     2b8:	f5 1f       	adc	r31, r21
     2ba:	ee 0f       	add	r30, r30
     2bc:	ff 1f       	adc	r31, r31
     2be:	aa e5       	ldi	r26, 0x5A	; 90
     2c0:	a2 9f       	mul	r26, r18
     2c2:	c0 01       	movw	r24, r0
     2c4:	a3 9f       	mul	r26, r19
     2c6:	90 0d       	add	r25, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	e8 0f       	add	r30, r24
     2cc:	f9 1f       	adc	r31, r25
     2ce:	e3 52       	subi	r30, 0x23	; 35
     2d0:	fe 4f       	sbci	r31, 0xFE	; 254
     2d2:	85 81       	ldd	r24, Z+5	; 0x05
     2d4:	81 11       	cpse	r24, r1
     2d6:	36 c0       	rjmp	.+108    	; 0x344 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xc0>
     2d8:	fb 01       	movw	r30, r22
     2da:	80 81       	ld	r24, Z
     2dc:	91 81       	ldd	r25, Z+1	; 0x01
     2de:	fc 01       	movw	r30, r24
     2e0:	e2 1b       	sub	r30, r18
     2e2:	f3 0b       	sbc	r31, r19
     2e4:	cf 01       	movw	r24, r30
     2e6:	22 f4       	brpl	.+8      	; 0x2f0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x6c>
     2e8:	88 27       	eor	r24, r24
     2ea:	99 27       	eor	r25, r25
     2ec:	8e 1b       	sub	r24, r30
     2ee:	9f 0b       	sbc	r25, r31
     2f0:	fb 01       	movw	r30, r22
     2f2:	22 81       	ldd	r18, Z+2	; 0x02
     2f4:	33 81       	ldd	r19, Z+3	; 0x03
     2f6:	b9 01       	movw	r22, r18
     2f8:	64 1b       	sub	r22, r20
     2fa:	75 0b       	sbc	r23, r21
     2fc:	9b 01       	movw	r18, r22
     2fe:	22 f4       	brpl	.+8      	; 0x308 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x84>
     300:	22 27       	eor	r18, r18
     302:	33 27       	eor	r19, r19
     304:	26 1b       	sub	r18, r22
     306:	37 0b       	sbc	r19, r23
     308:	88 9f       	mul	r24, r24
     30a:	60 01       	movw	r12, r0
     30c:	89 9f       	mul	r24, r25
     30e:	d0 0c       	add	r13, r0
     310:	d0 0c       	add	r13, r0
     312:	11 24       	eor	r1, r1
     314:	22 9f       	mul	r18, r18
     316:	c0 01       	movw	r24, r0
     318:	23 9f       	mul	r18, r19
     31a:	90 0d       	add	r25, r0
     31c:	90 0d       	add	r25, r0
     31e:	11 24       	eor	r1, r1
     320:	c8 0e       	add	r12, r24
     322:	d9 1e       	adc	r13, r25
     324:	0d 2c       	mov	r0, r13
     326:	00 0c       	add	r0, r0
     328:	ee 08       	sbc	r14, r14
     32a:	ff 08       	sbc	r15, r15
     32c:	c7 01       	movw	r24, r14
     32e:	b6 01       	movw	r22, r12
     330:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     334:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <sqrt>
     338:	24 c0       	rjmp	.+72     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	7e ef       	ldi	r23, 0xFE	; 254
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	96 e4       	ldi	r25, 0x46	; 70
     342:	1f c0       	rjmp	.+62     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	7e ef       	ldi	r23, 0xFE	; 254
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	96 e4       	ldi	r25, 0x46	; 70
     34c:	1a c0       	rjmp	.+52     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	7e ef       	ldi	r23, 0xFE	; 254
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	96 e4       	ldi	r25, 0x46	; 70
     356:	15 c0       	rjmp	.+42     	; 0x382 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xfe>
     358:	fa 01       	movw	r30, r20
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	e4 0f       	add	r30, r20
     360:	f5 1f       	adc	r31, r21
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	aa e5       	ldi	r26, 0x5A	; 90
     368:	a2 9f       	mul	r26, r18
     36a:	c0 01       	movw	r24, r0
     36c:	a3 9f       	mul	r26, r19
     36e:	90 0d       	add	r25, r0
     370:	11 24       	eor	r1, r1
     372:	e8 0f       	add	r30, r24
     374:	f9 1f       	adc	r31, r25
     376:	e3 52       	subi	r30, 0x23	; 35
     378:	fe 4f       	sbci	r31, 0xFE	; 254
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	81 11       	cpse	r24, r1
     37e:	e7 cf       	rjmp	.-50     	; 0x34e <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0xca>
     380:	97 cf       	rjmp	.-210    	; 0x2b0 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_+0x2c>
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	08 95       	ret

0000038c <_ZN5Robot11testSensorsEv>:

            this->mainMenu();
        }

        // Displays the data returned from the sensors
        void testSensors()
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	2a 97       	sbiw	r28, 0x0a	; 10
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
        {
            unsigned int	sensors[ 5 ];

            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <read_line_sensors>
     3aa:	8e 01       	movw	r16, r28
     3ac:	0f 5f       	subi	r16, 0xFF	; 255
     3ae:	1f 4f       	sbci	r17, 0xFF	; 255
     3b0:	c1 2c       	mov	r12, r1
     3b2:	d1 2c       	mov	r13, r1
     3b4:	76 01       	movw	r14, r12

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
                {
                    print_long( i );
     3b6:	c7 01       	movw	r24, r14
     3b8:	b6 01       	movw	r22, r12
     3ba:	0e 94 4f 13 	call	0x269e	; 0x269e <print_long>
                    lcd_goto_xy( 0, 1 );
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 72 13 	call	0x26e4	; 0x26e4 <lcd_goto_xy>
                    print_long( sensors[ i ] );
     3c6:	f8 01       	movw	r30, r16
     3c8:	61 91       	ld	r22, Z+
     3ca:	71 91       	ld	r23, Z+
     3cc:	8f 01       	movw	r16, r30
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 4f 13 	call	0x269e	; 0x269e <print_long>

                    delay_ms( 800 );
     3d6:	80 e2       	ldi	r24, 0x20	; 32
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
                    clear();
     3de:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>
     3e2:	ff ef       	ldi	r31, 0xFF	; 255
     3e4:	cf 1a       	sub	r12, r31
     3e6:	df 0a       	sbc	r13, r31
     3e8:	ef 0a       	sbc	r14, r31
     3ea:	ff 0a       	sbc	r15, r31
            while ( true )
            {
                read_line_sensors( sensors, IR_EMITTERS_ON );

                // Display the sensor values
                for ( short i = 0; i < 5; i++ )
     3ec:	85 e0       	ldi	r24, 0x05	; 5
     3ee:	c8 16       	cp	r12, r24
     3f0:	d1 04       	cpc	r13, r1
     3f2:	e1 04       	cpc	r14, r1
     3f4:	f1 04       	cpc	r15, r1
     3f6:	f9 f6       	brne	.-66     	; 0x3b6 <_ZN5Robot11testSensorsEv+0x2a>
                    delay_ms( 800 );
                    clear();
                }

                // Play sound to notify that the next iteration will begin.
                play( ">>a32" );
     3f8:	81 e5       	ldi	r24, 0x51	; 81
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <play>
        // Displays the data returned from the sensors
        void testSensors()
        {
            unsigned int	sensors[ 5 ];

            while ( true )
     400:	cf cf       	rjmp	.-98     	; 0x3a0 <_ZN5Robot11testSensorsEv+0x14>

00000402 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_>:
        }

        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     40a:	fb 01       	movw	r30, r22
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	8f 30       	cpi	r24, 0x0F	; 15
     412:	91 05       	cpc	r25, r1
     414:	08 f0       	brcs	.+2      	; 0x418 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x16>
     416:	4f c0       	rjmp	.+158    	; 0x4b6 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xb4>
     418:	22 81       	ldd	r18, Z+2	; 0x02
     41a:	33 81       	ldd	r19, Z+3	; 0x03
     41c:	2f 30       	cpi	r18, 0x0F	; 15
     41e:	31 05       	cpc	r19, r1
     420:	08 f4       	brcc	.+2      	; 0x424 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x22>
     422:	58 c0       	rjmp	.+176    	; 0x4d4 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xd2>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	7e ef       	ldi	r23, 0xFE	; 254
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	96 e4       	ldi	r25, 0x46	; 70
     42c:	68 c0       	rjmp	.+208    	; 0x4fe <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xfc>

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     42e:	f9 01       	movw	r30, r18
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	e2 0f       	add	r30, r18
     436:	f3 1f       	adc	r31, r19
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	aa e5       	ldi	r26, 0x5A	; 90
     43e:	a8 9f       	mul	r26, r24
     440:	b0 01       	movw	r22, r0
     442:	a9 9f       	mul	r26, r25
     444:	70 0d       	add	r23, r0
     446:	11 24       	eor	r1, r1
     448:	e6 0f       	add	r30, r22
     44a:	f7 1f       	adc	r31, r23
     44c:	e3 52       	subi	r30, 0x23	; 35
     44e:	fe 4f       	sbci	r31, 0xFE	; 254
     450:	65 81       	ldd	r22, Z+5	; 0x05
     452:	61 11       	cpse	r22, r1
     454:	35 c0       	rjmp	.+106    	; 0x4c0 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xbe>
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
     456:	fa 01       	movw	r30, r20
     458:	60 81       	ld	r22, Z
     45a:	71 81       	ldd	r23, Z+1	; 0x01
     45c:	68 1b       	sub	r22, r24
     45e:	79 0b       	sbc	r23, r25
     460:	cb 01       	movw	r24, r22
     462:	99 23       	and	r25, r25
     464:	24 f4       	brge	.+8      	; 0x46e <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x6c>
     466:	88 27       	eor	r24, r24
     468:	99 27       	eor	r25, r25
     46a:	86 1b       	sub	r24, r22
     46c:	97 0b       	sbc	r25, r23
     46e:	fa 01       	movw	r30, r20
     470:	42 81       	ldd	r20, Z+2	; 0x02
     472:	53 81       	ldd	r21, Z+3	; 0x03
     474:	42 1b       	sub	r20, r18
     476:	53 0b       	sbc	r21, r19
     478:	9a 01       	movw	r18, r20
     47a:	22 f4       	brpl	.+8      	; 0x484 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x82>
     47c:	22 27       	eor	r18, r18
     47e:	33 27       	eor	r19, r19
     480:	24 1b       	sub	r18, r20
     482:	35 0b       	sbc	r19, r21
     484:	88 9f       	mul	r24, r24
     486:	60 01       	movw	r12, r0
     488:	89 9f       	mul	r24, r25
     48a:	d0 0c       	add	r13, r0
     48c:	d0 0c       	add	r13, r0
     48e:	11 24       	eor	r1, r1
     490:	22 9f       	mul	r18, r18
     492:	c0 01       	movw	r24, r0
     494:	23 9f       	mul	r18, r19
     496:	90 0d       	add	r25, r0
     498:	90 0d       	add	r25, r0
     49a:	11 24       	eor	r1, r1
     49c:	c8 0e       	add	r12, r24
     49e:	d9 1e       	adc	r13, r25
     4a0:	0d 2c       	mov	r0, r13
     4a2:	00 0c       	add	r0, r0
     4a4:	ee 08       	sbc	r14, r14
     4a6:	ff 08       	sbc	r15, r15
     4a8:	c7 01       	movw	r24, r14
     4aa:	b6 01       	movw	r22, r12
     4ac:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     4b0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <sqrt>
     4b4:	24 c0       	rjmp	.+72     	; 0x4fe <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xfc>
        Point2D getNextPos( const Point2D& goalPos )
        {
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	7e ef       	ldi	r23, 0xFE	; 254
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	96 e4       	ldi	r25, 0x46	; 70
     4be:	1f c0       	rjmp	.+62     	; 0x4fe <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xfc>
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	7e ef       	ldi	r23, 0xFE	; 254
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	96 e4       	ldi	r25, 0x46	; 70
     4c8:	1a c0       	rjmp	.+52     	; 0x4fe <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xfc>
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	7e ef       	ldi	r23, 0xFE	; 254
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	96 e4       	ldi	r25, 0x46	; 70
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
                }

                return result;
     4d2:	15 c0       	rjmp	.+42     	; 0x4fe <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xfc>
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
                        !matrix[ pos.x ][ pos.y ].isObstacle && !matrix[ pos.x ][ pos.y ].isVisited )
     4d4:	f9 01       	movw	r30, r18
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e2 0f       	add	r30, r18
     4dc:	f3 1f       	adc	r31, r19
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	aa e5       	ldi	r26, 0x5A	; 90
     4e4:	a8 9f       	mul	r26, r24
     4e6:	b0 01       	movw	r22, r0
     4e8:	a9 9f       	mul	r26, r25
     4ea:	70 0d       	add	r23, r0
     4ec:	11 24       	eor	r1, r1
     4ee:	e6 0f       	add	r30, r22
     4f0:	f7 1f       	adc	r31, r23
     4f2:	e3 52       	subi	r30, 0x23	; 35
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
            // Define dist lambda
            auto getNextDist = []( const Point2D & pos, const Point2D & goal ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) &&
     4f6:	64 81       	ldd	r22, Z+4	; 0x04
     4f8:	61 11       	cpse	r22, r1
     4fa:	e7 cf       	rjmp	.-50     	; 0x4ca <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0xc8>
     4fc:	98 cf       	rjmp	.-208    	; 0x42e <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E_clES2_S2_+0x2c>
                {
                    result = sqrtf( abs( goal.x - pos.x ) * abs( goal.x - pos.x ) + abs( goal.y - pos.y ) * abs( goal.y - pos.y ) );
                }

                return result;
            };
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	08 95       	ret

00000508 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     508:	fb 01       	movw	r30, r22
     50a:	20 81       	ld	r18, Z
     50c:	31 81       	ldd	r19, Z+1	; 0x01
     50e:	2f 30       	cpi	r18, 0x0F	; 15
     510:	31 05       	cpc	r19, r1
     512:	50 f4       	brcc	.+20     	; 0x528 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x20>
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	93 81       	ldd	r25, Z+3	; 0x03
     518:	8f 30       	cpi	r24, 0x0F	; 15
     51a:	91 05       	cpc	r25, r1
     51c:	50 f0       	brcs	.+20     	; 0x532 <_ZZN5Robot10getNextPosERK7Point2DENKUlS2_S2_E0_clES2_S2_+0x2a>

                // Could not find next pos with getNextDist, try with getDistToStart
                // Define dist lambda
                auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
                {
                    float result = SHRT_MAX;
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	7e ef       	ldi	r23, 0xFE	; 254
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	96 e4       	ldi	r25, 0x46	; 70
     526:	08 95       	ret
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	7e ef       	ldi	r23, 0xFE	; 254
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	96 e4       	ldi	r25, 0x46	; 70
     530:	08 95       	ret

                    if ( Robot::isValidPos( pos ) )
                    {
                        result = matrix[ pos.x ][ pos.y ].distToStart;
     532:	ac 01       	movw	r20, r24
     534:	44 0f       	add	r20, r20
     536:	55 1f       	adc	r21, r21
     538:	84 0f       	add	r24, r20
     53a:	95 1f       	adc	r25, r21
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	4a e5       	ldi	r20, 0x5A	; 90
     542:	42 9f       	mul	r20, r18
     544:	f0 01       	movw	r30, r0
     546:	43 9f       	mul	r20, r19
     548:	f0 0d       	add	r31, r0
     54a:	11 24       	eor	r1, r1
     54c:	8e 0f       	add	r24, r30
     54e:	9f 1f       	adc	r25, r31
     550:	fc 01       	movw	r30, r24
     552:	e3 52       	subi	r30, 0x23	; 35
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	60 81       	ld	r22, Z
     558:	71 81       	ldd	r23, Z+1	; 0x01
     55a:	07 2e       	mov	r0, r23
     55c:	00 0c       	add	r0, r0
     55e:	88 0b       	sbc	r24, r24
     560:	99 0b       	sbc	r25, r25
     562:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
                    }

                    return result;
                };
     566:	08 95       	ret

00000568 <_ZN5Robot14initializeMenuEv>:
            print( ", " );
            print_long( pos.y );
            print( ")" );
        }

        void initializeMenu()
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
        {
            clear();
     572:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>

            while ( !button_is_pressed( BUTTON_B ) )
            {
                if ( button_is_pressed( BUTTON_A ) )
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     576:	0f e0       	ldi	r16, 0x0F	; 15
     578:	10 e0       	ldi	r17, 0x00	; 0

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     57a:	80 e1       	ldi	r24, 0x10	; 16
     57c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <button_is_pressed>
     580:	81 11       	cpse	r24, r1
     582:	45 c0       	rjmp	.+138    	; 0x60e <_ZN5Robot14initializeMenuEv+0xa6>
            {
                if ( button_is_pressed( BUTTON_A ) )
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <button_is_pressed>
     58a:	88 23       	and	r24, r24
     58c:	41 f0       	breq	.+16     	; 0x59e <_ZN5Robot14initializeMenuEv+0x36>
                {
                    finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	9e 81       	ldd	r25, Y+6	; 0x06
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	b8 01       	movw	r22, r16
     596:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     59a:	9e 83       	std	Y+6, r25	; 0x06
     59c:	8d 83       	std	Y+5, r24	; 0x05
                }

                if ( button_is_pressed( BUTTON_C ) )
     59e:	80 e2       	ldi	r24, 0x20	; 32
     5a0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <button_is_pressed>
     5a4:	88 23       	and	r24, r24
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <_ZN5Robot14initializeMenuEv+0x50>
                {
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     5a8:	8f 81       	ldd	r24, Y+7	; 0x07
     5aa:	98 85       	ldd	r25, Y+8	; 0x08
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	b8 01       	movw	r22, r16
     5b0:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     5b4:	98 87       	std	Y+8, r25	; 0x08
     5b6:	8f 83       	std	Y+7, r24	; 0x07
            }
        }

        void printPos( const Point2D& pos )
        {
            clear();
     5b8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>
            print( "(" );
     5bc:	87 e5       	ldi	r24, 0x57	; 87
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
            print_long( pos.x );
     5c4:	6d 81       	ldd	r22, Y+5	; 0x05
     5c6:	7e 81       	ldd	r23, Y+6	; 0x06
     5c8:	07 2e       	mov	r0, r23
     5ca:	00 0c       	add	r0, r0
     5cc:	88 0b       	sbc	r24, r24
     5ce:	99 0b       	sbc	r25, r25
     5d0:	0e 94 4f 13 	call	0x269e	; 0x269e <print_long>
            print( ", " );
     5d4:	89 e5       	ldi	r24, 0x59	; 89
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
            print_long( pos.y );
     5dc:	6f 81       	ldd	r22, Y+7	; 0x07
     5de:	78 85       	ldd	r23, Y+8	; 0x08
     5e0:	07 2e       	mov	r0, r23
     5e2:	00 0c       	add	r0, r0
     5e4:	88 0b       	sbc	r24, r24
     5e6:	99 0b       	sbc	r25, r25
     5e8:	0e 94 4f 13 	call	0x269e	; 0x269e <print_long>
            print( ")" );
     5ec:	8c e5       	ldi	r24, 0x5C	; 92
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
                    finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
                }

                printPos( finishPos );

                lcd_goto_xy( 0, 1 );
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <lcd_goto_xy>
                print( " A B C " );
     5fc:	8e e5       	ldi	r24, 0x5E	; 94
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>

                delay_ms( 100 );
     604:	84 e6       	ldi	r24, 0x64	; 100
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>

        void initializeMenu()
        {
            clear();

            while ( !button_is_pressed( BUTTON_B ) )
     60c:	b6 cf       	rjmp	.-148    	; 0x57a <_ZN5Robot14initializeMenuEv+0x12>

                delay_ms( 100 );
            }

            // Always wait for the button to be released so that 3pi doesn't start moving until your hand is away from it.
            wait_for_button_release( BUTTON_B );
     60e:	80 e1       	ldi	r24, 0x10	; 16
     610:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait_for_button_release>
            delay_ms( 1000 );
     614:	88 ee       	ldi	r24, 0xE8	; 232
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
            clear();
     61c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>
        }
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <_ZN5Robot8mainMenuEv>:

        //Main program menu
        void mainMenu()
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	af 97       	sbiw	r28, 0x2f	; 47
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	1c 01       	movw	r2, r24
        {
            clear();
     640:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>
            print( "A - Test" );
     644:	86 e6       	ldi	r24, 0x66	; 102
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
            lcd_goto_xy( 0, 1 );
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 72 13 	call	0x26e4	; 0x26e4 <lcd_goto_xy>
            print( "B - Main" );
     654:	8f e6       	ldi	r24, 0x6F	; 111
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
            unsigned int	sensorsArr[ 5 ];
            markerValue = 0;

            for ( short i = 0; i < 10; i++ )
            {
                read_line_sensors( sensorsArr, IR_EMITTERS_ON );
     65c:	9e 01       	movw	r18, r28
     65e:	2f 5f       	subi	r18, 0xFF	; 255
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	38 8b       	std	Y+16, r19	; 0x10
     664:	2f 87       	std	Y+15, r18	; 0x0f
                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                if ( isValidPos( currPos ) )
                {
                    float	currDist = getDist( currPos, to );
     666:	3f 85       	ldd	r19, Y+15	; 0x0f
     668:	3d 8b       	std	Y+21, r19	; 0x15
     66a:	48 89       	ldd	r20, Y+16	; 0x10
     66c:	4e 8b       	std	Y+22, r20	; 0x16
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= LAPS_COUNT )
            {
                stepToGoal( finishPos );
     66e:	c1 01       	movw	r24, r2
     670:	05 96       	adiw	r24, 0x05	; 5
     672:	9d a7       	std	Y+45, r25	; 0x2d
     674:	8c a7       	std	Y+44, r24	; 0x2c
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
     676:	1e a2       	std	Y+38, r1	; 0x26
     678:	9e ef       	ldi	r25, 0xFE	; 254
     67a:	9f a3       	std	Y+39, r25	; 0x27
     67c:	af ef       	ldi	r26, 0xFF	; 255
     67e:	a8 a7       	std	Y+40, r26	; 0x28
     680:	b6 e4       	ldi	r27, 0x46	; 70
     682:	b9 a7       	std	Y+41, r27	; 0x29

            bool isSelectedProgram = false;

            while ( !isSelectedProgram )
            {
                if ( button_is_pressed( BUTTON_A ) )
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <button_is_pressed>
     68a:	88 23       	and	r24, r24
     68c:	31 f0       	breq	.+12     	; 0x69a <_ZN5Robot8mainMenuEv+0x70>
                {
                    wait_for_button_release( BUTTON_A ); //wait for the button to be released before run the program
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait_for_button_release>
                    testSensors();
     694:	c1 01       	movw	r24, r2
     696:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN5Robot11testSensorsEv>
                }

                if ( button_is_pressed( BUTTON_B ) )
     69a:	80 e1       	ldi	r24, 0x10	; 16
     69c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <button_is_pressed>
     6a0:	88 23       	and	r24, r24
     6a2:	81 f3       	breq	.-32     	; 0x684 <_ZN5Robot8mainMenuEv+0x5a>
                {
                    wait_for_button_release( BUTTON_B );//wait for the button to be released before run the program
     6a4:	80 e1       	ldi	r24, 0x10	; 16
     6a6:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait_for_button_release>
                    // mainRobotLogic the initialization menu
                    this->initializeMenu();
     6aa:	c1 01       	movw	r24, r2
     6ac:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN5Robot14initializeMenuEv>

        // Reads line sensors a couple times and then sets markerValue as the average output of the 3 middle sensors
        void calibrateMarkerValue()
        {
            unsigned int	sensorsArr[ 5 ];
            markerValue = 0;
     6b0:	f1 01       	movw	r30, r2
     6b2:	16 86       	std	Z+14, r1	; 0x0e
     6b4:	15 86       	std	Z+13, r1	; 0x0d
     6b6:	2a e0       	ldi	r18, 0x0A	; 10
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	3f a7       	std	Y+47, r19	; 0x2f
     6bc:	2e a7       	std	Y+46, r18	; 0x2e
     6be:	0a e0       	ldi	r16, 0x0A	; 10
     6c0:	10 e0       	ldi	r17, 0x00	; 0

            for ( short i = 0; i < 10; i++ )
            {
                read_line_sensors( sensorsArr, IR_EMITTERS_ON );
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <read_line_sensors>
                markerValue += ( sensorsArr[1] + sensorsArr[2] + sensorsArr[3] );
     6cc:	d1 01       	movw	r26, r2
     6ce:	1d 96       	adiw	r26, 0x0d	; 13
     6d0:	2d 91       	ld	r18, X+
     6d2:	3c 91       	ld	r19, X
     6d4:	1e 97       	sbiw	r26, 0x0e	; 14
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	28 0f       	add	r18, r24
     6dc:	39 1f       	adc	r19, r25
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	9e 81       	ldd	r25, Y+6	; 0x06
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	2f 81       	ldd	r18, Y+7	; 0x07
     6e8:	38 85       	ldd	r19, Y+8	; 0x08
     6ea:	28 0f       	add	r18, r24
     6ec:	39 1f       	adc	r19, r25
     6ee:	1e 96       	adiw	r26, 0x0e	; 14
     6f0:	3c 93       	st	X, r19
     6f2:	2e 93       	st	-X, r18
     6f4:	1d 97       	sbiw	r26, 0x0d	; 13
     6f6:	01 50       	subi	r16, 0x01	; 1
     6f8:	11 09       	sbc	r17, r1
        void calibrateMarkerValue()
        {
            unsigned int	sensorsArr[ 5 ];
            markerValue = 0;

            for ( short i = 0; i < 10; i++ )
     6fa:	19 f7       	brne	.-58     	; 0x6c2 <_ZN5Robot8mainMenuEv+0x98>
     6fc:	1f a7       	std	Y+47, r17	; 0x2f
     6fe:	0e a7       	std	Y+46, r16	; 0x2e
                read_line_sensors( sensorsArr, IR_EMITTERS_ON );
                markerValue += ( sensorsArr[1] + sensorsArr[2] + sensorsArr[3] );
            }

            markerValue /= 30;
            markerValue += MARKER_EPS;
     700:	a9 e8       	ldi	r26, 0x89	; 137
     702:	b8 e8       	ldi	r27, 0x88	; 136
     704:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__umulhisi3>
     708:	92 95       	swap	r25
     70a:	82 95       	swap	r24
     70c:	8f 70       	andi	r24, 0x0F	; 15
     70e:	89 27       	eor	r24, r25
     710:	9f 70       	andi	r25, 0x0F	; 15
     712:	89 27       	eor	r24, r25
     714:	bc 01       	movw	r22, r24
     716:	60 5b       	subi	r22, 0xB0	; 176
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	f1 01       	movw	r30, r2
     71c:	76 87       	std	Z+14, r23	; 0x0e
     71e:	65 87       	std	Z+13, r22	; 0x0d

            print_long( markerValue );
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 4f 13 	call	0x269e	; 0x269e <print_long>
            delay_ms( 1000 );
     728:	88 ee       	ldi	r24, 0xE8	; 232
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
            clear();
     730:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>
        }

        // Main logic function
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
     734:	d1 01       	movw	r26, r2
     736:	2d 91       	ld	r18, X+
     738:	3c 91       	ld	r19, X
     73a:	11 97       	sbiw	r26, 0x01	; 1
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	8d 91       	ld	r24, X+
     740:	9c 91       	ld	r25, X
     742:	13 97       	sbiw	r26, 0x03	; 3
     744:	ac 01       	movw	r20, r24
     746:	44 0f       	add	r20, r20
     748:	55 1f       	adc	r21, r21
     74a:	84 0f       	add	r24, r20
     74c:	95 1f       	adc	r25, r21
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	4a e5       	ldi	r20, 0x5A	; 90
     754:	42 9f       	mul	r20, r18
     756:	f0 01       	movw	r30, r0
     758:	43 9f       	mul	r20, r19
     75a:	f0 0d       	add	r31, r0
     75c:	11 24       	eor	r1, r1
     75e:	8e 0f       	add	r24, r30
     760:	9f 1f       	adc	r25, r31
     762:	fc 01       	movw	r30, r24
     764:	e3 52       	subi	r30, 0x23	; 35
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	11 82       	std	Z+1, r1	; 0x01
     76a:	10 82       	st	Z, r1
            matrix[ position.x ][ position.y ].isVisited	= true;
     76c:	2d 91       	ld	r18, X+
     76e:	3c 91       	ld	r19, X
     770:	11 97       	sbiw	r26, 0x01	; 1
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8d 91       	ld	r24, X+
     776:	9c 91       	ld	r25, X
     778:	13 97       	sbiw	r26, 0x03	; 3
     77a:	bc 01       	movw	r22, r24
     77c:	66 0f       	add	r22, r22
     77e:	77 1f       	adc	r23, r23
     780:	86 0f       	add	r24, r22
     782:	97 1f       	adc	r25, r23
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	42 9f       	mul	r20, r18
     78a:	f0 01       	movw	r30, r0
     78c:	43 9f       	mul	r20, r19
     78e:	f0 0d       	add	r31, r0
     790:	11 24       	eor	r1, r1
     792:	8e 0f       	add	r24, r30
     794:	9f 1f       	adc	r25, r31
     796:	fc 01       	movw	r30, r24
     798:	e3 52       	subi	r30, 0x23	; 35
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	85 83       	std	Z+5, r24	; 0x05

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     7a0:	19 8e       	std	Y+25, r1	; 0x19
     7a2:	1b 8e       	std	Y+27, r1	; 0x1b
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     7a4:	f1 01       	movw	r30, r2
     7a6:	20 81       	ld	r18, Z
     7a8:	31 81       	ldd	r19, Z+1	; 0x01
     7aa:	85 81       	ldd	r24, Z+5	; 0x05
     7ac:	96 81       	ldd	r25, Z+6	; 0x06
     7ae:	28 17       	cp	r18, r24
     7b0:	39 07       	cpc	r19, r25
     7b2:	41 f4       	brne	.+16     	; 0x7c4 <_ZN5Robot8mainMenuEv+0x19a>
        void mainRobotLogic()
        {
            matrix[ position.x ][ position.y ].distToStart	= 0;
            matrix[ position.x ][ position.y ].isVisited	= true;

            while ( ( position != finishPos ) && lap <= LAPS_COUNT )
     7b4:	22 81       	ldd	r18, Z+2	; 0x02
     7b6:	33 81       	ldd	r19, Z+3	; 0x03
     7b8:	87 81       	ldd	r24, Z+7	; 0x07
     7ba:	90 85       	ldd	r25, Z+8	; 0x08
     7bc:	28 17       	cp	r18, r24
     7be:	39 07       	cpc	r19, r25
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <_ZN5Robot8mainMenuEv+0x19a>
     7c2:	60 cf       	rjmp	.-320    	; 0x684 <_ZN5Robot8mainMenuEv+0x5a>
     7c4:	d1 01       	movw	r26, r2
     7c6:	19 96       	adiw	r26, 0x09	; 9
     7c8:	8d 91       	ld	r24, X+
     7ca:	9c 91       	ld	r25, X
     7cc:	1a 97       	sbiw	r26, 0x0a	; 10
     7ce:	03 97       	sbiw	r24, 0x03	; 3
     7d0:	0c f0       	brlt	.+2      	; 0x7d4 <_ZN5Robot8mainMenuEv+0x1aa>
     7d2:	58 cf       	rjmp	.-336    	; 0x684 <_ZN5Robot8mainMenuEv+0x5a>
            {
                stepToGoal( finishPos );
     7d4:	68 94       	set
     7d6:	44 24       	eor	r4, r4
     7d8:	43 f8       	bld	r4, 3
     7da:	51 2c       	mov	r5, r1
                {
                    nextPos = this->getNextPos( goalPos );
                }
                else
                {
                    nextPos = this->getNearestToFinishAdjacent( position );
     7dc:	2f 8a       	std	Y+23, r2	; 0x17
     7de:	38 8e       	std	Y+24, r3	; 0x18

            while ( count < 8 )
            {
                count++;

                if ( lap < LAPS_COUNT )
     7e0:	f1 01       	movw	r30, r2
     7e2:	81 85       	ldd	r24, Z+9	; 0x09
     7e4:	92 85       	ldd	r25, Z+10	; 0x0a
     7e6:	02 97       	sbiw	r24, 0x02	; 2
     7e8:	0c f0       	brlt	.+2      	; 0x7ec <_ZN5Robot8mainMenuEv+0x1c2>
     7ea:	b0 c0       	rjmp	.+352    	; 0x94c <__stack+0x4d>
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
     7f0:	42 81       	ldd	r20, Z+2	; 0x02
     7f2:	53 81       	ldd	r21, Z+3	; 0x03
     7f4:	2a a3       	std	Y+34, r18	; 0x22
     7f6:	3b a3       	std	Y+35, r19	; 0x23
     7f8:	4c a3       	std	Y+36, r20	; 0x24
     7fa:	5d a3       	std	Y+37, r21	; 0x25
            short	pos			= ( short )orientation;
     7fc:	84 80       	ldd	r8, Z+4	; 0x04
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
     7fe:	1e a1       	ldd	r17, Y+38	; 0x26
     800:	bf a1       	ldd	r27, Y+39	; 0x27
     802:	b9 8b       	std	Y+17, r27	; 0x11
     804:	e8 a5       	ldd	r30, Y+40	; 0x28
     806:	ed 8f       	std	Y+29, r30	; 0x1d
     808:	f9 a5       	ldd	r31, Y+41	; 0x29
     80a:	fe 8f       	std	Y+30, r31	; 0x1e
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     80c:	89 8d       	ldd	r24, Y+25	; 0x19
     80e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     810:	91 2c       	mov	r9, r1
     812:	5b a6       	std	Y+43, r5	; 0x2b
     814:	4a a6       	std	Y+42, r4	; 0x2a
     816:	51 2e       	mov	r5, r17
     818:	74 01       	movw	r14, r8
     81a:	8c 01       	movw	r16, r24
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     81c:	88 0d       	add	r24, r8
     81e:	99 1d       	adc	r25, r9
     820:	87 70       	andi	r24, 0x07	; 7
     822:	90 78       	andi	r25, 0x80	; 128
     824:	99 23       	and	r25, r25
     826:	24 f4       	brge	.+8      	; 0x830 <_ZN5Robot8mainMenuEv+0x206>
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	88 6f       	ori	r24, 0xF8	; 248
     82c:	9f 6f       	ori	r25, 0xFF	; 255
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	fc 01       	movw	r30, r24
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ec 5e       	subi	r30, 0xEC	; 236
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	d1 01       	movw	r26, r2
     83c:	2d 91       	ld	r18, X+
     83e:	3c 91       	ld	r19, X
     840:	11 97       	sbiw	r26, 0x01	; 1
     842:	40 81       	ld	r20, Z
     844:	51 81       	ldd	r21, Z+1	; 0x01
     846:	24 0f       	add	r18, r20
     848:	35 1f       	adc	r19, r21
     84a:	3a 83       	std	Y+2, r19	; 0x02
     84c:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	ad 90       	ld	r10, X+
     852:	bc 90       	ld	r11, X
     854:	13 97       	sbiw	r26, 0x03	; 3
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	fc 01       	movw	r30, r24
     85c:	ec 5d       	subi	r30, 0xDC	; 220
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	8a 0d       	add	r24, r10
     866:	9b 1d       	adc	r25, r11
     868:	9c 83       	std	Y+4, r25	; 0x04
     86a:	8b 83       	std	Y+3, r24	; 0x03
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     86c:	2f 30       	cpi	r18, 0x0F	; 15
     86e:	31 05       	cpc	r19, r1
     870:	80 f4       	brcc	.+32     	; 0x892 <_ZN5Robot8mainMenuEv+0x268>
     872:	0f 97       	sbiw	r24, 0x0f	; 15
     874:	08 f4       	brcc	.+2      	; 0x878 <_ZN5Robot8mainMenuEv+0x24e>
     876:	a6 c4       	rjmp	.+2380   	; 0x11c4 <__stack+0x8c5>
     878:	0c c0       	rjmp	.+24     	; 0x892 <_ZN5Robot8mainMenuEv+0x268>
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
                        minPos	= currPos;
     87a:	29 81       	ldd	r18, Y+1	; 0x01
     87c:	3a 81       	ldd	r19, Y+2	; 0x02
     87e:	4b 81       	ldd	r20, Y+3	; 0x03
     880:	5c 81       	ldd	r21, Y+4	; 0x04
     882:	2a a3       	std	Y+34, r18	; 0x22
     884:	3b a3       	std	Y+35, r19	; 0x23
     886:	4c a3       	std	Y+36, r20	; 0x24
     888:	5d a3       	std	Y+37, r21	; 0x25
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
     88a:	56 2c       	mov	r5, r6
     88c:	79 8a       	std	Y+17, r7	; 0x11
     88e:	cd 8e       	std	Y+29, r12	; 0x1d
     890:	de 8e       	std	Y+30, r13	; 0x1e
     892:	c8 01       	movw	r24, r16
     894:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     896:	88 30       	cpi	r24, 0x08	; 8
     898:	91 05       	cpc	r25, r1
     89a:	09 f0       	breq	.+2      	; 0x89e <_ZN5Robot8mainMenuEv+0x274>
     89c:	bd cf       	rjmp	.-134    	; 0x818 <_ZN5Robot8mainMenuEv+0x1ee>
     89e:	4a a4       	ldd	r4, Y+42	; 0x2a
     8a0:	5b a4       	ldd	r5, Y+43	; 0x2b
                        minPos	= currPos;
                    }
                }
            }

            doPrint = false;
     8a2:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <doPrint>
     8a6:	6a a0       	ldd	r6, Y+34	; 0x22
     8a8:	7b a0       	ldd	r7, Y+35	; 0x23
     8aa:	cc a0       	ldd	r12, Y+36	; 0x24
     8ac:	dd a0       	ldd	r13, Y+37	; 0x25
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     8ae:	d1 01       	movw	r26, r2
     8b0:	8d 90       	ld	r8, X+
     8b2:	9c 90       	ld	r9, X
     8b4:	86 14       	cp	r8, r6
     8b6:	97 04       	cpc	r9, r7
     8b8:	09 f0       	breq	.+2      	; 0x8bc <_ZN5Robot8mainMenuEv+0x292>
     8ba:	d8 c4       	rjmp	.+2480   	; 0x126c <__stack+0x96d>
     8bc:	ac 14       	cp	r10, r12
     8be:	bd 04       	cpc	r11, r13
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <_ZN5Robot8mainMenuEv+0x29a>
     8c2:	94 c4       	rjmp	.+2344   	; 0x11ec <__stack+0x8ed>

                return result;
            };

            // Get next pos using the lambda from above
            Point2D nextPos( this->getClosestAdjacent( position, goalPos, getNextDist ) );
     8c4:	34 01       	movw	r6, r8
     8c6:	a2 c0       	rjmp	.+324    	; 0xa0c <__stack+0x10d>
     8c8:	8c 01       	movw	r16, r24

            for ( short i = 0; i < 8; i++ )
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     8ca:	8e 0d       	add	r24, r14
     8cc:	9f 1d       	adc	r25, r15
     8ce:	87 70       	andi	r24, 0x07	; 7
     8d0:	90 78       	andi	r25, 0x80	; 128
     8d2:	99 23       	and	r25, r25
     8d4:	24 f4       	brge	.+8      	; 0x8de <_ZN5Robot8mainMenuEv+0x2b4>
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	88 6f       	ori	r24, 0xF8	; 248
     8da:	9f 6f       	ori	r25, 0xFF	; 255
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	fc 01       	movw	r30, r24
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ec 5e       	subi	r30, 0xEC	; 236
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	20 81       	ld	r18, Z
     8ea:	31 81       	ldd	r19, Z+1	; 0x01
     8ec:	28 0d       	add	r18, r8
     8ee:	39 1d       	adc	r19, r9
     8f0:	3a 83       	std	Y+2, r19	; 0x02
     8f2:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	fc 01       	movw	r30, r24
     8fa:	ec 5d       	subi	r30, 0xDC	; 220
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	8a 0d       	add	r24, r10
     904:	9b 1d       	adc	r25, r11
     906:	9c 83       	std	Y+4, r25	; 0x04
     908:	8b 83       	std	Y+3, r24	; 0x03
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     90a:	2f 30       	cpi	r18, 0x0F	; 15
     90c:	31 05       	cpc	r19, r1
     90e:	80 f4       	brcc	.+32     	; 0x930 <__stack+0x31>
     910:	0f 97       	sbiw	r24, 0x0f	; 15
     912:	08 f4       	brcc	.+2      	; 0x916 <__stack+0x17>
     914:	83 c4       	rjmp	.+2310   	; 0x121c <__stack+0x91d>
     916:	0c c0       	rjmp	.+24     	; 0x930 <__stack+0x31>
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
                        minPos	= currPos;
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	3a 81       	ldd	r19, Y+2	; 0x02
     91c:	4b 81       	ldd	r20, Y+3	; 0x03
     91e:	5c 81       	ldd	r21, Y+4	; 0x04
     920:	2e 8f       	std	Y+30, r18	; 0x1e
     922:	3f 8f       	std	Y+31, r19	; 0x1f
     924:	48 a3       	std	Y+32, r20	; 0x20
     926:	59 a3       	std	Y+33, r21	; 0x21
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
     928:	56 2c       	mov	r5, r6
     92a:	37 2c       	mov	r3, r7
     92c:	c9 8a       	std	Y+17, r12	; 0x11
     92e:	dd 8e       	std	Y+29, r13	; 0x1d
     930:	c8 01       	movw	r24, r16
     932:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     934:	88 30       	cpi	r24, 0x08	; 8
     936:	91 05       	cpc	r25, r1
     938:	39 f6       	brne	.-114    	; 0x8c8 <_ZN5Robot8mainMenuEv+0x29e>
     93a:	4a a0       	ldd	r4, Y+34	; 0x22
     93c:	5b a0       	ldd	r5, Y+35	; 0x23
     93e:	2a a4       	ldd	r2, Y+42	; 0x2a
     940:	3b a4       	ldd	r3, Y+43	; 0x2b
     942:	6e 8c       	ldd	r6, Y+30	; 0x1e
     944:	7f 8c       	ldd	r7, Y+31	; 0x1f
     946:	c8 a0       	ldd	r12, Y+32	; 0x20
     948:	d9 a0       	ldd	r13, Y+33	; 0x21
     94a:	59 c0       	rjmp	.+178    	; 0x9fe <__stack+0xff>
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	a2 81       	ldd	r26, Z+2	; 0x02
     952:	b3 81       	ldd	r27, Z+3	; 0x03
     954:	89 8b       	std	Y+17, r24	; 0x11
     956:	9a 8b       	std	Y+18, r25	; 0x12
     958:	ab 8b       	std	Y+19, r26	; 0x13
     95a:	bc 8b       	std	Y+20, r27	; 0x14
            short	pos			= ( short )orientation;
     95c:	f1 01       	movw	r30, r2
     95e:	a4 80       	ldd	r10, Z+4	; 0x04
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
     960:	9e a0       	ldd	r9, Y+38	; 0x26
     962:	8f a0       	ldd	r8, Y+39	; 0x27
     964:	78 a4       	ldd	r7, Y+40	; 0x28
     966:	69 a4       	ldd	r6, Y+41	; 0x29
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     968:	89 8d       	ldd	r24, Y+25	; 0x19
     96a:	9b 8d       	ldd	r25, Y+27	; 0x1b
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     96c:	b1 2c       	mov	r11, r1
     96e:	6c 01       	movw	r12, r24
     970:	8a 0d       	add	r24, r10
     972:	9b 1d       	adc	r25, r11
     974:	87 70       	andi	r24, 0x07	; 7
     976:	90 78       	andi	r25, 0x80	; 128
     978:	99 23       	and	r25, r25
     97a:	24 f4       	brge	.+8      	; 0x984 <__stack+0x85>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	88 6f       	ori	r24, 0xF8	; 248
     980:	9f 6f       	ori	r25, 0xFF	; 255
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	fc 01       	movw	r30, r24
     986:	ee 0f       	add	r30, r30
     988:	ff 1f       	adc	r31, r31
     98a:	ec 5e       	subi	r30, 0xEC	; 236
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	d1 01       	movw	r26, r2
     990:	4d 91       	ld	r20, X+
     992:	5c 91       	ld	r21, X
     994:	11 97       	sbiw	r26, 0x01	; 1
     996:	20 81       	ld	r18, Z
     998:	31 81       	ldd	r19, Z+1	; 0x01
     99a:	24 0f       	add	r18, r20
     99c:	35 1f       	adc	r19, r21
     99e:	3a 83       	std	Y+2, r19	; 0x02
     9a0:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	fc 01       	movw	r30, r24
     9a8:	ec 5d       	subi	r30, 0xDC	; 220
     9aa:	fe 4f       	sbci	r31, 0xFE	; 254
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	4d 91       	ld	r20, X+
     9b0:	5c 91       	ld	r21, X
     9b2:	13 97       	sbiw	r26, 0x03	; 3
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	84 0f       	add	r24, r20
     9ba:	95 1f       	adc	r25, r21
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     9c0:	2f 30       	cpi	r18, 0x0F	; 15
     9c2:	31 05       	cpc	r19, r1
     9c4:	80 f4       	brcc	.+32     	; 0x9e6 <__stack+0xe7>
     9c6:	0f 97       	sbiw	r24, 0x0f	; 15
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	3c c4       	rjmp	.+2168   	; 0x1244 <__stack+0x945>
     9cc:	0c c0       	rjmp	.+24     	; 0x9e6 <__stack+0xe7>
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
                        minPos	= currPos;
     9ce:	29 81       	ldd	r18, Y+1	; 0x01
     9d0:	3a 81       	ldd	r19, Y+2	; 0x02
     9d2:	4b 81       	ldd	r20, Y+3	; 0x03
     9d4:	5c 81       	ldd	r21, Y+4	; 0x04
     9d6:	29 8b       	std	Y+17, r18	; 0x11
     9d8:	3a 8b       	std	Y+18, r19	; 0x12
     9da:	4b 8b       	std	Y+19, r20	; 0x13
     9dc:	5c 8b       	std	Y+20, r21	; 0x14
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
     9de:	9e 2c       	mov	r9, r14
     9e0:	8f 2c       	mov	r8, r15
     9e2:	70 2e       	mov	r7, r16
     9e4:	61 2e       	mov	r6, r17
     9e6:	c6 01       	movw	r24, r12
     9e8:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     9ea:	88 30       	cpi	r24, 0x08	; 8
     9ec:	91 05       	cpc	r25, r1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	be cf       	rjmp	.-132    	; 0x96e <__stack+0x6f>
                        minPos	= currPos;
                    }
                }
            }

            doPrint = false;
     9f2:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <doPrint>
     9f6:	69 88       	ldd	r6, Y+17	; 0x11
     9f8:	7a 88       	ldd	r7, Y+18	; 0x12
     9fa:	cb 88       	ldd	r12, Y+19	; 0x13
     9fc:	dc 88       	ldd	r13, Y+20	; 0x14
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     9fe:	d1 01       	movw	r26, r2
     a00:	8d 91       	ld	r24, X+
     a02:	9c 91       	ld	r25, X
     a04:	86 15       	cp	r24, r6
     a06:	97 05       	cpc	r25, r7
     a08:	09 f0       	breq	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	30 c4       	rjmp	.+2144   	; 0x126c <__stack+0x96d>
     a0c:	f1 01       	movw	r30, r2
     a0e:	82 81       	ldd	r24, Z+2	; 0x02
     a10:	93 81       	ldd	r25, Z+3	; 0x03
     a12:	8c 15       	cp	r24, r12
     a14:	9d 05       	cpc	r25, r13
     a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x11b>
     a18:	29 c4       	rjmp	.+2130   	; 0x126c <__stack+0x96d>
     a1a:	0f c1       	rjmp	.+542    	; 0xc3a <__stack+0x33b>

                case EOrientation::East:
                    return 0;

                case EOrientation::NorthEast:
                    return 45;
     a1c:	0f 2e       	mov	r0, r31
     a1e:	fd e2       	ldi	r31, 0x2D	; 45
     a20:	af 2e       	mov	r10, r31
     a22:	b1 2c       	mov	r11, r1
     a24:	f0 2d       	mov	r31, r0
     a26:	1a c0       	rjmp	.+52     	; 0xa5c <__stack+0x15d>

                case EOrientation::North:
                    return 90;
     a28:	0f 2e       	mov	r0, r31
     a2a:	fa e5       	ldi	r31, 0x5A	; 90
     a2c:	af 2e       	mov	r10, r31
     a2e:	b1 2c       	mov	r11, r1
     a30:	f0 2d       	mov	r31, r0
     a32:	14 c0       	rjmp	.+40     	; 0xa5c <__stack+0x15d>

                case EOrientation::NorthWest:
                    return 135;
     a34:	0f 2e       	mov	r0, r31
     a36:	f7 e8       	ldi	r31, 0x87	; 135
     a38:	af 2e       	mov	r10, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	b1 2c       	mov	r11, r1
     a3e:	0e c0       	rjmp	.+28     	; 0xa5c <__stack+0x15d>

                case EOrientation::West:
                    return 180;
     a40:	0f 2e       	mov	r0, r31
     a42:	f4 eb       	ldi	r31, 0xB4	; 180
     a44:	af 2e       	mov	r10, r31
     a46:	f0 2d       	mov	r31, r0
     a48:	b1 2c       	mov	r11, r1
     a4a:	08 c0       	rjmp	.+16     	; 0xa5c <__stack+0x15d>

                case EOrientation::SouthWest:
                default:
                    return 225;
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f1 ee       	ldi	r31, 0xE1	; 225
     a50:	af 2e       	mov	r10, r31
     a52:	f0 2d       	mov	r31, r0
     a54:	b1 2c       	mov	r11, r1
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <__stack+0x15d>

                case EOrientation::SouthEast:
                    return -45;

                case EOrientation::East:
                    return 0;
     a58:	a9 8c       	ldd	r10, Y+25	; 0x19
     a5a:	bb 8c       	ldd	r11, Y+27	; 0x1b
        }

        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
     a5c:	d1 01       	movw	r26, r2
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	11 97       	sbiw	r26, 0x01	; 1
     a64:	83 01       	movw	r16, r6
     a66:	08 1b       	sub	r16, r24
     a68:	19 0b       	sbc	r17, r25
            short	y			= -startPoint.y + endPoint.y;
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	8d 91       	ld	r24, X+
     a6e:	9c 91       	ld	r25, X
     a70:	13 97       	sbiw	r26, 0x03	; 3
     a72:	f6 01       	movw	r30, r12
     a74:	e8 1b       	sub	r30, r24
     a76:	f9 0b       	sbc	r31, r25
     a78:	cf 01       	movw	r24, r30
            int		angle		= 0;
            int		direction	= 0;
            int		robotAngle	= getRobotAngle();

            if ( x == 0 )
     a7a:	01 15       	cp	r16, r1
     a7c:	11 05       	cpc	r17, r1
     a7e:	61 f4       	brne	.+24     	; 0xa98 <__stack+0x199>
            {
                if ( y > 0 )
     a80:	1e 16       	cp	r1, r30
     a82:	1f 06       	cpc	r1, r31
     a84:	4c f1       	brlt	.+82     	; 0xad8 <__stack+0x1d9>
                {
                    angle = 90;
                }
                else if ( y < 0 )
     a86:	ff 23       	and	r31, r31
     a88:	6c f5       	brge	.+90     	; 0xae4 <__stack+0x1e5>
                {
                    angle = -90;
     a8a:	0f 2e       	mov	r0, r31
     a8c:	f6 ea       	ldi	r31, 0xA6	; 166
     a8e:	ef 2e       	mov	r14, r31
     a90:	f0 2d       	mov	r31, r0
     a92:	ff 24       	eor	r15, r15
     a94:	fa 94       	dec	r15
     a96:	28 c0       	rjmp	.+80     	; 0xae8 <__stack+0x1e9>
                }
            }
            else
            {
                angle = ( int )( atan( y / x ) * 180 / PI );
     a98:	b8 01       	movw	r22, r16
     a9a:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     a9e:	07 2e       	mov	r0, r23
     aa0:	00 0c       	add	r0, r0
     aa2:	88 0b       	sbc	r24, r24
     aa4:	99 0b       	sbc	r25, r25
     aa6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     aaa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <atan>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	44 e3       	ldi	r20, 0x34	; 52
     ab4:	53 e4       	ldi	r21, 0x43	; 67
     ab6:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsf3>
     aba:	2b ed       	ldi	r18, 0xDB	; 219
     abc:	3f e0       	ldi	r19, 0x0F	; 15
     abe:	49 e4       	ldi	r20, 0x49	; 73
     ac0:	50 e4       	ldi	r21, 0x40	; 64
     ac2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__divsf3>
     ac6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__fixsfsi>
     aca:	7b 01       	movw	r14, r22

                if ( x < 0 )
     acc:	11 23       	and	r17, r17
     ace:	64 f4       	brge	.+24     	; 0xae8 <__stack+0x1e9>
                {
                    angle += 180;
     ad0:	f4 eb       	ldi	r31, 0xB4	; 180
     ad2:	ef 0e       	add	r14, r31
     ad4:	f1 1c       	adc	r15, r1
     ad6:	08 c0       	rjmp	.+16     	; 0xae8 <__stack+0x1e9>

            if ( x == 0 )
            {
                if ( y > 0 )
                {
                    angle = 90;
     ad8:	0f 2e       	mov	r0, r31
     ada:	fa e5       	ldi	r31, 0x5A	; 90
     adc:	ef 2e       	mov	r14, r31
     ade:	f1 2c       	mov	r15, r1
     ae0:	f0 2d       	mov	r31, r0
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <__stack+0x1e9>
        //1,2,3,4 clockwise, -1,-2,-3,-4 counterclockwise
        void setDirection( Point2D startPoint, Point2D endPoint )
        {
            short	x			= -startPoint.x + endPoint.x;
            short	y			= -startPoint.y + endPoint.y;
            int		angle		= 0;
     ae4:	e9 8c       	ldd	r14, Y+25	; 0x19
     ae6:	fb 8c       	ldd	r15, Y+27	; 0x1b
                {
                    angle += 180;
                }
            }

            direction = ( int )( round( ( robotAngle - angle ) / 45 ) );
     ae8:	c5 01       	movw	r24, r10
     aea:	8e 19       	sub	r24, r14
     aec:	9f 09       	sbc	r25, r15
     aee:	6d e2       	ldi	r22, 0x2D	; 45
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     af6:	07 2e       	mov	r0, r23
     af8:	00 0c       	add	r0, r0
     afa:	88 0b       	sbc	r24, r24
     afc:	99 0b       	sbc	r25, r25
     afe:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
     b02:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <round>
     b06:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__fixsfsi>
     b0a:	8b 01       	movw	r16, r22

            if ( direction > 4 )
     b0c:	65 30       	cpi	r22, 0x05	; 5
     b0e:	71 05       	cpc	r23, r1
     b10:	14 f0       	brlt	.+4      	; 0xb16 <__stack+0x217>
            {
                direction = -8 + direction;
     b12:	08 50       	subi	r16, 0x08	; 8
     b14:	11 09       	sbc	r17, r1
            }

            if ( direction < -4 )
     b16:	0c 3f       	cpi	r16, 0xFC	; 252
     b18:	2f ef       	ldi	r18, 0xFF	; 255
     b1a:	12 07       	cpc	r17, r18
     b1c:	14 f4       	brge	.+4      	; 0xb22 <__stack+0x223>
            {
                direction = 8 + direction;
     b1e:	08 5f       	subi	r16, 0xF8	; 248
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }

        void setDeviceOrientation( int angle )
        {
            switch ( angle )
     b22:	3d e2       	ldi	r19, 0x2D	; 45
     b24:	e3 16       	cp	r14, r19
     b26:	f1 04       	cpc	r15, r1
     b28:	81 f1       	breq	.+96     	; 0xb8a <__stack+0x28b>
     b2a:	74 f4       	brge	.+28     	; 0xb48 <__stack+0x249>
     b2c:	53 ed       	ldi	r21, 0xD3	; 211
     b2e:	e5 16       	cp	r14, r21
     b30:	5f ef       	ldi	r21, 0xFF	; 255
     b32:	f5 06       	cpc	r15, r21
     b34:	09 f1       	breq	.+66     	; 0xb78 <__stack+0x279>
     b36:	e1 14       	cp	r14, r1
     b38:	f1 04       	cpc	r15, r1
     b3a:	11 f1       	breq	.+68     	; 0xb80 <__stack+0x281>
     b3c:	66 ea       	ldi	r22, 0xA6	; 166
     b3e:	e6 16       	cp	r14, r22
     b40:	6f ef       	ldi	r22, 0xFF	; 255
     b42:	f6 06       	cpc	r15, r22
     b44:	b1 f5       	brne	.+108    	; 0xbb2 <__stack+0x2b3>
     b46:	13 c0       	rjmp	.+38     	; 0xb6e <__stack+0x26f>
     b48:	87 e8       	ldi	r24, 0x87	; 135
     b4a:	e8 16       	cp	r14, r24
     b4c:	f1 04       	cpc	r15, r1
     b4e:	29 f1       	breq	.+74     	; 0xb9a <__stack+0x29b>
     b50:	2c f4       	brge	.+10     	; 0xb5c <__stack+0x25d>
     b52:	aa e5       	ldi	r26, 0x5A	; 90
     b54:	ea 16       	cp	r14, r26
     b56:	f1 04       	cpc	r15, r1
     b58:	e1 f0       	breq	.+56     	; 0xb92 <__stack+0x293>
     b5a:	2b c0       	rjmp	.+86     	; 0xbb2 <__stack+0x2b3>
     b5c:	b4 eb       	ldi	r27, 0xB4	; 180
     b5e:	eb 16       	cp	r14, r27
     b60:	f1 04       	cpc	r15, r1
     b62:	f9 f0       	breq	.+62     	; 0xba2 <__stack+0x2a3>
     b64:	e1 ee       	ldi	r30, 0xE1	; 225
     b66:	ee 16       	cp	r14, r30
     b68:	f1 04       	cpc	r15, r1
     b6a:	01 f1       	breq	.+64     	; 0xbac <__stack+0x2ad>
     b6c:	22 c0       	rjmp	.+68     	; 0xbb2 <__stack+0x2b3>
            {
                case -90:
                    orientation = EOrientation::South;
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	d1 01       	movw	r26, r2
     b72:	14 96       	adiw	r26, 0x04	; 4
     b74:	8c 93       	st	X, r24
     b76:	1d c0       	rjmp	.+58     	; 0xbb2 <__stack+0x2b3>
                    break;

                case -45:
                    orientation = EOrientation::SouthEast;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	f1 01       	movw	r30, r2
     b7c:	84 83       	std	Z+4, r24	; 0x04
     b7e:	19 c0       	rjmp	.+50     	; 0xbb2 <__stack+0x2b3>
                    break;

                case 0:
                    orientation = EOrientation::East;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	d1 01       	movw	r26, r2
     b84:	14 96       	adiw	r26, 0x04	; 4
     b86:	8c 93       	st	X, r24
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <__stack+0x2b3>
                    break;

                case 45:
                    orientation = EOrientation::NorthEast;
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	f1 01       	movw	r30, r2
     b8e:	24 83       	std	Z+4, r18	; 0x04
     b90:	10 c0       	rjmp	.+32     	; 0xbb2 <__stack+0x2b3>
                    break;

                case 90:
                    orientation = EOrientation::North;
     b92:	d1 01       	movw	r26, r2
     b94:	14 96       	adiw	r26, 0x04	; 4
     b96:	1c 92       	st	X, r1
     b98:	0c c0       	rjmp	.+24     	; 0xbb2 <__stack+0x2b3>
                    break;

                case 135:
                    orientation = EOrientation::NorthWest;
     b9a:	27 e0       	ldi	r18, 0x07	; 7
     b9c:	f1 01       	movw	r30, r2
     b9e:	24 83       	std	Z+4, r18	; 0x04
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <__stack+0x2b3>
                    break;

                case 180:
                    orientation = EOrientation::West;
     ba2:	86 e0       	ldi	r24, 0x06	; 6
     ba4:	d1 01       	movw	r26, r2
     ba6:	14 96       	adiw	r26, 0x04	; 4
     ba8:	8c 93       	st	X, r24
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <__stack+0x2b3>
                    break;

                case 225:
                    orientation = EOrientation::SouthWest;
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	f1 01       	movw	r30, r2
     bb0:	84 83       	std	Z+4, r24	; 0x04
            //print_long( angle );
            //delay_ms( 1000 );

            setDeviceOrientation( angle );

            if ( direction < 0 )
     bb2:	11 23       	and	r17, r17
     bb4:	ec f4       	brge	.+58     	; 0xbf0 <__stack+0x2f1>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     bb6:	6a e2       	ldi	r22, 0x2A	; 42
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	86 ed       	ldi	r24, 0xD6	; 214
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
     bbe:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>

            delay_ms( 200 * turns );
     bc2:	c8 01       	movw	r24, r16
     bc4:	99 23       	and	r25, r25
     bc6:	24 f4       	brge	.+8      	; 0xbd0 <__stack+0x2d1>
     bc8:	88 27       	eor	r24, r24
     bca:	99 27       	eor	r25, r25
     bcc:	80 1b       	sub	r24, r16
     bce:	91 0b       	sbc	r25, r17
     bd0:	48 ec       	ldi	r20, 0xC8	; 200
     bd2:	9c 01       	movw	r18, r24
     bd4:	42 9f       	mul	r20, r18
     bd6:	c0 01       	movw	r24, r0
     bd8:	43 9f       	mul	r20, r19
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>

            set_motors( 0, 0 );
     be2:	69 8d       	ldd	r22, Y+25	; 0x19
     be4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     be6:	86 2f       	mov	r24, r22
     be8:	97 2f       	mov	r25, r23
     bea:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
     bee:	1f c0       	rjmp	.+62     	; 0xc2e <__stack+0x32f>
            if ( direction < 0 )
            {
                // turn left
                turnHalfLeft( abs( direction ) );
            }
            else if ( direction > 0 )
     bf0:	10 16       	cp	r1, r16
     bf2:	11 06       	cpc	r1, r17
     bf4:	e4 f4       	brge	.+56     	; 0xc2e <__stack+0x32f>
            }
        }
    protected:
        void makeTurn( short leftSpeed, short rightSpeed, short turns )
        {
            set_motors( leftSpeed, rightSpeed );
     bf6:	66 ed       	ldi	r22, 0xD6	; 214
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	8a e2       	ldi	r24, 0x2A	; 42
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>

            delay_ms( 200 * turns );
     c02:	c8 01       	movw	r24, r16
     c04:	99 23       	and	r25, r25
     c06:	24 f4       	brge	.+8      	; 0xc10 <__stack+0x311>
     c08:	88 27       	eor	r24, r24
     c0a:	99 27       	eor	r25, r25
     c0c:	80 1b       	sub	r24, r16
     c0e:	91 0b       	sbc	r25, r17
     c10:	e8 ec       	ldi	r30, 0xC8	; 200
     c12:	dc 01       	movw	r26, r24
     c14:	ea 9f       	mul	r30, r26
     c16:	c0 01       	movw	r24, r0
     c18:	eb 9f       	mul	r30, r27
     c1a:	90 0d       	add	r25, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>

            set_motors( 0, 0 );
     c22:	69 8d       	ldd	r22, Y+25	; 0x19
     c24:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c26:	86 2f       	mov	r24, r22
     c28:	97 2f       	mov	r25, r23
     c2a:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
            {
                // turn right
                turnHalfRight( abs( direction ) );
            }

            set_motors( 0, 0 );
     c2e:	69 8d       	ldd	r22, Y+25	; 0x19
     c30:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c32:	86 2f       	mov	r24, r22
     c34:	97 2f       	mov	r25, r23
     c36:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
        }

        bool isDirectionTraversable()
        {
            unsigned int	sensorsArr[ 5 ];
            read_line_sensors( sensorsArr, IR_EMITTERS_ON );
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	8d 89       	ldd	r24, Y+21	; 0x15
     c3e:	9e 89       	ldd	r25, Y+22	; 0x16
     c40:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <read_line_sensors>

            if ( sensorsArr[ 1 ] > OBSTACLE_VALUE || sensorsArr[ 2 ] > OBSTACLE_VALUE || sensorsArr[ 3 ] > OBSTACLE_VALUE )
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	89 37       	cpi	r24, 0x79	; 121
     c4a:	95 40       	sbci	r25, 0x05	; 5
     c4c:	50 f4       	brcc	.+20     	; 0xc62 <__stack+0x363>
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	89 37       	cpi	r24, 0x79	; 121
     c54:	95 40       	sbci	r25, 0x05	; 5
     c56:	28 f4       	brcc	.+10     	; 0xc62 <__stack+0x363>
     c58:	8f 81       	ldd	r24, Y+7	; 0x07
     c5a:	98 85       	ldd	r25, Y+8	; 0x08
                    setDirection( position, nextPos );
                }

                // TODO: Check isObstacle or maybe isVisited

                if ( isDirectionTraversable() )
     c5c:	89 37       	cpi	r24, 0x79	; 121
     c5e:	95 40       	sbci	r25, 0x05	; 5
     c60:	c8 f0       	brcs	.+50     	; 0xc94 <__stack+0x395>
                {
                    return nextPos;
                }
                else
                {
                    matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;
     c62:	96 01       	movw	r18, r12
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	2c 0d       	add	r18, r12
     c6a:	3d 1d       	adc	r19, r13
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	4a e5       	ldi	r20, 0x5A	; 90
     c72:	46 9d       	mul	r20, r6
     c74:	c0 01       	movw	r24, r0
     c76:	47 9d       	mul	r20, r7
     c78:	90 0d       	add	r25, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	82 0f       	add	r24, r18
     c7e:	93 1f       	adc	r25, r19
     c80:	fc 01       	movw	r30, r24
     c82:	e3 52       	subi	r30, 0x23	; 35
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	44 83       	std	Z+4, r20	; 0x04
     c8a:	51 e0       	ldi	r21, 0x01	; 1
     c8c:	45 1a       	sub	r4, r21
     c8e:	51 08       	sbc	r5, r1
        {
            //EOrientation	backwardDirection = GetBackwardDirection();
            Point2D	nextPos( -1, -1 );
            int		count = 0;

            while ( count < 8 )
     c90:	09 f0       	breq	.+2      	; 0xc94 <__stack+0x395>
     c92:	a6 cd       	rjmp	.-1204   	; 0x7e0 <_ZN5Robot8mainMenuEv+0x1b6>
        }


        void stepToGoal( const Point2D& goalPos )
        {
            Point2D nextPos = nextStepToFinish( goalPos );
     c94:	7c 86       	std	Y+12, r7	; 0x0c
     c96:	6b 86       	std	Y+11, r6	; 0x0b
     c98:	de 86       	std	Y+14, r13	; 0x0e
     c9a:	cd 86       	std	Y+13, r12	; 0x0d

            //printPos( nextPos );
            //delay_ms( 1000 );

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     c9c:	43 01       	movw	r8, r6
     c9e:	56 01       	movw	r10, r12
     ca0:	c6 01       	movw	r24, r12
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	c8 0e       	add	r12, r24
     ca8:	d9 1e       	adc	r13, r25
     caa:	cc 0c       	add	r12, r12
     cac:	dd 1c       	adc	r13, r13
     cae:	2a e5       	ldi	r18, 0x5A	; 90
     cb0:	26 9d       	mul	r18, r6
     cb2:	c0 01       	movw	r24, r0
     cb4:	27 9d       	mul	r18, r7
     cb6:	90 0d       	add	r25, r0
     cb8:	11 24       	eor	r1, r1
     cba:	8c 0d       	add	r24, r12
     cbc:	9d 1d       	adc	r25, r13
     cbe:	fc 01       	movw	r30, r24
     cc0:	e3 52       	subi	r30, 0x23	; 35
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	85 81       	ldd	r24, Z+5	; 0x05
     cc6:	81 11       	cpse	r24, r1
     cc8:	b2 c0       	rjmp	.+356    	; 0xe2e <__stack+0x52f>
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
     cca:	cb 84       	ldd	r12, Y+11	; 0x0b
     ccc:	dc 84       	ldd	r13, Y+12	; 0x0c
     cce:	ed 84       	ldd	r14, Y+13	; 0x0d
     cd0:	fe 84       	ldd	r15, Y+14	; 0x0e
            short	pos			= ( short )orientation;
     cd2:	d1 01       	movw	r26, r2
     cd4:	14 96       	adiw	r26, 0x04	; 4
     cd6:	6c 90       	ld	r6, X
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
     cd8:	19 8a       	std	Y+17, r1	; 0x11
     cda:	be ef       	ldi	r27, 0xFE	; 254
     cdc:	bf 8b       	std	Y+23, r27	; 0x17
     cde:	ef ef       	ldi	r30, 0xFF	; 255
     ce0:	e8 8f       	std	Y+24, r30	; 0x18
     ce2:	f6 e4       	ldi	r31, 0x46	; 70
     ce4:	fd 8f       	std	Y+29, r31	; 0x1d
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     ce6:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     ce8:	71 2c       	mov	r7, r1
     cea:	3f 8e       	std	Y+31, r3	; 0x1f
     cec:	2e 8e       	std	Y+30, r2	; 0x1e
     cee:	8c 01       	movw	r16, r24
     cf0:	86 0d       	add	r24, r6
     cf2:	97 1d       	adc	r25, r7
     cf4:	87 70       	andi	r24, 0x07	; 7
     cf6:	90 78       	andi	r25, 0x80	; 128
     cf8:	99 23       	and	r25, r25
     cfa:	24 f4       	brge	.+8      	; 0xd04 <__stack+0x405>
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	88 6f       	ori	r24, 0xF8	; 248
     d00:	9f 6f       	ori	r25, 0xFF	; 255
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	fc 01       	movw	r30, r24
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ec 5e       	subi	r30, 0xEC	; 236
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	20 81       	ld	r18, Z
     d10:	31 81       	ldd	r19, Z+1	; 0x01
     d12:	28 0d       	add	r18, r8
     d14:	39 1d       	adc	r19, r9
     d16:	3a 83       	std	Y+2, r19	; 0x02
     d18:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	fc 01       	movw	r30, r24
     d20:	ec 5d       	subi	r30, 0xDC	; 220
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	8a 0d       	add	r24, r10
     d2a:	9b 1d       	adc	r25, r11
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
     d30:	2f 30       	cpi	r18, 0x0F	; 15
     d32:	31 05       	cpc	r19, r1
     d34:	60 f4       	brcc	.+24     	; 0xd4e <__stack+0x44f>
     d36:	0f 97       	sbiw	r24, 0x0f	; 15
     d38:	08 f4       	brcc	.+2      	; 0xd3c <__stack+0x43d>
     d3a:	b4 c2       	rjmp	.+1384   	; 0x12a4 <__stack+0x9a5>
     d3c:	08 c0       	rjmp	.+16     	; 0xd4e <__stack+0x44f>
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
                        minPos	= currPos;
     d3e:	c9 80       	ldd	r12, Y+1	; 0x01
     d40:	da 80       	ldd	r13, Y+2	; 0x02
     d42:	eb 80       	ldd	r14, Y+3	; 0x03
     d44:	fc 80       	ldd	r15, Y+4	; 0x04
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
     d46:	29 8a       	std	Y+17, r2	; 0x11
     d48:	3f 8a       	std	Y+23, r3	; 0x17
     d4a:	48 8e       	std	Y+24, r4	; 0x18
     d4c:	5d 8e       	std	Y+29, r5	; 0x1d
     d4e:	c8 01       	movw	r24, r16
     d50:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     d52:	88 30       	cpi	r24, 0x08	; 8
     d54:	91 05       	cpc	r25, r1
     d56:	59 f6       	brne	.-106    	; 0xcee <__stack+0x3ef>
     d58:	2e 8c       	ldd	r2, Y+30	; 0x1e
     d5a:	3f 8c       	ldd	r3, Y+31	; 0x1f
                        minPos	= currPos;
                    }
                }
            }

            doPrint = false;
     d5c:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <doPrint>

            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     d60:	95 01       	movw	r18, r10
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	2a 0d       	add	r18, r10
     d68:	3b 1d       	adc	r19, r11
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	6a e5       	ldi	r22, 0x5A	; 90
     d70:	68 9d       	mul	r22, r8
     d72:	c0 01       	movw	r24, r0
     d74:	69 9d       	mul	r22, r9
     d76:	90 0d       	add	r25, r0
     d78:	11 24       	eor	r1, r1
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	fc 01       	movw	r30, r24
     d80:	e3 52       	subi	r30, 0x23	; 35
     d82:	fe 4f       	sbci	r31, 0xFE	; 254
     d84:	40 81       	ld	r20, Z
     d86:	51 81       	ldd	r21, Z+1	; 0x01
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     d88:	97 01       	movw	r18, r14
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	2e 0d       	add	r18, r14
     d90:	3f 1d       	adc	r19, r15
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	6c 9d       	mul	r22, r12
     d98:	c0 01       	movw	r24, r0
     d9a:	6d 9d       	mul	r22, r13
     d9c:	90 0d       	add	r25, r0
     d9e:	11 24       	eor	r1, r1
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	fc 01       	movw	r30, r24
     da6:	e3 52       	subi	r30, 0x23	; 35
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     dae:	8c 14       	cp	r8, r12
     db0:	9d 04       	cpc	r9, r13
     db2:	31 f0       	breq	.+12     	; 0xdc0 <__stack+0x4c1>
     db4:	ae 14       	cp	r10, r14
     db6:	bf 04       	cpc	r11, r15
     db8:	49 f4       	brne	.+18     	; 0xdcc <__stack+0x4cd>
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
            {
                distance = 2;
     dba:	22 e0       	ldi	r18, 0x02	; 2
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	0b c0       	rjmp	.+22     	; 0xdd6 <__stack+0x4d7>

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
            }
            else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     dc0:	ae 14       	cp	r10, r14
     dc2:	bf 04       	cpc	r11, r15
     dc4:	31 f0       	breq	.+12     	; 0xdd2 <__stack+0x4d3>
            {
                distance = 2;
     dc6:	22 e0       	ldi	r18, 0x02	; 2
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <__stack+0x4d7>
        {
            short distance = 0;

            if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
            {
                distance = 3;
     dcc:	23 e0       	ldi	r18, 0x03	; 3
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <__stack+0x4d7>
        }

        // Returns the distance between two adjacent positions
        short getDistance( Point2D prevPos, Point2D nextPos )
        {
            short distance = 0;
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
            if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
            {
                // Update distToStart of nextPos based on the distToStart to the closest to the start adj pos.
                Point2D	closestToStartAdj( this->getNearestToStartAdjacent( nextPos ) );
                short	savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
                short	currDist	= matrix[ closestToStartAdj.x ][ closestToStartAdj.y ].distToStart + getDistance( closestToStartAdj, nextPos );
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19

                if ( savedDist > currDist )
     dda:	84 17       	cp	r24, r20
     ddc:	95 07       	cpc	r25, r21
     dde:	a4 f4       	brge	.+40     	; 0xe08 <__stack+0x509>
                {
                    matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     de0:	a5 01       	movw	r20, r10
     de2:	44 0f       	add	r20, r20
     de4:	55 1f       	adc	r21, r21
     de6:	4a 0d       	add	r20, r10
     de8:	5b 1d       	adc	r21, r11
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	6a e5       	ldi	r22, 0x5A	; 90
     df0:	68 9d       	mul	r22, r8
     df2:	90 01       	movw	r18, r0
     df4:	69 9d       	mul	r22, r9
     df6:	30 0d       	add	r19, r0
     df8:	11 24       	eor	r1, r1
     dfa:	24 0f       	add	r18, r20
     dfc:	35 1f       	adc	r19, r21
     dfe:	f9 01       	movw	r30, r18
     e00:	e3 52       	subi	r30, 0x23	; 35
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
                }

                matrix[nextPos.x][nextPos.y].isVisited = true;
     e08:	c5 01       	movw	r24, r10
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	a8 0e       	add	r10, r24
     e10:	b9 1e       	adc	r11, r25
     e12:	aa 0c       	add	r10, r10
     e14:	bb 1c       	adc	r11, r11
     e16:	8a e5       	ldi	r24, 0x5A	; 90
     e18:	88 9d       	mul	r24, r8
     e1a:	f0 01       	movw	r30, r0
     e1c:	89 9d       	mul	r24, r9
     e1e:	f0 0d       	add	r31, r0
     e20:	11 24       	eor	r1, r1
     e22:	ea 0d       	add	r30, r10
     e24:	fb 1d       	adc	r31, r11
     e26:	e3 52       	subi	r30, 0x23	; 35
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	85 83       	std	Z+5, r24	; 0x05
            return x == other.x && y == other.y;
        }

        bool operator!=( const Point2D& other ) const
        {
            return x != other.x || y != other.y;
     e2e:	d1 01       	movw	r26, r2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	15 96       	adiw	r26, 0x05	; 5
     e38:	8d 91       	ld	r24, X+
     e3a:	9c 91       	ld	r25, X
     e3c:	16 97       	sbiw	r26, 0x06	; 6
     e3e:	28 17       	cp	r18, r24
     e40:	39 07       	cpc	r19, r25
     e42:	61 f4       	brne	.+24     	; 0xe5c <__stack+0x55d>

                matrix[nextPos.x][nextPos.y].isVisited = true;
            }

            // Move until stepping on the goal position
            if ( position != goalPos )
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	2d 91       	ld	r18, X+
     e48:	3c 91       	ld	r19, X
     e4a:	13 97       	sbiw	r26, 0x03	; 3
     e4c:	17 96       	adiw	r26, 0x07	; 7
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	18 97       	sbiw	r26, 0x08	; 8
     e54:	28 17       	cp	r18, r24
     e56:	39 07       	cpc	r19, r25
     e58:	09 f4       	brne	.+2      	; 0xe5c <__stack+0x55d>
     e5a:	65 c0       	rjmp	.+202    	; 0xf26 <__stack+0x627>
            {
                position = nextPos;
     e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e60:	ad 85       	ldd	r26, Y+13	; 0x0d
     e62:	be 85       	ldd	r27, Y+14	; 0x0e
     e64:	f1 01       	movw	r30, r2
     e66:	80 83       	st	Z, r24
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	a2 83       	std	Z+2, r26	; 0x02
     e6c:	b3 83       	std	Z+3, r27	; 0x03
            makeTurn( 42, -42, turns );
        }

        void moveForward()
        {
            set_motors( 19, 19 );
     e6e:	63 e1       	ldi	r22, 0x13	; 19
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	83 e1       	ldi	r24, 0x13	; 19
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
        }

        bool isOnMarker()
        {
            unsigned int	sensors[ 5 ];
            read_line_sensors( sensors, IR_EMITTERS_ON );
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	8d 89       	ldd	r24, Y+21	; 0x15
     e7e:	9e 89       	ldd	r25, Y+22	; 0x16
     e80:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <read_line_sensors>

            if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	89 37       	cpi	r24, 0x79	; 121
     e8a:	f5 e0       	ldi	r31, 0x05	; 5
     e8c:	9f 07       	cpc	r25, r31
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <__stack+0x593>
     e90:	1e c2       	rjmp	.+1084   	; 0x12ce <__stack+0x9cf>
     e92:	2d 81       	ldd	r18, Y+5	; 0x05
     e94:	3e 81       	ldd	r19, Y+6	; 0x06
     e96:	29 37       	cpi	r18, 0x79	; 121
     e98:	45 e0       	ldi	r20, 0x05	; 5
     e9a:	34 07       	cpc	r19, r20
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <__stack+0x5a1>
     e9e:	17 c2       	rjmp	.+1070   	; 0x12ce <__stack+0x9cf>
     ea0:	4f 81       	ldd	r20, Y+7	; 0x07
     ea2:	58 85       	ldd	r21, Y+8	; 0x08
     ea4:	49 37       	cpi	r20, 0x79	; 121
     ea6:	65 e0       	ldi	r22, 0x05	; 5
     ea8:	56 07       	cpc	r21, r22
     eaa:	08 f0       	brcs	.+2      	; 0xeae <__stack+0x5af>
     eac:	10 c2       	rjmp	.+1056   	; 0x12ce <__stack+0x9cf>
            {
                return true; // do not return true here?? To DO
            }
            else if ( sensors[1] > markerValue || sensors[2] > markerValue || sensors[3] > markerValue ) // there is marker
     eae:	d1 01       	movw	r26, r2
     eb0:	1d 96       	adiw	r26, 0x0d	; 13
     eb2:	6d 91       	ld	r22, X+
     eb4:	7c 91       	ld	r23, X
     eb6:	1e 97       	sbiw	r26, 0x0e	; 14
     eb8:	68 17       	cp	r22, r24
     eba:	79 07       	cpc	r23, r25
     ebc:	30 f0       	brcs	.+12     	; 0xeca <__stack+0x5cb>
     ebe:	62 17       	cp	r22, r18
     ec0:	73 07       	cpc	r23, r19
     ec2:	18 f0       	brcs	.+6      	; 0xeca <__stack+0x5cb>
     ec4:	64 17       	cp	r22, r20
     ec6:	75 07       	cpc	r23, r21
     ec8:	c0 f6       	brcc	.-80     	; 0xe7a <__stack+0x57b>
            {
                currentOffset = sensors[1] - sensors[3];
     eca:	84 1b       	sub	r24, r20
     ecc:	95 0b       	sbc	r25, r21
     ece:	f1 01       	movw	r30, r2
     ed0:	94 87       	std	Z+12, r25	; 0x0c
     ed2:	83 87       	std	Z+11, r24	; 0x0b
     ed4:	fc c1       	rjmp	.+1016   	; 0x12ce <__stack+0x9cf>

            play( ">>a32" );

            if ( abs( currentOffset ) >= 20 )
            {
                if ( currentOffset < 0 )
     ed6:	33 23       	and	r19, r19
     ed8:	5c f4       	brge	.+22     	; 0xef0 <__stack+0x5f1>
                {
                    set_motors( 19 + ( short )( abs( currentOffset ) / 15 ) - 1, 19 );
     eda:	6f e0       	ldi	r22, 0x0F	; 15
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     ee2:	cb 01       	movw	r24, r22
     ee4:	63 e1       	ldi	r22, 0x13	; 19
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	42 96       	adiw	r24, 0x12	; 18
     eea:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <__stack+0x613>
                }
                else
                {
                    set_motors( 19, 19 + ( short )( abs( currentOffset ) / 15 ) - 1 );
     ef0:	6f e0       	ldi	r22, 0x0F	; 15
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     ef8:	6e 5e       	subi	r22, 0xEE	; 238
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	83 e1       	ldi	r24, 0x13	; 19
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <__stack+0x613>
                //clear();
                //print_long( ( short )( abs( currentOffset ) / 10 ) - 1 );
            }
            else
            {
                set_motors( 19, 19 );
     f06:	63 e1       	ldi	r22, 0x13	; 19
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	83 e1       	ldi	r24, 0x13	; 19
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
            }

            delay_ms( 900 );
     f12:	84 e8       	ldi	r24, 0x84	; 132
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
            set_motors( 0, 0 );
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
            , y ( inY )
        {}

        bool operator==( const Point2D& other ) const
        {
            return x == other.x && y == other.y;
     f26:	d1 01       	movw	r26, r2
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	11 97       	sbiw	r26, 0x01	; 1
     f2e:	15 96       	adiw	r26, 0x05	; 5
     f30:	2d 91       	ld	r18, X+
     f32:	3c 91       	ld	r19, X
     f34:	16 97       	sbiw	r26, 0x06	; 6
     f36:	82 17       	cp	r24, r18
     f38:	93 07       	cpc	r25, r19
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__stack+0x63f>
     f3c:	33 cc       	rjmp	.-1946   	; 0x7a4 <_ZN5Robot8mainMenuEv+0x17a>
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	4d 91       	ld	r20, X+
     f42:	5c 91       	ld	r21, X
     f44:	13 97       	sbiw	r26, 0x03	; 3
     f46:	17 96       	adiw	r26, 0x07	; 7
     f48:	2d 91       	ld	r18, X+
     f4a:	3c 91       	ld	r19, X
     f4c:	18 97       	sbiw	r26, 0x08	; 8
     f4e:	42 17       	cp	r20, r18
     f50:	53 07       	cpc	r21, r19
     f52:	09 f0       	breq	.+2      	; 0xf56 <__stack+0x657>
     f54:	27 cc       	rjmp	.-1970   	; 0x7a4 <_ZN5Robot8mainMenuEv+0x17a>
     f56:	ce c1       	rjmp	.+924    	; 0x12f4 <__stack+0x9f5>

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
            {
                Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

                if ( currCell.distToFinish > dist - currCell.distToStart )
     f58:	29 8d       	ldd	r18, Y+25	; 0x19
     f5a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     f5c:	28 1b       	sub	r18, r24
     f5e:	39 0b       	sbc	r19, r25
     f60:	f6 01       	movw	r30, r12
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	ec 0d       	add	r30, r12
     f68:	fd 1d       	adc	r31, r13
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ba e5       	ldi	r27, 0x5A	; 90
     f70:	b4 9d       	mul	r27, r4
     f72:	c0 01       	movw	r24, r0
     f74:	b5 9d       	mul	r27, r5
     f76:	90 0d       	add	r25, r0
     f78:	11 24       	eor	r1, r1
     f7a:	e8 0f       	add	r30, r24
     f7c:	f9 1f       	adc	r31, r25
     f7e:	e3 52       	subi	r30, 0x23	; 35
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	94 f4       	brge	.+36     	; 0xfb0 <__stack+0x6b1>
                {
                    currCell.distToFinish = dist - currCell.distToStart;
     f8c:	f6 01       	movw	r30, r12
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ec 0d       	add	r30, r12
     f94:	fd 1d       	adc	r31, r13
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	b4 9d       	mul	r27, r4
     f9c:	c0 01       	movw	r24, r0
     f9e:	b5 9d       	mul	r27, r5
     fa0:	90 0d       	add	r25, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	e8 0f       	add	r30, r24
     fa6:	f9 1f       	adc	r31, r25
     fa8:	e3 52       	subi	r30, 0x23	; 35
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	33 83       	std	Z+3, r19	; 0x03
     fae:	22 83       	std	Z+2, r18	; 0x02
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
     fb0:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb2:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb4:	4d 85       	ldd	r20, Y+13	; 0x0d
     fb6:	5e 85       	ldd	r21, Y+14	; 0x0e
     fb8:	29 8b       	std	Y+17, r18	; 0x11
     fba:	3a 8b       	std	Y+18, r19	; 0x12
     fbc:	4b 8b       	std	Y+19, r20	; 0x13
     fbe:	5c 8b       	std	Y+20, r21	; 0x14
            short	pos			= ( short )orientation;
     fc0:	ab 8d       	ldd	r26, Y+27	; 0x1b
     fc2:	bc 8d       	ldd	r27, Y+28	; 0x1c
     fc4:	14 96       	adiw	r26, 0x04	; 4
     fc6:	8c 90       	ld	r8, X
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
     fc8:	71 2c       	mov	r7, r1
     fca:	0f 2e       	mov	r0, r31
     fcc:	fe ef       	ldi	r31, 0xFE	; 254
     fce:	6f 2e       	mov	r6, r31
     fd0:	f0 2d       	mov	r31, r0
     fd2:	22 24       	eor	r2, r2
     fd4:	2a 94       	dec	r2
     fd6:	0f 2e       	mov	r0, r31
     fd8:	f6 e4       	ldi	r31, 0x46	; 70
     fda:	3f 2e       	mov	r3, r31
     fdc:	f0 2d       	mov	r31, r0
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
            {
                Point2D currPos;

                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
     fe2:	91 2c       	mov	r9, r1
     fe4:	5c 01       	movw	r10, r24
     fe6:	88 0d       	add	r24, r8
     fe8:	99 1d       	adc	r25, r9
     fea:	87 70       	andi	r24, 0x07	; 7
     fec:	90 78       	andi	r25, 0x80	; 128
     fee:	99 23       	and	r25, r25
     ff0:	24 f4       	brge	.+8      	; 0xffa <__stack+0x6fb>
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	88 6f       	ori	r24, 0xF8	; 248
     ff6:	9f 6f       	ori	r25, 0xFF	; 255
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	fc 01       	movw	r30, r24
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ec 5e       	subi	r30, 0xEC	; 236
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	20 81       	ld	r18, Z
    1006:	31 81       	ldd	r19, Z+1	; 0x01
    1008:	24 0d       	add	r18, r4
    100a:	35 1d       	adc	r19, r5
    100c:	3a 83       	std	Y+2, r19	; 0x02
    100e:	29 83       	std	Y+1, r18	; 0x01
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	ec 5d       	subi	r30, 0xDC	; 220
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	8c 0d       	add	r24, r12
    1020:	9d 1d       	adc	r25, r13
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    1026:	2f 30       	cpi	r18, 0x0F	; 15
    1028:	31 05       	cpc	r19, r1
    102a:	80 f4       	brcc	.+32     	; 0x104c <__stack+0x74d>
    102c:	0f 97       	sbiw	r24, 0x0f	; 15
    102e:	08 f4       	brcc	.+2      	; 0x1032 <__stack+0x733>
    1030:	b8 c1       	rjmp	.+880    	; 0x13a2 <__stack+0xaa3>
    1032:	0c c0       	rjmp	.+24     	; 0x104c <__stack+0x74d>
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
                        minPos	= currPos;
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	3a 81       	ldd	r19, Y+2	; 0x02
    1038:	4b 81       	ldd	r20, Y+3	; 0x03
    103a:	5c 81       	ldd	r21, Y+4	; 0x04
    103c:	29 8b       	std	Y+17, r18	; 0x11
    103e:	3a 8b       	std	Y+18, r19	; 0x12
    1040:	4b 8b       	std	Y+19, r20	; 0x13
    1042:	5c 8b       	std	Y+20, r21	; 0x14
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
                    {
                        minDist = currDist;
    1044:	7e 2c       	mov	r7, r14
    1046:	6f 2c       	mov	r6, r15
    1048:	20 2e       	mov	r2, r16
    104a:	31 2e       	mov	r3, r17
    104c:	c5 01       	movw	r24, r10
    104e:	01 96       	adiw	r24, 0x01	; 1
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	91 05       	cpc	r25, r1
    1054:	39 f6       	brne	.-114    	; 0xfe4 <__stack+0x6e5>
                        minPos	= currPos;
                    }
                }
            }

            doPrint = false;
    1056:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <doPrint>
                if ( currCell.distToFinish > dist - currCell.distToStart )
                {
                    currCell.distToFinish = dist - currCell.distToStart;
                }

                currentPos = this->getNearestToStartAdjacent( currentPos );
    105a:	99 89       	ldd	r25, Y+17	; 0x11
    105c:	8a 89       	ldd	r24, Y+18	; 0x12
    105e:	29 89       	ldd	r18, Y+17	; 0x11
    1060:	3a 89       	ldd	r19, Y+18	; 0x12
    1062:	4b 89       	ldd	r20, Y+19	; 0x13
    1064:	5c 89       	ldd	r21, Y+20	; 0x14
    1066:	2b 87       	std	Y+11, r18	; 0x0b
    1068:	3c 87       	std	Y+12, r19	; 0x0c
    106a:	4d 87       	std	Y+13, r20	; 0x0d
    106c:	5e 87       	std	Y+14, r21	; 0x0e
        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    106e:	49 2e       	mov	r4, r25
    1070:	58 2e       	mov	r5, r24
    1072:	cd 84       	ldd	r12, Y+13	; 0x0d
    1074:	de 84       	ldd	r13, Y+14	; 0x0e
    1076:	f6 01       	movw	r30, r12
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ec 0d       	add	r30, r12
    107e:	fd 1d       	adc	r31, r13
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	3a e5       	ldi	r19, 0x5A	; 90
    1086:	34 9d       	mul	r19, r4
    1088:	c0 01       	movw	r24, r0
    108a:	35 9d       	mul	r19, r5
    108c:	90 0d       	add	r25, r0
    108e:	11 24       	eor	r1, r1
    1090:	e8 0f       	add	r30, r24
    1092:	f9 1f       	adc	r31, r25
    1094:	e3 52       	subi	r30, 0x23	; 35
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <__stack+0x7a3>
    10a0:	5b cf       	rjmp	.-330    	; 0xf58 <__stack+0x659>
    10a2:	2b 8c       	ldd	r2, Y+27	; 0x1b
    10a4:	3c 8c       	ldd	r3, Y+28	; 0x1c
                currentPos = this->getNearestToStartAdjacent( currentPos );
            }

            Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );

            if ( currCell.distToFinish > dist - currCell.distToStart )
    10a6:	96 01       	movw	r18, r12
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	2c 0d       	add	r18, r12
    10ae:	3d 1d       	adc	r19, r13
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	4a e5       	ldi	r20, 0x5A	; 90
    10b6:	44 9d       	mul	r20, r4
    10b8:	c0 01       	movw	r24, r0
    10ba:	45 9d       	mul	r20, r5
    10bc:	90 0d       	add	r25, r0
    10be:	11 24       	eor	r1, r1
    10c0:	82 0f       	add	r24, r18
    10c2:	93 1f       	adc	r25, r19
    10c4:	fc 01       	movw	r30, r24
    10c6:	e3 52       	subi	r30, 0x23	; 35
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	49 8d       	ldd	r20, Y+25	; 0x19
    10d0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    10d2:	48 17       	cp	r20, r24
    10d4:	59 07       	cpc	r21, r25
    10d6:	ac f4       	brge	.+42     	; 0x1102 <__stack+0x803>
            {
                currCell.distToFinish = dist - currCell.distToStart;
    10d8:	26 e0       	ldi	r18, 0x06	; 6
    10da:	2c 9d       	mul	r18, r12
    10dc:	c0 01       	movw	r24, r0
    10de:	2d 9d       	mul	r18, r13
    10e0:	90 0d       	add	r25, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	4a e5       	ldi	r20, 0x5A	; 90
    10e6:	44 9d       	mul	r20, r4
    10e8:	90 01       	movw	r18, r0
    10ea:	45 9d       	mul	r20, r5
    10ec:	30 0d       	add	r19, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	fc 01       	movw	r30, r24
    10f6:	e3 52       	subi	r30, 0x23	; 35
    10f8:	fe 4f       	sbci	r31, 0xFE	; 254
    10fa:	89 8d       	ldd	r24, Y+25	; 0x19
    10fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10fe:	93 83       	std	Z+3, r25	; 0x03
    1100:	82 83       	std	Z+2, r24	; 0x02

        void reverseDirection()
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );
    1102:	d1 01       	movw	r26, r2
    1104:	15 96       	adiw	r26, 0x05	; 5
    1106:	ac 90       	ld	r10, X
    1108:	15 97       	sbiw	r26, 0x05	; 5
    110a:	16 96       	adiw	r26, 0x06	; 6
    110c:	bc 90       	ld	r11, X
    110e:	16 97       	sbiw	r26, 0x06	; 6
    1110:	17 96       	adiw	r26, 0x07	; 7
    1112:	cc 90       	ld	r12, X
    1114:	17 97       	sbiw	r26, 0x07	; 7
    1116:	18 96       	adiw	r26, 0x08	; 8
    1118:	dc 90       	ld	r13, X
    111a:	0d ed       	ldi	r16, 0xDD	; 221
    111c:	11 e0       	ldi	r17, 0x01	; 1

            for ( short i = 0; i < MAX_ROWS; i++ )
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	2e a5       	ldd	r18, Y+46	; 0x2e
    1124:	3f a5       	ldd	r19, Y+47	; 0x2f
    1126:	d8 01       	movw	r26, r16
    1128:	c9 01       	movw	r24, r18
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
                {

                    if ( matrix[ i ][ j ].distToStart == 0 )
    112a:	86 2e       	mov	r8, r22
    112c:	97 2e       	mov	r9, r23
    112e:	fd 01       	movw	r30, r26
    1130:	4d 91       	ld	r20, X+
    1132:	5c 91       	ld	r21, X
    1134:	11 97       	sbiw	r26, 0x01	; 1
    1136:	41 15       	cp	r20, r1
    1138:	51 05       	cpc	r21, r1
    113a:	21 f4       	brne	.+8      	; 0x1144 <__stack+0x845>
    113c:	c8 2e       	mov	r12, r24
    113e:	d9 2e       	mov	r13, r25
    1140:	a8 2c       	mov	r10, r8
    1142:	b9 2c       	mov	r11, r9
                    {
                        // Save the start position.
                        startPos = Point2D( i, j );
                    }

                    short tmp						= matrix[ i ][ j ].distToFinish;
    1144:	e2 80       	ldd	r14, Z+2	; 0x02
    1146:	f3 80       	ldd	r15, Z+3	; 0x03
                    matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
    1148:	53 83       	std	Z+3, r21	; 0x03
    114a:	42 83       	std	Z+2, r20	; 0x02
                    matrix[ i ][ j ].distToStart	= tmp;
    114c:	f1 82       	std	Z+1, r15	; 0x01
    114e:	e0 82       	st	Z, r14
                    matrix[ i ][ j ].isVisited		= false;
    1150:	15 82       	std	Z+5, r1	; 0x05
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	16 96       	adiw	r26, 0x06	; 6
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
            {
                for ( short j = 0; j < MAX_ROWS; j++ )
    1156:	8f 30       	cpi	r24, 0x0F	; 15
    1158:	91 05       	cpc	r25, r1
    115a:	49 f7       	brne	.-46     	; 0x112e <__stack+0x82f>
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	06 5a       	subi	r16, 0xA6	; 166
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
        {
            this->calculateDistToFinish();
            // Swap distance to start with distance to finish and find start position
            Point2D startPos( finishPos );

            for ( short i = 0; i < MAX_ROWS; i++ )
    1164:	6f 30       	cpi	r22, 0x0F	; 15
    1166:	71 05       	cpc	r23, r1
    1168:	f1 f6       	brne	.-68     	; 0x1126 <__stack+0x827>
                    matrix[ i ][ j ].isVisited		= false;
                }
            }

            // Make the start position our next finish position
            finishPos = startPos;
    116a:	f1 01       	movw	r30, r2
    116c:	a5 82       	std	Z+5, r10	; 0x05
    116e:	b6 82       	std	Z+6, r11	; 0x06
    1170:	c7 82       	std	Z+7, r12	; 0x07
    1172:	d0 86       	std	Z+8, r13	; 0x08

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
                    this->reverseDirection();
                    doPrint = false;
    1174:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <doPrint>
                    matrix[ position.x ][ position.y ].isVisited	= true;
    1178:	20 81       	ld	r18, Z
    117a:	31 81       	ldd	r19, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	fc 01       	movw	r30, r24
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	e8 0f       	add	r30, r24
    1188:	f9 1f       	adc	r31, r25
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	4a e5       	ldi	r20, 0x5A	; 90
    1190:	42 9f       	mul	r20, r18
    1192:	c0 01       	movw	r24, r0
    1194:	43 9f       	mul	r20, r19
    1196:	90 0d       	add	r25, r0
    1198:	11 24       	eor	r1, r1
    119a:	e8 0f       	add	r30, r24
    119c:	f9 1f       	adc	r31, r25
    119e:	e3 52       	subi	r30, 0x23	; 35
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	85 83       	std	Z+5, r24	; 0x05
                    print( "." );
    11a6:	88 e7       	ldi	r24, 0x78	; 120
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
                    lap++;
    11ae:	d1 01       	movw	r26, r2
    11b0:	19 96       	adiw	r26, 0x09	; 9
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	1a 97       	sbiw	r26, 0x0a	; 10
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	1a 96       	adiw	r26, 0x0a	; 10
    11bc:	9c 93       	st	X, r25
    11be:	8e 93       	st	-X, r24
    11c0:	19 97       	sbiw	r26, 0x09	; 9
    11c2:	ee ca       	rjmp	.-2596   	; 0x7a0 <_ZN5Robot8mainMenuEv+0x176>
                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                if ( isValidPos( currPos ) )
                {
                    float	currDist = getDist( currPos, to );
    11c4:	6c a5       	ldd	r22, Y+44	; 0x2c
    11c6:	7d a5       	ldd	r23, Y+45	; 0x2d
    11c8:	8d 89       	ldd	r24, Y+21	; 0x15
    11ca:	9e 89       	ldd	r25, Y+22	; 0x16
    11cc:	0e 94 42 01 	call	0x284	; 0x284 <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    11d0:	66 2e       	mov	r6, r22
    11d2:	77 2e       	mov	r7, r23
    11d4:	c8 2e       	mov	r12, r24
    11d6:	d9 2e       	mov	r13, r25
                        //print( " | " );
                        //print_long( minDist );
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
    11d8:	25 2d       	mov	r18, r5
    11da:	39 89       	ldd	r19, Y+17	; 0x11
    11dc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    11de:	5e 8d       	ldd	r21, Y+30	; 0x1e
    11e0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__cmpsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	0c f4       	brge	.+2      	; 0x11ea <__stack+0x8eb>
    11e8:	48 cb       	rjmp	.-2416   	; 0x87a <_ZN5Robot8mainMenuEv+0x250>
    11ea:	53 cb       	rjmp	.-2394   	; 0x892 <_ZN5Robot8mainMenuEv+0x268>
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
            Point2D	minPos( from );
    11ec:	d1 01       	movw	r26, r2
    11ee:	2d 91       	ld	r18, X+
    11f0:	3d 91       	ld	r19, X+
    11f2:	4d 91       	ld	r20, X+
    11f4:	5c 91       	ld	r21, X
    11f6:	2e 8f       	std	Y+30, r18	; 0x1e
    11f8:	3f 8f       	std	Y+31, r19	; 0x1f
    11fa:	48 a3       	std	Y+32, r20	; 0x20
    11fc:	59 a3       	std	Y+33, r21	; 0x21
            return distance;
        }

        Point2D getClosestAdjacent( const Point2D& from, const Point2D& to, getDistFunc getDist )
        {
            float	minDist		= SHRT_MAX;
    11fe:	0e a1       	ldd	r16, Y+38	; 0x26
    1200:	1f a1       	ldd	r17, Y+39	; 0x27
    1202:	b8 a5       	ldd	r27, Y+40	; 0x28
    1204:	b9 8b       	std	Y+17, r27	; 0x11
    1206:	e9 a5       	ldd	r30, Y+41	; 0x29
    1208:	ed 8f       	std	Y+29, r30	; 0x1d
            Point2D	minPos( from );
            short	pos			= ( short )orientation;

            for ( short i = 0; i < 8; i++ )
    120a:	89 8d       	ldd	r24, Y+25	; 0x19
    120c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    120e:	5b a2       	std	Y+35, r5	; 0x23
    1210:	4a a2       	std	Y+34, r4	; 0x22
    1212:	3b a6       	std	Y+43, r3	; 0x2b
    1214:	2a a6       	std	Y+42, r2	; 0x2a
    1216:	50 2e       	mov	r5, r16
    1218:	31 2e       	mov	r3, r17
    121a:	56 cb       	rjmp	.-2388   	; 0x8c8 <_ZN5Robot8mainMenuEv+0x29e>
                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                if ( isValidPos( currPos ) )
                {
                    float	currDist = getDist( currPos, to );
    121c:	6f 89       	ldd	r22, Y+23	; 0x17
    121e:	78 8d       	ldd	r23, Y+24	; 0x18
    1220:	8d 89       	ldd	r24, Y+21	; 0x15
    1222:	9e 89       	ldd	r25, Y+22	; 0x16
    1224:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZZN5Robot10getNextPosERK7Point2DENUlS2_S2_E0_4_FUNES2_S2_>
    1228:	66 2e       	mov	r6, r22
    122a:	77 2e       	mov	r7, r23
    122c:	c8 2e       	mov	r12, r24
    122e:	d9 2e       	mov	r13, r25
                        //print( " | " );
                        //print_long( minDist );
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
    1230:	25 2d       	mov	r18, r5
    1232:	33 2d       	mov	r19, r3
    1234:	49 89       	ldd	r20, Y+17	; 0x11
    1236:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1238:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__cmpsf2>
    123c:	88 23       	and	r24, r24
    123e:	0c f4       	brge	.+2      	; 0x1242 <__stack+0x943>
    1240:	6b cb       	rjmp	.-2346   	; 0x918 <__stack+0x19>
    1242:	76 cb       	rjmp	.-2324   	; 0x930 <__stack+0x31>
                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                if ( isValidPos( currPos ) )
                {
                    float	currDist = getDist( currPos, to );
    1244:	6f 89       	ldd	r22, Y+23	; 0x17
    1246:	78 8d       	ldd	r23, Y+24	; 0x18
    1248:	8d 89       	ldd	r24, Y+21	; 0x15
    124a:	9e 89       	ldd	r25, Y+22	; 0x16
    124c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    1250:	e6 2e       	mov	r14, r22
    1252:	f7 2e       	mov	r15, r23
    1254:	08 2f       	mov	r16, r24
    1256:	19 2f       	mov	r17, r25
                        //print( " | " );
                        //print_long( minDist );
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
    1258:	29 2d       	mov	r18, r9
    125a:	38 2d       	mov	r19, r8
    125c:	47 2d       	mov	r20, r7
    125e:	56 2d       	mov	r21, r6
    1260:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__cmpsf2>
    1264:	88 23       	and	r24, r24
    1266:	0c f4       	brge	.+2      	; 0x126a <__stack+0x96b>
    1268:	b2 cb       	rjmp	.-2204   	; 0x9ce <__stack+0xcf>
    126a:	bd cb       	rjmp	.-2182   	; 0x9e6 <__stack+0xe7>
            return false;
        }

        int getRobotAngle()
        {
            switch ( orientation )
    126c:	d1 01       	movw	r26, r2
    126e:	14 96       	adiw	r26, 0x04	; 4
    1270:	ec 91       	ld	r30, X
    1272:	8e 2f       	mov	r24, r30
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 30       	cpi	r24, 0x08	; 8
    1278:	91 05       	cpc	r25, r1
    127a:	08 f0       	brcs	.+2      	; 0x127e <__stack+0x97f>
    127c:	e7 cb       	rjmp	.-2098   	; 0xa4c <__stack+0x14d>
    127e:	fc 01       	movw	r30, r24
    1280:	ec 5c       	subi	r30, 0xCC	; 204
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__tablejump2__>
            {
                case EOrientation::South:
                    return -90;

                case EOrientation::SouthEast:
                    return -45;
    1288:	0f 2e       	mov	r0, r31
    128a:	f3 ed       	ldi	r31, 0xD3	; 211
    128c:	af 2e       	mov	r10, r31
    128e:	f0 2d       	mov	r31, r0
    1290:	bb 24       	eor	r11, r11
    1292:	ba 94       	dec	r11
    1294:	e3 cb       	rjmp	.-2106   	; 0xa5c <__stack+0x15d>
        int getRobotAngle()
        {
            switch ( orientation )
            {
                case EOrientation::South:
                    return -90;
    1296:	0f 2e       	mov	r0, r31
    1298:	f6 ea       	ldi	r31, 0xA6	; 166
    129a:	af 2e       	mov	r10, r31
    129c:	f0 2d       	mov	r31, r0
    129e:	bb 24       	eor	r11, r11
    12a0:	ba 94       	dec	r11
    12a2:	dc cb       	rjmp	.-2120   	; 0xa5c <__stack+0x15d>
                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                if ( isValidPos( currPos ) )
                {
                    float	currDist = getDist( currPos, to );
    12a4:	be 01       	movw	r22, r28
    12a6:	65 5f       	subi	r22, 0xF5	; 245
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8d 89       	ldd	r24, Y+21	; 0x15
    12ac:	9e 89       	ldd	r25, Y+22	; 0x16
    12ae:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    12b2:	26 2e       	mov	r2, r22
    12b4:	37 2e       	mov	r3, r23
    12b6:	48 2e       	mov	r4, r24
    12b8:	59 2e       	mov	r5, r25
                        //print( " | " );
                        //print_long( minDist );
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
    12ba:	29 89       	ldd	r18, Y+17	; 0x11
    12bc:	3f 89       	ldd	r19, Y+23	; 0x17
    12be:	48 8d       	ldd	r20, Y+24	; 0x18
    12c0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    12c2:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__cmpsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	0c f4       	brge	.+2      	; 0x12cc <__stack+0x9cd>
    12ca:	39 cd       	rjmp	.-1422   	; 0xd3e <__stack+0x43f>
    12cc:	40 cd       	rjmp	.-1408   	; 0xd4e <__stack+0x44f>
        {
            set_motors( 19, 19 );

            while ( !isOnMarker() ) {}

            play( ">>a32" );
    12ce:	81 e5       	ldi	r24, 0x51	; 81
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <play>

            if ( abs( currentOffset ) >= 20 )
    12d6:	f1 01       	movw	r30, r2
    12d8:	23 85       	ldd	r18, Z+11	; 0x0b
    12da:	34 85       	ldd	r19, Z+12	; 0x0c
    12dc:	c9 01       	movw	r24, r18
    12de:	33 23       	and	r19, r19
    12e0:	24 f4       	brge	.+8      	; 0x12ea <__stack+0x9eb>
    12e2:	88 27       	eor	r24, r24
    12e4:	99 27       	eor	r25, r25
    12e6:	82 1b       	sub	r24, r18
    12e8:	93 0b       	sbc	r25, r19
    12ea:	84 31       	cpi	r24, 0x14	; 20
    12ec:	91 05       	cpc	r25, r1
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <__stack+0x9f3>
    12f0:	f2 cd       	rjmp	.-1052   	; 0xed6 <__stack+0x5d7>
    12f2:	09 ce       	rjmp	.-1006   	; 0xf06 <__stack+0x607>
            {
                stepToGoal( finishPos );

                if ( position == finishPos )
                {
                    matrix[ position.x ][ position.y ].distToFinish	= 0;
    12f4:	d1 01       	movw	r26, r2
    12f6:	12 96       	adiw	r26, 0x02	; 2
    12f8:	2d 91       	ld	r18, X+
    12fa:	3c 91       	ld	r19, X
    12fc:	13 97       	sbiw	r26, 0x03	; 3
    12fe:	56 e0       	ldi	r21, 0x06	; 6
    1300:	52 9f       	mul	r21, r18
    1302:	b0 01       	movw	r22, r0
    1304:	53 9f       	mul	r21, r19
    1306:	70 0d       	add	r23, r0
    1308:	11 24       	eor	r1, r1
    130a:	4a e5       	ldi	r20, 0x5A	; 90
    130c:	48 9f       	mul	r20, r24
    130e:	90 01       	movw	r18, r0
    1310:	49 9f       	mul	r20, r25
    1312:	30 0d       	add	r19, r0
    1314:	11 24       	eor	r1, r1
    1316:	26 0f       	add	r18, r22
    1318:	37 1f       	adc	r19, r23
    131a:	f9 01       	movw	r30, r18
    131c:	e3 52       	subi	r30, 0x23	; 35
    131e:	fe 4f       	sbci	r31, 0xFE	; 254
    1320:	13 82       	std	Z+3, r1	; 0x03
    1322:	12 82       	std	Z+2, r1	; 0x02
            finishPos = startPos;
        }

        void calculateDistToFinish()
        {
            Point2D currentPos( finishPos );
    1324:	15 96       	adiw	r26, 0x05	; 5
    1326:	0d 91       	ld	r16, X+
    1328:	1d 91       	ld	r17, X+
    132a:	2d 91       	ld	r18, X+
    132c:	3c 91       	ld	r19, X
    132e:	18 97       	sbiw	r26, 0x08	; 8
    1330:	b0 2f       	mov	r27, r16
    1332:	a1 2f       	mov	r26, r17
    1334:	0b 87       	std	Y+11, r16	; 0x0b
    1336:	1c 87       	std	Y+12, r17	; 0x0c
    1338:	2d 87       	std	Y+13, r18	; 0x0d
    133a:	3e 87       	std	Y+14, r19	; 0x0e
            short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
    133c:	f1 01       	movw	r30, r2
    133e:	87 81       	ldd	r24, Z+7	; 0x07
    1340:	90 85       	ldd	r25, Z+8	; 0x08
    1342:	65 81       	ldd	r22, Z+5	; 0x05
    1344:	76 81       	ldd	r23, Z+6	; 0x06
    1346:	58 9f       	mul	r21, r24
    1348:	90 01       	movw	r18, r0
    134a:	59 9f       	mul	r21, r25
    134c:	30 0d       	add	r19, r0
    134e:	11 24       	eor	r1, r1
    1350:	46 9f       	mul	r20, r22
    1352:	c0 01       	movw	r24, r0
    1354:	47 9f       	mul	r20, r23
    1356:	90 0d       	add	r25, r0
    1358:	11 24       	eor	r1, r1
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	fc 01       	movw	r30, r24
    1360:	e3 52       	subi	r30, 0x23	; 35
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	3a 8f       	std	Y+26, r19	; 0x1a
    136a:	29 8f       	std	Y+25, r18	; 0x19

            while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
    136c:	4b 2e       	mov	r4, r27
    136e:	5a 2e       	mov	r5, r26
    1370:	cd 84       	ldd	r12, Y+13	; 0x0d
    1372:	de 84       	ldd	r13, Y+14	; 0x0e
    1374:	5c 9d       	mul	r21, r12
    1376:	90 01       	movw	r18, r0
    1378:	5d 9d       	mul	r21, r13
    137a:	30 0d       	add	r19, r0
    137c:	11 24       	eor	r1, r1
    137e:	44 9d       	mul	r20, r4
    1380:	c0 01       	movw	r24, r0
    1382:	45 9d       	mul	r20, r5
    1384:	90 0d       	add	r25, r0
    1386:	11 24       	eor	r1, r1
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	fc 01       	movw	r30, r24
    138e:	e3 52       	subi	r30, 0x23	; 35
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	09 f4       	brne	.+2      	; 0x139c <__stack+0xa9d>
    139a:	85 ce       	rjmp	.-758    	; 0x10a6 <__stack+0x7a7>
    139c:	3c 8e       	std	Y+28, r3	; 0x1c
    139e:	2b 8e       	std	Y+27, r2	; 0x1b
    13a0:	db cd       	rjmp	.-1098   	; 0xf58 <__stack+0x659>
                currPos.x = from.x + adjacentSquaresCoordinatesIteration[ 0 ][ ( pos + i ) % 8 ];
                currPos.y = from.y + adjacentSquaresCoordinatesIteration[ 1 ][ ( pos + i ) % 8 ];

                if ( isValidPos( currPos ) )
                {
                    float	currDist = getDist( currPos, to );
    13a2:	be 01       	movw	r22, r28
    13a4:	65 5f       	subi	r22, 0xF5	; 245
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8d 89       	ldd	r24, Y+21	; 0x15
    13aa:	9e 89       	ldd	r25, Y+22	; 0x16
    13ac:	0e 94 af 00 	call	0x15e	; 0x15e <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENUlS2_S2_E_4_FUNES2_S2_>
    13b0:	e6 2e       	mov	r14, r22
    13b2:	f7 2e       	mov	r15, r23
    13b4:	08 2f       	mov	r16, r24
    13b6:	19 2f       	mov	r17, r25
                        //print( " | " );
                        //print_long( minDist );
                        //delay_ms( 4000 );
                    }

                    if ( currDist < minDist )
    13b8:	27 2d       	mov	r18, r7
    13ba:	36 2d       	mov	r19, r6
    13bc:	42 2d       	mov	r20, r2
    13be:	53 2d       	mov	r21, r3
    13c0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__cmpsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	0c f4       	brge	.+2      	; 0x13ca <__stack+0xacb>
    13c8:	35 ce       	rjmp	.-918    	; 0x1034 <__stack+0x735>
    13ca:	40 ce       	rjmp	.-896    	; 0x104c <__stack+0x74d>

000013cc <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    13cc:	fb 01       	movw	r30, r22
    13ce:	20 81       	ld	r18, Z
    13d0:	31 81       	ldd	r19, Z+1	; 0x01
    13d2:	2f 30       	cpi	r18, 0x0F	; 15
    13d4:	31 05       	cpc	r19, r1
    13d6:	28 f5       	brcc	.+74     	; 0x1422 <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x56>
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
    13dc:	8f 30       	cpi	r24, 0x0F	; 15
    13de:	91 05       	cpc	r25, r1
    13e0:	28 f1       	brcs	.+74     	; 0x142c <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	7e ef       	ldi	r23, 0xFE	; 254
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	96 e4       	ldi	r25, 0x46	; 70
    13ea:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
    13ec:	ac 01       	movw	r20, r24
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	84 0f       	add	r24, r20
    13f4:	95 1f       	adc	r25, r21
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	4a e5       	ldi	r20, 0x5A	; 90
    13fc:	42 9f       	mul	r20, r18
    13fe:	f0 01       	movw	r30, r0
    1400:	43 9f       	mul	r20, r19
    1402:	f0 0d       	add	r31, r0
    1404:	11 24       	eor	r1, r1
    1406:	8e 0f       	add	r24, r30
    1408:	9f 1f       	adc	r25, r31
    140a:	fc 01       	movw	r30, r24
    140c:	e3 52       	subi	r30, 0x23	; 35
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	07 2e       	mov	r0, r23
    1416:	00 0c       	add	r0, r0
    1418:	88 0b       	sbc	r24, r24
    141a:	99 0b       	sbc	r25, r25
    141c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
    1420:	08 95       	ret

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	7e ef       	ldi	r23, 0xFE	; 254
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	96 e4       	ldi	r25, 0x46	; 70
    142a:	08 95       	ret

                if ( Robot::isValidPos( pos ) && matrix[ pos.x ][ pos.y ].isVisited )
    142c:	fc 01       	movw	r30, r24
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	e8 0f       	add	r30, r24
    1434:	f9 1f       	adc	r31, r25
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	6a e5       	ldi	r22, 0x5A	; 90
    143c:	62 9f       	mul	r22, r18
    143e:	a0 01       	movw	r20, r0
    1440:	63 9f       	mul	r22, r19
    1442:	50 0d       	add	r21, r0
    1444:	11 24       	eor	r1, r1
    1446:	e4 0f       	add	r30, r20
    1448:	f5 1f       	adc	r31, r21
    144a:	e3 52       	subi	r30, 0x23	; 35
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	45 81       	ldd	r20, Z+5	; 0x05
    1450:	41 11       	cpse	r20, r1
    1452:	cc cf       	rjmp	.-104    	; 0x13ec <_ZZN5Robot25getNearestToStartAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x20>

        Point2D getNearestToStartAdjacent( const Point2D& currentPos )
        {
            auto getDistToStart = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	7e ef       	ldi	r23, 0xFE	; 254
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	96 e4       	ldi	r25, 0x46	; 70
                {
                    result = matrix[ pos.x ][ pos.y ].distToStart;
                }

                return result;
            };
    145c:	08 95       	ret

0000145e <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_>:
            return this->getClosestAdjacent( currentPos, currentPos, getDistToFinish );
        }

        static bool isValidPos( const Point2D& pos )
        {
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
    145e:	fb 01       	movw	r30, r22
    1460:	20 81       	ld	r18, Z
    1462:	31 81       	ldd	r19, Z+1	; 0x01
    1464:	2f 30       	cpi	r18, 0x0F	; 15
    1466:	31 05       	cpc	r19, r1
    1468:	28 f5       	brcc	.+74     	; 0x14b4 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x56>
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	8f 30       	cpi	r24, 0x0F	; 15
    1470:	91 05       	cpc	r25, r1
    1472:	50 f1       	brcs	.+84     	; 0x14c8 <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x6a>

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	7e ef       	ldi	r23, 0xFE	; 254
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	96 e4       	ldi	r25, 0x46	; 70
    147c:	08 95       	ret

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
    147e:	ac 01       	movw	r20, r24
    1480:	44 0f       	add	r20, r20
    1482:	55 1f       	adc	r21, r21
    1484:	84 0f       	add	r24, r20
    1486:	95 1f       	adc	r25, r21
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	4a e5       	ldi	r20, 0x5A	; 90
    148e:	42 9f       	mul	r20, r18
    1490:	f0 01       	movw	r30, r0
    1492:	43 9f       	mul	r20, r19
    1494:	f0 0d       	add	r31, r0
    1496:	11 24       	eor	r1, r1
    1498:	8e 0f       	add	r24, r30
    149a:	9f 1f       	adc	r25, r31
    149c:	fc 01       	movw	r30, r24
    149e:	e3 52       	subi	r30, 0x23	; 35
    14a0:	fe 4f       	sbci	r31, 0xFE	; 254
    14a2:	62 81       	ldd	r22, Z+2	; 0x02
    14a4:	73 81       	ldd	r23, Z+3	; 0x03
    14a6:	07 2e       	mov	r0, r23
    14a8:	00 0c       	add	r0, r0
    14aa:	88 0b       	sbc	r24, r24
    14ac:	99 0b       	sbc	r25, r25
    14ae:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__floatsisf>
    14b2:	08 95       	ret

        Point2D getNearestToFinishAdjacent( const Point2D& currentPos )
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	7e ef       	ldi	r23, 0xFE	; 254
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	96 e4       	ldi	r25, 0x46	; 70
    14bc:	08 95       	ret
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	7e ef       	ldi	r23, 0xFE	; 254
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	96 e4       	ldi	r25, 0x46	; 70
                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
                {
                    result = matrix[ pos.x ][ pos.y ].distToFinish;
                }

                return result;
    14c6:	08 95       	ret
        {
            auto getDistToFinish = []( const Point2D & pos, const Point2D & tmp ) -> float
            {
                float result = SHRT_MAX;

                if ( Robot::isValidPos( pos ) && !matrix[ pos.x ][ pos.y ].isVisited )
    14c8:	fc 01       	movw	r30, r24
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	e8 0f       	add	r30, r24
    14d0:	f9 1f       	adc	r31, r25
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	6a e5       	ldi	r22, 0x5A	; 90
    14d8:	62 9f       	mul	r22, r18
    14da:	a0 01       	movw	r20, r0
    14dc:	63 9f       	mul	r22, r19
    14de:	50 0d       	add	r21, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	e4 0f       	add	r30, r20
    14e4:	f5 1f       	adc	r31, r21
    14e6:	e3 52       	subi	r30, 0x23	; 35
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	45 81       	ldd	r20, Z+5	; 0x05
    14ec:	41 11       	cpse	r20, r1
    14ee:	e7 cf       	rjmp	.-50     	; 0x14be <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x60>
    14f0:	c6 cf       	rjmp	.-116    	; 0x147e <_ZZN5Robot26getNearestToFinishAdjacentERK7Point2DENKUlS2_S2_E_clES2_S2_+0x20>

000014f2 <main>:
            return pos.x >= 0 && pos.x < MAX_ROWS && pos.y >= 0 && pos.y < MAX_ROWS;
        }
};

int main()
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2f 97       	sbiw	r28, 0x0f	; 15
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    1506:	85 e0       	ldi	r24, 0x05	; 5
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	1c 82       	std	Y+4, r1	; 0x04
    1510:	1b 82       	std	Y+3, r1	; 0x03
        Robot()
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
            , currentOffset( 0 )
    1512:	1d 82       	std	Y+5, r1	; 0x05

        }

        Point2D( short inX, short inY )
            : x( inX )
            , y ( inY )
    1514:	9f 83       	std	Y+7, r25	; 0x07
    1516:	8e 83       	std	Y+6, r24	; 0x06
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	99 87       	std	Y+9, r25	; 0x09
    151e:	88 87       	std	Y+8, r24	; 0x08
        Robot()
            : position( 5, 0 )
            , orientation( EOrientation::North )
            , finishPos( 5, 3 )
            , lap ( 0 )
            , currentOffset( 0 )
    1520:	1b 86       	std	Y+11, r1	; 0x0b
    1522:	1a 86       	std	Y+10, r1	; 0x0a
    1524:	1d 86       	std	Y+13, r1	; 0x0d
    1526:	1c 86       	std	Y+12, r1	; 0x0c
        {}
        void initialize()
        {
            // Initialize the line reading sensors
            pololu_3pi_init( 2000 );
    1528:	80 ed       	ldi	r24, 0xD0	; 208
    152a:	97 e0       	ldi	r25, 0x07	; 7
    152c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <pololu_3pi_init>

            set_motors( 0, 0 );
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 28 14 	call	0x2850	; 0x2850 <set_motors>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    153c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <read_battery_millivolts_3pi>
    1540:	8c 01       	movw	r16, r24

            // Display battery voltage and wait two seconds
            unsigned short bat = read_battery_millivolts();

            clear();
    1542:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <clear>
            print_long( bat );
    1546:	b8 01       	movw	r22, r16
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 4f 13 	call	0x269e	; 0x269e <print_long>
            print( "mV" );
    1550:	8a e7       	ldi	r24, 0x7A	; 122
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <print>
            delay_ms( 1000 );
    1558:	88 ee       	ldi	r24, 0xE8	; 232
    155a:	93 e0       	ldi	r25, 0x03	; 3
    155c:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>

            this->mainMenu();
    1560:	ce 01       	movw	r24, r28
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN5Robot8mainMenuEv>

00001568 <_GLOBAL__sub_I_doPrint>:

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1568:	4d ed       	ldi	r20, 0xDD	; 221
    156a:	51 e0       	ldi	r21, 0x01	; 1

        Cell()
            : distToStart( SHRT_MAX )
            , distToFinish( SHRT_MAX )
            , isObstacle( false )
            , isVisited( false )
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	9f e7       	ldi	r25, 0x7F	; 127
    1570:	fa 01       	movw	r30, r20
    1572:	46 5a       	subi	r20, 0xA6	; 166
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	9a 01       	movw	r18, r20
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	93 83       	std	Z+3, r25	; 0x03
    157e:	82 83       	std	Z+2, r24	; 0x02
    1580:	14 82       	std	Z+4, r1	; 0x04
    1582:	15 82       	std	Z+5, r1	; 0x05
    1584:	36 96       	adiw	r30, 0x06	; 6
        }
};

typedef float ( *getDistFunc )( const Point2D&, const Point2D& );

Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    1586:	e2 17       	cp	r30, r18
    1588:	f3 07       	cpc	r31, r19
    158a:	b1 f7       	brne	.-20     	; 0x1578 <_GLOBAL__sub_I_doPrint+0x10>
    158c:	27 e0       	ldi	r18, 0x07	; 7
    158e:	43 32       	cpi	r20, 0x23	; 35
    1590:	52 07       	cpc	r21, r18
    1592:	71 f7       	brne	.-36     	; 0x1570 <_GLOBAL__sub_I_doPrint+0x8>

    set_motors( 0, 0 );

    // Stop code execution
    while ( true ) {}
}
    1594:	08 95       	ret

00001596 <atan>:
    1596:	df 93       	push	r29
    1598:	dd 27       	eor	r29, r29
    159a:	b9 2f       	mov	r27, r25
    159c:	bf 77       	andi	r27, 0x7F	; 127
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	16 16       	cp	r1, r22
    15a4:	17 06       	cpc	r1, r23
    15a6:	48 07       	cpc	r20, r24
    15a8:	5b 07       	cpc	r21, r27
    15aa:	18 f4       	brcc	.+6      	; 0x15b2 <atan+0x1c>
    15ac:	d9 2f       	mov	r29, r25
    15ae:	0e 94 80 0c 	call	0x1900	; 0x1900 <inverse>
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	7f 93       	push	r23
    15b8:	6f 93       	push	r22
    15ba:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <square>
    15be:	e8 e7       	ldi	r30, 0x78	; 120
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_powser>
    15c6:	0e 94 46 0c 	call	0x188c	; 0x188c <__fp_round>
    15ca:	2f 91       	pop	r18
    15cc:	3f 91       	pop	r19
    15ce:	4f 91       	pop	r20
    15d0:	5f 91       	pop	r21
    15d2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__mulsf3x>
    15d6:	dd 23       	and	r29, r29
    15d8:	51 f0       	breq	.+20     	; 0x15ee <atan+0x58>
    15da:	90 58       	subi	r25, 0x80	; 128
    15dc:	a2 ea       	ldi	r26, 0xA2	; 162
    15de:	2a ed       	ldi	r18, 0xDA	; 218
    15e0:	3f e0       	ldi	r19, 0x0F	; 15
    15e2:	49 ec       	ldi	r20, 0xC9	; 201
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	d0 78       	andi	r29, 0x80	; 128
    15e8:	5d 27       	eor	r21, r29
    15ea:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__addsf3x>
    15ee:	df 91       	pop	r29
    15f0:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_round>

000015f4 <__cmpsf2>:
    15f4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_cmp>
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <__cmpsf2+0x8>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	08 95       	ret

000015fe <__divsf3>:
    15fe:	0e 94 13 0b 	call	0x1626	; 0x1626 <__divsf3x>
    1602:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_round>
    1606:	0e 94 3f 0c 	call	0x187e	; 0x187e <__fp_pscB>
    160a:	58 f0       	brcs	.+22     	; 0x1622 <__divsf3+0x24>
    160c:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fp_pscA>
    1610:	40 f0       	brcs	.+16     	; 0x1622 <__divsf3+0x24>
    1612:	29 f4       	brne	.+10     	; 0x161e <__divsf3+0x20>
    1614:	5f 3f       	cpi	r21, 0xFF	; 255
    1616:	29 f0       	breq	.+10     	; 0x1622 <__divsf3+0x24>
    1618:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_inf>
    161c:	51 11       	cpse	r21, r1
    161e:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_szero>
    1622:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_nan>

00001626 <__divsf3x>:
    1626:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fp_split3>
    162a:	68 f3       	brcs	.-38     	; 0x1606 <__divsf3+0x8>

0000162c <__divsf3_pse>:
    162c:	99 23       	and	r25, r25
    162e:	b1 f3       	breq	.-20     	; 0x161c <__divsf3+0x1e>
    1630:	55 23       	and	r21, r21
    1632:	91 f3       	breq	.-28     	; 0x1618 <__divsf3+0x1a>
    1634:	95 1b       	sub	r25, r21
    1636:	55 0b       	sbc	r21, r21
    1638:	bb 27       	eor	r27, r27
    163a:	aa 27       	eor	r26, r26
    163c:	62 17       	cp	r22, r18
    163e:	73 07       	cpc	r23, r19
    1640:	84 07       	cpc	r24, r20
    1642:	38 f0       	brcs	.+14     	; 0x1652 <__divsf3_pse+0x26>
    1644:	9f 5f       	subi	r25, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	22 0f       	add	r18, r18
    164a:	33 1f       	adc	r19, r19
    164c:	44 1f       	adc	r20, r20
    164e:	aa 1f       	adc	r26, r26
    1650:	a9 f3       	breq	.-22     	; 0x163c <__divsf3_pse+0x10>
    1652:	35 d0       	rcall	.+106    	; 0x16be <__divsf3_pse+0x92>
    1654:	0e 2e       	mov	r0, r30
    1656:	3a f0       	brmi	.+14     	; 0x1666 <__divsf3_pse+0x3a>
    1658:	e0 e8       	ldi	r30, 0x80	; 128
    165a:	32 d0       	rcall	.+100    	; 0x16c0 <__divsf3_pse+0x94>
    165c:	91 50       	subi	r25, 0x01	; 1
    165e:	50 40       	sbci	r21, 0x00	; 0
    1660:	e6 95       	lsr	r30
    1662:	00 1c       	adc	r0, r0
    1664:	ca f7       	brpl	.-14     	; 0x1658 <__divsf3_pse+0x2c>
    1666:	2b d0       	rcall	.+86     	; 0x16be <__divsf3_pse+0x92>
    1668:	fe 2f       	mov	r31, r30
    166a:	29 d0       	rcall	.+82     	; 0x16be <__divsf3_pse+0x92>
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	bb 1f       	adc	r27, r27
    1674:	26 17       	cp	r18, r22
    1676:	37 07       	cpc	r19, r23
    1678:	48 07       	cpc	r20, r24
    167a:	ab 07       	cpc	r26, r27
    167c:	b0 e8       	ldi	r27, 0x80	; 128
    167e:	09 f0       	breq	.+2      	; 0x1682 <__divsf3_pse+0x56>
    1680:	bb 0b       	sbc	r27, r27
    1682:	80 2d       	mov	r24, r0
    1684:	bf 01       	movw	r22, r30
    1686:	ff 27       	eor	r31, r31
    1688:	93 58       	subi	r25, 0x83	; 131
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	3a f0       	brmi	.+14     	; 0x169c <__divsf3_pse+0x70>
    168e:	9e 3f       	cpi	r25, 0xFE	; 254
    1690:	51 05       	cpc	r21, r1
    1692:	78 f0       	brcs	.+30     	; 0x16b2 <__divsf3_pse+0x86>
    1694:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_inf>
    1698:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_szero>
    169c:	5f 3f       	cpi	r21, 0xFF	; 255
    169e:	e4 f3       	brlt	.-8      	; 0x1698 <__divsf3_pse+0x6c>
    16a0:	98 3e       	cpi	r25, 0xE8	; 232
    16a2:	d4 f3       	brlt	.-12     	; 0x1698 <__divsf3_pse+0x6c>
    16a4:	86 95       	lsr	r24
    16a6:	77 95       	ror	r23
    16a8:	67 95       	ror	r22
    16aa:	b7 95       	ror	r27
    16ac:	f7 95       	ror	r31
    16ae:	9f 5f       	subi	r25, 0xFF	; 255
    16b0:	c9 f7       	brne	.-14     	; 0x16a4 <__divsf3_pse+0x78>
    16b2:	88 0f       	add	r24, r24
    16b4:	91 1d       	adc	r25, r1
    16b6:	96 95       	lsr	r25
    16b8:	87 95       	ror	r24
    16ba:	97 f9       	bld	r25, 7
    16bc:	08 95       	ret
    16be:	e1 e0       	ldi	r30, 0x01	; 1
    16c0:	66 0f       	add	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	bb 1f       	adc	r27, r27
    16c8:	62 17       	cp	r22, r18
    16ca:	73 07       	cpc	r23, r19
    16cc:	84 07       	cpc	r24, r20
    16ce:	ba 07       	cpc	r27, r26
    16d0:	20 f0       	brcs	.+8      	; 0x16da <__divsf3_pse+0xae>
    16d2:	62 1b       	sub	r22, r18
    16d4:	73 0b       	sbc	r23, r19
    16d6:	84 0b       	sbc	r24, r20
    16d8:	ba 0b       	sbc	r27, r26
    16da:	ee 1f       	adc	r30, r30
    16dc:	88 f7       	brcc	.-30     	; 0x16c0 <__divsf3_pse+0x94>
    16de:	e0 95       	com	r30
    16e0:	08 95       	ret

000016e2 <__fixsfsi>:
    16e2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixunssfsi>
    16e6:	68 94       	set
    16e8:	b1 11       	cpse	r27, r1
    16ea:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_szero>
    16ee:	08 95       	ret

000016f0 <__fixunssfsi>:
    16f0:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_splitA>
    16f4:	88 f0       	brcs	.+34     	; 0x1718 <__fixunssfsi+0x28>
    16f6:	9f 57       	subi	r25, 0x7F	; 127
    16f8:	98 f0       	brcs	.+38     	; 0x1720 <__fixunssfsi+0x30>
    16fa:	b9 2f       	mov	r27, r25
    16fc:	99 27       	eor	r25, r25
    16fe:	b7 51       	subi	r27, 0x17	; 23
    1700:	b0 f0       	brcs	.+44     	; 0x172e <__fixunssfsi+0x3e>
    1702:	e1 f0       	breq	.+56     	; 0x173c <__fixunssfsi+0x4c>
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	1a f0       	brmi	.+6      	; 0x1714 <__fixunssfsi+0x24>
    170e:	ba 95       	dec	r27
    1710:	c9 f7       	brne	.-14     	; 0x1704 <__fixunssfsi+0x14>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <__fixunssfsi+0x4c>
    1714:	b1 30       	cpi	r27, 0x01	; 1
    1716:	91 f0       	breq	.+36     	; 0x173c <__fixunssfsi+0x4c>
    1718:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_zero>
    171c:	b1 e0       	ldi	r27, 0x01	; 1
    171e:	08 95       	ret
    1720:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_zero>
    1724:	67 2f       	mov	r22, r23
    1726:	78 2f       	mov	r23, r24
    1728:	88 27       	eor	r24, r24
    172a:	b8 5f       	subi	r27, 0xF8	; 248
    172c:	39 f0       	breq	.+14     	; 0x173c <__fixunssfsi+0x4c>
    172e:	b9 3f       	cpi	r27, 0xF9	; 249
    1730:	cc f3       	brlt	.-14     	; 0x1724 <__fixunssfsi+0x34>
    1732:	86 95       	lsr	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	b3 95       	inc	r27
    173a:	d9 f7       	brne	.-10     	; 0x1732 <__fixunssfsi+0x42>
    173c:	3e f4       	brtc	.+14     	; 0x174c <__fixunssfsi+0x5c>
    173e:	90 95       	com	r25
    1740:	80 95       	com	r24
    1742:	70 95       	com	r23
    1744:	61 95       	neg	r22
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	08 95       	ret

0000174e <__floatunsisf>:
    174e:	e8 94       	clt
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <__floatsisf+0x12>

00001752 <__floatsisf>:
    1752:	97 fb       	bst	r25, 7
    1754:	3e f4       	brtc	.+14     	; 0x1764 <__floatsisf+0x12>
    1756:	90 95       	com	r25
    1758:	80 95       	com	r24
    175a:	70 95       	com	r23
    175c:	61 95       	neg	r22
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	99 23       	and	r25, r25
    1766:	a9 f0       	breq	.+42     	; 0x1792 <__floatsisf+0x40>
    1768:	f9 2f       	mov	r31, r25
    176a:	96 e9       	ldi	r25, 0x96	; 150
    176c:	bb 27       	eor	r27, r27
    176e:	93 95       	inc	r25
    1770:	f6 95       	lsr	r31
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b7 95       	ror	r27
    177a:	f1 11       	cpse	r31, r1
    177c:	f8 cf       	rjmp	.-16     	; 0x176e <__floatsisf+0x1c>
    177e:	fa f4       	brpl	.+62     	; 0x17be <__floatsisf+0x6c>
    1780:	bb 0f       	add	r27, r27
    1782:	11 f4       	brne	.+4      	; 0x1788 <__floatsisf+0x36>
    1784:	60 ff       	sbrs	r22, 0
    1786:	1b c0       	rjmp	.+54     	; 0x17be <__floatsisf+0x6c>
    1788:	6f 5f       	subi	r22, 0xFF	; 255
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	16 c0       	rjmp	.+44     	; 0x17be <__floatsisf+0x6c>
    1792:	88 23       	and	r24, r24
    1794:	11 f0       	breq	.+4      	; 0x179a <__floatsisf+0x48>
    1796:	96 e9       	ldi	r25, 0x96	; 150
    1798:	11 c0       	rjmp	.+34     	; 0x17bc <__floatsisf+0x6a>
    179a:	77 23       	and	r23, r23
    179c:	21 f0       	breq	.+8      	; 0x17a6 <__floatsisf+0x54>
    179e:	9e e8       	ldi	r25, 0x8E	; 142
    17a0:	87 2f       	mov	r24, r23
    17a2:	76 2f       	mov	r23, r22
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <__floatsisf+0x5e>
    17a6:	66 23       	and	r22, r22
    17a8:	71 f0       	breq	.+28     	; 0x17c6 <__floatsisf+0x74>
    17aa:	96 e8       	ldi	r25, 0x86	; 134
    17ac:	86 2f       	mov	r24, r22
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	2a f0       	brmi	.+10     	; 0x17be <__floatsisf+0x6c>
    17b4:	9a 95       	dec	r25
    17b6:	66 0f       	add	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	da f7       	brpl	.-10     	; 0x17b4 <__floatsisf+0x62>
    17be:	88 0f       	add	r24, r24
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	97 f9       	bld	r25, 7
    17c6:	08 95       	ret

000017c8 <__fp_cmp>:
    17c8:	99 0f       	add	r25, r25
    17ca:	00 08       	sbc	r0, r0
    17cc:	55 0f       	add	r21, r21
    17ce:	aa 0b       	sbc	r26, r26
    17d0:	e0 e8       	ldi	r30, 0x80	; 128
    17d2:	fe ef       	ldi	r31, 0xFE	; 254
    17d4:	16 16       	cp	r1, r22
    17d6:	17 06       	cpc	r1, r23
    17d8:	e8 07       	cpc	r30, r24
    17da:	f9 07       	cpc	r31, r25
    17dc:	c0 f0       	brcs	.+48     	; 0x180e <__fp_cmp+0x46>
    17de:	12 16       	cp	r1, r18
    17e0:	13 06       	cpc	r1, r19
    17e2:	e4 07       	cpc	r30, r20
    17e4:	f5 07       	cpc	r31, r21
    17e6:	98 f0       	brcs	.+38     	; 0x180e <__fp_cmp+0x46>
    17e8:	62 1b       	sub	r22, r18
    17ea:	73 0b       	sbc	r23, r19
    17ec:	84 0b       	sbc	r24, r20
    17ee:	95 0b       	sbc	r25, r21
    17f0:	39 f4       	brne	.+14     	; 0x1800 <__fp_cmp+0x38>
    17f2:	0a 26       	eor	r0, r26
    17f4:	61 f0       	breq	.+24     	; 0x180e <__fp_cmp+0x46>
    17f6:	23 2b       	or	r18, r19
    17f8:	24 2b       	or	r18, r20
    17fa:	25 2b       	or	r18, r21
    17fc:	21 f4       	brne	.+8      	; 0x1806 <__fp_cmp+0x3e>
    17fe:	08 95       	ret
    1800:	0a 26       	eor	r0, r26
    1802:	09 f4       	brne	.+2      	; 0x1806 <__fp_cmp+0x3e>
    1804:	a1 40       	sbci	r26, 0x01	; 1
    1806:	a6 95       	lsr	r26
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	81 1d       	adc	r24, r1
    180c:	81 1d       	adc	r24, r1
    180e:	08 95       	ret

00001810 <__fp_inf>:
    1810:	97 f9       	bld	r25, 7
    1812:	9f 67       	ori	r25, 0x7F	; 127
    1814:	80 e8       	ldi	r24, 0x80	; 128
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	08 95       	ret

0000181c <__fp_nan>:
    181c:	9f ef       	ldi	r25, 0xFF	; 255
    181e:	80 ec       	ldi	r24, 0xC0	; 192
    1820:	08 95       	ret

00001822 <__fp_powser>:
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	1f 93       	push	r17
    1828:	0f 93       	push	r16
    182a:	ff 92       	push	r15
    182c:	ef 92       	push	r14
    182e:	df 92       	push	r13
    1830:	7b 01       	movw	r14, r22
    1832:	8c 01       	movw	r16, r24
    1834:	68 94       	set
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <__fp_powser+0x22>
    1838:	da 2e       	mov	r13, r26
    183a:	ef 01       	movw	r28, r30
    183c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__mulsf3x>
    1840:	fe 01       	movw	r30, r28
    1842:	e8 94       	clt
    1844:	a5 91       	lpm	r26, Z+
    1846:	25 91       	lpm	r18, Z+
    1848:	35 91       	lpm	r19, Z+
    184a:	45 91       	lpm	r20, Z+
    184c:	55 91       	lpm	r21, Z+
    184e:	a6 f3       	brts	.-24     	; 0x1838 <__fp_powser+0x16>
    1850:	ef 01       	movw	r28, r30
    1852:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__addsf3x>
    1856:	fe 01       	movw	r30, r28
    1858:	97 01       	movw	r18, r14
    185a:	a8 01       	movw	r20, r16
    185c:	da 94       	dec	r13
    185e:	69 f7       	brne	.-38     	; 0x183a <__fp_powser+0x18>
    1860:	df 90       	pop	r13
    1862:	ef 90       	pop	r14
    1864:	ff 90       	pop	r15
    1866:	0f 91       	pop	r16
    1868:	1f 91       	pop	r17
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <__fp_pscA>:
    1870:	00 24       	eor	r0, r0
    1872:	0a 94       	dec	r0
    1874:	16 16       	cp	r1, r22
    1876:	17 06       	cpc	r1, r23
    1878:	18 06       	cpc	r1, r24
    187a:	09 06       	cpc	r0, r25
    187c:	08 95       	ret

0000187e <__fp_pscB>:
    187e:	00 24       	eor	r0, r0
    1880:	0a 94       	dec	r0
    1882:	12 16       	cp	r1, r18
    1884:	13 06       	cpc	r1, r19
    1886:	14 06       	cpc	r1, r20
    1888:	05 06       	cpc	r0, r21
    188a:	08 95       	ret

0000188c <__fp_round>:
    188c:	09 2e       	mov	r0, r25
    188e:	03 94       	inc	r0
    1890:	00 0c       	add	r0, r0
    1892:	11 f4       	brne	.+4      	; 0x1898 <__fp_round+0xc>
    1894:	88 23       	and	r24, r24
    1896:	52 f0       	brmi	.+20     	; 0x18ac <__fp_round+0x20>
    1898:	bb 0f       	add	r27, r27
    189a:	40 f4       	brcc	.+16     	; 0x18ac <__fp_round+0x20>
    189c:	bf 2b       	or	r27, r31
    189e:	11 f4       	brne	.+4      	; 0x18a4 <__fp_round+0x18>
    18a0:	60 ff       	sbrs	r22, 0
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <__fp_round+0x20>
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	8f 4f       	sbci	r24, 0xFF	; 255
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	08 95       	ret

000018ae <__fp_split3>:
    18ae:	57 fd       	sbrc	r21, 7
    18b0:	90 58       	subi	r25, 0x80	; 128
    18b2:	44 0f       	add	r20, r20
    18b4:	55 1f       	adc	r21, r21
    18b6:	59 f0       	breq	.+22     	; 0x18ce <__fp_splitA+0x10>
    18b8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ba:	71 f0       	breq	.+28     	; 0x18d8 <__fp_splitA+0x1a>
    18bc:	47 95       	ror	r20

000018be <__fp_splitA>:
    18be:	88 0f       	add	r24, r24
    18c0:	97 fb       	bst	r25, 7
    18c2:	99 1f       	adc	r25, r25
    18c4:	61 f0       	breq	.+24     	; 0x18de <__fp_splitA+0x20>
    18c6:	9f 3f       	cpi	r25, 0xFF	; 255
    18c8:	79 f0       	breq	.+30     	; 0x18e8 <__fp_splitA+0x2a>
    18ca:	87 95       	ror	r24
    18cc:	08 95       	ret
    18ce:	12 16       	cp	r1, r18
    18d0:	13 06       	cpc	r1, r19
    18d2:	14 06       	cpc	r1, r20
    18d4:	55 1f       	adc	r21, r21
    18d6:	f2 cf       	rjmp	.-28     	; 0x18bc <__fp_split3+0xe>
    18d8:	46 95       	lsr	r20
    18da:	f1 df       	rcall	.-30     	; 0x18be <__fp_splitA>
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <__fp_splitA+0x30>
    18de:	16 16       	cp	r1, r22
    18e0:	17 06       	cpc	r1, r23
    18e2:	18 06       	cpc	r1, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	f1 cf       	rjmp	.-30     	; 0x18ca <__fp_splitA+0xc>
    18e8:	86 95       	lsr	r24
    18ea:	71 05       	cpc	r23, r1
    18ec:	61 05       	cpc	r22, r1
    18ee:	08 94       	sec
    18f0:	08 95       	ret

000018f2 <__fp_zero>:
    18f2:	e8 94       	clt

000018f4 <__fp_szero>:
    18f4:	bb 27       	eor	r27, r27
    18f6:	66 27       	eor	r22, r22
    18f8:	77 27       	eor	r23, r23
    18fa:	cb 01       	movw	r24, r22
    18fc:	97 f9       	bld	r25, 7
    18fe:	08 95       	ret

00001900 <inverse>:
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	80 e8       	ldi	r24, 0x80	; 128
    190a:	9f e3       	ldi	r25, 0x3F	; 63
    190c:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__divsf3>

00001910 <__mulsf3>:
    1910:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__mulsf3x>
    1914:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_round>
    1918:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fp_pscA>
    191c:	38 f0       	brcs	.+14     	; 0x192c <__mulsf3+0x1c>
    191e:	0e 94 3f 0c 	call	0x187e	; 0x187e <__fp_pscB>
    1922:	20 f0       	brcs	.+8      	; 0x192c <__mulsf3+0x1c>
    1924:	95 23       	and	r25, r21
    1926:	11 f0       	breq	.+4      	; 0x192c <__mulsf3+0x1c>
    1928:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_inf>
    192c:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_nan>
    1930:	11 24       	eor	r1, r1
    1932:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_szero>

00001936 <__mulsf3x>:
    1936:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fp_split3>
    193a:	70 f3       	brcs	.-36     	; 0x1918 <__mulsf3+0x8>

0000193c <__mulsf3_pse>:
    193c:	95 9f       	mul	r25, r21
    193e:	c1 f3       	breq	.-16     	; 0x1930 <__mulsf3+0x20>
    1940:	95 0f       	add	r25, r21
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	55 1f       	adc	r21, r21
    1946:	62 9f       	mul	r22, r18
    1948:	f0 01       	movw	r30, r0
    194a:	72 9f       	mul	r23, r18
    194c:	bb 27       	eor	r27, r27
    194e:	f0 0d       	add	r31, r0
    1950:	b1 1d       	adc	r27, r1
    1952:	63 9f       	mul	r22, r19
    1954:	aa 27       	eor	r26, r26
    1956:	f0 0d       	add	r31, r0
    1958:	b1 1d       	adc	r27, r1
    195a:	aa 1f       	adc	r26, r26
    195c:	64 9f       	mul	r22, r20
    195e:	66 27       	eor	r22, r22
    1960:	b0 0d       	add	r27, r0
    1962:	a1 1d       	adc	r26, r1
    1964:	66 1f       	adc	r22, r22
    1966:	82 9f       	mul	r24, r18
    1968:	22 27       	eor	r18, r18
    196a:	b0 0d       	add	r27, r0
    196c:	a1 1d       	adc	r26, r1
    196e:	62 1f       	adc	r22, r18
    1970:	73 9f       	mul	r23, r19
    1972:	b0 0d       	add	r27, r0
    1974:	a1 1d       	adc	r26, r1
    1976:	62 1f       	adc	r22, r18
    1978:	83 9f       	mul	r24, r19
    197a:	a0 0d       	add	r26, r0
    197c:	61 1d       	adc	r22, r1
    197e:	22 1f       	adc	r18, r18
    1980:	74 9f       	mul	r23, r20
    1982:	33 27       	eor	r19, r19
    1984:	a0 0d       	add	r26, r0
    1986:	61 1d       	adc	r22, r1
    1988:	23 1f       	adc	r18, r19
    198a:	84 9f       	mul	r24, r20
    198c:	60 0d       	add	r22, r0
    198e:	21 1d       	adc	r18, r1
    1990:	82 2f       	mov	r24, r18
    1992:	76 2f       	mov	r23, r22
    1994:	6a 2f       	mov	r22, r26
    1996:	11 24       	eor	r1, r1
    1998:	9f 57       	subi	r25, 0x7F	; 127
    199a:	50 40       	sbci	r21, 0x00	; 0
    199c:	9a f0       	brmi	.+38     	; 0x19c4 <__mulsf3_pse+0x88>
    199e:	f1 f0       	breq	.+60     	; 0x19dc <__mulsf3_pse+0xa0>
    19a0:	88 23       	and	r24, r24
    19a2:	4a f0       	brmi	.+18     	; 0x19b6 <__mulsf3_pse+0x7a>
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	bb 1f       	adc	r27, r27
    19aa:	66 1f       	adc	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	91 50       	subi	r25, 0x01	; 1
    19b2:	50 40       	sbci	r21, 0x00	; 0
    19b4:	a9 f7       	brne	.-22     	; 0x19a0 <__mulsf3_pse+0x64>
    19b6:	9e 3f       	cpi	r25, 0xFE	; 254
    19b8:	51 05       	cpc	r21, r1
    19ba:	80 f0       	brcs	.+32     	; 0x19dc <__mulsf3_pse+0xa0>
    19bc:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_inf>
    19c0:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_szero>
    19c4:	5f 3f       	cpi	r21, 0xFF	; 255
    19c6:	e4 f3       	brlt	.-8      	; 0x19c0 <__mulsf3_pse+0x84>
    19c8:	98 3e       	cpi	r25, 0xE8	; 232
    19ca:	d4 f3       	brlt	.-12     	; 0x19c0 <__mulsf3_pse+0x84>
    19cc:	86 95       	lsr	r24
    19ce:	77 95       	ror	r23
    19d0:	67 95       	ror	r22
    19d2:	b7 95       	ror	r27
    19d4:	f7 95       	ror	r31
    19d6:	e7 95       	ror	r30
    19d8:	9f 5f       	subi	r25, 0xFF	; 255
    19da:	c1 f7       	brne	.-16     	; 0x19cc <__mulsf3_pse+0x90>
    19dc:	fe 2b       	or	r31, r30
    19de:	88 0f       	add	r24, r24
    19e0:	91 1d       	adc	r25, r1
    19e2:	96 95       	lsr	r25
    19e4:	87 95       	ror	r24
    19e6:	97 f9       	bld	r25, 7
    19e8:	08 95       	ret

000019ea <round>:
    19ea:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_splitA>
    19ee:	e8 f0       	brcs	.+58     	; 0x1a2a <round+0x40>
    19f0:	9e 37       	cpi	r25, 0x7E	; 126
    19f2:	e8 f0       	brcs	.+58     	; 0x1a2e <round+0x44>
    19f4:	96 39       	cpi	r25, 0x96	; 150
    19f6:	b8 f4       	brcc	.+46     	; 0x1a26 <round+0x3c>
    19f8:	9e 38       	cpi	r25, 0x8E	; 142
    19fa:	48 f4       	brcc	.+18     	; 0x1a0e <round+0x24>
    19fc:	67 2f       	mov	r22, r23
    19fe:	78 2f       	mov	r23, r24
    1a00:	88 27       	eor	r24, r24
    1a02:	98 5f       	subi	r25, 0xF8	; 248
    1a04:	f9 cf       	rjmp	.-14     	; 0x19f8 <round+0xe>
    1a06:	86 95       	lsr	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	93 95       	inc	r25
    1a0e:	95 39       	cpi	r25, 0x95	; 149
    1a10:	d0 f3       	brcs	.-12     	; 0x1a06 <round+0x1c>
    1a12:	b6 2f       	mov	r27, r22
    1a14:	b1 70       	andi	r27, 0x01	; 1
    1a16:	6b 0f       	add	r22, r27
    1a18:	71 1d       	adc	r23, r1
    1a1a:	81 1d       	adc	r24, r1
    1a1c:	20 f4       	brcc	.+8      	; 0x1a26 <round+0x3c>
    1a1e:	87 95       	ror	r24
    1a20:	77 95       	ror	r23
    1a22:	67 95       	ror	r22
    1a24:	93 95       	inc	r25
    1a26:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_mintl>
    1a2a:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__fp_mpack>
    1a2e:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_szero>
    1a32:	19 f4       	brne	.+6      	; 0x1a3a <round+0x50>
    1a34:	16 f4       	brtc	.+4      	; 0x1a3a <round+0x50>
    1a36:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_nan>
    1a3a:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__fp_mpack>

00001a3e <sqrt>:
    1a3e:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_splitA>
    1a42:	b8 f3       	brcs	.-18     	; 0x1a32 <round+0x48>
    1a44:	99 23       	and	r25, r25
    1a46:	c9 f3       	breq	.-14     	; 0x1a3a <round+0x50>
    1a48:	b6 f3       	brts	.-20     	; 0x1a36 <round+0x4c>
    1a4a:	9f 57       	subi	r25, 0x7F	; 127
    1a4c:	55 0b       	sbc	r21, r21
    1a4e:	87 ff       	sbrs	r24, 7
    1a50:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_norm2>
    1a54:	00 24       	eor	r0, r0
    1a56:	a0 e6       	ldi	r26, 0x60	; 96
    1a58:	40 ea       	ldi	r20, 0xA0	; 160
    1a5a:	90 01       	movw	r18, r0
    1a5c:	80 58       	subi	r24, 0x80	; 128
    1a5e:	56 95       	lsr	r21
    1a60:	97 95       	ror	r25
    1a62:	28 f4       	brcc	.+10     	; 0x1a6e <sqrt+0x30>
    1a64:	80 5c       	subi	r24, 0xC0	; 192
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	20 f0       	brcs	.+8      	; 0x1a76 <sqrt+0x38>
    1a6e:	26 17       	cp	r18, r22
    1a70:	37 07       	cpc	r19, r23
    1a72:	48 07       	cpc	r20, r24
    1a74:	30 f4       	brcc	.+12     	; 0x1a82 <sqrt+0x44>
    1a76:	62 1b       	sub	r22, r18
    1a78:	73 0b       	sbc	r23, r19
    1a7a:	84 0b       	sbc	r24, r20
    1a7c:	20 29       	or	r18, r0
    1a7e:	31 29       	or	r19, r1
    1a80:	4a 2b       	or	r20, r26
    1a82:	a6 95       	lsr	r26
    1a84:	17 94       	ror	r1
    1a86:	07 94       	ror	r0
    1a88:	20 25       	eor	r18, r0
    1a8a:	31 25       	eor	r19, r1
    1a8c:	4a 27       	eor	r20, r26
    1a8e:	58 f7       	brcc	.-42     	; 0x1a66 <sqrt+0x28>
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	20 f0       	brcs	.+8      	; 0x1aa0 <sqrt+0x62>
    1a98:	26 17       	cp	r18, r22
    1a9a:	37 07       	cpc	r19, r23
    1a9c:	48 07       	cpc	r20, r24
    1a9e:	30 f4       	brcc	.+12     	; 0x1aac <sqrt+0x6e>
    1aa0:	62 0b       	sbc	r22, r18
    1aa2:	73 0b       	sbc	r23, r19
    1aa4:	84 0b       	sbc	r24, r20
    1aa6:	20 0d       	add	r18, r0
    1aa8:	31 1d       	adc	r19, r1
    1aaa:	41 1d       	adc	r20, r1
    1aac:	a0 95       	com	r26
    1aae:	81 f7       	brne	.-32     	; 0x1a90 <sqrt+0x52>
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	84 2f       	mov	r24, r20
    1ab4:	91 58       	subi	r25, 0x81	; 129
    1ab6:	88 0f       	add	r24, r24
    1ab8:	96 95       	lsr	r25
    1aba:	87 95       	ror	r24
    1abc:	08 95       	ret

00001abe <square>:
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__mulsf3>
    1ac6:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fp_pscA>
    1aca:	38 f0       	brcs	.+14     	; 0x1ada <square+0x1c>
    1acc:	0e 94 3f 0c 	call	0x187e	; 0x187e <__fp_pscB>
    1ad0:	20 f0       	brcs	.+8      	; 0x1ada <square+0x1c>
    1ad2:	39 f4       	brne	.+14     	; 0x1ae2 <square+0x24>
    1ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <square+0x20>
    1ad8:	26 f4       	brtc	.+8      	; 0x1ae2 <square+0x24>
    1ada:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_nan>
    1ade:	0e f4       	brtc	.+2      	; 0x1ae2 <square+0x24>
    1ae0:	e0 95       	com	r30
    1ae2:	e7 fb       	bst	r30, 7
    1ae4:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_inf>

00001ae8 <__addsf3x>:
    1ae8:	e9 2f       	mov	r30, r25
    1aea:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fp_split3>
    1aee:	58 f3       	brcs	.-42     	; 0x1ac6 <square+0x8>
    1af0:	ba 17       	cp	r27, r26
    1af2:	62 07       	cpc	r22, r18
    1af4:	73 07       	cpc	r23, r19
    1af6:	84 07       	cpc	r24, r20
    1af8:	95 07       	cpc	r25, r21
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__addsf3x+0x1c>
    1afc:	79 f4       	brne	.+30     	; 0x1b1c <__addsf3x+0x34>
    1afe:	a6 f5       	brtc	.+104    	; 0x1b68 <__addsf3x+0x80>
    1b00:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_zero>
    1b04:	0e f4       	brtc	.+2      	; 0x1b08 <__addsf3x+0x20>
    1b06:	e0 95       	com	r30
    1b08:	0b 2e       	mov	r0, r27
    1b0a:	ba 2f       	mov	r27, r26
    1b0c:	a0 2d       	mov	r26, r0
    1b0e:	0b 01       	movw	r0, r22
    1b10:	b9 01       	movw	r22, r18
    1b12:	90 01       	movw	r18, r0
    1b14:	0c 01       	movw	r0, r24
    1b16:	ca 01       	movw	r24, r20
    1b18:	a0 01       	movw	r20, r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	ff 27       	eor	r31, r31
    1b1e:	59 1b       	sub	r21, r25
    1b20:	99 f0       	breq	.+38     	; 0x1b48 <__addsf3x+0x60>
    1b22:	59 3f       	cpi	r21, 0xF9	; 249
    1b24:	50 f4       	brcc	.+20     	; 0x1b3a <__addsf3x+0x52>
    1b26:	50 3e       	cpi	r21, 0xE0	; 224
    1b28:	68 f1       	brcs	.+90     	; 0x1b84 <__addsf3x+0x9c>
    1b2a:	1a 16       	cp	r1, r26
    1b2c:	f0 40       	sbci	r31, 0x00	; 0
    1b2e:	a2 2f       	mov	r26, r18
    1b30:	23 2f       	mov	r18, r19
    1b32:	34 2f       	mov	r19, r20
    1b34:	44 27       	eor	r20, r20
    1b36:	58 5f       	subi	r21, 0xF8	; 248
    1b38:	f3 cf       	rjmp	.-26     	; 0x1b20 <__addsf3x+0x38>
    1b3a:	46 95       	lsr	r20
    1b3c:	37 95       	ror	r19
    1b3e:	27 95       	ror	r18
    1b40:	a7 95       	ror	r26
    1b42:	f0 40       	sbci	r31, 0x00	; 0
    1b44:	53 95       	inc	r21
    1b46:	c9 f7       	brne	.-14     	; 0x1b3a <__addsf3x+0x52>
    1b48:	7e f4       	brtc	.+30     	; 0x1b68 <__addsf3x+0x80>
    1b4a:	1f 16       	cp	r1, r31
    1b4c:	ba 0b       	sbc	r27, r26
    1b4e:	62 0b       	sbc	r22, r18
    1b50:	73 0b       	sbc	r23, r19
    1b52:	84 0b       	sbc	r24, r20
    1b54:	ba f0       	brmi	.+46     	; 0x1b84 <__addsf3x+0x9c>
    1b56:	91 50       	subi	r25, 0x01	; 1
    1b58:	a1 f0       	breq	.+40     	; 0x1b82 <__addsf3x+0x9a>
    1b5a:	ff 0f       	add	r31, r31
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	66 1f       	adc	r22, r22
    1b60:	77 1f       	adc	r23, r23
    1b62:	88 1f       	adc	r24, r24
    1b64:	c2 f7       	brpl	.-16     	; 0x1b56 <__addsf3x+0x6e>
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <__addsf3x+0x9c>
    1b68:	ba 0f       	add	r27, r26
    1b6a:	62 1f       	adc	r22, r18
    1b6c:	73 1f       	adc	r23, r19
    1b6e:	84 1f       	adc	r24, r20
    1b70:	48 f4       	brcc	.+18     	; 0x1b84 <__addsf3x+0x9c>
    1b72:	87 95       	ror	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	b7 95       	ror	r27
    1b7a:	f7 95       	ror	r31
    1b7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <__addsf3x+0x9a>
    1b80:	b0 cf       	rjmp	.-160    	; 0x1ae2 <square+0x24>
    1b82:	93 95       	inc	r25
    1b84:	88 0f       	add	r24, r24
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <__addsf3x+0xa2>
    1b88:	99 27       	eor	r25, r25
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	97 95       	ror	r25
    1b8e:	87 95       	ror	r24
    1b90:	08 95       	ret

00001b92 <__fp_mintl>:
    1b92:	88 23       	and	r24, r24
    1b94:	71 f4       	brne	.+28     	; 0x1bb2 <__fp_mintl+0x20>
    1b96:	77 23       	and	r23, r23
    1b98:	21 f0       	breq	.+8      	; 0x1ba2 <__fp_mintl+0x10>
    1b9a:	98 50       	subi	r25, 0x08	; 8
    1b9c:	87 2b       	or	r24, r23
    1b9e:	76 2f       	mov	r23, r22
    1ba0:	07 c0       	rjmp	.+14     	; 0x1bb0 <__fp_mintl+0x1e>
    1ba2:	66 23       	and	r22, r22
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <__fp_mintl+0x18>
    1ba6:	99 27       	eor	r25, r25
    1ba8:	0d c0       	rjmp	.+26     	; 0x1bc4 <__fp_mintl+0x32>
    1baa:	90 51       	subi	r25, 0x10	; 16
    1bac:	86 2b       	or	r24, r22
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	2a f0       	brmi	.+10     	; 0x1bbe <__fp_mintl+0x2c>
    1bb4:	9a 95       	dec	r25
    1bb6:	66 0f       	add	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 1f       	adc	r24, r24
    1bbc:	da f7       	brpl	.-10     	; 0x1bb4 <__fp_mintl+0x22>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	96 95       	lsr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	97 f9       	bld	r25, 7
    1bc6:	08 95       	ret

00001bc8 <__fp_mpack>:
    1bc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bca:	31 f0       	breq	.+12     	; 0x1bd8 <__fp_mpack_finite+0xc>

00001bcc <__fp_mpack_finite>:
    1bcc:	91 50       	subi	r25, 0x01	; 1
    1bce:	20 f4       	brcc	.+8      	; 0x1bd8 <__fp_mpack_finite+0xc>
    1bd0:	87 95       	ror	r24
    1bd2:	77 95       	ror	r23
    1bd4:	67 95       	ror	r22
    1bd6:	b7 95       	ror	r27
    1bd8:	88 0f       	add	r24, r24
    1bda:	91 1d       	adc	r25, r1
    1bdc:	96 95       	lsr	r25
    1bde:	87 95       	ror	r24
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <__fp_norm2>:
    1be4:	91 50       	subi	r25, 0x01	; 1
    1be6:	50 40       	sbci	r21, 0x00	; 0
    1be8:	66 0f       	add	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	d2 f7       	brpl	.-12     	; 0x1be4 <__fp_norm2>
    1bf0:	08 95       	ret

00001bf2 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1bf2:	ec e7       	ldi	r30, 0x7C	; 124
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7d       	andi	r24, 0xDF	; 223
    1bfa:	80 83       	st	Z, r24
    1bfc:	08 95       	ret

00001bfe <_ZN15OrangutanAnalog7setModeEh>:
    1bfe:	81 11       	cpse	r24, r1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1c02:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1c06:	08 95       	ret
    1c08:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c0c:	80 62       	ori	r24, 0x20	; 32
    1c0e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c12:	08 95       	ret

00001c14 <_ZN15OrangutanAnalog7getModeEv>:
    1c14:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c18:	85 fb       	bst	r24, 5
    1c1a:	88 27       	eor	r24, r24
    1c1c:	80 f9       	bld	r24, 0
    1c1e:	08 95       	ret

00001c20 <_ZN15OrangutanAnalog16conversionResultEv>:
    1c20:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN15OrangutanAnalog7getModeEv>
    1c24:	88 23       	and	r24, r24
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1c28:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	08 95       	ret
    1c30:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1c34:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1c38:	08 95       	ret

00001c3a <_ZN15OrangutanAnalog15startConversionEhh>:
    1c3a:	80 32       	cpi	r24, 0x20	; 32
    1c3c:	a0 f4       	brcc	.+40     	; 0x1c66 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1c3e:	97 e8       	ldi	r25, 0x87	; 135
    1c40:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c44:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c48:	66 23       	and	r22, r22
    1c4a:	11 f0       	breq	.+4      	; 0x1c50 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1c4c:	90 6c       	ori	r25, 0xC0	; 192
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1c50:	9f 77       	andi	r25, 0x7F	; 127
    1c52:	90 64       	ori	r25, 0x40	; 64
    1c54:	90 7e       	andi	r25, 0xE0	; 224
    1c56:	98 2b       	or	r25, r24
    1c58:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c5c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c60:	80 64       	ori	r24, 0x40	; 64
    1c62:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c66:	08 95       	ret

00001c68 <_ZN15OrangutanAnalog11readAverageEhj>:
    1c68:	a0 e0       	ldi	r26, 0x00	; 0
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	ea e3       	ldi	r30, 0x3A	; 58
    1c6e:	fe e0       	ldi	r31, 0x0E	; 14
    1c70:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x14>
    1c74:	eb 01       	movw	r28, r22
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN15OrangutanAnalog15startConversionEhh>
    1c7c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c80:	86 fd       	sbrc	r24, 6
    1c82:	fc cf       	rjmp	.-8      	; 0x1c7c <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1c84:	8e 01       	movw	r16, r28
    1c86:	c1 2c       	mov	r12, r1
    1c88:	d1 2c       	mov	r13, r1
    1c8a:	76 01       	movw	r14, r12
    1c8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c9a:	86 fd       	sbrc	r24, 6
    1c9c:	fc cf       	rjmp	.-8      	; 0x1c96 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1c9e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZN15OrangutanAnalog16conversionResultEv>
    1ca2:	c8 0e       	add	r12, r24
    1ca4:	d9 1e       	adc	r13, r25
    1ca6:	e1 1c       	adc	r14, r1
    1ca8:	f1 1c       	adc	r15, r1
    1caa:	01 50       	subi	r16, 0x01	; 1
    1cac:	11 09       	sbc	r17, r1
    1cae:	01 15       	cp	r16, r1
    1cb0:	11 05       	cpc	r17, r1
    1cb2:	61 f7       	brne	.-40     	; 0x1c8c <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	96 95       	lsr	r25
    1cb8:	87 95       	ror	r24
    1cba:	c0 34       	cpi	r28, 0x40	; 64
    1cbc:	d1 05       	cpc	r29, r1
    1cbe:	38 f4       	brcc	.+14     	; 0x1cce <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1cc0:	8c 0d       	add	r24, r12
    1cc2:	9d 1d       	adc	r25, r13
    1cc4:	be 01       	movw	r22, r28
    1cc6:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    1cca:	cb 01       	movw	r24, r22
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1cce:	a7 01       	movw	r20, r14
    1cd0:	96 01       	movw	r18, r12
    1cd2:	28 0f       	add	r18, r24
    1cd4:	39 1f       	adc	r19, r25
    1cd6:	41 1d       	adc	r20, r1
    1cd8:	51 1d       	adc	r21, r1
    1cda:	ca 01       	movw	r24, r20
    1cdc:	b9 01       	movw	r22, r18
    1cde:	9e 01       	movw	r18, r28
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	0e 94 24 18 	call	0x3048	; 0x3048 <__udivmodsi4>
    1ce8:	c9 01       	movw	r24, r18
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	e8 e0       	ldi	r30, 0x08	; 8
    1cf0:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x14>

00001cf4 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1d00:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1d04:	9c 01       	movw	r18, r24
    1d06:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__umulhisi3>
    1d0a:	6b 01       	movw	r12, r22
    1d0c:	7c 01       	movw	r14, r24
    1d0e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN15OrangutanAnalog7getModeEv>
    1d12:	88 23       	and	r24, r24
    1d14:	59 f0       	breq	.+22     	; 0x1d2c <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1d16:	c7 01       	movw	r24, r14
    1d18:	b6 01       	movw	r22, r12
    1d1a:	61 58       	subi	r22, 0x81	; 129
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	2f ef       	ldi	r18, 0xFF	; 255
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	0a c0       	rjmp	.+20     	; 0x1d40 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1d2c:	c7 01       	movw	r24, r14
    1d2e:	b6 01       	movw	r22, r12
    1d30:	61 50       	subi	r22, 0x01	; 1
    1d32:	7e 4f       	sbci	r23, 0xFE	; 254
    1d34:	8f 4f       	sbci	r24, 0xFF	; 255
    1d36:	9f 4f       	sbci	r25, 0xFF	; 255
    1d38:	2f ef       	ldi	r18, 0xFF	; 255
    1d3a:	33 e0       	ldi	r19, 0x03	; 3
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	0e 94 24 18 	call	0x3048	; 0x3048 <__udivmodsi4>
    1d44:	c9 01       	movw	r24, r18
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1d50:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15OrangutanAnalog11readAverageEhj>
    1d54:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1d58:	08 95       	ret

00001d5a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN15OrangutanAnalog7getModeEv>
    1d64:	18 2f       	mov	r17, r24
    1d66:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1d6a:	6a e0       	ldi	r22, 0x0A	; 10
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	86 e0       	ldi	r24, 0x06	; 6
    1d70:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1d74:	ec 01       	movw	r28, r24
    1d76:	81 2f       	mov	r24, r17
    1d78:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN15OrangutanAnalog7setModeEh>
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	8c 0f       	add	r24, r28
    1d84:	9d 1f       	adc	r25, r29
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	96 95       	lsr	r25
    1d8a:	87 95       	ror	r24
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	08 95       	ret

00001d94 <read_battery_millivolts_3pi>:
    1d94:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1d98:	08 95       	ret

00001d9a <_ZL16currentCharacterv>:
    1d9a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <_ZL17use_program_space>
    1d9e:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__data_end>
    1da2:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <__data_end+0x1>
    1da6:	99 23       	and	r25, r25
    1da8:	11 f0       	breq	.+4      	; 0x1dae <_ZL16currentCharacterv+0x14>
    1daa:	84 91       	lpm	r24, Z
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <_ZL16currentCharacterv+0x16>
    1dae:	80 81       	ld	r24, Z
    1db0:	2f eb       	ldi	r18, 0xBF	; 191
    1db2:	28 0f       	add	r18, r24
    1db4:	2a 31       	cpi	r18, 0x1A	; 26
    1db6:	10 f4       	brcc	.+4      	; 0x1dbc <_ZL16currentCharacterv+0x22>
    1db8:	80 5e       	subi	r24, 0xE0	; 224
    1dba:	08 95       	ret
    1dbc:	80 32       	cpi	r24, 0x20	; 32
    1dbe:	49 f4       	brne	.+18     	; 0x1dd2 <_ZL16currentCharacterv+0x38>
    1dc0:	9f 01       	movw	r18, r30
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
    1dca:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
    1dce:	ef 2b       	or	r30, r31
    1dd0:	31 f7       	brne	.-52     	; 0x1d9e <_ZL16currentCharacterv+0x4>
    1dd2:	08 95       	ret

00001dd4 <_ZL9getNumberv>:
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    1dde:	c0 e0       	ldi	r28, 0x00	; 0
    1de0:	d0 e0       	ldi	r29, 0x00	; 0
    1de2:	1a e0       	ldi	r17, 0x0A	; 10
    1de4:	90 ed       	ldi	r25, 0xD0	; 208
    1de6:	98 0f       	add	r25, r24
    1de8:	9a 30       	cpi	r25, 0x0A	; 10
    1dea:	b8 f4       	brcc	.+46     	; 0x1e1a <_ZL9getNumberv+0x46>
    1dec:	9e 01       	movw	r18, r28
    1dee:	12 9f       	mul	r17, r18
    1df0:	e0 01       	movw	r28, r0
    1df2:	13 9f       	mul	r17, r19
    1df4:	d0 0d       	add	r29, r0
    1df6:	11 24       	eor	r1, r1
    1df8:	c8 0f       	add	r28, r24
    1dfa:	d1 1d       	adc	r29, r1
    1dfc:	87 fd       	sbrc	r24, 7
    1dfe:	da 95       	dec	r29
    1e00:	e0 97       	sbiw	r28, 0x30	; 48
    1e02:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
    1e06:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
    1e10:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
    1e14:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    1e18:	e5 cf       	rjmp	.-54     	; 0x1de4 <_ZL9getNumberv+0x10>
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	08 95       	ret

00001e24 <_ZN15OrangutanBuzzer5init2Ev>:
    1e24:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e28:	83 e2       	ldi	r24, 0x23	; 35
    1e2a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e2e:	81 e1       	ldi	r24, 0x11	; 17
    1e30:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e34:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1e38:	80 e1       	ldi	r24, 0x10	; 16
    1e3a:	97 e2       	ldi	r25, 0x27	; 39
    1e3c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e40:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e44:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e48:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1e4c:	22 9a       	sbi	0x04, 2	; 4
    1e4e:	78 94       	sei
    1e50:	08 95       	ret

00001e52 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1e52:	8f 92       	push	r8
    1e54:	9f 92       	push	r9
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	5c 01       	movw	r10, r24
    1e6a:	8b 01       	movw	r16, r22
    1e6c:	d4 2e       	mov	r13, r20
    1e6e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <buzzerInitialized>
    1e72:	81 11       	cpse	r24, r1
    1e74:	05 c0       	rjmp	.+10     	; 0x1e80 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <buzzerInitialized>
    1e7c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN15OrangutanBuzzer5init2Ev>
    1e80:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1e84:	b7 fe       	sbrs	r11, 7
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1e88:	e8 94       	clt
    1e8a:	b7 f8       	bld	r11, 7
    1e8c:	2a e0       	ldi	r18, 0x0A	; 10
    1e8e:	f2 2e       	mov	r15, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1e92:	ff 24       	eor	r15, r15
    1e94:	f3 94       	inc	r15
    1e96:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e9a:	2e 2d       	mov	r18, r14
    1e9c:	28 7f       	andi	r18, 0xF8	; 248
    1e9e:	e2 2e       	mov	r14, r18
    1ea0:	48 ec       	ldi	r20, 0xC8	; 200
    1ea2:	f4 9e       	mul	r15, r20
    1ea4:	c0 01       	movw	r24, r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	8a 15       	cp	r24, r10
    1eaa:	9b 05       	cpc	r25, r11
    1eac:	e0 f4       	brcc	.+56     	; 0x1ee6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1eae:	e5 01       	movw	r28, r10
    1eb0:	51 e1       	ldi	r21, 0x11	; 17
    1eb2:	a5 16       	cp	r10, r21
    1eb4:	57 e2       	ldi	r21, 0x27	; 39
    1eb6:	b5 06       	cpc	r11, r21
    1eb8:	10 f0       	brcs	.+4      	; 0x1ebe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1eba:	c0 e1       	ldi	r28, 0x10	; 16
    1ebc:	d7 e2       	ldi	r29, 0x27	; 39
    1ebe:	be 01       	movw	r22, r28
    1ec0:	76 95       	lsr	r23
    1ec2:	67 95       	ror	r22
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	60 58       	subi	r22, 0x80	; 128
    1eca:	79 46       	sbci	r23, 0x69	; 105
    1ecc:	87 46       	sbci	r24, 0x67	; 103
    1ece:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed0:	4e 01       	movw	r8, r28
    1ed2:	a1 2c       	mov	r10, r1
    1ed4:	b1 2c       	mov	r11, r1
    1ed6:	a5 01       	movw	r20, r10
    1ed8:	94 01       	movw	r18, r8
    1eda:	0e 94 24 18 	call	0x3048	; 0x3048 <__udivmodsi4>
    1ede:	59 01       	movw	r10, r18
    1ee0:	8e 2d       	mov	r24, r14
    1ee2:	81 60       	ori	r24, 0x01	; 1
    1ee4:	24 c0       	rjmp	.+72     	; 0x1f2e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1ee6:	c8 e2       	ldi	r28, 0x28	; 40
    1ee8:	fc 9e       	mul	r15, r28
    1eea:	c0 2d       	mov	r28, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	d0 e0       	ldi	r29, 0x00	; 0
    1ef0:	ca 15       	cp	r28, r10
    1ef2:	db 05       	cpc	r29, r11
    1ef4:	08 f4       	brcc	.+2      	; 0x1ef8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1ef6:	e5 01       	movw	r28, r10
    1ef8:	be 01       	movw	r22, r28
    1efa:	76 95       	lsr	r23
    1efc:	67 95       	ror	r22
    1efe:	9e 01       	movw	r18, r28
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	8a e0       	ldi	r24, 0x0A	; 10
    1f06:	f8 12       	cpse	r15, r24
    1f08:	07 c0       	rjmp	.+14     	; 0x1f18 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	60 5e       	subi	r22, 0xE0	; 224
    1f10:	73 44       	sbci	r23, 0x43	; 67
    1f12:	81 44       	sbci	r24, 0x41	; 65
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	06 c0       	rjmp	.+12     	; 0x1f24 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	60 53       	subi	r22, 0x30	; 48
    1f1e:	7d 4e       	sbci	r23, 0xED	; 237
    1f20:	8c 4e       	sbci	r24, 0xEC	; 236
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	0e 94 24 18 	call	0x3048	; 0x3048 <__udivmodsi4>
    1f28:	59 01       	movw	r10, r18
    1f2a:	8e 2d       	mov	r24, r14
    1f2c:	82 60       	ori	r24, 0x02	; 2
    1f2e:	88 2e       	mov	r8, r24
    1f30:	2a e0       	ldi	r18, 0x0A	; 10
    1f32:	f2 12       	cpse	r15, r18
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1f36:	ce 01       	movw	r24, r28
    1f38:	05 96       	adiw	r24, 0x05	; 5
    1f3a:	6a e0       	ldi	r22, 0x0A	; 10
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    1f42:	eb 01       	movw	r28, r22
    1f44:	c8 3e       	cpi	r28, 0xE8	; 232
    1f46:	43 e0       	ldi	r20, 0x03	; 3
    1f48:	d4 07       	cpc	r29, r20
    1f4a:	59 f0       	breq	.+22     	; 0x1f62 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1f4c:	98 01       	movw	r18, r16
    1f4e:	de 01       	movw	r26, r28
    1f50:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__umulhisi3>
    1f54:	28 ee       	ldi	r18, 0xE8	; 232
    1f56:	33 e0       	ldi	r19, 0x03	; 3
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	0e 94 46 18 	call	0x308c	; 0x308c <__divmodsi4>
    1f60:	89 01       	movw	r16, r18
    1f62:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f66:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f6a:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f6e:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f72:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f76:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f7a:	4d 2d       	mov	r20, r13
    1f7c:	40 31       	cpi	r20, 0x10	; 16
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1f80:	4f e0       	ldi	r20, 0x0F	; 15
    1f82:	80 e1       	ldi	r24, 0x10	; 16
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	84 1b       	sub	r24, r20
    1f88:	91 09       	sbc	r25, r1
    1f8a:	a9 01       	movw	r20, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1f8e:	56 95       	lsr	r21
    1f90:	47 95       	ror	r20
    1f92:	8a 95       	dec	r24
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1f96:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f9a:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f9e:	10 93 86 01 	sts	0x0186, r17	; 0x800186 <_ZL13buzzerTimeout+0x1>
    1fa2:	00 93 85 01 	sts	0x0185, r16	; 0x800185 <_ZL13buzzerTimeout>
    1fa6:	86 b3       	in	r24, 0x16	; 22
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	86 bb       	out	0x16, r24	; 22
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	df 90       	pop	r13
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	9f 90       	pop	r9
    1fc6:	8f 90       	pop	r8
    1fc8:	08 95       	ret

00001fca <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	eb 01       	movw	r28, r22
    1fd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd2:	11 f0       	breq	.+4      	; 0x1fd8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1fd4:	41 11       	cpse	r20, r1
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	be 01       	movw	r22, r28
    1fdc:	88 ee       	ldi	r24, 0xE8	; 232
    1fde:	93 e0       	ldi	r25, 0x03	; 3
    1fe0:	43 c0       	rjmp	.+134    	; 0x2068 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1fe2:	81 31       	cpi	r24, 0x11	; 17
    1fe4:	30 f0       	brcs	.+12     	; 0x1ff2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1fe6:	50 ef       	ldi	r21, 0xF0	; 240
    1fe8:	58 0f       	add	r21, r24
    1fea:	50 36       	cpi	r21, 0x60	; 96
    1fec:	18 f0       	brcs	.+6      	; 0x1ff4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1fee:	5f e5       	ldi	r21, 0x5F	; 95
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	85 2f       	mov	r24, r21
    1ff6:	6c e0       	ldi	r22, 0x0C	; 12
    1ff8:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__udivmodqi4>
    1ffc:	68 2f       	mov	r22, r24
    1ffe:	74 ef       	ldi	r23, 0xF4	; 244
    2000:	76 03       	mulsu	r23, r22
    2002:	90 01       	movw	r18, r0
    2004:	11 24       	eor	r1, r1
    2006:	25 0f       	add	r18, r21
    2008:	31 1d       	adc	r19, r1
    200a:	2c 30       	cpi	r18, 0x0C	; 12
    200c:	31 05       	cpc	r19, r1
    200e:	40 f4       	brcc	.+16     	; 0x2020 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    2010:	f9 01       	movw	r30, r18
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	ec 5c       	subi	r30, 0xCC	; 204
    2018:	fe 4f       	sbci	r31, 0xFE	; 254
    201a:	20 81       	ld	r18, Z
    201c:	31 81       	ldd	r19, Z+1	; 0x01
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	87 30       	cpi	r24, 0x07	; 7
    2026:	81 f0       	breq	.+32     	; 0x2048 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    2028:	08 2e       	mov	r0, r24
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	28 f0       	brcs	.+10     	; 0x2042 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    2038:	c9 01       	movw	r24, r18
    203a:	05 96       	adiw	r24, 0x05	; 5
    203c:	6a e0       	ldi	r22, 0x0A	; 10
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	0c c0       	rjmp	.+24     	; 0x205a <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    2042:	c9 01       	movw	r24, r18
    2044:	90 58       	subi	r25, 0x80	; 128
    2046:	0c c0       	rjmp	.+24     	; 0x2060 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    2048:	c9 01       	movw	r24, r18
    204a:	36 e0       	ldi	r19, 0x06	; 6
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	3a 95       	dec	r19
    2052:	e1 f7       	brne	.-8      	; 0x204c <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    2054:	02 96       	adiw	r24, 0x02	; 2
    2056:	65 e0       	ldi	r22, 0x05	; 5
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    205e:	cb 01       	movw	r24, r22
    2060:	40 31       	cpi	r20, 0x10	; 16
    2062:	08 f0       	brcs	.+2      	; 0x2066 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    2064:	4f e0       	ldi	r20, 0x0F	; 15
    2066:	be 01       	movw	r22, r28
    2068:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <_ZL8nextNotev>:
    2072:	a2 e0       	ldi	r26, 0x02	; 2
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ef e3       	ldi	r30, 0x3F	; 63
    2078:	f0 e1       	ldi	r31, 0x10	; 16
    207a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__prologue_saves__+0x4>
    207e:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    2082:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL8staccato>
    2086:	88 23       	and	r24, r24
    2088:	21 f0       	breq	.+8      	; 0x2092 <_ZL8nextNotev+0x20>
    208a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <_ZL22staccato_rest_duration>
    208e:	61 11       	cpse	r22, r1
    2090:	17 c0       	rjmp	.+46     	; 0x20c0 <_ZL8nextNotev+0x4e>
    2092:	77 24       	eor	r7, r7
    2094:	73 94       	inc	r7
    2096:	b0 ec       	ldi	r27, 0xC0	; 192
    2098:	ab 2e       	mov	r10, r27
    209a:	bd e5       	ldi	r27, 0x5D	; 93
    209c:	bb 2e       	mov	r11, r27
    209e:	1a e0       	ldi	r17, 0x0A	; 10
    20a0:	61 2e       	mov	r6, r17
    20a2:	04 e0       	ldi	r16, 0x04	; 4
    20a4:	80 2e       	mov	r8, r16
    20a6:	80 ed       	ldi	r24, 0xD0	; 208
    20a8:	c8 2e       	mov	r12, r24
    20aa:	87 e0       	ldi	r24, 0x07	; 7
    20ac:	d8 2e       	mov	r13, r24
    20ae:	94 e0       	ldi	r25, 0x04	; 4
    20b0:	e9 2e       	mov	r14, r25
    20b2:	f1 2c       	mov	r15, r1
    20b4:	04 ef       	ldi	r16, 0xF4	; 244
    20b6:	11 e0       	ldi	r17, 0x01	; 1
    20b8:	2f e0       	ldi	r18, 0x0F	; 15
    20ba:	42 2e       	mov	r4, r18
    20bc:	51 2c       	mov	r5, r1
    20be:	15 c0       	rjmp	.+42     	; 0x20ea <_ZL8nextNotev+0x78>
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	88 ee       	ldi	r24, 0xE8	; 232
    20c6:	93 e0       	ldi	r25, 0x03	; 3
    20c8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    20cc:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL22staccato_rest_duration>
    20d0:	17 c1       	rjmp	.+558    	; 0x2300 <_ZL8nextNotev+0x28e>
    20d2:	86 36       	cpi	r24, 0x66	; 102
    20d4:	d4 f5       	brge	.+116    	; 0x214a <_ZL8nextNotev+0xd8>
    20d6:	81 36       	cpi	r24, 0x61	; 97
    20d8:	09 f4       	brne	.+2      	; 0x20dc <_ZL8nextNotev+0x6a>
    20da:	a9 c0       	rjmp	.+338    	; 0x222e <_ZL8nextNotev+0x1bc>
    20dc:	7c f5       	brge	.+94     	; 0x213c <_ZL8nextNotev+0xca>
    20de:	8c 33       	cpi	r24, 0x3C	; 60
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <_ZL8nextNotev+0x72>
    20e2:	60 c0       	rjmp	.+192    	; 0x21a4 <_ZL8nextNotev+0x132>
    20e4:	8e 33       	cpi	r24, 0x3E	; 62
    20e6:	81 f4       	brne	.+32     	; 0x2108 <_ZL8nextNotev+0x96>
    20e8:	93 94       	inc	r9
    20ea:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    20ee:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
    20f2:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
    20f6:	2f 5f       	subi	r18, 0xFF	; 255
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
    20fe:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
    2102:	85 36       	cpi	r24, 0x65	; 101
    2104:	31 f7       	brne	.-52     	; 0x20d2 <_ZL8nextNotev+0x60>
    2106:	52 c0       	rjmp	.+164    	; 0x21ac <_ZL8nextNotev+0x13a>
    2108:	81 32       	cpi	r24, 0x21	; 33
    210a:	09 f0       	breq	.+2      	; 0x210e <_ZL8nextNotev+0x9c>
    210c:	8b c0       	rjmp	.+278    	; 0x2224 <_ZL8nextNotev+0x1b2>
    210e:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    2112:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    2116:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    211a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    211e:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    2122:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    2126:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    212a:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    212e:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    2132:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_ZL8staccato>
    2136:	a4 e0       	ldi	r26, 0x04	; 4
    2138:	9a 2e       	mov	r9, r26
    213a:	d7 cf       	rjmp	.-82     	; 0x20ea <_ZL8nextNotev+0x78>
    213c:	83 36       	cpi	r24, 0x63	; 99
    213e:	a1 f1       	breq	.+104    	; 0x21a8 <_ZL8nextNotev+0x136>
    2140:	0c f4       	brge	.+2      	; 0x2144 <_ZL8nextNotev+0xd2>
    2142:	78 c0       	rjmp	.+240    	; 0x2234 <_ZL8nextNotev+0x1c2>
    2144:	10 e0       	ldi	r17, 0x00	; 0
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	77 c0       	rjmp	.+238    	; 0x2238 <_ZL8nextNotev+0x1c6>
    214a:	8d 36       	cpi	r24, 0x6D	; 109
    214c:	c1 f1       	breq	.+112    	; 0x21be <_ZL8nextNotev+0x14c>
    214e:	94 f4       	brge	.+36     	; 0x2174 <_ZL8nextNotev+0x102>
    2150:	87 36       	cpi	r24, 0x67	; 103
    2152:	91 f1       	breq	.+100    	; 0x21b8 <_ZL8nextNotev+0x146>
    2154:	74 f1       	brlt	.+92     	; 0x21b2 <_ZL8nextNotev+0x140>
    2156:	8c 36       	cpi	r24, 0x6C	; 108
    2158:	09 f0       	breq	.+2      	; 0x215c <_ZL8nextNotev+0xea>
    215a:	64 c0       	rjmp	.+200    	; 0x2224 <_ZL8nextNotev+0x1b2>
    215c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZL9getNumberv>
    2160:	bc 01       	movw	r22, r24
    2162:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    2166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    216a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    216e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2172:	51 c0       	rjmp	.+162    	; 0x2216 <_ZL8nextNotev+0x1a4>
    2174:	82 37       	cpi	r24, 0x72	; 114
    2176:	c9 f1       	breq	.+114    	; 0x21ea <_ZL8nextNotev+0x178>
    2178:	4c f4       	brge	.+18     	; 0x218c <_ZL8nextNotev+0x11a>
    217a:	8f 36       	cpi	r24, 0x6F	; 111
    217c:	09 f0       	breq	.+2      	; 0x2180 <_ZL8nextNotev+0x10e>
    217e:	52 c0       	rjmp	.+164    	; 0x2224 <_ZL8nextNotev+0x1b2>
    2180:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZL9getNumberv>
    2184:	98 2e       	mov	r9, r24
    2186:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    218a:	af cf       	rjmp	.-162    	; 0x20ea <_ZL8nextNotev+0x78>
    218c:	84 37       	cpi	r24, 0x74	; 116
    218e:	81 f1       	breq	.+96     	; 0x21f0 <_ZL8nextNotev+0x17e>
    2190:	86 37       	cpi	r24, 0x76	; 118
    2192:	09 f0       	breq	.+2      	; 0x2196 <_ZL8nextNotev+0x124>
    2194:	47 c0       	rjmp	.+142    	; 0x2224 <_ZL8nextNotev+0x1b2>
    2196:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZL9getNumberv>
    219a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    219e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    21a2:	a3 cf       	rjmp	.-186    	; 0x20ea <_ZL8nextNotev+0x78>
    21a4:	9a 94       	dec	r9
    21a6:	a1 cf       	rjmp	.-190    	; 0x20ea <_ZL8nextNotev+0x78>
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	20 c0       	rjmp	.+64     	; 0x21ec <_ZL8nextNotev+0x17a>
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	43 c0       	rjmp	.+134    	; 0x2238 <_ZL8nextNotev+0x1c6>
    21b2:	10 e0       	ldi	r17, 0x00	; 0
    21b4:	85 e0       	ldi	r24, 0x05	; 5
    21b6:	40 c0       	rjmp	.+128    	; 0x2238 <_ZL8nextNotev+0x1c6>
    21b8:	10 e0       	ldi	r17, 0x00	; 0
    21ba:	87 e0       	ldi	r24, 0x07	; 7
    21bc:	3d c0       	rjmp	.+122    	; 0x2238 <_ZL8nextNotev+0x1c6>
    21be:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    21c2:	8c 36       	cpi	r24, 0x6C	; 108
    21c4:	19 f4       	brne	.+6      	; 0x21cc <_ZL8nextNotev+0x15a>
    21c6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_ZL8staccato>
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <_ZL8nextNotev+0x162>
    21cc:	70 92 82 01 	sts	0x0182, r7	; 0x800182 <_ZL8staccato>
    21d0:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL22staccato_rest_duration>
    21d4:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
    21d8:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
    21dc:	2f 5f       	subi	r18, 0xFF	; 255
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
    21e4:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
    21e8:	80 cf       	rjmp	.-256    	; 0x20ea <_ZL8nextNotev+0x78>
    21ea:	11 e0       	ldi	r17, 0x01	; 1
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	24 c0       	rjmp	.+72     	; 0x2238 <_ZL8nextNotev+0x1c6>
    21f0:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZL9getNumberv>
    21f4:	bc 01       	movw	r22, r24
    21f6:	c5 01       	movw	r24, r10
    21f8:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    21fc:	66 9e       	mul	r6, r22
    21fe:	c0 01       	movw	r24, r0
    2200:	67 9e       	mul	r6, r23
    2202:	90 0d       	add	r25, r0
    2204:	11 24       	eor	r1, r1
    2206:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    220a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    220e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    2212:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    2216:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    221a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    221e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    2222:	63 cf       	rjmp	.-314    	; 0x20ea <_ZL8nextNotev+0x78>
    2224:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
    2228:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
    222c:	69 c0       	rjmp	.+210    	; 0x2300 <_ZL8nextNotev+0x28e>
    222e:	10 e0       	ldi	r17, 0x00	; 0
    2230:	89 e0       	ldi	r24, 0x09	; 9
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <_ZL8nextNotev+0x1c6>
    2234:	10 e0       	ldi	r17, 0x00	; 0
    2236:	8b e0       	ldi	r24, 0x0B	; 11
    2238:	08 2f       	mov	r16, r24
    223a:	9c e0       	ldi	r25, 0x0C	; 12
    223c:	99 9e       	mul	r9, r25
    223e:	00 0d       	add	r16, r0
    2240:	11 24       	eor	r1, r1
    2242:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    2246:	98 2f       	mov	r25, r24
    2248:	97 7f       	andi	r25, 0xF7	; 247
    224a:	93 32       	cpi	r25, 0x23	; 35
    224c:	61 f4       	brne	.+24     	; 0x2266 <_ZL8nextNotev+0x1f4>
    224e:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
    2252:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
    2256:	2f 5f       	subi	r18, 0xFF	; 255
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
    225e:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	ee cf       	rjmp	.-36     	; 0x2242 <_ZL8nextNotev+0x1d0>
    2266:	8d 32       	cpi	r24, 0x2D	; 45
    2268:	71 f4       	brne	.+28     	; 0x2286 <_ZL8nextNotev+0x214>
    226a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
    226e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
    2272:	2f 5f       	subi	r18, 0xFF	; 255
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
    227a:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
    227e:	01 50       	subi	r16, 0x01	; 1
    2280:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    2284:	f0 cf       	rjmp	.-32     	; 0x2266 <_ZL8nextNotev+0x1f4>
    2286:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    228a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    228e:	81 53       	subi	r24, 0x31	; 49
    2290:	88 30       	cpi	r24, 0x08	; 8
    2292:	50 f4       	brcc	.+20     	; 0x22a8 <_ZL8nextNotev+0x236>
    2294:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2298:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    229c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZL9getNumberv>
    22a0:	bc 01       	movw	r22, r24
    22a2:	c7 01       	movw	r24, r14
    22a4:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    22a8:	7b 01       	movw	r14, r22
    22aa:	f6 94       	lsr	r15
    22ac:	e7 94       	ror	r14
    22ae:	69 83       	std	Y+1, r22	; 0x01
    22b0:	7a 83       	std	Y+2, r23	; 0x02
    22b2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZL16currentCharacterv>
    22b6:	69 81       	ldd	r22, Y+1	; 0x01
    22b8:	7a 81       	ldd	r23, Y+2	; 0x02
    22ba:	8e 32       	cpi	r24, 0x2E	; 46
    22bc:	69 f4       	brne	.+26     	; 0x22d8 <_ZL8nextNotev+0x266>
    22be:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
    22c2:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
    22c6:	2f 5f       	subi	r18, 0xFF	; 255
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
    22ce:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
    22d2:	6e 0d       	add	r22, r14
    22d4:	7f 1d       	adc	r23, r15
    22d6:	e9 cf       	rjmp	.-46     	; 0x22aa <_ZL8nextNotev+0x238>
    22d8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL8staccato>
    22dc:	88 23       	and	r24, r24
    22de:	39 f0       	breq	.+14     	; 0x22ee <_ZL8nextNotev+0x27c>
    22e0:	9b 01       	movw	r18, r22
    22e2:	36 95       	lsr	r19
    22e4:	27 95       	ror	r18
    22e6:	20 93 81 01 	sts	0x0181, r18	; 0x800181 <_ZL22staccato_rest_duration>
    22ea:	62 1b       	sub	r22, r18
    22ec:	71 09       	sbc	r23, r1
    22ee:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    22f2:	11 23       	and	r17, r17
    22f4:	11 f0       	breq	.+4      	; 0x22fa <_ZL8nextNotev+0x288>
    22f6:	8f ef       	ldi	r24, 0xFF	; 255
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <_ZL8nextNotev+0x28a>
    22fa:	80 2f       	mov	r24, r16
    22fc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN15OrangutanBuzzer8playNoteEhjh>
    2300:	22 96       	adiw	r28, 0x02	; 2
    2302:	e0 e1       	ldi	r30, 0x10	; 16
    2304:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__epilogue_restores__+0x4>

00002308 <__vector_13>:
    2308:	1f 92       	push	r1
    230a:	0f 92       	push	r0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	0f 92       	push	r0
    2310:	11 24       	eor	r1, r1
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	4f 93       	push	r20
    2318:	5f 93       	push	r21
    231a:	6f 93       	push	r22
    231c:	7f 93       	push	r23
    231e:	8f 93       	push	r24
    2320:	9f 93       	push	r25
    2322:	af 93       	push	r26
    2324:	bf 93       	push	r27
    2326:	ef 93       	push	r30
    2328:	ff 93       	push	r31
    232a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_ZL13buzzerTimeout>
    232e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <_ZL13buzzerTimeout+0x1>
    2332:	9c 01       	movw	r18, r24
    2334:	21 50       	subi	r18, 0x01	; 1
    2336:	31 09       	sbc	r19, r1
    2338:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <_ZL13buzzerTimeout+0x1>
    233c:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <_ZL13buzzerTimeout>
    2340:	89 2b       	or	r24, r25
    2342:	11 f5       	brne	.+68     	; 0x2388 <__vector_13+0x80>
    2344:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2348:	78 94       	sei
    234a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    234e:	88 7f       	andi	r24, 0xF8	; 248
    2350:	81 60       	ori	r24, 0x01	; 1
    2352:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2356:	80 e1       	ldi	r24, 0x10	; 16
    2358:	97 e2       	ldi	r25, 0x27	; 39
    235a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    235e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2362:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2366:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    2370:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
    2374:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
    2378:	89 2b       	or	r24, r25
    237a:	31 f0       	breq	.+12     	; 0x2388 <__vector_13+0x80>
    237c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_ZL17play_mode_setting>
    2380:	81 11       	cpse	r24, r1
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <__vector_13+0x80>
    2384:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZL8nextNotev>
    2388:	ff 91       	pop	r31
    238a:	ef 91       	pop	r30
    238c:	bf 91       	pop	r27
    238e:	af 91       	pop	r26
    2390:	9f 91       	pop	r25
    2392:	8f 91       	pop	r24
    2394:	7f 91       	pop	r23
    2396:	6f 91       	pop	r22
    2398:	5f 91       	pop	r21
    239a:	4f 91       	pop	r20
    239c:	3f 91       	pop	r19
    239e:	2f 91       	pop	r18
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	0f 90       	pop	r0
    23a6:	1f 90       	pop	r1
    23a8:	18 95       	reti

000023aa <_ZN15OrangutanBuzzer4playEPKc>:
    23aa:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    23ae:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
    23b2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
    23b6:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <_ZL17use_program_space>
    23ba:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL22staccato_rest_duration>
    23be:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZL8nextNotev>
    23c2:	08 95       	ret

000023c4 <play>:
    23c4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_ZN15OrangutanBuzzer4playEPKc>
    23c8:	08 95       	ret

000023ca <delay_us.constprop.0>:
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	6f 93       	push	r22
    23d0:	64 e0       	ldi	r22, 0x04	; 4
    23d2:	6a 95       	dec	r22
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <delay_us.constprop.0+0x8>
    23d6:	6f 91       	pop	r22
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	c9 f7       	brne	.-14     	; 0x23ce <delay_us.constprop.0+0x4>
    23dc:	08 95       	ret

000023de <_ZN12OrangutanLCD8busyWaitEv>:
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	1a b1       	in	r17, 0x0a	; 10
    23e8:	57 98       	cbi	0x0a, 7	; 10
    23ea:	5a 98       	cbi	0x0b, 2	; 11
    23ec:	28 9a       	sbi	0x05, 0	; 5
    23ee:	c0 e0       	ldi	r28, 0x00	; 0
    23f0:	d0 e0       	ldi	r29, 0x00	; 0
    23f2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <delay_us.constprop.0>
    23f6:	5c 9a       	sbi	0x0b, 4	; 11
    23f8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <delay_us.constprop.0>
    23fc:	09 b1       	in	r16, 0x09	; 9
    23fe:	5c 98       	cbi	0x0b, 4	; 11
    2400:	0e 94 e5 11 	call	0x23ca	; 0x23ca <delay_us.constprop.0>
    2404:	5c 9a       	sbi	0x0b, 4	; 11
    2406:	0e 94 e5 11 	call	0x23ca	; 0x23ca <delay_us.constprop.0>
    240a:	5c 98       	cbi	0x0b, 4	; 11
    240c:	24 96       	adiw	r28, 0x04	; 4
    240e:	07 ff       	sbrs	r16, 7
    2410:	10 c0       	rjmp	.+32     	; 0x2432 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2412:	ae 01       	movw	r20, r28
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <lcdTimeout>
    241c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <lcdTimeout+0x1>
    2420:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <lcdTimeout+0x2>
    2424:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <lcdTimeout+0x3>
    2428:	48 17       	cp	r20, r24
    242a:	59 07       	cpc	r21, r25
    242c:	6a 07       	cpc	r22, r26
    242e:	7b 07       	cpc	r23, r27
    2430:	00 f3       	brcs	.-64     	; 0x23f2 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    2432:	1a b9       	out	0x0a, r17	; 10
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <_ZN12OrangutanLCD8sendDataEh>:
    243e:	95 b1       	in	r25, 0x05	; 5
    2440:	28 2f       	mov	r18, r24
    2442:	21 70       	andi	r18, 0x01	; 1
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	22 0f       	add	r18, r18
    2448:	33 1f       	adc	r19, r19
    244a:	48 2f       	mov	r20, r24
    244c:	46 70       	andi	r20, 0x06	; 6
    244e:	68 e0       	ldi	r22, 0x08	; 8
    2450:	46 9f       	mul	r20, r22
    2452:	a0 01       	movw	r20, r0
    2454:	11 24       	eor	r1, r1
    2456:	24 2b       	or	r18, r20
    2458:	9d 7c       	andi	r25, 0xCD	; 205
    245a:	29 2b       	or	r18, r25
    245c:	25 b9       	out	0x05, r18	; 5
    245e:	9b b1       	in	r25, 0x0b	; 11
    2460:	88 70       	andi	r24, 0x08	; 8
    2462:	82 95       	swap	r24
    2464:	80 7f       	andi	r24, 0xF0	; 240
    2466:	9f 77       	andi	r25, 0x7F	; 127
    2468:	89 2b       	or	r24, r25
    246a:	8b b9       	out	0x0b, r24	; 11
    246c:	5c 9a       	sbi	0x0b, 4	; 11
    246e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <delay_us.constprop.0>
    2472:	5c 98       	cbi	0x0b, 4	; 11
    2474:	0e 94 e5 11 	call	0x23ca	; 0x23ca <delay_us.constprop.0>
    2478:	08 95       	ret

0000247a <_ZN12OrangutanLCD4sendEhhh>:
    247a:	a0 e0       	ldi	r26, 0x00	; 0
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x16>
    2486:	c8 2f       	mov	r28, r24
    2488:	d6 2e       	mov	r13, r22
    248a:	e4 2e       	mov	r14, r20
    248c:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <_ZZN12OrangutanLCD4initEvE11initialized>
    2490:	81 11       	cpse	r24, r1
    2492:	05 c0       	rjmp	.+10     	; 0x249e <_ZN12OrangutanLCD4sendEhhh+0x24>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <_ZZN12OrangutanLCD4initEvE11initialized>
    249a:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN12OrangutanLCD5init2Ev>
    249e:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN12OrangutanLCD8busyWaitEv>
    24a2:	14 b1       	in	r17, 0x04	; 4
    24a4:	d5 b1       	in	r29, 0x05	; 5
    24a6:	fa b0       	in	r15, 0x0a	; 10
    24a8:	0b b1       	in	r16, 0x0b	; 11
    24aa:	28 98       	cbi	0x05, 0	; 5
    24ac:	dd 20       	and	r13, r13
    24ae:	11 f0       	breq	.+4      	; 0x24b4 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    24b0:	5a 9a       	sbi	0x0b, 2	; 11
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    24b4:	5a 98       	cbi	0x0b, 2	; 11
    24b6:	94 b1       	in	r25, 0x04	; 4
    24b8:	92 63       	ori	r25, 0x32	; 50
    24ba:	94 b9       	out	0x04, r25	; 4
    24bc:	57 9a       	sbi	0x0a, 7	; 10
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	e8 16       	cp	r14, r24
    24c2:	29 f0       	breq	.+10     	; 0x24ce <_ZN12OrangutanLCD4sendEhhh+0x54>
    24c4:	8c 2f       	mov	r24, r28
    24c6:	82 95       	swap	r24
    24c8:	8f 70       	andi	r24, 0x0F	; 15
    24ca:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN12OrangutanLCD8sendDataEh>
    24ce:	8c 2f       	mov	r24, r28
    24d0:	8f 70       	andi	r24, 0x0F	; 15
    24d2:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN12OrangutanLCD8sendDataEh>
    24d6:	fa b8       	out	0x0a, r15	; 10
    24d8:	0b b9       	out	0x0b, r16	; 11
    24da:	14 b9       	out	0x04, r17	; 4
    24dc:	d5 b9       	out	0x05, r29	; 5
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	e7 e0       	ldi	r30, 0x07	; 7
    24e4:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x16>

000024e8 <_ZN12OrangutanLCD8send_cmdEh>:
    24e8:	42 e0       	ldi	r20, 0x02	; 2
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN12OrangutanLCD4sendEhhh>
    24f0:	08 95       	ret

000024f2 <_ZN12OrangutanLCD9send_dataEh>:
    24f2:	42 e0       	ldi	r20, 0x02	; 2
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN12OrangutanLCD4sendEhhh>
    24fa:	08 95       	ret

000024fc <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN12OrangutanLCD4sendEhhh>
    2504:	08 95       	ret

00002506 <_ZN12OrangutanLCD5init2Ev>:
    2506:	80 e1       	ldi	r24, 0x10	; 16
    2508:	97 e2       	ldi	r25, 0x27	; 39
    250a:	a0 e0       	ldi	r26, 0x00	; 0
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <lcdTimeout>
    2512:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <lcdTimeout+0x1>
    2516:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <lcdTimeout+0x2>
    251a:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <lcdTimeout+0x3>
    251e:	52 9a       	sbi	0x0a, 2	; 10
    2520:	20 9a       	sbi	0x04, 0	; 4
    2522:	54 9a       	sbi	0x0a, 4	; 10
    2524:	8e e1       	ldi	r24, 0x1E	; 30
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2532:	86 e0       	ldi	r24, 0x06	; 6
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
    2564:	88 e2       	ldi	r24, 0x28	; 40
    2566:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    256a:	88 e0       	ldi	r24, 0x08	; 8
    256c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    2576:	86 e0       	ldi	r24, 0x06	; 6
    2578:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    257c:	8c e0       	ldi	r24, 0x0C	; 12
    257e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    2582:	08 95       	ret

00002584 <_ZN12OrangutanLCD5clearEv>:
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    258a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <printf_chars>
    258e:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <printf_chars+0x1>
    2592:	89 2b       	or	r24, r25
    2594:	f9 f0       	breq	.+62     	; 0x25d4 <_ZN12OrangutanLCD5clearEv+0x50>
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	a0 e2       	ldi	r26, 0x20	; 32
    259a:	26 2f       	mov	r18, r22
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    25a2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	78 9f       	mul	r23, r24
    25ac:	a0 01       	movw	r20, r0
    25ae:	79 9f       	mul	r23, r25
    25b0:	50 0d       	add	r21, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	24 17       	cp	r18, r20
    25b6:	35 07       	cpc	r19, r21
    25b8:	4c f4       	brge	.+18     	; 0x25cc <_ZN12OrangutanLCD5clearEv+0x48>
    25ba:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <printf_chars>
    25be:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <printf_chars+0x1>
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	a0 83       	st	Z, r26
    25c8:	6f 5f       	subi	r22, 0xFF	; 255
    25ca:	e7 cf       	rjmp	.-50     	; 0x259a <_ZN12OrangutanLCD5clearEv+0x16>
    25cc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <col>
    25d0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <row>
    25d4:	08 95       	ret

000025d6 <clear>:
    25d6:	0e 94 c2 12 	call	0x2584	; 0x2584 <_ZN12OrangutanLCD5clearEv>
    25da:	08 95       	ret

000025dc <_ZN12OrangutanLCD5printEPKc>:
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	ec 01       	movw	r28, r24
    25e2:	89 91       	ld	r24, Y+
    25e4:	88 23       	and	r24, r24
    25e6:	19 f0       	breq	.+6      	; 0x25ee <_ZN12OrangutanLCD5printEPKc+0x12>
    25e8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_ZN12OrangutanLCD9send_dataEh>
    25ec:	fa cf       	rjmp	.-12     	; 0x25e2 <_ZN12OrangutanLCD5printEPKc+0x6>
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret

000025f4 <print>:
    25f4:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN12OrangutanLCD5printEPKc>
    25f8:	08 95       	ret

000025fa <_ZN12OrangutanLCD5printEm>:
    25fa:	aa e0       	ldi	r26, 0x0A	; 10
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e0       	ldi	r30, 0x03	; 3
    2600:	f3 e1       	ldi	r31, 0x13	; 19
    2602:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x14>
    2606:	1a e0       	ldi	r17, 0x0A	; 10
    2608:	5a e0       	ldi	r21, 0x0A	; 10
    260a:	c5 2e       	mov	r12, r21
    260c:	d1 2c       	mov	r13, r1
    260e:	e1 2c       	mov	r14, r1
    2610:	f1 2c       	mov	r15, r1
    2612:	06 2f       	mov	r16, r22
    2614:	a7 01       	movw	r20, r14
    2616:	96 01       	movw	r18, r12
    2618:	0e 94 24 18 	call	0x3048	; 0x3048 <__udivmodsi4>
    261c:	ca 01       	movw	r24, r20
    261e:	b9 01       	movw	r22, r18
    2620:	11 50       	subi	r17, 0x01	; 1
    2622:	e1 e0       	ldi	r30, 0x01	; 1
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	ec 0f       	add	r30, r28
    2628:	fd 1f       	adc	r31, r29
    262a:	e1 0f       	add	r30, r17
    262c:	f1 1d       	adc	r31, r1
    262e:	00 5d       	subi	r16, 0xD0	; 208
    2630:	2a e0       	ldi	r18, 0x0A	; 10
    2632:	62 9f       	mul	r22, r18
    2634:	00 19       	sub	r16, r0
    2636:	11 24       	eor	r1, r1
    2638:	00 83       	st	Z, r16
    263a:	61 15       	cp	r22, r1
    263c:	71 05       	cpc	r23, r1
    263e:	81 05       	cpc	r24, r1
    2640:	91 05       	cpc	r25, r1
    2642:	39 f7       	brne	.-50     	; 0x2612 <_ZN12OrangutanLCD5printEm+0x18>
    2644:	1a 30       	cpi	r17, 0x0A	; 10
    2646:	58 f4       	brcc	.+22     	; 0x265e <_ZN12OrangutanLCD5printEm+0x64>
    2648:	e1 e0       	ldi	r30, 0x01	; 1
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	ec 0f       	add	r30, r28
    264e:	fd 1f       	adc	r31, r29
    2650:	e1 0f       	add	r30, r17
    2652:	f1 1d       	adc	r31, r1
    2654:	80 81       	ld	r24, Z
    2656:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_ZN12OrangutanLCD9send_dataEh>
    265a:	1f 5f       	subi	r17, 0xFF	; 255
    265c:	f3 cf       	rjmp	.-26     	; 0x2644 <_ZN12OrangutanLCD5printEm+0x4a>
    265e:	2a 96       	adiw	r28, 0x0a	; 10
    2660:	e8 e0       	ldi	r30, 0x08	; 8
    2662:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x14>

00002666 <_ZN12OrangutanLCD5printEl>:
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	6b 01       	movw	r12, r22
    2670:	7c 01       	movw	r14, r24
    2672:	97 ff       	sbrs	r25, 7
    2674:	0b c0       	rjmp	.+22     	; 0x268c <_ZN12OrangutanLCD5printEl+0x26>
    2676:	f0 94       	com	r15
    2678:	e0 94       	com	r14
    267a:	d0 94       	com	r13
    267c:	c0 94       	com	r12
    267e:	c1 1c       	adc	r12, r1
    2680:	d1 1c       	adc	r13, r1
    2682:	e1 1c       	adc	r14, r1
    2684:	f1 1c       	adc	r15, r1
    2686:	8d e2       	ldi	r24, 0x2D	; 45
    2688:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_ZN12OrangutanLCD9send_dataEh>
    268c:	c7 01       	movw	r24, r14
    268e:	b6 01       	movw	r22, r12
    2690:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_ZN12OrangutanLCD5printEm>
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	df 90       	pop	r13
    269a:	cf 90       	pop	r12
    269c:	08 95       	ret

0000269e <print_long>:
    269e:	0e 94 33 13 	call	0x2666	; 0x2666 <_ZN12OrangutanLCD5printEl>
    26a2:	08 95       	ret

000026a4 <_ZN12OrangutanLCD6gotoXYEhh>:
    26a4:	a5 e0       	ldi	r26, 0x05	; 5
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e5       	ldi	r30, 0x58	; 88
    26aa:	f3 e1       	ldi	r31, 0x13	; 19
    26ac:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x1e>
    26b0:	18 2f       	mov	r17, r24
    26b2:	80 e8       	ldi	r24, 0x80	; 128
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	80 ec       	ldi	r24, 0xC0	; 192
    26b8:	8a 83       	std	Y+2, r24	; 0x02
    26ba:	84 e9       	ldi	r24, 0x94	; 148
    26bc:	8b 83       	std	Y+3, r24	; 0x03
    26be:	84 ed       	ldi	r24, 0xD4	; 212
    26c0:	8c 83       	std	Y+4, r24	; 0x04
    26c2:	fe 01       	movw	r30, r28
    26c4:	e6 0f       	add	r30, r22
    26c6:	f1 1d       	adc	r31, r1
    26c8:	81 81       	ldd	r24, Z+1	; 0x01
    26ca:	81 0f       	add	r24, r17
    26cc:	6d 83       	std	Y+5, r22	; 0x05
    26ce:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN12OrangutanLCD8send_cmdEh>
    26d2:	10 93 8b 01 	sts	0x018B, r17	; 0x80018b <col>
    26d6:	6d 81       	ldd	r22, Y+5	; 0x05
    26d8:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <row>
    26dc:	25 96       	adiw	r28, 0x05	; 5
    26de:	e3 e0       	ldi	r30, 0x03	; 3
    26e0:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x1e>

000026e4 <lcd_goto_xy>:
    26e4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN12OrangutanLCD6gotoXYEhh>
    26e8:	08 95       	ret

000026ea <_ZN16OrangutanDigital9setOutputEhh>:
    26ea:	88 30       	cpi	r24, 0x08	; 8
    26ec:	58 f4       	brcc	.+22     	; 0x2704 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    26f2:	99 0f       	add	r25, r25
    26f4:	8a 95       	dec	r24
    26f6:	ea f7       	brpl	.-6      	; 0x26f2 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    26f8:	89 2f       	mov	r24, r25
    26fa:	aa e2       	ldi	r26, 0x2A	; 42
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	21 c0       	rjmp	.+66     	; 0x2746 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2704:	8e 30       	cpi	r24, 0x0E	; 14
    2706:	60 f4       	brcc	.+24     	; 0x2720 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2708:	98 ef       	ldi	r25, 0xF8	; 248
    270a:	98 0f       	add	r25, r24
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2710:	88 0f       	add	r24, r24
    2712:	9a 95       	dec	r25
    2714:	ea f7       	brpl	.-6      	; 0x2710 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    2716:	a4 e2       	ldi	r26, 0x24	; 36
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e5 e2       	ldi	r30, 0x25	; 37
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	13 c0       	rjmp	.+38     	; 0x2746 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2720:	85 31       	cpi	r24, 0x15	; 21
    2722:	60 f4       	brcc	.+24     	; 0x273c <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2724:	92 ef       	ldi	r25, 0xF2	; 242
    2726:	98 0f       	add	r25, r24
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	01 c0       	rjmp	.+2      	; 0x272e <_ZN16OrangutanDigital9setOutputEhh+0x44>
    272c:	88 0f       	add	r24, r24
    272e:	9a 95       	dec	r25
    2730:	ea f7       	brpl	.-6      	; 0x272c <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2732:	a7 e2       	ldi	r26, 0x27	; 39
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e8 e2       	ldi	r30, 0x28	; 40
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	a0 e0       	ldi	r26, 0x00	; 0
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e0 e0       	ldi	r30, 0x00	; 0
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	6f 3f       	cpi	r22, 0xFF	; 255
    2748:	19 f4       	brne	.+6      	; 0x2750 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    274a:	90 81       	ld	r25, Z
    274c:	98 27       	eor	r25, r24
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2750:	66 23       	and	r22, r22
    2752:	19 f0       	breq	.+6      	; 0x275a <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2754:	90 81       	ld	r25, Z
    2756:	98 2b       	or	r25, r24
    2758:	04 c0       	rjmp	.+8      	; 0x2762 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    275a:	20 81       	ld	r18, Z
    275c:	98 2f       	mov	r25, r24
    275e:	90 95       	com	r25
    2760:	92 23       	and	r25, r18
    2762:	90 83       	st	Z, r25
    2764:	9c 91       	ld	r25, X
    2766:	98 2b       	or	r25, r24
    2768:	9c 93       	st	X, r25
    276a:	08 95       	ret

0000276c <_ZN15OrangutanMotors5init2Ev>:
    276c:	83 ef       	ldi	r24, 0xF3	; 243
    276e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2772:	84 bd       	out	0x24, r24	; 36
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    277a:	85 bd       	out	0x25, r24	; 37
    277c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2780:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2784:	18 bc       	out	0x28, r1	; 40
    2786:	17 bc       	out	0x27, r1	; 39
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN16OrangutanDigital9setOutputEhh>
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	85 e0       	ldi	r24, 0x05	; 5
    2794:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN16OrangutanDigital9setOutputEhh>
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	8b e0       	ldi	r24, 0x0B	; 11
    279c:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN16OrangutanDigital9setOutputEhh>
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	83 e0       	ldi	r24, 0x03	; 3
    27a4:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN16OrangutanDigital9setOutputEhh>
    27a8:	08 95       	ret

000027aa <_ZN15OrangutanMotors4initEv>:
    27aa:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <_ZZN15OrangutanMotors4initEvE11initialized>
    27ae:	81 11       	cpse	r24, r1
    27b0:	05 c0       	rjmp	.+10     	; 0x27bc <_ZN15OrangutanMotors4initEv+0x12>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <_ZZN15OrangutanMotors4initEvE11initialized>
    27b8:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN15OrangutanMotors5init2Ev>
    27bc:	08 95       	ret

000027be <_ZN15OrangutanMotors10setM1SpeedEi>:
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	ec 01       	movw	r28, r24
    27c4:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN15OrangutanMotors4initEv>
    27c8:	d7 ff       	sbrs	r29, 7
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    27cc:	d1 95       	neg	r29
    27ce:	c1 95       	neg	r28
    27d0:	d1 09       	sbc	r29, r1
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	cf 3f       	cpi	r28, 0xFF	; 255
    27da:	d1 05       	cpc	r29, r1
    27dc:	19 f0       	breq	.+6      	; 0x27e4 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    27de:	14 f0       	brlt	.+4      	; 0x27e4 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    27e0:	cf ef       	ldi	r28, 0xFF	; 255
    27e2:	d0 e0       	ldi	r29, 0x00	; 0
    27e4:	88 23       	and	r24, r24
    27e6:	19 f0       	breq	.+6      	; 0x27ee <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    27e8:	18 bc       	out	0x28, r1	; 40
    27ea:	c7 bd       	out	0x27, r28	; 39
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    27ee:	c8 bd       	out	0x28, r28	; 40
    27f0:	17 bc       	out	0x27, r1	; 39
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <_ZN15OrangutanMotors10setM2SpeedEi>:
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	ec 01       	movw	r28, r24
    27fe:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN15OrangutanMotors4initEv>
    2802:	d7 ff       	sbrs	r29, 7
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2806:	d1 95       	neg	r29
    2808:	c1 95       	neg	r28
    280a:	d1 09       	sbc	r29, r1
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	cf 3f       	cpi	r28, 0xFF	; 255
    2814:	d1 05       	cpc	r29, r1
    2816:	19 f0       	breq	.+6      	; 0x281e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2818:	14 f0       	brlt	.+4      	; 0x281e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    281a:	cf ef       	ldi	r28, 0xFF	; 255
    281c:	d0 e0       	ldi	r29, 0x00	; 0
    281e:	88 23       	and	r24, r24
    2820:	29 f0       	breq	.+10     	; 0x282c <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2822:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2826:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    282c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2830:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <_ZN15OrangutanMotors9setSpeedsEii>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	eb 01       	movw	r28, r22
    2840:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN15OrangutanMotors10setM1SpeedEi>
    2844:	ce 01       	movw	r24, r28
    2846:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN15OrangutanMotors10setM2SpeedEi>
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	08 95       	ret

00002850 <set_motors>:
    2850:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN15OrangutanMotors9setSpeedsEii>
    2854:	08 95       	ret

00002856 <_ZN20OrangutanPushbuttons5init2Ev>:
    2856:	84 b1       	in	r24, 0x04	; 4
    2858:	8d 7c       	andi	r24, 0xCD	; 205
    285a:	84 b9       	out	0x04, r24	; 4
    285c:	85 b1       	in	r24, 0x05	; 5
    285e:	82 63       	ori	r24, 0x32	; 50
    2860:	85 b9       	out	0x05, r24	; 5
    2862:	85 e0       	ldi	r24, 0x05	; 5
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	6f 93       	push	r22
    2868:	64 e0       	ldi	r22, 0x04	; 4
    286a:	6a 95       	dec	r22
    286c:	f1 f7       	brne	.-4      	; 0x286a <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    286e:	6f 91       	pop	r22
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	c9 f7       	brne	.-14     	; 0x2866 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2874:	08 95       	ret

00002876 <_ZN20OrangutanPushbuttons4initEv>:
    2876:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    287a:	81 11       	cpse	r24, r1
    287c:	05 c0       	rjmp	.+10     	; 0x2888 <_ZN20OrangutanPushbuttons4initEv+0x12>
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2884:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN20OrangutanPushbuttons5init2Ev>
    2888:	08 95       	ret

0000288a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    288a:	cf 93       	push	r28
    288c:	c8 2f       	mov	r28, r24
    288e:	0e 94 3b 14 	call	0x2876	; 0x2876 <_ZN20OrangutanPushbuttons4initEv>
    2892:	83 b1       	in	r24, 0x03	; 3
    2894:	8c 23       	and	r24, r28
    2896:	e9 f3       	breq	.-6      	; 0x2892 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2898:	8a e0       	ldi	r24, 0x0A	; 10
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 b6 14 	call	0x296c	; 0x296c <delay_ms>
    28a0:	83 b1       	in	r24, 0x03	; 3
    28a2:	8c 23       	and	r24, r28
    28a4:	b1 f3       	breq	.-20     	; 0x2892 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    28a6:	83 b1       	in	r24, 0x03	; 3
    28a8:	8c 23       	and	r24, r28
    28aa:	cf 91       	pop	r28
    28ac:	08 95       	ret

000028ae <wait_for_button_release>:
    28ae:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    28b2:	08 95       	ret

000028b4 <_ZN20OrangutanPushbuttons9isPressedEh>:
    28b4:	a1 e0       	ldi	r26, 0x01	; 1
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e0 e6       	ldi	r30, 0x60	; 96
    28ba:	f4 e1       	ldi	r31, 0x14	; 20
    28bc:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__+0x20>
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	0e 94 3b 14 	call	0x2876	; 0x2876 <_ZN20OrangutanPushbuttons4initEv>
    28c6:	93 b1       	in	r25, 0x03	; 3
    28c8:	90 95       	com	r25
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	89 23       	and	r24, r25
    28ce:	21 96       	adiw	r28, 0x01	; 1
    28d0:	e2 e0       	ldi	r30, 0x02	; 2
    28d2:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__+0x20>

000028d6 <button_is_pressed>:
    28d6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN20OrangutanPushbuttons9isPressedEh>
    28da:	08 95       	ret

000028dc <__vector_9>:
    28dc:	2f 92       	push	r2
    28de:	8f 93       	push	r24
    28e0:	9f 93       	push	r25
    28e2:	2f b6       	in	r2, 0x3f	; 63
    28e4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tickCount+0x1>
    28e8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <tickCount+0x2>
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <tickCount+0x1>
    28f2:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <tickCount+0x2>
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tickCount+0x3>
    28fc:	89 1f       	adc	r24, r25
    28fe:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <tickCount+0x3>
    2902:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <us_over_10+0x1>
    2906:	9c 5f       	subi	r25, 0xFC	; 252
    2908:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <us_over_10+0x1>
    290c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <us_over_10>
    2910:	80 51       	subi	r24, 0x10	; 16
    2912:	97 42       	sbci	r25, 0x27	; 39
    2914:	c0 f0       	brcs	.+48     	; 0x2946 <end>
    2916:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <us_over_10+0x1>
    291a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <us_over_10>
    291e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <msCounter>
    2922:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <msCounter+0x1>
    2926:	01 96       	adiw	r24, 0x01	; 1
    2928:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <msCounter>
    292c:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <msCounter+0x1>
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <msCounter+0x2>
    2936:	89 1f       	adc	r24, r25
    2938:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <msCounter+0x2>
    293c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <msCounter+0x3>
    2940:	89 1f       	adc	r24, r25
    2942:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <msCounter+0x3>

00002946 <end>:
    2946:	2f be       	out	0x3f, r2	; 63
    2948:	9f 91       	pop	r25
    294a:	8f 91       	pop	r24
    294c:	2f 90       	pop	r2
    294e:	18 95       	reti

00002950 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2950:	28 ee       	ldi	r18, 0xE8	; 232
    2952:	33 e0       	ldi	r19, 0x03	; 3
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	48 f0       	brcs	.+18     	; 0x296a <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2958:	f9 01       	movw	r30, r18
    295a:	6f 93       	push	r22
    295c:	64 e0       	ldi	r22, 0x04	; 4
    295e:	6a 95       	dec	r22
    2960:	f1 f7       	brne	.-4      	; 0x295e <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2962:	6f 91       	pop	r22
    2964:	31 97       	sbiw	r30, 0x01	; 1
    2966:	c9 f7       	brne	.-14     	; 0x295a <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2968:	f5 cf       	rjmp	.-22     	; 0x2954 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    296a:	08 95       	ret

0000296c <delay_ms>:
    296c:	0e 94 a8 14 	call	0x2950	; 0x2950 <_ZN13OrangutanTime17delayMillisecondsEj>
    2970:	08 95       	ret

00002972 <_ZN13OrangutanTime5init2Ev>:
    2972:	e0 e7       	ldi	r30, 0x70	; 112
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8e 7f       	andi	r24, 0xFE	; 254
    297a:	80 83       	st	Z, r24
    297c:	a0 eb       	ldi	r26, 0xB0	; 176
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	8c 91       	ld	r24, X
    2982:	83 60       	ori	r24, 0x03	; 3
    2984:	8c 93       	st	X, r24
    2986:	a1 eb       	ldi	r26, 0xB1	; 177
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	8c 91       	ld	r24, X
    298c:	80 7f       	andi	r24, 0xF0	; 240
    298e:	8c 93       	st	X, r24
    2990:	8c 91       	ld	r24, X
    2992:	82 60       	ori	r24, 0x02	; 2
    2994:	8c 93       	st	X, r24
    2996:	b8 9a       	sbi	0x17, 0	; 23
    2998:	80 81       	ld	r24, Z
    299a:	81 60       	ori	r24, 0x01	; 1
    299c:	80 83       	st	Z, r24
    299e:	78 94       	sei
    29a0:	08 95       	ret

000029a2 <_ZN13OrangutanTime4initEv>:
    29a2:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <_ZZN13OrangutanTime4initEvE11initialized>
    29a6:	81 11       	cpse	r24, r1
    29a8:	05 c0       	rjmp	.+10     	; 0x29b4 <_ZN13OrangutanTime4initEv+0x12>
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <_ZZN13OrangutanTime4initEvE11initialized>
    29b0:	0e 94 b9 14 	call	0x2972	; 0x2972 <_ZN13OrangutanTime5init2Ev>
    29b4:	08 95       	ret

000029b6 <_ZN13OrangutanTime5resetEv>:
    29b6:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN13OrangutanTime4initEv>
    29ba:	e0 e7       	ldi	r30, 0x70	; 112
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8e 7f       	andi	r24, 0xFE	; 254
    29c2:	80 83       	st	Z, r24
    29c4:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <msCounter>
    29c8:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <msCounter+0x1>
    29cc:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <msCounter+0x2>
    29d0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <msCounter+0x3>
    29d4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <us_over_10+0x1>
    29d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <us_over_10>
    29dc:	80 81       	ld	r24, Z
    29de:	81 60       	ori	r24, 0x01	; 1
    29e0:	80 83       	st	Z, r24
    29e2:	08 95       	ret

000029e4 <read_line_sensors>:
    29e4:	46 2f       	mov	r20, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	89 e9       	ldi	r24, 0x99	; 153
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN16PololuQTRSensors4readEPjh>
    29f0:	08 95       	ret

000029f2 <_ZN9Pololu3pi4initEjh>:
    29f2:	0f 93       	push	r16
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <_ZN9Pololu3pi4initEjh+0x8>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <_ZN9Pololu3pi4initEjh+0xa>
    29fc:	1f 92       	push	r1
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	9c 01       	movw	r18, r24
    2a04:	85 e0       	ldi	r24, 0x05	; 5
    2a06:	ec e4       	ldi	r30, 0x4C	; 76
    2a08:	f1 e0       	ldi	r31, 0x01	; 1
    2a0a:	de 01       	movw	r26, r28
    2a0c:	11 96       	adiw	r26, 0x01	; 1
    2a0e:	01 90       	ld	r0, Z+
    2a10:	0d 92       	st	X+, r0
    2a12:	8a 95       	dec	r24
    2a14:	e1 f7       	brne	.-8      	; 0x2a0e <_ZN9Pololu3pi4initEjh+0x1c>
    2a16:	66 23       	and	r22, r22
    2a18:	11 f0       	breq	.+4      	; 0x2a1e <_ZN9Pololu3pi4initEjh+0x2c>
    2a1a:	0f ef       	ldi	r16, 0xFF	; 255
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <_ZN9Pololu3pi4initEjh+0x2e>
    2a1e:	03 e1       	ldi	r16, 0x13	; 19
    2a20:	45 e0       	ldi	r20, 0x05	; 5
    2a22:	be 01       	movw	r22, r28
    2a24:	6f 5f       	subi	r22, 0xFF	; 255
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	89 e9       	ldi	r24, 0x99	; 153
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2a30:	89 e9       	ldi	r24, 0x99	; 153
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN16PololuQTRSensors11emittersOffEv>
    2a38:	0e 94 db 14 	call	0x29b6	; 0x29b6 <_ZN13OrangutanTime5resetEv>
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	0f 91       	pop	r16
    2a4c:	08 95       	ret

00002a4e <pololu_3pi_init>:
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZN9Pololu3pi4initEjh>
    2a54:	08 95       	ret

00002a56 <_GLOBAL__sub_D_pololu_3pi_init>:
    2a56:	89 e9       	ldi	r24, 0x99	; 153
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN16PololuQTRSensorsD1Ev>
    2a5e:	08 95       	ret

00002a60 <delay_us>:
    2a60:	6f 93       	push	r22
    2a62:	64 e0       	ldi	r22, 0x04	; 4
    2a64:	6a 95       	dec	r22
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <delay_us+0x4>
    2a68:	6f 91       	pop	r22
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	c9 f7       	brne	.-14     	; 0x2a60 <delay_us>
    2a6e:	08 95       	ret

00002a70 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2a70:	fc 01       	movw	r30, r24
    2a72:	11 82       	std	Z+1, r1	; 0x01
    2a74:	10 82       	st	Z, r1
    2a76:	13 82       	std	Z+3, r1	; 0x03
    2a78:	12 82       	std	Z+2, r1	; 0x02
    2a7a:	15 82       	std	Z+5, r1	; 0x05
    2a7c:	14 82       	std	Z+4, r1	; 0x04
    2a7e:	16 82       	std	Z+6, r1	; 0x06
    2a80:	68 30       	cpi	r22, 0x08	; 8
    2a82:	68 f4       	brcc	.+26     	; 0x2a9e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2a84:	89 e2       	ldi	r24, 0x29	; 41
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	8b e2       	ldi	r24, 0x2B	; 43
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	93 83       	std	Z+3, r25	; 0x03
    2a92:	82 83       	std	Z+2, r24	; 0x02
    2a94:	8a e2       	ldi	r24, 0x2A	; 42
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	95 83       	std	Z+5, r25	; 0x05
    2a9a:	84 83       	std	Z+4, r24	; 0x04
    2a9c:	1f c0       	rjmp	.+62     	; 0x2adc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2a9e:	6e 30       	cpi	r22, 0x0E	; 14
    2aa0:	70 f4       	brcc	.+28     	; 0x2abe <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2aa2:	83 e2       	ldi	r24, 0x23	; 35
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	85 e2       	ldi	r24, 0x25	; 37
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	93 83       	std	Z+3, r25	; 0x03
    2ab0:	82 83       	std	Z+2, r24	; 0x02
    2ab2:	84 e2       	ldi	r24, 0x24	; 36
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	95 83       	std	Z+5, r25	; 0x05
    2ab8:	84 83       	std	Z+4, r24	; 0x04
    2aba:	68 50       	subi	r22, 0x08	; 8
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2abe:	65 31       	cpi	r22, 0x15	; 21
    2ac0:	98 f4       	brcc	.+38     	; 0x2ae8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2ac2:	86 e2       	ldi	r24, 0x26	; 38
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	88 e2       	ldi	r24, 0x28	; 40
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	93 83       	std	Z+3, r25	; 0x03
    2ad0:	82 83       	std	Z+2, r24	; 0x02
    2ad2:	87 e2       	ldi	r24, 0x27	; 39
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	95 83       	std	Z+5, r25	; 0x05
    2ad8:	84 83       	std	Z+4, r24	; 0x04
    2ada:	6e 50       	subi	r22, 0x0E	; 14
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2ae0:	88 0f       	add	r24, r24
    2ae2:	6a 95       	dec	r22
    2ae4:	ea f7       	brpl	.-6      	; 0x2ae0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2ae6:	86 83       	std	Z+6, r24	; 0x06
    2ae8:	08 95       	ret

00002aea <_ZN16PololuQTRSensors4initEhhh>:
    2aea:	a7 e0       	ldi	r26, 0x07	; 7
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	eb e7       	ldi	r30, 0x7B	; 123
    2af0:	f5 e1       	ldi	r31, 0x15	; 21
    2af2:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__prologue_saves__+0x1c>
    2af6:	8c 01       	movw	r16, r24
    2af8:	fc 01       	movw	r30, r24
    2afa:	11 82       	std	Z+1, r1	; 0x01
    2afc:	10 82       	st	Z, r1
    2afe:	13 82       	std	Z+3, r1	; 0x03
    2b00:	12 82       	std	Z+2, r1	; 0x02
    2b02:	15 82       	std	Z+5, r1	; 0x05
    2b04:	14 82       	std	Z+4, r1	; 0x04
    2b06:	17 82       	std	Z+7, r1	; 0x07
    2b08:	16 82       	std	Z+6, r1	; 0x06
    2b0a:	61 31       	cpi	r22, 0x11	; 17
    2b0c:	18 f0       	brcs	.+6      	; 0x2b14 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2b0e:	80 e1       	ldi	r24, 0x10	; 16
    2b10:	80 87       	std	Z+8, r24	; 0x08
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2b14:	fc 01       	movw	r30, r24
    2b16:	60 87       	std	Z+8, r22	; 0x08
    2b18:	f8 01       	movw	r30, r16
    2b1a:	20 8b       	std	Z+16, r18	; 0x10
    2b1c:	64 2f       	mov	r22, r20
    2b1e:	ce 01       	movw	r24, r28
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2b26:	8f 81       	ldd	r24, Y+7	; 0x07
    2b28:	f8 01       	movw	r30, r16
    2b2a:	81 87       	std	Z+9, r24	; 0x09
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	93 87       	std	Z+11, r25	; 0x0b
    2b32:	82 87       	std	Z+10, r24	; 0x0a
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	95 87       	std	Z+13, r25	; 0x0d
    2b3a:	84 87       	std	Z+12, r24	; 0x0c
    2b3c:	27 96       	adiw	r28, 0x07	; 7
    2b3e:	e4 e0       	ldi	r30, 0x04	; 4
    2b40:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__epilogue_restores__+0x1c>

00002b44 <_ZN16PololuQTRSensors11emittersOffEv>:
    2b44:	fc 01       	movw	r30, r24
    2b46:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b48:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b4a:	10 97       	sbiw	r26, 0x00	; 0
    2b4c:	79 f0       	breq	.+30     	; 0x2b6c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2b4e:	8c 91       	ld	r24, X
    2b50:	91 85       	ldd	r25, Z+9	; 0x09
    2b52:	89 2b       	or	r24, r25
    2b54:	8c 93       	st	X, r24
    2b56:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b58:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b5a:	9c 91       	ld	r25, X
    2b5c:	81 85       	ldd	r24, Z+9	; 0x09
    2b5e:	80 95       	com	r24
    2b60:	89 23       	and	r24, r25
    2b62:	8c 93       	st	X, r24
    2b64:	88 ec       	ldi	r24, 0xC8	; 200
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 30 15 	call	0x2a60	; 0x2a60 <delay_us>
    2b6c:	08 95       	ret

00002b6e <_ZN16PololuQTRSensors10emittersOnEv>:
    2b6e:	fc 01       	movw	r30, r24
    2b70:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b72:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b74:	10 97       	sbiw	r26, 0x00	; 0
    2b76:	71 f0       	breq	.+28     	; 0x2b94 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2b78:	8c 91       	ld	r24, X
    2b7a:	91 85       	ldd	r25, Z+9	; 0x09
    2b7c:	89 2b       	or	r24, r25
    2b7e:	8c 93       	st	X, r24
    2b80:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b82:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b84:	8c 91       	ld	r24, X
    2b86:	91 85       	ldd	r25, Z+9	; 0x09
    2b88:	89 2b       	or	r24, r25
    2b8a:	8c 93       	st	X, r24
    2b8c:	88 ec       	ldi	r24, 0xC8	; 200
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 30 15 	call	0x2a60	; 0x2a60 <delay_us>
    2b94:	08 95       	ret

00002b96 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2b96:	a7 e0       	ldi	r26, 0x07	; 7
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    2b9c:	f5 e1       	ldi	r31, 0x15	; 21
    2b9e:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__prologue_saves__+0x6>
    2ba2:	7c 01       	movw	r14, r24
    2ba4:	4b 01       	movw	r8, r22
    2ba6:	64 2f       	mov	r22, r20
    2ba8:	39 01       	movw	r6, r18
    2baa:	40 2f       	mov	r20, r16
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	0e 94 75 15 	call	0x2aea	; 0x2aea <_ZN16PololuQTRSensors4initEhhh>
    2bb2:	87 01       	movw	r16, r14
    2bb4:	0f 5b       	subi	r16, 0xBF	; 191
    2bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb8:	f8 01       	movw	r30, r16
    2bba:	10 82       	st	Z, r1
    2bbc:	67 01       	movw	r12, r14
    2bbe:	f2 e4       	ldi	r31, 0x42	; 66
    2bc0:	cf 0e       	add	r12, r31
    2bc2:	d1 1c       	adc	r13, r1
    2bc4:	f6 01       	movw	r30, r12
    2bc6:	10 82       	st	Z, r1
    2bc8:	57 01       	movw	r10, r14
    2bca:	f3 e4       	ldi	r31, 0x43	; 67
    2bcc:	af 0e       	add	r10, r31
    2bce:	b1 1c       	adc	r11, r1
    2bd0:	f5 01       	movw	r30, r10
    2bd2:	10 82       	st	Z, r1
    2bd4:	f7 01       	movw	r30, r14
    2bd6:	77 86       	std	Z+15, r7	; 0x0f
    2bd8:	66 86       	std	Z+14, r6	; 0x0e
    2bda:	51 2c       	mov	r5, r1
    2bdc:	f7 01       	movw	r30, r14
    2bde:	80 85       	ldd	r24, Z+8	; 0x08
    2be0:	58 16       	cp	r5, r24
    2be2:	50 f5       	brcc	.+84     	; 0x2c38 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2be4:	65 2c       	mov	r6, r5
    2be6:	71 2c       	mov	r7, r1
    2be8:	f4 01       	movw	r30, r8
    2bea:	e6 0d       	add	r30, r6
    2bec:	f7 1d       	adc	r31, r7
    2bee:	60 81       	ld	r22, Z
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	01 96       	adiw	r24, 0x01	; 1
    2bf4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2bf8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bfa:	f7 01       	movw	r30, r14
    2bfc:	e6 0d       	add	r30, r6
    2bfe:	f7 1d       	adc	r31, r7
    2c00:	21 8b       	std	Z+17, r18	; 0x11
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	f3 01       	movw	r30, r6
    2c08:	ee 0f       	add	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	ee 0d       	add	r30, r14
    2c0e:	ff 1d       	adc	r31, r15
    2c10:	92 a3       	std	Z+34, r25	; 0x22
    2c12:	81 a3       	std	Z+33, r24	; 0x21
    2c14:	83 32       	cpi	r24, 0x23	; 35
    2c16:	91 05       	cpc	r25, r1
    2c18:	11 f4       	brne	.+4      	; 0x2c1e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	08 c0       	rjmp	.+16     	; 0x2c2e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2c1e:	86 32       	cpi	r24, 0x26	; 38
    2c20:	91 05       	cpc	r25, r1
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2c24:	f6 01       	movw	r30, r12
    2c26:	03 c0       	rjmp	.+6      	; 0x2c2e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2c28:	89 97       	sbiw	r24, 0x29	; 41
    2c2a:	21 f4       	brne	.+8      	; 0x2c34 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2c2c:	f5 01       	movw	r30, r10
    2c2e:	80 81       	ld	r24, Z
    2c30:	82 2b       	or	r24, r18
    2c32:	80 83       	st	Z, r24
    2c34:	53 94       	inc	r5
    2c36:	d2 cf       	rjmp	.-92     	; 0x2bdc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2c38:	27 96       	adiw	r28, 0x07	; 7
    2c3a:	ef e0       	ldi	r30, 0x0F	; 15
    2c3c:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__epilogue_restores__+0x6>

00002c40 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2c40:	a0 e0       	ldi	r26, 0x00	; 0
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e6 e2       	ldi	r30, 0x26	; 38
    2c46:	f6 e1       	ldi	r31, 0x16	; 22
    2c48:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0xa>
    2c4c:	ec 01       	movw	r28, r24
    2c4e:	5b 01       	movw	r10, r22
    2c50:	6c 01       	movw	r12, r24
    2c52:	81 e4       	ldi	r24, 0x41	; 65
    2c54:	c8 0e       	add	r12, r24
    2c56:	d1 1c       	adc	r13, r1
    2c58:	f6 01       	movw	r30, r12
    2c5a:	80 80       	ld	r8, Z
    2c5c:	7e 01       	movw	r14, r28
    2c5e:	f2 e4       	ldi	r31, 0x42	; 66
    2c60:	ef 0e       	add	r14, r31
    2c62:	f1 1c       	adc	r15, r1
    2c64:	f7 01       	movw	r30, r14
    2c66:	70 80       	ld	r7, Z
    2c68:	8e 01       	movw	r16, r28
    2c6a:	0d 5b       	subi	r16, 0xBD	; 189
    2c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6e:	f8 01       	movw	r30, r16
    2c70:	90 80       	ld	r9, Z
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	98 85       	ldd	r25, Y+8	; 0x08
    2c76:	89 17       	cp	r24, r25
    2c78:	48 f4       	brcc	.+18     	; 0x2c8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2c7a:	f5 01       	movw	r30, r10
    2c7c:	e8 0f       	add	r30, r24
    2c7e:	f1 1d       	adc	r31, r1
    2c80:	e8 0f       	add	r30, r24
    2c82:	f1 1d       	adc	r31, r1
    2c84:	11 82       	std	Z+1, r1	; 0x01
    2c86:	10 82       	st	Z, r1
    2c88:	8f 5f       	subi	r24, 0xFF	; 255
    2c8a:	f4 cf       	rjmp	.-24     	; 0x2c74 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2c8c:	84 b1       	in	r24, 0x04	; 4
    2c8e:	f6 01       	movw	r30, r12
    2c90:	90 81       	ld	r25, Z
    2c92:	89 2b       	or	r24, r25
    2c94:	84 b9       	out	0x04, r24	; 4
    2c96:	87 b1       	in	r24, 0x07	; 7
    2c98:	f7 01       	movw	r30, r14
    2c9a:	90 81       	ld	r25, Z
    2c9c:	89 2b       	or	r24, r25
    2c9e:	87 b9       	out	0x07, r24	; 7
    2ca0:	8a b1       	in	r24, 0x0a	; 10
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	90 81       	ld	r25, Z
    2ca6:	89 2b       	or	r24, r25
    2ca8:	8a b9       	out	0x0a, r24	; 10
    2caa:	85 b1       	in	r24, 0x05	; 5
    2cac:	f6 01       	movw	r30, r12
    2cae:	90 81       	ld	r25, Z
    2cb0:	89 2b       	or	r24, r25
    2cb2:	85 b9       	out	0x05, r24	; 5
    2cb4:	88 b1       	in	r24, 0x08	; 8
    2cb6:	f7 01       	movw	r30, r14
    2cb8:	90 81       	ld	r25, Z
    2cba:	89 2b       	or	r24, r25
    2cbc:	88 b9       	out	0x08, r24	; 8
    2cbe:	8b b1       	in	r24, 0x0b	; 11
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	90 81       	ld	r25, Z
    2cc4:	89 2b       	or	r24, r25
    2cc6:	8b b9       	out	0x0b, r24	; 11
    2cc8:	8a e0       	ldi	r24, 0x0A	; 10
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 30 15 	call	0x2a60	; 0x2a60 <delay_us>
    2cd0:	94 b1       	in	r25, 0x04	; 4
    2cd2:	f6 01       	movw	r30, r12
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 95       	com	r24
    2cd8:	89 23       	and	r24, r25
    2cda:	84 b9       	out	0x04, r24	; 4
    2cdc:	97 b1       	in	r25, 0x07	; 7
    2cde:	f7 01       	movw	r30, r14
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 95       	com	r24
    2ce4:	89 23       	and	r24, r25
    2ce6:	87 b9       	out	0x07, r24	; 7
    2ce8:	9a b1       	in	r25, 0x0a	; 10
    2cea:	f8 01       	movw	r30, r16
    2cec:	80 81       	ld	r24, Z
    2cee:	80 95       	com	r24
    2cf0:	89 23       	and	r24, r25
    2cf2:	8a b9       	out	0x0a, r24	; 10
    2cf4:	95 b1       	in	r25, 0x05	; 5
    2cf6:	f6 01       	movw	r30, r12
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 95       	com	r24
    2cfc:	89 23       	and	r24, r25
    2cfe:	85 b9       	out	0x05, r24	; 5
    2d00:	98 b1       	in	r25, 0x08	; 8
    2d02:	f7 01       	movw	r30, r14
    2d04:	80 81       	ld	r24, Z
    2d06:	80 95       	com	r24
    2d08:	89 23       	and	r24, r25
    2d0a:	88 b9       	out	0x08, r24	; 8
    2d0c:	9b b1       	in	r25, 0x0b	; 11
    2d0e:	f8 01       	movw	r30, r16
    2d10:	80 81       	ld	r24, Z
    2d12:	80 95       	com	r24
    2d14:	89 23       	and	r24, r25
    2d16:	8b b9       	out	0x0b, r24	; 11
    2d18:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d1c:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2d20:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d24:	83 60       	ori	r24, 0x03	; 3
    2d26:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2d30:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d3a:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d3c:	82 17       	cp	r24, r18
    2d3e:	93 07       	cpc	r25, r19
    2d40:	20 f5       	brcc	.+72     	; 0x2d8a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2d42:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2d46:	2c 2d       	mov	r18, r12
    2d48:	24 1b       	sub	r18, r20
    2d4a:	82 0f       	add	r24, r18
    2d4c:	91 1d       	adc	r25, r1
    2d4e:	03 b1       	in	r16, 0x03	; 3
    2d50:	08 11       	cpse	r16, r8
    2d52:	32 c0       	rjmp	.+100    	; 0x2db8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2d54:	f6 b0       	in	r15, 0x06	; 6
    2d56:	f7 10       	cpse	r15, r7
    2d58:	2f c0       	rjmp	.+94     	; 0x2db8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2d5a:	29 b1       	in	r18, 0x09	; 9
    2d5c:	29 11       	cpse	r18, r9
    2d5e:	2c c0       	rjmp	.+88     	; 0x2db8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2d60:	10 c0       	rjmp	.+32     	; 0x2d82 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2d62:	21 2f       	mov	r18, r17
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	a9 01       	movw	r20, r18
    2d68:	44 0f       	add	r20, r20
    2d6a:	55 1f       	adc	r21, r21
    2d6c:	f5 01       	movw	r30, r10
    2d6e:	e4 0f       	add	r30, r20
    2d70:	f5 1f       	adc	r31, r21
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	67 2b       	or	r22, r23
    2d78:	21 f1       	breq	.+72     	; 0x2dc2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2d7a:	1f 5f       	subi	r17, 0xFF	; 255
    2d7c:	28 85       	ldd	r18, Y+8	; 0x08
    2d7e:	12 17       	cp	r17, r18
    2d80:	80 f3       	brcs	.-32     	; 0x2d62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2d82:	7f 2c       	mov	r7, r15
    2d84:	80 2e       	mov	r8, r16
    2d86:	4c 2d       	mov	r20, r12
    2d88:	d7 cf       	rjmp	.-82     	; 0x2d38 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2d8a:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d8e:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	88 85       	ldd	r24, Y+8	; 0x08
    2d96:	28 17       	cp	r18, r24
    2d98:	30 f5       	brcc	.+76     	; 0x2de6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2d9a:	f5 01       	movw	r30, r10
    2d9c:	e2 0f       	add	r30, r18
    2d9e:	f1 1d       	adc	r31, r1
    2da0:	e2 0f       	add	r30, r18
    2da2:	f1 1d       	adc	r31, r1
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	89 2b       	or	r24, r25
    2daa:	21 f4       	brne	.+8      	; 0x2db4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
    2db4:	2f 5f       	subi	r18, 0xFF	; 255
    2db6:	ee cf       	rjmp	.-36     	; 0x2d94 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2db8:	03 b1       	in	r16, 0x03	; 3
    2dba:	f6 b0       	in	r15, 0x06	; 6
    2dbc:	99 b0       	in	r9, 0x09	; 9
    2dbe:	10 e0       	ldi	r17, 0x00	; 0
    2dc0:	dd cf       	rjmp	.-70     	; 0x2d7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2dc2:	de 01       	movw	r26, r28
    2dc4:	a4 0f       	add	r26, r20
    2dc6:	b5 1f       	adc	r27, r21
    2dc8:	91 96       	adiw	r26, 0x21	; 33
    2dca:	0d 90       	ld	r0, X+
    2dcc:	bc 91       	ld	r27, X
    2dce:	a0 2d       	mov	r26, r0
    2dd0:	4c 91       	ld	r20, X
    2dd2:	de 01       	movw	r26, r28
    2dd4:	a2 0f       	add	r26, r18
    2dd6:	b3 1f       	adc	r27, r19
    2dd8:	51 96       	adiw	r26, 0x11	; 17
    2dda:	2c 91       	ld	r18, X
    2ddc:	42 23       	and	r20, r18
    2dde:	69 f6       	brne	.-102    	; 0x2d7a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    2de4:	ca cf       	rjmp	.-108    	; 0x2d7a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	ed e0       	ldi	r30, 0x0D	; 13
    2dec:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__+0xa>

00002df0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2df0:	ef 92       	push	r14
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	9b 01       	movw	r18, r22
    2e00:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2e04:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e08:	47 b1       	in	r20, 0x07	; 7
    2e0a:	18 b1       	in	r17, 0x08	; 8
    2e0c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e10:	86 fd       	sbrc	r24, 6
    2e12:	fc cf       	rjmp	.-8      	; 0x2e0c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 85       	ldd	r25, Z+8	; 0x08
    2e18:	89 17       	cp	r24, r25
    2e1a:	48 f4       	brcc	.+18     	; 0x2e2e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2e1c:	d9 01       	movw	r26, r18
    2e1e:	a8 0f       	add	r26, r24
    2e20:	b1 1d       	adc	r27, r1
    2e22:	a8 0f       	add	r26, r24
    2e24:	b1 1d       	adc	r27, r1
    2e26:	1d 92       	st	X+, r1
    2e28:	1c 92       	st	X, r1
    2e2a:	8f 5f       	subi	r24, 0xFF	; 255
    2e2c:	f4 cf       	rjmp	.-24     	; 0x2e16 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2e2e:	97 b1       	in	r25, 0x07	; 7
    2e30:	82 a1       	ldd	r24, Z+34	; 0x22
    2e32:	80 95       	com	r24
    2e34:	89 23       	and	r24, r25
    2e36:	87 b9       	out	0x07, r24	; 7
    2e38:	98 b1       	in	r25, 0x08	; 8
    2e3a:	82 a1       	ldd	r24, Z+34	; 0x22
    2e3c:	80 95       	com	r24
    2e3e:	89 23       	and	r24, r25
    2e40:	88 b9       	out	0x08, r24	; 8
    2e42:	87 e8       	ldi	r24, 0x87	; 135
    2e44:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e48:	e1 2c       	mov	r14, r1
    2e4a:	81 a1       	ldd	r24, Z+33	; 0x21
    2e4c:	e8 16       	cp	r14, r24
    2e4e:	10 f0       	brcs	.+4      	; 0x2e54 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2e50:	e1 2c       	mov	r14, r1
    2e52:	29 c0       	rjmp	.+82     	; 0x2ea6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2e54:	50 e0       	ldi	r21, 0x00	; 0
    2e56:	80 85       	ldd	r24, Z+8	; 0x08
    2e58:	58 17       	cp	r21, r24
    2e5a:	18 f5       	brcc	.+70     	; 0x2ea2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2e5c:	a5 2f       	mov	r26, r21
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	ef 01       	movw	r28, r30
    2e62:	ca 0f       	add	r28, r26
    2e64:	db 1f       	adc	r29, r27
    2e66:	89 89       	ldd	r24, Y+17	; 0x11
    2e68:	80 64       	ori	r24, 0x40	; 64
    2e6a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2e6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e72:	80 64       	ori	r24, 0x40	; 64
    2e74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e78:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e7c:	86 fd       	sbrc	r24, 6
    2e7e:	fc cf       	rjmp	.-8      	; 0x2e78 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2e80:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2e84:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2e88:	aa 0f       	add	r26, r26
    2e8a:	bb 1f       	adc	r27, r27
    2e8c:	a2 0f       	add	r26, r18
    2e8e:	b3 1f       	adc	r27, r19
    2e90:	8d 91       	ld	r24, X+
    2e92:	9c 91       	ld	r25, X
    2e94:	11 97       	sbiw	r26, 0x01	; 1
    2e96:	86 0f       	add	r24, r22
    2e98:	97 1f       	adc	r25, r23
    2e9a:	8d 93       	st	X+, r24
    2e9c:	9c 93       	st	X, r25
    2e9e:	5f 5f       	subi	r21, 0xFF	; 255
    2ea0:	da cf       	rjmp	.-76     	; 0x2e56 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2ea2:	e3 94       	inc	r14
    2ea4:	d2 cf       	rjmp	.-92     	; 0x2e4a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2ea6:	80 85       	ldd	r24, Z+8	; 0x08
    2ea8:	e8 16       	cp	r14, r24
    2eaa:	a0 f4       	brcc	.+40     	; 0x2ed4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2eac:	e9 01       	movw	r28, r18
    2eae:	ce 0d       	add	r28, r14
    2eb0:	d1 1d       	adc	r29, r1
    2eb2:	ce 0d       	add	r28, r14
    2eb4:	d1 1d       	adc	r29, r1
    2eb6:	61 a1       	ldd	r22, Z+33	; 0x21
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	cb 01       	movw	r24, r22
    2ebc:	95 95       	asr	r25
    2ebe:	87 95       	ror	r24
    2ec0:	a8 81       	ld	r26, Y
    2ec2:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec4:	8a 0f       	add	r24, r26
    2ec6:	9b 1f       	adc	r25, r27
    2ec8:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    2ecc:	79 83       	std	Y+1, r23	; 0x01
    2ece:	68 83       	st	Y, r22
    2ed0:	e3 94       	inc	r14
    2ed2:	e9 cf       	rjmp	.-46     	; 0x2ea6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2ed4:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2ed8:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2edc:	18 b9       	out	0x08, r17	; 8
    2ede:	47 b9       	out	0x07, r20	; 7
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	e6 e0       	ldi	r30, 0x06	; 6
    2ee6:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__epilogue_restores__+0x18>

00002eea <_ZN16PololuQTRSensors4readEPjh>:
    2eea:	a0 e2       	ldi	r26, 0x20	; 32
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	eb e7       	ldi	r30, 0x7B	; 123
    2ef0:	f7 e1       	ldi	r31, 0x17	; 23
    2ef2:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x16>
    2ef6:	8c 01       	movw	r16, r24
    2ef8:	7b 01       	movw	r14, r22
    2efa:	d4 2e       	mov	r13, r20
    2efc:	8f ef       	ldi	r24, 0xFF	; 255
    2efe:	84 0f       	add	r24, r20
    2f00:	82 30       	cpi	r24, 0x02	; 2
    2f02:	18 f4       	brcc	.+6      	; 0x2f0a <_ZN16PololuQTRSensors4readEPjh+0x20>
    2f04:	c8 01       	movw	r24, r16
    2f06:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_ZN16PololuQTRSensors10emittersOnEv>
    2f0a:	d8 01       	movw	r26, r16
    2f0c:	50 96       	adiw	r26, 0x10	; 16
    2f0e:	8c 91       	ld	r24, X
    2f10:	b7 01       	movw	r22, r14
    2f12:	81 11       	cpse	r24, r1
    2f14:	10 c0       	rjmp	.+32     	; 0x2f36 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2f16:	c8 01       	movw	r24, r16
    2f18:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2f1c:	c8 01       	movw	r24, r16
    2f1e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN16PololuQTRSensors11emittersOffEv>
    2f22:	b2 e0       	ldi	r27, 0x02	; 2
    2f24:	db 12       	cpse	r13, r27
    2f26:	3a c0       	rjmp	.+116    	; 0x2f9c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2f28:	be 01       	movw	r22, r28
    2f2a:	6f 5f       	subi	r22, 0xFF	; 255
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	c8 01       	movw	r24, r16
    2f30:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2f34:	0f c0       	rjmp	.+30     	; 0x2f54 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2f3c:	c8 01       	movw	r24, r16
    2f3e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN16PololuQTRSensors11emittersOffEv>
    2f42:	e2 e0       	ldi	r30, 0x02	; 2
    2f44:	de 12       	cpse	r13, r30
    2f46:	2a c0       	rjmp	.+84     	; 0x2f9c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2f48:	be 01       	movw	r22, r28
    2f4a:	6f 5f       	subi	r22, 0xFF	; 255
    2f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4e:	c8 01       	movw	r24, r16
    2f50:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	f8 01       	movw	r30, r16
    2f58:	80 85       	ldd	r24, Z+8	; 0x08
    2f5a:	48 17       	cp	r20, r24
    2f5c:	f8 f4       	brcc	.+62     	; 0x2f9c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2f5e:	84 2f       	mov	r24, r20
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	f7 01       	movw	r30, r14
    2f68:	e8 0f       	add	r30, r24
    2f6a:	f9 1f       	adc	r31, r25
    2f6c:	21 e0       	ldi	r18, 0x01	; 1
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	2c 0f       	add	r18, r28
    2f72:	3d 1f       	adc	r19, r29
    2f74:	82 0f       	add	r24, r18
    2f76:	93 1f       	adc	r25, r19
    2f78:	d8 01       	movw	r26, r16
    2f7a:	1e 96       	adiw	r26, 0x0e	; 14
    2f7c:	2d 91       	ld	r18, X+
    2f7e:	3c 91       	ld	r19, X
    2f80:	1f 97       	sbiw	r26, 0x0f	; 15
    2f82:	dc 01       	movw	r26, r24
    2f84:	8d 91       	ld	r24, X+
    2f86:	9c 91       	ld	r25, X
    2f88:	28 1b       	sub	r18, r24
    2f8a:	39 0b       	sbc	r19, r25
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	82 0f       	add	r24, r18
    2f92:	93 1f       	adc	r25, r19
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
    2f98:	4f 5f       	subi	r20, 0xFF	; 255
    2f9a:	dd cf       	rjmp	.-70     	; 0x2f56 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2f9c:	a0 96       	adiw	r28, 0x20	; 32
    2f9e:	e7 e0       	ldi	r30, 0x07	; 7
    2fa0:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x16>

00002fa4 <_ZN16PololuQTRSensorsD1Ev>:
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	ec 01       	movw	r28, r24
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	11 f0       	breq	.+4      	; 0x2fb6 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2fb2:	0e 94 49 19 	call	0x3292	; 0x3292 <free>
    2fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	11 f0       	breq	.+4      	; 0x2fc2 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2fbe:	0e 94 49 19 	call	0x3292	; 0x3292 <free>
    2fc2:	88 81       	ld	r24, Y
    2fc4:	99 81       	ldd	r25, Y+1	; 0x01
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	11 f0       	breq	.+4      	; 0x2fce <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2fca:	0e 94 49 19 	call	0x3292	; 0x3292 <free>
    2fce:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	11 f0       	breq	.+4      	; 0x2fda <_ZN16PololuQTRSensorsD1Ev+0x36>
    2fd6:	0e 94 49 19 	call	0x3292	; 0x3292 <free>
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	08 95       	ret

00002fe0 <__udivmodqi4>:
    2fe0:	99 1b       	sub	r25, r25
    2fe2:	79 e0       	ldi	r23, 0x09	; 9
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <__udivmodqi4_ep>

00002fe6 <__udivmodqi4_loop>:
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	96 17       	cp	r25, r22
    2fea:	08 f0       	brcs	.+2      	; 0x2fee <__udivmodqi4_ep>
    2fec:	96 1b       	sub	r25, r22

00002fee <__udivmodqi4_ep>:
    2fee:	88 1f       	adc	r24, r24
    2ff0:	7a 95       	dec	r23
    2ff2:	c9 f7       	brne	.-14     	; 0x2fe6 <__udivmodqi4_loop>
    2ff4:	80 95       	com	r24
    2ff6:	08 95       	ret

00002ff8 <__udivmodhi4>:
    2ff8:	aa 1b       	sub	r26, r26
    2ffa:	bb 1b       	sub	r27, r27
    2ffc:	51 e1       	ldi	r21, 0x11	; 17
    2ffe:	07 c0       	rjmp	.+14     	; 0x300e <__udivmodhi4_ep>

00003000 <__udivmodhi4_loop>:
    3000:	aa 1f       	adc	r26, r26
    3002:	bb 1f       	adc	r27, r27
    3004:	a6 17       	cp	r26, r22
    3006:	b7 07       	cpc	r27, r23
    3008:	10 f0       	brcs	.+4      	; 0x300e <__udivmodhi4_ep>
    300a:	a6 1b       	sub	r26, r22
    300c:	b7 0b       	sbc	r27, r23

0000300e <__udivmodhi4_ep>:
    300e:	88 1f       	adc	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	5a 95       	dec	r21
    3014:	a9 f7       	brne	.-22     	; 0x3000 <__udivmodhi4_loop>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	08 95       	ret

00003020 <__divmodhi4>:
    3020:	97 fb       	bst	r25, 7
    3022:	07 2e       	mov	r0, r23
    3024:	16 f4       	brtc	.+4      	; 0x302a <__divmodhi4+0xa>
    3026:	00 94       	com	r0
    3028:	07 d0       	rcall	.+14     	; 0x3038 <__divmodhi4_neg1>
    302a:	77 fd       	sbrc	r23, 7
    302c:	09 d0       	rcall	.+18     	; 0x3040 <__divmodhi4_neg2>
    302e:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    3032:	07 fc       	sbrc	r0, 7
    3034:	05 d0       	rcall	.+10     	; 0x3040 <__divmodhi4_neg2>
    3036:	3e f4       	brtc	.+14     	; 0x3046 <__divmodhi4_exit>

00003038 <__divmodhi4_neg1>:
    3038:	90 95       	com	r25
    303a:	81 95       	neg	r24
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	08 95       	ret

00003040 <__divmodhi4_neg2>:
    3040:	70 95       	com	r23
    3042:	61 95       	neg	r22
    3044:	7f 4f       	sbci	r23, 0xFF	; 255

00003046 <__divmodhi4_exit>:
    3046:	08 95       	ret

00003048 <__udivmodsi4>:
    3048:	a1 e2       	ldi	r26, 0x21	; 33
    304a:	1a 2e       	mov	r1, r26
    304c:	aa 1b       	sub	r26, r26
    304e:	bb 1b       	sub	r27, r27
    3050:	fd 01       	movw	r30, r26
    3052:	0d c0       	rjmp	.+26     	; 0x306e <__udivmodsi4_ep>

00003054 <__udivmodsi4_loop>:
    3054:	aa 1f       	adc	r26, r26
    3056:	bb 1f       	adc	r27, r27
    3058:	ee 1f       	adc	r30, r30
    305a:	ff 1f       	adc	r31, r31
    305c:	a2 17       	cp	r26, r18
    305e:	b3 07       	cpc	r27, r19
    3060:	e4 07       	cpc	r30, r20
    3062:	f5 07       	cpc	r31, r21
    3064:	20 f0       	brcs	.+8      	; 0x306e <__udivmodsi4_ep>
    3066:	a2 1b       	sub	r26, r18
    3068:	b3 0b       	sbc	r27, r19
    306a:	e4 0b       	sbc	r30, r20
    306c:	f5 0b       	sbc	r31, r21

0000306e <__udivmodsi4_ep>:
    306e:	66 1f       	adc	r22, r22
    3070:	77 1f       	adc	r23, r23
    3072:	88 1f       	adc	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	1a 94       	dec	r1
    3078:	69 f7       	brne	.-38     	; 0x3054 <__udivmodsi4_loop>
    307a:	60 95       	com	r22
    307c:	70 95       	com	r23
    307e:	80 95       	com	r24
    3080:	90 95       	com	r25
    3082:	9b 01       	movw	r18, r22
    3084:	ac 01       	movw	r20, r24
    3086:	bd 01       	movw	r22, r26
    3088:	cf 01       	movw	r24, r30
    308a:	08 95       	ret

0000308c <__divmodsi4>:
    308c:	05 2e       	mov	r0, r21
    308e:	97 fb       	bst	r25, 7
    3090:	1e f4       	brtc	.+6      	; 0x3098 <__divmodsi4+0xc>
    3092:	00 94       	com	r0
    3094:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__negsi2>
    3098:	57 fd       	sbrc	r21, 7
    309a:	07 d0       	rcall	.+14     	; 0x30aa <__divmodsi4_neg2>
    309c:	0e 94 24 18 	call	0x3048	; 0x3048 <__udivmodsi4>
    30a0:	07 fc       	sbrc	r0, 7
    30a2:	03 d0       	rcall	.+6      	; 0x30aa <__divmodsi4_neg2>
    30a4:	4e f4       	brtc	.+18     	; 0x30b8 <__divmodsi4_exit>
    30a6:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__negsi2>

000030aa <__divmodsi4_neg2>:
    30aa:	50 95       	com	r21
    30ac:	40 95       	com	r20
    30ae:	30 95       	com	r19
    30b0:	21 95       	neg	r18
    30b2:	3f 4f       	sbci	r19, 0xFF	; 255
    30b4:	4f 4f       	sbci	r20, 0xFF	; 255
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255

000030b8 <__divmodsi4_exit>:
    30b8:	08 95       	ret

000030ba <__negsi2>:
    30ba:	90 95       	com	r25
    30bc:	80 95       	com	r24
    30be:	70 95       	com	r23
    30c0:	61 95       	neg	r22
    30c2:	7f 4f       	sbci	r23, 0xFF	; 255
    30c4:	8f 4f       	sbci	r24, 0xFF	; 255
    30c6:	9f 4f       	sbci	r25, 0xFF	; 255
    30c8:	08 95       	ret

000030ca <__tablejump2__>:
    30ca:	ee 0f       	add	r30, r30
    30cc:	ff 1f       	adc	r31, r31
    30ce:	05 90       	lpm	r0, Z+
    30d0:	f4 91       	lpm	r31, Z
    30d2:	e0 2d       	mov	r30, r0
    30d4:	09 94       	ijmp

000030d6 <__umulhisi3>:
    30d6:	a2 9f       	mul	r26, r18
    30d8:	b0 01       	movw	r22, r0
    30da:	b3 9f       	mul	r27, r19
    30dc:	c0 01       	movw	r24, r0
    30de:	a3 9f       	mul	r26, r19
    30e0:	70 0d       	add	r23, r0
    30e2:	81 1d       	adc	r24, r1
    30e4:	11 24       	eor	r1, r1
    30e6:	91 1d       	adc	r25, r1
    30e8:	b2 9f       	mul	r27, r18
    30ea:	70 0d       	add	r23, r0
    30ec:	81 1d       	adc	r24, r1
    30ee:	11 24       	eor	r1, r1
    30f0:	91 1d       	adc	r25, r1
    30f2:	08 95       	ret

000030f4 <__prologue_saves__>:
    30f4:	2f 92       	push	r2
    30f6:	3f 92       	push	r3
    30f8:	4f 92       	push	r4
    30fa:	5f 92       	push	r5
    30fc:	6f 92       	push	r6
    30fe:	7f 92       	push	r7
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	ca 1b       	sub	r28, r26
    311e:	db 0b       	sbc	r29, r27
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	09 94       	ijmp

0000312c <__epilogue_restores__>:
    312c:	2a 88       	ldd	r2, Y+18	; 0x12
    312e:	39 88       	ldd	r3, Y+17	; 0x11
    3130:	48 88       	ldd	r4, Y+16	; 0x10
    3132:	5f 84       	ldd	r5, Y+15	; 0x0f
    3134:	6e 84       	ldd	r6, Y+14	; 0x0e
    3136:	7d 84       	ldd	r7, Y+13	; 0x0d
    3138:	8c 84       	ldd	r8, Y+12	; 0x0c
    313a:	9b 84       	ldd	r9, Y+11	; 0x0b
    313c:	aa 84       	ldd	r10, Y+10	; 0x0a
    313e:	b9 84       	ldd	r11, Y+9	; 0x09
    3140:	c8 84       	ldd	r12, Y+8	; 0x08
    3142:	df 80       	ldd	r13, Y+7	; 0x07
    3144:	ee 80       	ldd	r14, Y+6	; 0x06
    3146:	fd 80       	ldd	r15, Y+5	; 0x05
    3148:	0c 81       	ldd	r16, Y+4	; 0x04
    314a:	1b 81       	ldd	r17, Y+3	; 0x03
    314c:	aa 81       	ldd	r26, Y+2	; 0x02
    314e:	b9 81       	ldd	r27, Y+1	; 0x01
    3150:	ce 0f       	add	r28, r30
    3152:	d1 1d       	adc	r29, r1
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	ed 01       	movw	r28, r26
    3160:	08 95       	ret

00003162 <malloc>:
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	82 30       	cpi	r24, 0x02	; 2
    316c:	91 05       	cpc	r25, r1
    316e:	10 f4       	brcc	.+4      	; 0x3174 <malloc+0x12>
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <__flp>
    3178:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <__flp+0x1>
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	a0 e0       	ldi	r26, 0x00	; 0
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	30 97       	sbiw	r30, 0x00	; 0
    3186:	19 f1       	breq	.+70     	; 0x31ce <malloc+0x6c>
    3188:	40 81       	ld	r20, Z
    318a:	51 81       	ldd	r21, Z+1	; 0x01
    318c:	02 81       	ldd	r16, Z+2	; 0x02
    318e:	13 81       	ldd	r17, Z+3	; 0x03
    3190:	48 17       	cp	r20, r24
    3192:	59 07       	cpc	r21, r25
    3194:	c8 f0       	brcs	.+50     	; 0x31c8 <malloc+0x66>
    3196:	84 17       	cp	r24, r20
    3198:	95 07       	cpc	r25, r21
    319a:	69 f4       	brne	.+26     	; 0x31b6 <malloc+0x54>
    319c:	10 97       	sbiw	r26, 0x00	; 0
    319e:	31 f0       	breq	.+12     	; 0x31ac <malloc+0x4a>
    31a0:	12 96       	adiw	r26, 0x02	; 2
    31a2:	0c 93       	st	X, r16
    31a4:	12 97       	sbiw	r26, 0x02	; 2
    31a6:	13 96       	adiw	r26, 0x03	; 3
    31a8:	1c 93       	st	X, r17
    31aa:	27 c0       	rjmp	.+78     	; 0x31fa <malloc+0x98>
    31ac:	00 93 2a 07 	sts	0x072A, r16	; 0x80072a <__flp>
    31b0:	10 93 2b 07 	sts	0x072B, r17	; 0x80072b <__flp+0x1>
    31b4:	22 c0       	rjmp	.+68     	; 0x31fa <malloc+0x98>
    31b6:	21 15       	cp	r18, r1
    31b8:	31 05       	cpc	r19, r1
    31ba:	19 f0       	breq	.+6      	; 0x31c2 <malloc+0x60>
    31bc:	42 17       	cp	r20, r18
    31be:	53 07       	cpc	r21, r19
    31c0:	18 f4       	brcc	.+6      	; 0x31c8 <malloc+0x66>
    31c2:	9a 01       	movw	r18, r20
    31c4:	bd 01       	movw	r22, r26
    31c6:	ef 01       	movw	r28, r30
    31c8:	df 01       	movw	r26, r30
    31ca:	f8 01       	movw	r30, r16
    31cc:	db cf       	rjmp	.-74     	; 0x3184 <malloc+0x22>
    31ce:	21 15       	cp	r18, r1
    31d0:	31 05       	cpc	r19, r1
    31d2:	f9 f0       	breq	.+62     	; 0x3212 <malloc+0xb0>
    31d4:	28 1b       	sub	r18, r24
    31d6:	39 0b       	sbc	r19, r25
    31d8:	24 30       	cpi	r18, 0x04	; 4
    31da:	31 05       	cpc	r19, r1
    31dc:	80 f4       	brcc	.+32     	; 0x31fe <malloc+0x9c>
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	9b 81       	ldd	r25, Y+3	; 0x03
    31e2:	61 15       	cp	r22, r1
    31e4:	71 05       	cpc	r23, r1
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <malloc+0x8e>
    31e8:	fb 01       	movw	r30, r22
    31ea:	93 83       	std	Z+3, r25	; 0x03
    31ec:	82 83       	std	Z+2, r24	; 0x02
    31ee:	04 c0       	rjmp	.+8      	; 0x31f8 <malloc+0x96>
    31f0:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <__flp+0x1>
    31f4:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <__flp>
    31f8:	fe 01       	movw	r30, r28
    31fa:	32 96       	adiw	r30, 0x02	; 2
    31fc:	44 c0       	rjmp	.+136    	; 0x3286 <malloc+0x124>
    31fe:	fe 01       	movw	r30, r28
    3200:	e2 0f       	add	r30, r18
    3202:	f3 1f       	adc	r31, r19
    3204:	81 93       	st	Z+, r24
    3206:	91 93       	st	Z+, r25
    3208:	22 50       	subi	r18, 0x02	; 2
    320a:	31 09       	sbc	r19, r1
    320c:	39 83       	std	Y+1, r19	; 0x01
    320e:	28 83       	st	Y, r18
    3210:	3a c0       	rjmp	.+116    	; 0x3286 <malloc+0x124>
    3212:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <__brkval>
    3216:	30 91 29 07 	lds	r19, 0x0729	; 0x800729 <__brkval+0x1>
    321a:	23 2b       	or	r18, r19
    321c:	41 f4       	brne	.+16     	; 0x322e <malloc+0xcc>
    321e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3222:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3226:	30 93 29 07 	sts	0x0729, r19	; 0x800729 <__brkval+0x1>
    322a:	20 93 28 07 	sts	0x0728, r18	; 0x800728 <__brkval>
    322e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3232:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3236:	21 15       	cp	r18, r1
    3238:	31 05       	cpc	r19, r1
    323a:	41 f4       	brne	.+16     	; 0x324c <malloc+0xea>
    323c:	2d b7       	in	r18, 0x3d	; 61
    323e:	3e b7       	in	r19, 0x3e	; 62
    3240:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3244:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3248:	24 1b       	sub	r18, r20
    324a:	35 0b       	sbc	r19, r21
    324c:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <__brkval>
    3250:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <__brkval+0x1>
    3254:	e2 17       	cp	r30, r18
    3256:	f3 07       	cpc	r31, r19
    3258:	a0 f4       	brcc	.+40     	; 0x3282 <malloc+0x120>
    325a:	2e 1b       	sub	r18, r30
    325c:	3f 0b       	sbc	r19, r31
    325e:	28 17       	cp	r18, r24
    3260:	39 07       	cpc	r19, r25
    3262:	78 f0       	brcs	.+30     	; 0x3282 <malloc+0x120>
    3264:	ac 01       	movw	r20, r24
    3266:	4e 5f       	subi	r20, 0xFE	; 254
    3268:	5f 4f       	sbci	r21, 0xFF	; 255
    326a:	24 17       	cp	r18, r20
    326c:	35 07       	cpc	r19, r21
    326e:	48 f0       	brcs	.+18     	; 0x3282 <malloc+0x120>
    3270:	4e 0f       	add	r20, r30
    3272:	5f 1f       	adc	r21, r31
    3274:	50 93 29 07 	sts	0x0729, r21	; 0x800729 <__brkval+0x1>
    3278:	40 93 28 07 	sts	0x0728, r20	; 0x800728 <__brkval>
    327c:	81 93       	st	Z+, r24
    327e:	91 93       	st	Z+, r25
    3280:	02 c0       	rjmp	.+4      	; 0x3286 <malloc+0x124>
    3282:	e0 e0       	ldi	r30, 0x00	; 0
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	cf 01       	movw	r24, r30
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	08 95       	ret

00003292 <free>:
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	09 f4       	brne	.+2      	; 0x329c <free+0xa>
    329a:	81 c0       	rjmp	.+258    	; 0x339e <free+0x10c>
    329c:	fc 01       	movw	r30, r24
    329e:	32 97       	sbiw	r30, 0x02	; 2
    32a0:	13 82       	std	Z+3, r1	; 0x03
    32a2:	12 82       	std	Z+2, r1	; 0x02
    32a4:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <__flp>
    32a8:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <__flp+0x1>
    32ac:	10 97       	sbiw	r26, 0x00	; 0
    32ae:	81 f4       	brne	.+32     	; 0x32d0 <free+0x3e>
    32b0:	20 81       	ld	r18, Z
    32b2:	31 81       	ldd	r19, Z+1	; 0x01
    32b4:	82 0f       	add	r24, r18
    32b6:	93 1f       	adc	r25, r19
    32b8:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <__brkval>
    32bc:	30 91 29 07 	lds	r19, 0x0729	; 0x800729 <__brkval+0x1>
    32c0:	28 17       	cp	r18, r24
    32c2:	39 07       	cpc	r19, r25
    32c4:	51 f5       	brne	.+84     	; 0x331a <free+0x88>
    32c6:	f0 93 29 07 	sts	0x0729, r31	; 0x800729 <__brkval+0x1>
    32ca:	e0 93 28 07 	sts	0x0728, r30	; 0x800728 <__brkval>
    32ce:	67 c0       	rjmp	.+206    	; 0x339e <free+0x10c>
    32d0:	ed 01       	movw	r28, r26
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	ce 17       	cp	r28, r30
    32d8:	df 07       	cpc	r29, r31
    32da:	40 f4       	brcc	.+16     	; 0x32ec <free+0x5a>
    32dc:	4a 81       	ldd	r20, Y+2	; 0x02
    32de:	5b 81       	ldd	r21, Y+3	; 0x03
    32e0:	9e 01       	movw	r18, r28
    32e2:	41 15       	cp	r20, r1
    32e4:	51 05       	cpc	r21, r1
    32e6:	f1 f0       	breq	.+60     	; 0x3324 <free+0x92>
    32e8:	ea 01       	movw	r28, r20
    32ea:	f5 cf       	rjmp	.-22     	; 0x32d6 <free+0x44>
    32ec:	d3 83       	std	Z+3, r29	; 0x03
    32ee:	c2 83       	std	Z+2, r28	; 0x02
    32f0:	40 81       	ld	r20, Z
    32f2:	51 81       	ldd	r21, Z+1	; 0x01
    32f4:	84 0f       	add	r24, r20
    32f6:	95 1f       	adc	r25, r21
    32f8:	c8 17       	cp	r28, r24
    32fa:	d9 07       	cpc	r29, r25
    32fc:	59 f4       	brne	.+22     	; 0x3314 <free+0x82>
    32fe:	88 81       	ld	r24, Y
    3300:	99 81       	ldd	r25, Y+1	; 0x01
    3302:	84 0f       	add	r24, r20
    3304:	95 1f       	adc	r25, r21
    3306:	02 96       	adiw	r24, 0x02	; 2
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	80 83       	st	Z, r24
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	93 83       	std	Z+3, r25	; 0x03
    3312:	82 83       	std	Z+2, r24	; 0x02
    3314:	21 15       	cp	r18, r1
    3316:	31 05       	cpc	r19, r1
    3318:	29 f4       	brne	.+10     	; 0x3324 <free+0x92>
    331a:	f0 93 2b 07 	sts	0x072B, r31	; 0x80072b <__flp+0x1>
    331e:	e0 93 2a 07 	sts	0x072A, r30	; 0x80072a <__flp>
    3322:	3d c0       	rjmp	.+122    	; 0x339e <free+0x10c>
    3324:	e9 01       	movw	r28, r18
    3326:	fb 83       	std	Y+3, r31	; 0x03
    3328:	ea 83       	std	Y+2, r30	; 0x02
    332a:	49 91       	ld	r20, Y+
    332c:	59 91       	ld	r21, Y+
    332e:	c4 0f       	add	r28, r20
    3330:	d5 1f       	adc	r29, r21
    3332:	ec 17       	cp	r30, r28
    3334:	fd 07       	cpc	r31, r29
    3336:	61 f4       	brne	.+24     	; 0x3350 <free+0xbe>
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	84 0f       	add	r24, r20
    333e:	95 1f       	adc	r25, r21
    3340:	02 96       	adiw	r24, 0x02	; 2
    3342:	e9 01       	movw	r28, r18
    3344:	99 83       	std	Y+1, r25	; 0x01
    3346:	88 83       	st	Y, r24
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	9b 83       	std	Y+3, r25	; 0x03
    334e:	8a 83       	std	Y+2, r24	; 0x02
    3350:	e0 e0       	ldi	r30, 0x00	; 0
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	12 96       	adiw	r26, 0x02	; 2
    3356:	8d 91       	ld	r24, X+
    3358:	9c 91       	ld	r25, X
    335a:	13 97       	sbiw	r26, 0x03	; 3
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	19 f0       	breq	.+6      	; 0x3366 <free+0xd4>
    3360:	fd 01       	movw	r30, r26
    3362:	dc 01       	movw	r26, r24
    3364:	f7 cf       	rjmp	.-18     	; 0x3354 <free+0xc2>
    3366:	8d 91       	ld	r24, X+
    3368:	9c 91       	ld	r25, X
    336a:	11 97       	sbiw	r26, 0x01	; 1
    336c:	9d 01       	movw	r18, r26
    336e:	2e 5f       	subi	r18, 0xFE	; 254
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	82 0f       	add	r24, r18
    3374:	93 1f       	adc	r25, r19
    3376:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <__brkval>
    337a:	30 91 29 07 	lds	r19, 0x0729	; 0x800729 <__brkval+0x1>
    337e:	28 17       	cp	r18, r24
    3380:	39 07       	cpc	r19, r25
    3382:	69 f4       	brne	.+26     	; 0x339e <free+0x10c>
    3384:	30 97       	sbiw	r30, 0x00	; 0
    3386:	29 f4       	brne	.+10     	; 0x3392 <free+0x100>
    3388:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <__flp+0x1>
    338c:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <__flp>
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <free+0x104>
    3392:	13 82       	std	Z+3, r1	; 0x03
    3394:	12 82       	std	Z+2, r1	; 0x02
    3396:	b0 93 29 07 	sts	0x0729, r27	; 0x800729 <__brkval+0x1>
    339a:	a0 93 28 07 	sts	0x0728, r26	; 0x800728 <__brkval>
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	08 95       	ret

000033a4 <__do_global_dtors>:
    33a4:	10 e0       	ldi	r17, 0x00	; 0
    33a6:	c4 e5       	ldi	r28, 0x54	; 84
    33a8:	d0 e0       	ldi	r29, 0x00	; 0
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <__do_global_dtors+0x10>
    33ac:	fe 01       	movw	r30, r28
    33ae:	0e 94 65 18 	call	0x30ca	; 0x30ca <__tablejump2__>
    33b2:	21 96       	adiw	r28, 0x01	; 1
    33b4:	c5 35       	cpi	r28, 0x55	; 85
    33b6:	d1 07       	cpc	r29, r17
    33b8:	c9 f7       	brne	.-14     	; 0x33ac <__do_global_dtors+0x8>
    33ba:	f8 94       	cli

000033bc <__stop_program>:
    33bc:	ff cf       	rjmp	.-2      	; 0x33bc <__stop_program>
