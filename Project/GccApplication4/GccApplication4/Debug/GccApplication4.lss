
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00002c5c  00002cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004cc  00800152  00800152  00002d42  2**0
                  ALLOC
  3 .stab         000058bc  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007fad  00000000  00000000  00008600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000105ad  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000105f0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000038  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001fe3  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000992  00000000  00000000  0001264b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000c7f  00000000  00000000  00012fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000c4  00000000  00000000  00013c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b0f  00000000  00000000  00013d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001102  00000000  00000000  0001482f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000270  00000000  00000000  00015931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__dtors_end>
       4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      24:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__vector_9>
      28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      34:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_13>
      38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      68:	05 01       	movw	r0, r10
      6a:	02 01       	movw	r0, r4
      6c:	ff 00       	.word	0x00ff	; ????
      6e:	fc 00       	.word	0x00fc	; ????
      70:	fa 00       	.word	0x00fa	; ????
      72:	0e 01       	movw	r0, r28
      74:	0b 01       	movw	r0, r22
      76:	08 01       	movw	r0, r16
      78:	56 01       	movw	r10, r12
      7a:	4e 01       	movw	r8, r28
      7c:	48 01       	movw	r8, r16
      7e:	40 01       	movw	r8, r0
      80:	70 01       	movw	r14, r0
      82:	6c 01       	movw	r12, r24
      84:	65 01       	movw	r12, r10
      86:	5e 01       	movw	r10, r28
      88:	ce 02       	muls	r28, r30
      8a:	cb 02       	muls	r28, r27
      8c:	c7 02       	muls	r28, r23
      8e:	c4 02       	muls	r28, r20
      90:	dc 02       	muls	r29, r28
      92:	d9 02       	muls	r29, r25
      94:	d5 02       	muls	r29, r21
      96:	d2 02       	muls	r29, r18
      98:	52 03       	mulsu	r21, r18
      9a:	47 03       	mulsu	r20, r23
      9c:	3c 03       	fmul	r19, r20
      9e:	31 03       	mulsu	r19, r17
      a0:	27 03       	mulsu	r18, r23
      a2:	72 03       	mulsu	r23, r18
      a4:	67 03       	mulsu	r22, r23
      a6:	5c 03       	fmul	r21, r20
      a8:	b7 03       	fmuls	r19, r23
      aa:	b1 03       	fmuls	r19, r17
      ac:	ae 03       	fmulsu	r18, r22
      ae:	04 04       	cpc	r0, r4
      b0:	a7 03       	fmuls	r18, r23
      b2:	c9 03       	fmulsu	r20, r17
      b4:	c3 03       	fmuls	r20, r19
      b6:	bd 03       	fmulsu	r19, r21
      b8:	b7 03       	fmuls	r19, r23
      ba:	b1 03       	fmuls	r19, r17
      bc:	ae 03       	fmulsu	r18, r22
      be:	cf 03       	fmulsu	r20, r23
      c0:	a7 03       	fmuls	r18, r23
      c2:	c9 03       	fmulsu	r20, r17
      c4:	c3 03       	fmuls	r20, r19
      c6:	bd 03       	fmulsu	r19, r21
      c8:	53 01       	movw	r10, r6
      ca:	4b 01       	movw	r8, r22
      cc:	45 01       	movw	r8, r10
      ce:	3d 01       	movw	r6, r26
      d0:	7f 01       	movw	r14, r30
      d2:	69 01       	movw	r12, r18
      d4:	62 01       	movw	r12, r4
      d6:	5b 01       	movw	r10, r22
      d8:	08 4a       	sbci	r16, 0xA8	; 168
      da:	d7 3b       	cpi	r29, 0xB7	; 183
      dc:	3b ce       	rjmp	.-906    	; 0xfffffd54 <__eeprom_end+0xff7efd54>
      de:	01 6e       	ori	r16, 0xE1	; 225
      e0:	84 bc       	out	0x24, r8	; 36
      e2:	bf fd       	.word	0xfdbf	; ????
      e4:	c1 2f       	mov	r28, r17
      e6:	3d 6c       	ori	r19, 0xCD	; 205
      e8:	74 31       	cpi	r23, 0x14	; 20
      ea:	9a bd       	out	0x2a, r25	; 42
      ec:	56 83       	std	Z+6, r21	; 0x06
      ee:	3d da       	rcall	.-2950   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
      f0:	3d 00       	.word	0x003d	; ????
      f2:	c7 7f       	andi	r28, 0xF7	; 247
      f4:	11 be       	out	0x31, r1	; 49
      f6:	d9 e4       	ldi	r29, 0x49	; 73
      f8:	bb 4c       	sbci	r27, 0xCB	; 203
      fa:	3e 91       	ld	r19, -X
      fc:	6b aa       	std	Y+51, r6	; 0x33
      fe:	aa be       	out	0x3a, r10	; 58
     100:	00 00       	nop
     102:	00 80       	ld	r0, Z
     104:	3f 00       	.word	0x003f	; ????

00000106 <__ctors_start>:
     106:	4e 08       	sbc	r4, r14

00000108 <__ctors_end>:
     108:	7a 11       	cpse	r23, r10

0000010a <__dtors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	11 e0       	ldi	r17, 0x01	; 1
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	ec e5       	ldi	r30, 0x5C	; 92
     11e:	fc e2       	ldi	r31, 0x2C	; 44
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a2 35       	cpi	r26, 0x52	; 82
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	26 e0       	ldi	r18, 0x06	; 6
     12e:	a2 e5       	ldi	r26, 0x52	; 82
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	ae 31       	cpi	r26, 0x1E	; 30
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>

0000013c <__do_global_ctors>:
     13c:	10 e0       	ldi	r17, 0x00	; 0
     13e:	c4 e8       	ldi	r28, 0x84	; 132
     140:	d0 e0       	ldi	r29, 0x00	; 0
     142:	04 c0       	rjmp	.+8      	; 0x14c <__do_global_ctors+0x10>
     144:	21 97       	sbiw	r28, 0x01	; 1
     146:	fe 01       	movw	r30, r28
     148:	0e 94 b4 14 	call	0x2968	; 0x2968 <__tablejump2__>
     14c:	c3 38       	cpi	r28, 0x83	; 131
     14e:	d1 07       	cpc	r29, r17
     150:	c9 f7       	brne	.-14     	; 0x144 <__do_global_ctors+0x8>
     152:	0e 94 ce 07 	call	0xf9c	; 0xf9c <main>
     156:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__do_global_dtors>

0000015a <__bad_interrupt>:
     15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015e <_ZN5Robot14mainRobotLogicEv>:
			
			this->doMenu();
		}
		
		// Our main logic function
		void mainRobotLogic()
     15e:	2f 92       	push	r2
     160:	3f 92       	push	r3
     162:	4f 92       	push	r4
     164:	5f 92       	push	r5
     166:	6f 92       	push	r6
     168:	7f 92       	push	r7
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	61 97       	sbiw	r28, 0x11	; 17
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
     192:	1c 01       	movw	r2, r24
		{
			bool			isLastStep	= false;
     194:	18 8a       	std	Y+16, r1	; 0x10
			set_motors( 0, 0 );
		}
		
		bool is_on_marker()
		{
			read_line_sensors( sensors, IR_EMITTERS_ON );
     196:	9c 01       	movw	r18, r24
     198:	27 5f       	subi	r18, 0xF7	; 247
     19a:	3f 4f       	sbci	r19, 0xFF	; 255
     19c:	3c 87       	std	Y+12, r19	; 0x0c
     19e:	2b 87       	std	Y+11, r18	; 0x0b
		// Our main logic function
		void mainRobotLogic()
		{
			bool			isLastStep	= false;
			
			while ( position.x != finishPos.x || position.y != finishPos.y || isLastStep )
     1a0:	d1 01       	movw	r26, r2
     1a2:	ed 90       	ld	r14, X+
     1a4:	fc 90       	ld	r15, X
     1a6:	11 97       	sbiw	r26, 0x01	; 1
     1a8:	15 96       	adiw	r26, 0x05	; 5
     1aa:	2d 91       	ld	r18, X+
     1ac:	3c 91       	ld	r19, X
     1ae:	16 97       	sbiw	r26, 0x06	; 6
     1b0:	e2 16       	cp	r14, r18
     1b2:	f3 06       	cpc	r15, r19
     1b4:	79 f4       	brne	.+30     	; 0x1d4 <_ZN5Robot14mainRobotLogicEv+0x76>
     1b6:	12 96       	adiw	r26, 0x02	; 2
     1b8:	4d 91       	ld	r20, X+
     1ba:	5c 91       	ld	r21, X
     1bc:	13 97       	sbiw	r26, 0x03	; 3
     1be:	17 96       	adiw	r26, 0x07	; 7
     1c0:	8d 91       	ld	r24, X+
     1c2:	9c 91       	ld	r25, X
     1c4:	18 97       	sbiw	r26, 0x08	; 8
     1c6:	48 17       	cp	r20, r24
     1c8:	59 07       	cpc	r21, r25
     1ca:	21 f4       	brne	.+8      	; 0x1d4 <_ZN5Robot14mainRobotLogicEv+0x76>
     1cc:	b8 89       	ldd	r27, Y+16	; 0x10
     1ce:	bb 23       	and	r27, r27
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <_ZN5Robot14mainRobotLogicEv+0x76>
     1d2:	cb c6       	rjmp	.+3478   	; 0xf6a <__stack+0x66b>
     1d4:	f1 01       	movw	r30, r2
     1d6:	65 80       	ldd	r6, Z+5	; 0x05
     1d8:	76 80       	ldd	r7, Z+6	; 0x06
     1da:	87 80       	ldd	r8, Z+7	; 0x07
     1dc:	90 84       	ldd	r9, Z+8	; 0x08
			return position;
		}
		
		EOrientation GetBackwardDirection()
		{
			switch ( orientation )
     1de:	84 81       	ldd	r24, Z+4	; 0x04
     1e0:	48 2f       	mov	r20, r24
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	48 30       	cpi	r20, 0x08	; 8
     1e6:	51 05       	cpc	r21, r1
     1e8:	d8 f4       	brcc	.+54     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
     1ea:	fa 01       	movw	r30, r20
     1ec:	ec 5c       	subi	r30, 0xCC	; 204
     1ee:	ff 4f       	sbci	r31, 0xFF	; 255
     1f0:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>
			{
				case EOrientation::South:		return EOrientation::North;
     1f4:	1f 86       	std	Y+15, r1	; 0x0f
     1f6:	14 c0       	rjmp	.+40     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::SouthEast:	return EOrientation::NorthWest;
     1f8:	f7 e0       	ldi	r31, 0x07	; 7
     1fa:	ff 87       	std	Y+15, r31	; 0x0f
     1fc:	11 c0       	rjmp	.+34     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::East:		return EOrientation::West;
     1fe:	46 e0       	ldi	r20, 0x06	; 6
     200:	4f 87       	std	Y+15, r20	; 0x0f
     202:	0e c0       	rjmp	.+28     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::NorthEast:	return EOrientation::SouthWest;
     204:	55 e0       	ldi	r21, 0x05	; 5
     206:	5f 87       	std	Y+15, r21	; 0x0f
     208:	0b c0       	rjmp	.+22     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::North:		return EOrientation::South;
     20a:	64 e0       	ldi	r22, 0x04	; 4
     20c:	6f 87       	std	Y+15, r22	; 0x0f
     20e:	08 c0       	rjmp	.+16     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::NorthWest:	return EOrientation::SouthEast;
     210:	93 e0       	ldi	r25, 0x03	; 3
     212:	9f 87       	std	Y+15, r25	; 0x0f
     214:	05 c0       	rjmp	.+10     	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::West:		return EOrientation::East;
     216:	a2 e0       	ldi	r26, 0x02	; 2
     218:	af 87       	std	Y+15, r26	; 0x0f
     21a:	02 c0       	rjmp	.+4      	; 0x220 <_ZN5Robot14mainRobotLogicEv+0xc2>
				case EOrientation::SouthWest:	return EOrientation::NorthEast;
     21c:	b1 e0       	ldi	r27, 0x01	; 1
     21e:	bf 87       	std	Y+15, r27	; 0x0f
		}

		Point2D getNextPos(const Point2D& goalPos)
		{
			Point2D			nextPos( position.x + getSign(goalPos.x - position.x),
			position.y + getSign(goalPos.y - position.y) );
     220:	f1 01       	movw	r30, r2
     222:	a2 80       	ldd	r10, Z+2	; 0x02
     224:	b3 80       	ldd	r11, Z+3	; 0x03
     226:	a4 01       	movw	r20, r8
     228:	4a 19       	sub	r20, r10
     22a:	5b 09       	sbc	r21, r11
		}

		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
     22c:	14 16       	cp	r1, r20
     22e:	15 06       	cpc	r1, r21
     230:	3c f0       	brlt	.+14     	; 0x240 <_ZN5Robot14mainRobotLogicEv+0xe2>
			{
				sign = 1;
			}
			else if ( num < 0 )
     232:	05 2f       	mov	r16, r21
     234:	00 0f       	add	r16, r16
     236:	00 0b       	sbc	r16, r16
     238:	40 2e       	mov	r4, r16
     23a:	00 0f       	add	r16, r16
     23c:	55 08       	sbc	r5, r5
     23e:	03 c0       	rjmp	.+6      	; 0x246 <_ZN5Robot14mainRobotLogicEv+0xe8>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     240:	44 24       	eor	r4, r4
     242:	43 94       	inc	r4
     244:	51 2c       	mov	r5, r1
			return distance;
		}

		Point2D getNextPos(const Point2D& goalPos)
		{
			Point2D			nextPos( position.x + getSign(goalPos.x - position.x),
     246:	2e 19       	sub	r18, r14
     248:	3f 09       	sbc	r19, r15
		}

		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
     24a:	12 16       	cp	r1, r18
     24c:	13 06       	cpc	r1, r19
     24e:	0c f4       	brge	.+2      	; 0x252 <_ZN5Robot14mainRobotLogicEv+0xf4>
     250:	7a c6       	rjmp	.+3316   	; 0xf46 <__stack+0x647>
			{
				sign = 1;
			}
			else if ( num < 0 )
     252:	23 2f       	mov	r18, r19
     254:	22 1f       	adc	r18, r18
     256:	22 27       	eor	r18, r18
     258:	22 1f       	adc	r18, r18
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	cc 24       	eor	r12, r12
     25e:	dd 24       	eor	r13, r13
     260:	c2 1a       	sub	r12, r18
     262:	d3 0a       	sbc	r13, r19
			return distance;
		}

		Point2D getNextPos(const Point2D& goalPos)
		{
			Point2D			nextPos( position.x + getSign(goalPos.x - position.x),
     264:	e2 1a       	sub	r14, r18
     266:	f3 0a       	sbc	r15, r19
			return false;
		}
		
		int GetRobotAngle()
		{
			switch ( orientation )
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	91 05       	cpc	r25, r1
     26e:	a0 f5       	brcc	.+104    	; 0x2d8 <_ZN5Robot14mainRobotLogicEv+0x17a>
     270:	fc 01       	movw	r30, r24
     272:	e4 5c       	subi	r30, 0xC4	; 196
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     27a:	cc 24       	eor	r12, r12
     27c:	c3 94       	inc	r12
     27e:	d1 2c       	mov	r13, r1
		int GetRobotAngle()
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
     280:	f3 ed       	ldi	r31, 0xD3	; 211
     282:	fd 87       	std	Y+13, r31	; 0x0d
     284:	2f ef       	ldi	r18, 0xFF	; 255
     286:	2e 87       	std	Y+14, r18	; 0x0e
     288:	2f c0       	rjmp	.+94     	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     28a:	cc 24       	eor	r12, r12
     28c:	c3 94       	inc	r12
     28e:	d1 2c       	mov	r13, r1
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
				case EOrientation::East:		return 0;
     290:	1d 86       	std	Y+13, r1	; 0x0d
     292:	1e 86       	std	Y+14, r1	; 0x0e
     294:	29 c0       	rjmp	.+82     	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     296:	cc 24       	eor	r12, r12
     298:	c3 94       	inc	r12
     29a:	d1 2c       	mov	r13, r1
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
				case EOrientation::East:		return 0;
				case EOrientation::NorthEast:	return 45;
     29c:	4d e2       	ldi	r20, 0x2D	; 45
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	5e 87       	std	Y+14, r21	; 0x0e
     2a2:	4d 87       	std	Y+13, r20	; 0x0d
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     2a6:	cc 24       	eor	r12, r12
     2a8:	c3 94       	inc	r12
     2aa:	d1 2c       	mov	r13, r1
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
				case EOrientation::East:		return 0;
				case EOrientation::NorthEast:	return 45;
				case EOrientation::North:		return 90;
     2ac:	8a e5       	ldi	r24, 0x5A	; 90
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	9e 87       	std	Y+14, r25	; 0x0e
     2b2:	8d 87       	std	Y+13, r24	; 0x0d
     2b4:	19 c0       	rjmp	.+50     	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     2b6:	cc 24       	eor	r12, r12
     2b8:	c3 94       	inc	r12
     2ba:	d1 2c       	mov	r13, r1
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
				case EOrientation::East:		return 0;
				case EOrientation::NorthEast:	return 45;
				case EOrientation::North:		return 90;
				case EOrientation::NorthWest:	return 135;
     2bc:	97 e8       	ldi	r25, 0x87	; 135
     2be:	9d 87       	std	Y+13, r25	; 0x0d
     2c0:	1e 86       	std	Y+14, r1	; 0x0e
     2c2:	12 c0       	rjmp	.+36     	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     2c4:	cc 24       	eor	r12, r12
     2c6:	c3 94       	inc	r12
     2c8:	d1 2c       	mov	r13, r1
				case EOrientation::SouthEast:	return -45;
				case EOrientation::East:		return 0;
				case EOrientation::NorthEast:	return 45;
				case EOrientation::North:		return 90;
				case EOrientation::NorthWest:	return 135;
				case EOrientation::West:		return 180;
     2ca:	a4 eb       	ldi	r26, 0xB4	; 180
     2cc:	ad 87       	std	Y+13, r26	; 0x0d
     2ce:	1e 86       	std	Y+14, r1	; 0x0e
     2d0:	0b c0       	rjmp	.+22     	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     2d2:	cc 24       	eor	r12, r12
     2d4:	c3 94       	inc	r12
     2d6:	d1 2c       	mov	r13, r1
				case EOrientation::NorthEast:	return 45;
				case EOrientation::North:		return 90;
				case EOrientation::NorthWest:	return 135;
				case EOrientation::West:		return 180;
				case EOrientation::SouthWest:
				default:						return 225;
     2d8:	b1 ee       	ldi	r27, 0xE1	; 225
     2da:	bd 87       	std	Y+13, r27	; 0x0d
     2dc:	1e 86       	std	Y+14, r1	; 0x0e
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <_ZN5Robot14mainRobotLogicEv+0x18a>
		
		int GetRobotAngle()
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
     2e0:	e6 ea       	ldi	r30, 0xA6	; 166
     2e2:	ed 87       	std	Y+13, r30	; 0x0d
     2e4:	ff ef       	ldi	r31, 0xFF	; 255
     2e6:	fe 87       	std	Y+14, r31	; 0x0e
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
			int		direction	= 0;
			int		robotAngle	= GetRobotAngle();
			
			if ( x == 0 )
     2e8:	c1 14       	cp	r12, r1
     2ea:	d1 04       	cpc	r13, r1
     2ec:	79 f4       	brne	.+30     	; 0x30c <_ZN5Robot14mainRobotLogicEv+0x1ae>
			{
				if ( y > 0 )
     2ee:	14 14       	cp	r1, r4
     2f0:	15 04       	cpc	r1, r5
     2f2:	64 f1       	brlt	.+88     	; 0x34c <_ZN5Robot14mainRobotLogicEv+0x1ee>
				{
					angle = 90;
				}
				else if( y < 0 )
     2f4:	55 20       	and	r5, r5
     2f6:	6c f5       	brge	.+90     	; 0x352 <_ZN5Robot14mainRobotLogicEv+0x1f4>
				{
					angle = -90;
     2f8:	06 ea       	ldi	r16, 0xA6	; 166
     2fa:	1f ef       	ldi	r17, 0xFF	; 255
     2fc:	2c c0       	rjmp	.+88     	; 0x356 <_ZN5Robot14mainRobotLogicEv+0x1f8>
		
		int GetRobotAngle()
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
     2fe:	26 ea       	ldi	r18, 0xA6	; 166
     300:	2d 87       	std	Y+13, r18	; 0x0d
     302:	3f ef       	ldi	r19, 0xFF	; 255
     304:	3e 87       	std	Y+14, r19	; 0x0e
		short getSign(short num)
		{
			short sign = 0;
			if ( num > 0 )
			{
				sign = 1;
     306:	cc 24       	eor	r12, r12
     308:	c3 94       	inc	r12
     30a:	d1 2c       	mov	r13, r1
					angle = -90;
				}
			}
			else
			{
				angle = (int)(atan(y/x)* 180 / PI);
     30c:	c2 01       	movw	r24, r4
     30e:	b6 01       	movw	r22, r12
     310:	0e 94 5f 14 	call	0x28be	; 0x28be <__divmodhi4>
     314:	07 2e       	mov	r0, r23
     316:	00 0c       	add	r0, r0
     318:	88 0b       	sbc	r24, r24
     31a:	99 0b       	sbc	r25, r25
     31c:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     320:	0e 94 64 08 	call	0x10c8	; 0x10c8 <atan>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	44 e3       	ldi	r20, 0x34	; 52
     32a:	53 e4       	ldi	r21, 0x43	; 67
     32c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__mulsf3>
     330:	2b ed       	ldi	r18, 0xDB	; 219
     332:	3f e0       	ldi	r19, 0x0F	; 15
     334:	49 e4       	ldi	r20, 0x49	; 73
     336:	50 e4       	ldi	r21, 0x40	; 64
     338:	0e 94 93 08 	call	0x1126	; 0x1126 <__divsf3>
     33c:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     340:	8b 01       	movw	r16, r22
				
				if ( x < 0 )
     342:	dd 20       	and	r13, r13
     344:	44 f4       	brge	.+16     	; 0x356 <_ZN5Robot14mainRobotLogicEv+0x1f8>
				{
					angle += 180;
     346:	0c 54       	subi	r16, 0x4C	; 76
     348:	1f 4f       	sbci	r17, 0xFF	; 255
     34a:	05 c0       	rjmp	.+10     	; 0x356 <_ZN5Robot14mainRobotLogicEv+0x1f8>
			
			if ( x == 0 )
			{
				if ( y > 0 )
				{
					angle = 90;
     34c:	0a e5       	ldi	r16, 0x5A	; 90
     34e:	10 e0       	ldi	r17, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <_ZN5Robot14mainRobotLogicEv+0x1f8>
		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
     352:	00 e0       	ldi	r16, 0x00	; 0
     354:	10 e0       	ldi	r17, 0x00	; 0
				{
					angle += 180;
				}
			}
			
			direction = (int)(round((robotAngle - angle)/45));
     356:	8d 85       	ldd	r24, Y+13	; 0x0d
     358:	9e 85       	ldd	r25, Y+14	; 0x0e
     35a:	80 1b       	sub	r24, r16
     35c:	91 0b       	sbc	r25, r17
     35e:	6d e2       	ldi	r22, 0x2D	; 45
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	0e 94 5f 14 	call	0x28be	; 0x28be <__divmodhi4>
     366:	07 2e       	mov	r0, r23
     368:	00 0c       	add	r0, r0
     36a:	88 0b       	sbc	r24, r24
     36c:	99 0b       	sbc	r25, r25
     36e:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     372:	0e 94 65 0a 	call	0x14ca	; 0x14ca <round>
     376:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     37a:	6b 01       	movw	r12, r22
			
			if ( direction > 4 )
     37c:	65 30       	cpi	r22, 0x05	; 5
     37e:	71 05       	cpc	r23, r1
     380:	1c f0       	brlt	.+6      	; 0x388 <_ZN5Robot14mainRobotLogicEv+0x22a>
			{
				direction = -8 + direction;
     382:	58 e0       	ldi	r21, 0x08	; 8
     384:	c5 1a       	sub	r12, r21
     386:	d1 08       	sbc	r13, r1
			}
			
			if ( direction < -4 )
     388:	6c ef       	ldi	r22, 0xFC	; 252
     38a:	c6 16       	cp	r12, r22
     38c:	6f ef       	ldi	r22, 0xFF	; 255
     38e:	d6 06       	cpc	r13, r22
     390:	1c f4       	brge	.+6      	; 0x398 <_ZN5Robot14mainRobotLogicEv+0x23a>
			{
				direction = 8 + direction;
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	c8 0e       	add	r12, r24
     396:	d1 1c       	adc	r13, r1
			}
			
			clear();
     398:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
			print_long( direction );
     39c:	b6 01       	movw	r22, r12
     39e:	0d 2c       	mov	r0, r13
     3a0:	00 0c       	add	r0, r0
     3a2:	88 0b       	sbc	r24, r24
     3a4:	99 0b       	sbc	r25, r25
     3a6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			lcd_goto_xy( 0, 1 );
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <lcd_goto_xy>
			print_long( angle );
     3b2:	b8 01       	movw	r22, r16
     3b4:	01 2e       	mov	r0, r17
     3b6:	00 0c       	add	r0, r0
     3b8:	88 0b       	sbc	r24, r24
     3ba:	99 0b       	sbc	r25, r25
     3bc:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			}
		}

		void SetDeviceOrientation(int angle)
		{
			switch( angle )
     3c0:	0d 32       	cpi	r16, 0x2D	; 45
     3c2:	11 05       	cpc	r17, r1
     3c4:	41 f1       	breq	.+80     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3c6:	5c f4       	brge	.+22     	; 0x3de <_ZN5Robot14mainRobotLogicEv+0x280>
     3c8:	03 3d       	cpi	r16, 0xD3	; 211
     3ca:	9f ef       	ldi	r25, 0xFF	; 255
     3cc:	19 07       	cpc	r17, r25
     3ce:	d1 f0       	breq	.+52     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3d0:	01 15       	cp	r16, r1
     3d2:	11 05       	cpc	r17, r1
     3d4:	e1 f0       	breq	.+56     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3d6:	06 3a       	cpi	r16, 0xA6	; 166
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	91 f5       	brne	.+100    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3dc:	0f c0       	rjmp	.+30     	; 0x3fc <_ZN5Robot14mainRobotLogicEv+0x29e>
     3de:	07 38       	cpi	r16, 0x87	; 135
     3e0:	11 05       	cpc	r17, r1
     3e2:	09 f1       	breq	.+66     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3e4:	24 f4       	brge	.+8      	; 0x3ee <_ZN5Robot14mainRobotLogicEv+0x290>
     3e6:	0a 35       	cpi	r16, 0x5A	; 90
     3e8:	11 05       	cpc	r17, r1
     3ea:	d1 f0       	breq	.+52     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3ec:	29 c0       	rjmp	.+82     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3ee:	04 3b       	cpi	r16, 0xB4	; 180
     3f0:	11 05       	cpc	r17, r1
     3f2:	f1 f0       	breq	.+60     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3f4:	01 3e       	cpi	r16, 0xE1	; 225
     3f6:	11 05       	cpc	r17, r1
     3f8:	f9 f0       	breq	.+62     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     3fa:	22 c0       	rjmp	.+68     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			{
				case -90:	orientation = EOrientation::South;		break;
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	f1 01       	movw	r30, r2
     400:	84 83       	std	Z+4, r24	; 0x04
     402:	1e c0       	rjmp	.+60     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case -45:	orientation = EOrientation::SouthEast;	break;
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	d1 01       	movw	r26, r2
     408:	14 96       	adiw	r26, 0x04	; 4
     40a:	8c 93       	st	X, r24
     40c:	19 c0       	rjmp	.+50     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case 0:		orientation = EOrientation::East;		break;
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	f1 01       	movw	r30, r2
     412:	84 83       	std	Z+4, r24	; 0x04
     414:	15 c0       	rjmp	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case 45:	orientation = EOrientation::NorthEast;	break;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	d1 01       	movw	r26, r2
     41a:	14 96       	adiw	r26, 0x04	; 4
     41c:	8c 93       	st	X, r24
     41e:	10 c0       	rjmp	.+32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case 90:	orientation = EOrientation::North;		break;
     420:	f1 01       	movw	r30, r2
     422:	14 82       	std	Z+4, r1	; 0x04
     424:	0d c0       	rjmp	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case 135:	orientation = EOrientation::NorthWest;	break;
     426:	87 e0       	ldi	r24, 0x07	; 7
     428:	d1 01       	movw	r26, r2
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	8c 93       	st	X, r24
     42e:	08 c0       	rjmp	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case 180:	orientation = EOrientation::West;		break;
     430:	86 e0       	ldi	r24, 0x06	; 6
     432:	f1 01       	movw	r30, r2
     434:	84 83       	std	Z+4, r24	; 0x04
     436:	04 c0       	rjmp	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				case 225:	orientation = EOrientation::SouthWest;	break;
     438:	e5 e0       	ldi	r30, 0x05	; 5
     43a:	d1 01       	movw	r26, r2
     43c:	14 96       	adiw	r26, 0x04	; 4
     43e:	ec 93       	st	X, r30
			lcd_goto_xy( 0, 1 );
			print_long( angle );
			//delay_ms(1000);
			
			SetDeviceOrientation( angle );
			if ( direction < 0 )
     440:	dd 20       	and	r13, r13
     442:	ec f4       	brge	.+58     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     444:	6a e2       	ldi	r22, 0x2A	; 42
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	86 ed       	ldi	r24, 0xD6	; 214
     44a:	9f ef       	ldi	r25, 0xFF	; 255
     44c:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			delay_ms( 200 * cnt );
     450:	c6 01       	movw	r24, r12
     452:	99 23       	and	r25, r25
     454:	24 f4       	brge	.+8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     456:	88 27       	eor	r24, r24
     458:	99 27       	eor	r25, r25
     45a:	8c 19       	sub	r24, r12
     45c:	9d 09       	sbc	r25, r13
     45e:	28 ec       	ldi	r18, 0xC8	; 200
     460:	ac 01       	movw	r20, r24
     462:	24 9f       	mul	r18, r20
     464:	c0 01       	movw	r24, r0
     466:	25 9f       	mul	r18, r21
     468:	90 0d       	add	r25, r0
     46a:	11 24       	eor	r1, r1
     46c:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			
			set_motors( 0, 0 );
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
     47c:	1f c0       	rjmp	.+62     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			if ( direction < 0 )
			{
				//turn left
				turn_half_left( abs( direction ) );
			}
			else if ( direction > 0 )
     47e:	1c 14       	cp	r1, r12
     480:	1d 04       	cpc	r1, r13
     482:	e4 f4       	brge	.+56     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     484:	66 ed       	ldi	r22, 0xD6	; 214
     486:	7f ef       	ldi	r23, 0xFF	; 255
     488:	8a e2       	ldi	r24, 0x2A	; 42
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			delay_ms( 200 * cnt );
     490:	c6 01       	movw	r24, r12
     492:	99 23       	and	r25, r25
     494:	24 f4       	brge	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	88 27       	eor	r24, r24
     498:	99 27       	eor	r25, r25
     49a:	8c 19       	sub	r24, r12
     49c:	9d 09       	sbc	r25, r13
     49e:	28 ec       	ldi	r18, 0xC8	; 200
     4a0:	dc 01       	movw	r26, r24
     4a2:	2a 9f       	mul	r18, r26
     4a4:	c0 01       	movw	r24, r0
     4a6:	2b 9f       	mul	r18, r27
     4a8:	90 0d       	add	r25, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			
			set_motors( 0, 0 );
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			else if ( direction > 0 )
			{
				//turn right
				turn_half_right( abs( direction ) );
			}
			set_motors( 0, 0 );
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
		}
		
		bool CheckIfDirectionIsTraversable()
		{
			unsigned int	sensors[ 5 ]; 
			read_line_sensors( sensors, IR_EMITTERS_ON );
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	0e 94 41 11 	call	0x2282	; 0x2282 <read_line_sensors>
			
			if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	81 3b       	cpi	r24, 0xB1	; 177
     4d8:	94 40       	sbci	r25, 0x04	; 4
     4da:	50 f4       	brcc	.+20     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4dc:	8d 81       	ldd	r24, Y+5	; 0x05
     4de:	9e 81       	ldd	r25, Y+6	; 0x06
     4e0:	81 3b       	cpi	r24, 0xB1	; 177
     4e2:	94 40       	sbci	r25, 0x04	; 4
     4e4:	28 f4       	brcc	.+10     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4e6:	8f 81       	ldd	r24, Y+7	; 0x07
     4e8:	98 85       	ldd	r25, Y+8	; 0x08
     4ea:	81 3b       	cpi	r24, 0xB1	; 177
     4ec:	94 40       	sbci	r25, 0x04	; 4
     4ee:	08 f1       	brcs	.+66     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			{
				clear();
     4f0:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
				print("!OBS!");
     4f4:	8f e2       	ldi	r24, 0x2F	; 47
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
				delay_ms(2000);
     4fc:	80 ed       	ldi	r24, 0xD0	; 208
     4fe:	97 e0       	ldi	r25, 0x07	; 7
     500:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			{
				return nextPos;
			}
			
			// We are on an obstacle, look for a way around!
			EOrientation startOrientation = orientation;
     504:	d1 01       	movw	r26, r2
     506:	14 96       	adiw	r26, 0x04	; 4
     508:	1c 91       	ld	r17, X
				case -90:	orientation = EOrientation::South;		break;
				case -45:	orientation = EOrientation::SouthEast;	break;
				case 0:		orientation = EOrientation::East;		break;
				case 45:	orientation = EOrientation::NorthEast;	break;
				case 90:	orientation = EOrientation::North;		break;
				case 135:	orientation = EOrientation::NorthWest;	break;
     50a:	0f 2e       	mov	r0, r31
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	bf 2e       	mov	r11, r31
     510:	f0 2d       	mov	r31, r0
			switch( angle )
			{
				case -90:	orientation = EOrientation::South;		break;
				case -45:	orientation = EOrientation::SouthEast;	break;
				case 0:		orientation = EOrientation::East;		break;
				case 45:	orientation = EOrientation::NorthEast;	break;
     512:	01 e0       	ldi	r16, 0x01	; 1
		{
			switch( angle )
			{
				case -90:	orientation = EOrientation::South;		break;
				case -45:	orientation = EOrientation::SouthEast;	break;
				case 0:		orientation = EOrientation::East;		break;
     514:	68 94       	set
     516:	cc 24       	eor	r12, r12
     518:	c1 f8       	bld	r12, 1
		void SetDeviceOrientation(int angle)
		{
			switch( angle )
			{
				case -90:	orientation = EOrientation::South;		break;
				case -45:	orientation = EOrientation::SouthEast;	break;
     51a:	0f 2e       	mov	r0, r31
     51c:	f3 e0       	ldi	r31, 0x03	; 3
     51e:	df 2e       	mov	r13, r31
     520:	f0 2d       	mov	r31, r0

		void SetDeviceOrientation(int angle)
		{
			switch( angle )
			{
				case -90:	orientation = EOrientation::South;		break;
     522:	68 94       	set
     524:	ee 24       	eor	r14, r14
     526:	e2 f8       	bld	r14, 2
				case -45:	orientation = EOrientation::SouthEast;	break;
				case 0:		orientation = EOrientation::East;		break;
				case 45:	orientation = EOrientation::NorthEast;	break;
				case 90:	orientation = EOrientation::North;		break;
				case 135:	orientation = EOrientation::NorthWest;	break;
				case 180:	orientation = EOrientation::West;		break;
     528:	0f 2e       	mov	r0, r31
     52a:	f6 e0       	ldi	r31, 0x06	; 6
     52c:	ff 2e       	mov	r15, r31
     52e:	f0 2d       	mov	r31, r0
     530:	0e c0       	rjmp	.+28     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		}

		Point2D getNextPos(const Point2D& goalPos)
		{
			Point2D			nextPos( position.x + getSign(goalPos.x - position.x),
			position.y + getSign(goalPos.y - position.y) );
     532:	85 01       	movw	r16, r10
     534:	04 0d       	add	r16, r4
     536:	15 1d       	adc	r17, r5
				print("!OBS!");
				delay_ms(2000);
				return false;
			}
			
			clear();
     538:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
			print("NOT OBS");
     53c:	85 e3       	ldi	r24, 0x35	; 53
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
			delay_ms(2000);
     544:	80 ed       	ldi	r24, 0xD0	; 208
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
     54c:	2e c2       	rjmp	.+1116   	; 0x9aa <__stack+0xab>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     54e:	66 ed       	ldi	r22, 0xD6	; 214
     550:	7f ef       	ldi	r23, 0xFF	; 255
     552:	8a e2       	ldi	r24, 0x2A	; 42
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			delay_ms( 200 * cnt );
     55a:	88 ec       	ldi	r24, 0xC8	; 200
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			
			set_motors( 0, 0 );
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			return false;
		}
		
		int GetRobotAngle()
		{
			switch ( orientation )
     56e:	d1 01       	movw	r26, r2
     570:	14 96       	adiw	r26, 0x04	; 4
     572:	ec 91       	ld	r30, X
     574:	8e 2f       	mov	r24, r30
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	88 30       	cpi	r24, 0x08	; 8
     57a:	91 05       	cpc	r25, r1
     57c:	d0 f4       	brcc	.+52     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     57e:	fc 01       	movw	r30, r24
     580:	ec 5b       	subi	r30, 0xBC	; 188
     582:	ff 4f       	sbci	r31, 0xFF	; 255
     584:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>

		void SetDeviceOrientation(int angle)
		{
			switch( angle )
			{
				case -90:	orientation = EOrientation::South;		break;
     588:	f1 01       	movw	r30, r2
     58a:	e4 82       	std	Z+4, r14	; 0x04
     58c:	19 c0       	rjmp	.+50     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case -45:	orientation = EOrientation::SouthEast;	break;
     58e:	d1 01       	movw	r26, r2
     590:	14 96       	adiw	r26, 0x04	; 4
     592:	dc 92       	st	X, r13
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case 0:		orientation = EOrientation::East;		break;
     596:	f1 01       	movw	r30, r2
     598:	c4 82       	std	Z+4, r12	; 0x04
     59a:	12 c0       	rjmp	.+36     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case 45:	orientation = EOrientation::NorthEast;	break;
     59c:	d1 01       	movw	r26, r2
     59e:	14 96       	adiw	r26, 0x04	; 4
     5a0:	0c 93       	st	X, r16
     5a2:	0e c0       	rjmp	.+28     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case 90:	orientation = EOrientation::North;		break;
     5a4:	f1 01       	movw	r30, r2
     5a6:	14 82       	std	Z+4, r1	; 0x04
     5a8:	0b c0       	rjmp	.+22     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case 135:	orientation = EOrientation::NorthWest;	break;
     5aa:	d1 01       	movw	r26, r2
     5ac:	14 96       	adiw	r26, 0x04	; 4
     5ae:	bc 92       	st	X, r11
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case 180:	orientation = EOrientation::West;		break;
     5b2:	f1 01       	movw	r30, r2
     5b4:	f4 82       	std	Z+4, r15	; 0x04
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				case 225:	orientation = EOrientation::SouthWest;	break;
     5b8:	e5 e0       	ldi	r30, 0x05	; 5
     5ba:	d1 01       	movw	r26, r2
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	ec 93       	st	X, r30
				{
					angle = 225;
				}
				SetDeviceOrientation( angle );
			}
			while( orientation != startOrientation && ( !CheckIfDirectionIsTraversable() || backwardDirection == orientation ) );
     5c0:	d1 01       	movw	r26, r2
     5c2:	14 96       	adiw	r26, 0x04	; 4
     5c4:	8c 91       	ld	r24, X
     5c6:	18 17       	cp	r17, r24
     5c8:	09 f4       	brne	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	ca c4       	rjmp	.+2452   	; 0xf60 <__stack+0x661>
		}
		
		bool CheckIfDirectionIsTraversable()
		{
			unsigned int	sensors[ 5 ]; 
			read_line_sensors( sensors, IR_EMITTERS_ON );
     5cc:	60 2f       	mov	r22, r16
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	0e 94 41 11 	call	0x2282	; 0x2282 <read_line_sensors>
			
			if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	81 3b       	cpi	r24, 0xB1	; 177
     5dc:	94 40       	sbci	r25, 0x04	; 4
     5de:	50 f4       	brcc	.+20     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5e0:	8d 81       	ldd	r24, Y+5	; 0x05
     5e2:	9e 81       	ldd	r25, Y+6	; 0x06
     5e4:	81 3b       	cpi	r24, 0xB1	; 177
     5e6:	94 40       	sbci	r25, 0x04	; 4
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5ea:	8f 81       	ldd	r24, Y+7	; 0x07
     5ec:	98 85       	ldd	r25, Y+8	; 0x08
     5ee:	81 3b       	cpi	r24, 0xB1	; 177
     5f0:	94 40       	sbci	r25, 0x04	; 4
     5f2:	58 f0       	brcs	.+22     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
			{
				clear();
     5f4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
				print("!OBS!");
     5f8:	8f e2       	ldi	r24, 0x2F	; 47
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
				delay_ms(2000);
     600:	80 ed       	ldi	r24, 0xD0	; 208
     602:	97 e0       	ldi	r25, 0x07	; 7
     604:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
     608:	a2 cf       	rjmp	.-188    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
				return false;
			}
			
			clear();
     60a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
			print("NOT OBS");
     60e:	85 e3       	ldi	r24, 0x35	; 53
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
			delay_ms(2000);
     616:	80 ed       	ldi	r24, 0xD0	; 208
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			}
			
			// We are on an obstacle, look for a way around!
			EOrientation startOrientation = orientation;
			
			do
     61e:	d1 01       	movw	r26, r2
     620:	14 96       	adiw	r26, 0x04	; 4
     622:	8c 91       	ld	r24, X
     624:	bf 85       	ldd	r27, Y+15	; 0x0f
     626:	8b 17       	cp	r24, r27
     628:	09 f4       	brne	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     62a:	91 cf       	rjmp	.-222    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
				SetDeviceOrientation( angle );
			}
			while( orientation != startOrientation && ( !CheckIfDirectionIsTraversable() || backwardDirection == orientation ) );
			
			EOrientation finalOrientation = backwardDirection;
			if ( startOrientation != orientation )
     62c:	48 2f       	mov	r20, r24
     62e:	18 17       	cp	r17, r24
     630:	11 f0       	breq	.+4      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     632:	e8 2f       	mov	r30, r24
     634:	01 c0       	rjmp	.+2      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
				}
				SetDeviceOrientation( angle );
			}
			while( orientation != startOrientation && ( !CheckIfDirectionIsTraversable() || backwardDirection == orientation ) );
			
			EOrientation finalOrientation = backwardDirection;
     636:	ef 85       	ldd	r30, Y+15	; 0x0f
			return nextPos;
		}
		
		Point2D GetNextStepByOrientation(EOrientation orientation)
		{
			switch ( orientation )
     638:	8e 2f       	mov	r24, r30
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	88 30       	cpi	r24, 0x08	; 8
     63e:	91 05       	cpc	r25, r1
     640:	08 f0       	brcs	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     642:	5b c0       	rjmp	.+182    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     644:	fc 01       	movw	r30, r24
     646:	e4 5b       	subi	r30, 0xB4	; 180
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>
			{
				case EOrientation::South:		return Point2D(position.x, position.y-1);
     64e:	d1 01       	movw	r26, r2
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	0d 91       	ld	r16, X+
     654:	1c 91       	ld	r17, X
     656:	13 97       	sbiw	r26, 0x03	; 3
     658:	01 50       	subi	r16, 0x01	; 1
     65a:	11 09       	sbc	r17, r1
     65c:	ed 90       	ld	r14, X+
     65e:	fc 90       	ld	r15, X
     660:	61 c0       	rjmp	.+194    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::SouthEast:	return Point2D(position.x+1, position.y-1);
     662:	f1 01       	movw	r30, r2
     664:	02 81       	ldd	r16, Z+2	; 0x02
     666:	13 81       	ldd	r17, Z+3	; 0x03
     668:	01 50       	subi	r16, 0x01	; 1
     66a:	11 09       	sbc	r17, r1
     66c:	e0 80       	ld	r14, Z
     66e:	f1 80       	ldd	r15, Z+1	; 0x01
     670:	ff ef       	ldi	r31, 0xFF	; 255
     672:	ef 1a       	sub	r14, r31
     674:	ff 0a       	sbc	r15, r31
     676:	56 c0       	rjmp	.+172    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::East:		return Point2D(position.x+1, position.y);
     678:	d1 01       	movw	r26, r2
     67a:	12 96       	adiw	r26, 0x02	; 2
     67c:	0d 91       	ld	r16, X+
     67e:	1c 91       	ld	r17, X
     680:	13 97       	sbiw	r26, 0x03	; 3
     682:	ed 90       	ld	r14, X+
     684:	fc 90       	ld	r15, X
     686:	bf ef       	ldi	r27, 0xFF	; 255
     688:	eb 1a       	sub	r14, r27
     68a:	fb 0a       	sbc	r15, r27
     68c:	4b c0       	rjmp	.+150    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::NorthEast:	return Point2D(position.x+1, position.y+1);
     68e:	f1 01       	movw	r30, r2
     690:	02 81       	ldd	r16, Z+2	; 0x02
     692:	13 81       	ldd	r17, Z+3	; 0x03
     694:	0f 5f       	subi	r16, 0xFF	; 255
     696:	1f 4f       	sbci	r17, 0xFF	; 255
     698:	e0 80       	ld	r14, Z
     69a:	f1 80       	ldd	r15, Z+1	; 0x01
     69c:	ff ef       	ldi	r31, 0xFF	; 255
     69e:	ef 1a       	sub	r14, r31
     6a0:	ff 0a       	sbc	r15, r31
     6a2:	40 c0       	rjmp	.+128    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::North:		return Point2D(position.x, position.y+1);
     6a4:	d1 01       	movw	r26, r2
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	0d 91       	ld	r16, X+
     6aa:	1c 91       	ld	r17, X
     6ac:	13 97       	sbiw	r26, 0x03	; 3
     6ae:	0f 5f       	subi	r16, 0xFF	; 255
     6b0:	1f 4f       	sbci	r17, 0xFF	; 255
     6b2:	ed 90       	ld	r14, X+
     6b4:	fc 90       	ld	r15, X
     6b6:	36 c0       	rjmp	.+108    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::NorthWest:	return Point2D(position.x-1, position.y+1);
     6b8:	f1 01       	movw	r30, r2
     6ba:	02 81       	ldd	r16, Z+2	; 0x02
     6bc:	13 81       	ldd	r17, Z+3	; 0x03
     6be:	0f 5f       	subi	r16, 0xFF	; 255
     6c0:	1f 4f       	sbci	r17, 0xFF	; 255
     6c2:	e0 80       	ld	r14, Z
     6c4:	f1 80       	ldd	r15, Z+1	; 0x01
     6c6:	f1 e0       	ldi	r31, 0x01	; 1
     6c8:	ef 1a       	sub	r14, r31
     6ca:	f1 08       	sbc	r15, r1
     6cc:	2b c0       	rjmp	.+86     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::West:		return Point2D(position.x-1, position.y);
     6ce:	d1 01       	movw	r26, r2
     6d0:	12 96       	adiw	r26, 0x02	; 2
     6d2:	0d 91       	ld	r16, X+
     6d4:	1c 91       	ld	r17, X
     6d6:	13 97       	sbiw	r26, 0x03	; 3
     6d8:	ed 90       	ld	r14, X+
     6da:	fc 90       	ld	r15, X
     6dc:	b1 e0       	ldi	r27, 0x01	; 1
     6de:	eb 1a       	sub	r14, r27
     6e0:	f1 08       	sbc	r15, r1
     6e2:	20 c0       	rjmp	.+64     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				case EOrientation::SouthWest:	return Point2D(position.x-1, position.y-1);
     6e4:	f1 01       	movw	r30, r2
     6e6:	02 81       	ldd	r16, Z+2	; 0x02
     6e8:	13 81       	ldd	r17, Z+3	; 0x03
     6ea:	01 50       	subi	r16, 0x01	; 1
     6ec:	11 09       	sbc	r17, r1
     6ee:	e0 80       	ld	r14, Z
     6f0:	f1 80       	ldd	r15, Z+1	; 0x01
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	ef 1a       	sub	r14, r31
     6f6:	f1 08       	sbc	r15, r1
     6f8:	15 c0       	rjmp	.+42     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
			}			
			
			return position;
     6fa:	d1 01       	movw	r26, r2
     6fc:	ed 90       	ld	r14, X+
     6fe:	fc 90       	ld	r15, X
     700:	11 97       	sbiw	r26, 0x01	; 1
     702:	12 96       	adiw	r26, 0x02	; 2
     704:	0d 91       	ld	r16, X+
     706:	1c 91       	ld	r17, X
     708:	13 97       	sbiw	r26, 0x03	; 3
		}

		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
     70a:	c1 2c       	mov	r12, r1
     70c:	d1 2c       	mov	r13, r1
			short	y			= -startPoint.y + endPoint.y;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
			return false;
		}
		
		int GetRobotAngle()
		{
			switch ( orientation )
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	48 30       	cpi	r20, 0x08	; 8
     716:	51 05       	cpc	r21, r1
     718:	e0 f5       	brcc	.+120    	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     71a:	fa 01       	movw	r30, r20
     71c:	ec 5a       	subi	r30, 0xAC	; 172
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>
		}

		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
     724:	f1 01       	movw	r30, r2
     726:	80 81       	ld	r24, Z
     728:	91 81       	ldd	r25, Z+1	; 0x01
     72a:	67 01       	movw	r12, r14
     72c:	c8 1a       	sub	r12, r24
     72e:	d9 0a       	sbc	r13, r25
			short	y			= -startPoint.y + endPoint.y;
     730:	82 81       	ldd	r24, Z+2	; 0x02
     732:	93 81       	ldd	r25, Z+3	; 0x03
     734:	98 01       	movw	r18, r16
     736:	28 1b       	sub	r18, r24
     738:	39 0b       	sbc	r19, r25
     73a:	c9 01       	movw	r24, r18
			return false;
		}
		
		int GetRobotAngle()
		{
			switch ( orientation )
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	48 30       	cpi	r20, 0x08	; 8
     740:	51 05       	cpc	r21, r1
     742:	38 f5       	brcc	.+78     	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     744:	fa 01       	movw	r30, r20
     746:	e4 5a       	subi	r30, 0xA4	; 164
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>
			{
				case EOrientation::South:		return -90;
     74e:	0f 2e       	mov	r0, r31
     750:	f6 ea       	ldi	r31, 0xA6	; 166
     752:	4f 2e       	mov	r4, r31
     754:	f0 2d       	mov	r31, r0
     756:	55 24       	eor	r5, r5
     758:	5a 94       	dec	r5
     75a:	27 c0       	rjmp	.+78     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				case EOrientation::SouthEast:	return -45;
				case EOrientation::East:		return 0;
     75c:	41 2c       	mov	r4, r1
     75e:	51 2c       	mov	r5, r1
     760:	24 c0       	rjmp	.+72     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				case EOrientation::NorthEast:	return 45;
     762:	0f 2e       	mov	r0, r31
     764:	fd e2       	ldi	r31, 0x2D	; 45
     766:	4f 2e       	mov	r4, r31
     768:	51 2c       	mov	r5, r1
     76a:	f0 2d       	mov	r31, r0
     76c:	1e c0       	rjmp	.+60     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				case EOrientation::North:		return 90;
     76e:	0f 2e       	mov	r0, r31
     770:	fa e5       	ldi	r31, 0x5A	; 90
     772:	4f 2e       	mov	r4, r31
     774:	51 2c       	mov	r5, r1
     776:	f0 2d       	mov	r31, r0
     778:	18 c0       	rjmp	.+48     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				case EOrientation::NorthWest:	return 135;
     77a:	0f 2e       	mov	r0, r31
     77c:	f7 e8       	ldi	r31, 0x87	; 135
     77e:	4f 2e       	mov	r4, r31
     780:	f0 2d       	mov	r31, r0
     782:	51 2c       	mov	r5, r1
     784:	12 c0       	rjmp	.+36     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				case EOrientation::West:		return 180;
     786:	0f 2e       	mov	r0, r31
     788:	f4 eb       	ldi	r31, 0xB4	; 180
     78a:	4f 2e       	mov	r4, r31
     78c:	f0 2d       	mov	r31, r0
     78e:	51 2c       	mov	r5, r1
     790:	0c c0       	rjmp	.+24     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				case EOrientation::SouthWest:
				default:						return 225;
     792:	0f 2e       	mov	r0, r31
     794:	f1 ee       	ldi	r31, 0xE1	; 225
     796:	4f 2e       	mov	r4, r31
     798:	f0 2d       	mov	r31, r0
     79a:	51 2c       	mov	r5, r1
     79c:	06 c0       	rjmp	.+12     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
		int GetRobotAngle()
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
     79e:	0f 2e       	mov	r0, r31
     7a0:	f3 ed       	ldi	r31, 0xD3	; 211
     7a2:	4f 2e       	mov	r4, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	55 24       	eor	r5, r5
     7a8:	5a 94       	dec	r5
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
			int		direction	= 0;
			int		robotAngle	= GetRobotAngle();
			
			if ( x == 0 )
     7aa:	c1 14       	cp	r12, r1
     7ac:	d1 04       	cpc	r13, r1
     7ae:	61 f4       	brne	.+24     	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
			{
				if ( y > 0 )
     7b0:	18 16       	cp	r1, r24
     7b2:	19 06       	cpc	r1, r25
     7b4:	94 f1       	brlt	.+100    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
				{
					angle = 90;
				}
				else if( y < 0 )
     7b6:	99 23       	and	r25, r25
     7b8:	b4 f5       	brge	.+108    	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
				{
					angle = -90;
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f6 ea       	ldi	r31, 0xA6	; 166
     7be:	af 2e       	mov	r10, r31
     7c0:	f0 2d       	mov	r31, r0
     7c2:	bb 24       	eor	r11, r11
     7c4:	ba 94       	dec	r11
     7c6:	31 c0       	rjmp	.+98     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
				}
			}
			else
			{
				angle = (int)(atan(y/x)* 180 / PI);
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 5f 14 	call	0x28be	; 0x28be <__divmodhi4>
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     7da:	0e 94 64 08 	call	0x10c8	; 0x10c8 <atan>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	44 e3       	ldi	r20, 0x34	; 52
     7e4:	53 e4       	ldi	r21, 0x43	; 67
     7e6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__mulsf3>
     7ea:	2b ed       	ldi	r18, 0xDB	; 219
     7ec:	3f e0       	ldi	r19, 0x0F	; 15
     7ee:	49 e4       	ldi	r20, 0x49	; 73
     7f0:	50 e4       	ldi	r21, 0x40	; 64
     7f2:	0e 94 93 08 	call	0x1126	; 0x1126 <__divsf3>
     7f6:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     7fa:	5b 01       	movw	r10, r22
				
				if ( x < 0 )
     7fc:	dd 20       	and	r13, r13
     7fe:	ac f4       	brge	.+42     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
				{
					angle += 180;
     800:	34 eb       	ldi	r19, 0xB4	; 180
     802:	a3 0e       	add	r10, r19
     804:	b1 1c       	adc	r11, r1
     806:	11 c0       	rjmp	.+34     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
		int GetRobotAngle()
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
     808:	0f 2e       	mov	r0, r31
     80a:	f3 ed       	ldi	r31, 0xD3	; 211
     80c:	4f 2e       	mov	r4, r31
     80e:	f0 2d       	mov	r31, r0
     810:	55 24       	eor	r5, r5
     812:	5a 94       	dec	r5
		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
     814:	a1 2c       	mov	r10, r1
     816:	b1 2c       	mov	r11, r1
     818:	08 c0       	rjmp	.+16     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
			
			if ( x == 0 )
			{
				if ( y > 0 )
				{
					angle = 90;
     81a:	0f 2e       	mov	r0, r31
     81c:	fa e5       	ldi	r31, 0x5A	; 90
     81e:	af 2e       	mov	r10, r31
     820:	b1 2c       	mov	r11, r1
     822:	f0 2d       	mov	r31, r0
     824:	02 c0       	rjmp	.+4      	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
     826:	a1 2c       	mov	r10, r1
     828:	b1 2c       	mov	r11, r1
				{
					angle += 180;
				}
			}
			
			direction = (int)(round((robotAngle - angle)/45));
     82a:	c2 01       	movw	r24, r4
     82c:	8a 19       	sub	r24, r10
     82e:	9b 09       	sbc	r25, r11
     830:	6d e2       	ldi	r22, 0x2D	; 45
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 5f 14 	call	0x28be	; 0x28be <__divmodhi4>
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     844:	0e 94 65 0a 	call	0x14ca	; 0x14ca <round>
     848:	0e 94 05 09 	call	0x120a	; 0x120a <__fixsfsi>
     84c:	6b 01       	movw	r12, r22
			
			if ( direction > 4 )
     84e:	65 30       	cpi	r22, 0x05	; 5
     850:	71 05       	cpc	r23, r1
     852:	1c f0       	brlt	.+6      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
			{
				direction = -8 + direction;
     854:	58 e0       	ldi	r21, 0x08	; 8
     856:	c5 1a       	sub	r12, r21
     858:	d1 08       	sbc	r13, r1
			}
			
			if ( direction < -4 )
     85a:	6c ef       	ldi	r22, 0xFC	; 252
     85c:	c6 16       	cp	r12, r22
     85e:	6f ef       	ldi	r22, 0xFF	; 255
     860:	d6 06       	cpc	r13, r22
     862:	1c f4       	brge	.+6      	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
			{
				direction = 8 + direction;
     864:	88 e0       	ldi	r24, 0x08	; 8
     866:	c8 0e       	add	r12, r24
     868:	d1 1c       	adc	r13, r1
			}
			
			clear();
     86a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
			print_long( direction );
     86e:	b6 01       	movw	r22, r12
     870:	0d 2c       	mov	r0, r13
     872:	00 0c       	add	r0, r0
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			lcd_goto_xy( 0, 1 );
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <lcd_goto_xy>
			print_long( angle );
     884:	b5 01       	movw	r22, r10
     886:	0b 2c       	mov	r0, r11
     888:	00 0c       	add	r0, r0
     88a:	88 0b       	sbc	r24, r24
     88c:	99 0b       	sbc	r25, r25
     88e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			}
		}

		void SetDeviceOrientation(int angle)
		{
			switch( angle )
     892:	9d e2       	ldi	r25, 0x2D	; 45
     894:	a9 16       	cp	r10, r25
     896:	b1 04       	cpc	r11, r1
     898:	81 f1       	breq	.+96     	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
     89a:	74 f4       	brge	.+28     	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
     89c:	b3 ed       	ldi	r27, 0xD3	; 211
     89e:	ab 16       	cp	r10, r27
     8a0:	bf ef       	ldi	r27, 0xFF	; 255
     8a2:	bb 06       	cpc	r11, r27
     8a4:	09 f1       	breq	.+66     	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
     8a6:	a1 14       	cp	r10, r1
     8a8:	b1 04       	cpc	r11, r1
     8aa:	11 f1       	breq	.+68     	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8ac:	e6 ea       	ldi	r30, 0xA6	; 166
     8ae:	ae 16       	cp	r10, r30
     8b0:	ef ef       	ldi	r30, 0xFF	; 255
     8b2:	be 06       	cpc	r11, r30
     8b4:	b1 f5       	brne	.+108    	; 0x922 <__stack+0x23>
     8b6:	13 c0       	rjmp	.+38     	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     8b8:	f7 e8       	ldi	r31, 0x87	; 135
     8ba:	af 16       	cp	r10, r31
     8bc:	b1 04       	cpc	r11, r1
     8be:	29 f1       	breq	.+74     	; 0x90a <__stack+0xb>
     8c0:	2c f4       	brge	.+10     	; 0x8cc <__LOCK_REGION_LENGTH__+0x4cc>
     8c2:	3a e5       	ldi	r19, 0x5A	; 90
     8c4:	a3 16       	cp	r10, r19
     8c6:	b1 04       	cpc	r11, r1
     8c8:	e1 f0       	breq	.+56     	; 0x902 <__stack+0x3>
     8ca:	2b c0       	rjmp	.+86     	; 0x922 <__stack+0x23>
     8cc:	44 eb       	ldi	r20, 0xB4	; 180
     8ce:	a4 16       	cp	r10, r20
     8d0:	b1 04       	cpc	r11, r1
     8d2:	f9 f0       	breq	.+62     	; 0x912 <__stack+0x13>
     8d4:	51 ee       	ldi	r21, 0xE1	; 225
     8d6:	a5 16       	cp	r10, r21
     8d8:	b1 04       	cpc	r11, r1
     8da:	01 f1       	breq	.+64     	; 0x91c <__stack+0x1d>
     8dc:	22 c0       	rjmp	.+68     	; 0x922 <__stack+0x23>
			{
				case -90:	orientation = EOrientation::South;		break;
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	d1 01       	movw	r26, r2
     8e2:	14 96       	adiw	r26, 0x04	; 4
     8e4:	8c 93       	st	X, r24
     8e6:	1d c0       	rjmp	.+58     	; 0x922 <__stack+0x23>
				case -45:	orientation = EOrientation::SouthEast;	break;
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	f1 01       	movw	r30, r2
     8ec:	84 83       	std	Z+4, r24	; 0x04
     8ee:	19 c0       	rjmp	.+50     	; 0x922 <__stack+0x23>
				case 0:		orientation = EOrientation::East;		break;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	d1 01       	movw	r26, r2
     8f4:	14 96       	adiw	r26, 0x04	; 4
     8f6:	8c 93       	st	X, r24
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <__stack+0x23>
				case 45:	orientation = EOrientation::NorthEast;	break;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	f1 01       	movw	r30, r2
     8fe:	84 83       	std	Z+4, r24	; 0x04
     900:	10 c0       	rjmp	.+32     	; 0x922 <__stack+0x23>
				case 90:	orientation = EOrientation::North;		break;
     902:	d1 01       	movw	r26, r2
     904:	14 96       	adiw	r26, 0x04	; 4
     906:	1c 92       	st	X, r1
     908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0x23>
				case 135:	orientation = EOrientation::NorthWest;	break;
     90a:	87 e0       	ldi	r24, 0x07	; 7
     90c:	f1 01       	movw	r30, r2
     90e:	84 83       	std	Z+4, r24	; 0x04
     910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0x23>
				case 180:	orientation = EOrientation::West;		break;
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	d1 01       	movw	r26, r2
     916:	14 96       	adiw	r26, 0x04	; 4
     918:	8c 93       	st	X, r24
     91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
				case 225:	orientation = EOrientation::SouthWest;	break;
     91c:	25 e0       	ldi	r18, 0x05	; 5
     91e:	f1 01       	movw	r30, r2
     920:	24 83       	std	Z+4, r18	; 0x04
			lcd_goto_xy( 0, 1 );
			print_long( angle );
			//delay_ms(1000);
			
			SetDeviceOrientation( angle );
			if ( direction < 0 )
     922:	dd 20       	and	r13, r13
     924:	ec f4       	brge	.+58     	; 0x960 <__stack+0x61>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     926:	6a e2       	ldi	r22, 0x2A	; 42
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	86 ed       	ldi	r24, 0xD6	; 214
     92c:	9f ef       	ldi	r25, 0xFF	; 255
     92e:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			delay_ms( 200 * cnt );
     932:	c6 01       	movw	r24, r12
     934:	99 23       	and	r25, r25
     936:	24 f4       	brge	.+8      	; 0x940 <__stack+0x41>
     938:	88 27       	eor	r24, r24
     93a:	99 27       	eor	r25, r25
     93c:	8c 19       	sub	r24, r12
     93e:	9d 09       	sbc	r25, r13
     940:	28 ec       	ldi	r18, 0xC8	; 200
     942:	ac 01       	movw	r20, r24
     944:	24 9f       	mul	r18, r20
     946:	c0 01       	movw	r24, r0
     948:	25 9f       	mul	r18, r21
     94a:	90 0d       	add	r25, r0
     94c:	11 24       	eor	r1, r1
     94e:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			
			set_motors( 0, 0 );
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
     95e:	1f c0       	rjmp	.+62     	; 0x99e <__stack+0x9f>
			if ( direction < 0 )
			{
				//turn left
				turn_half_left( abs( direction ) );
			}
			else if ( direction > 0 )
     960:	1c 14       	cp	r1, r12
     962:	1d 04       	cpc	r1, r13
     964:	e4 f4       	brge	.+56     	; 0x99e <__stack+0x9f>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     966:	66 ed       	ldi	r22, 0xD6	; 214
     968:	7f ef       	ldi	r23, 0xFF	; 255
     96a:	8a e2       	ldi	r24, 0x2A	; 42
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			delay_ms( 200 * cnt );
     972:	c6 01       	movw	r24, r12
     974:	99 23       	and	r25, r25
     976:	24 f4       	brge	.+8      	; 0x980 <__stack+0x81>
     978:	88 27       	eor	r24, r24
     97a:	99 27       	eor	r25, r25
     97c:	8c 19       	sub	r24, r12
     97e:	9d 09       	sbc	r25, r13
     980:	28 ec       	ldi	r18, 0xC8	; 200
     982:	dc 01       	movw	r26, r24
     984:	2a 9f       	mul	r18, r26
     986:	c0 01       	movw	r24, r0
     988:	2b 9f       	mul	r18, r27
     98a:	90 0d       	add	r25, r0
     98c:	11 24       	eor	r1, r1
     98e:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			
			set_motors( 0, 0 );
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			else if ( direction > 0 )
			{
				//turn right
				turn_half_right( abs( direction ) );
			}
			set_motors( 0, 0 );
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
				move_forward();
			}
		}
		
		void printPos(short x, short y){
			clear();
     9aa:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
			print("(");
     9ae:	8d e3       	ldi	r24, 0x3D	; 61
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
			print_long( x );
     9b6:	b7 01       	movw	r22, r14
     9b8:	0f 2c       	mov	r0, r15
     9ba:	00 0c       	add	r0, r0
     9bc:	88 0b       	sbc	r24, r24
     9be:	99 0b       	sbc	r25, r25
     9c0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			print(", ");
     9c4:	8f e3       	ldi	r24, 0x3F	; 63
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
			print_long( y );
     9cc:	b8 01       	movw	r22, r16
     9ce:	01 2e       	mov	r0, r17
     9d0:	00 0c       	add	r0, r0
     9d2:	88 0b       	sbc	r24, r24
     9d4:	99 0b       	sbc	r25, r25
     9d6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			print(")");
     9da:	82 e4       	ldi	r24, 0x42	; 66
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
		void stepToGoal(Point2D goalPos)
		{
			Point2D nextPos = nextStepToFinish( goalPos );
			
			printPos( nextPos.x, nextPos.y );
			delay_ms(2000);
     9e2:	80 ed       	ldi	r24, 0xD0	; 208
     9e4:	97 e0       	ldi	r25, 0x07	; 7
     9e6:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			// delay_ms(1000);
			
			//Set position in matrix only if it is NULL
			if ( matrix[ nextPos.x ][ nextPos.y ].distToFinish != INT_MAX/* == NULL*/)
     9ea:	f8 01       	movw	r30, r16
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	e0 0f       	add	r30, r16
     9f6:	f1 1f       	adc	r31, r17
     9f8:	2b e4       	ldi	r18, 0x4B	; 75
     9fa:	2e 9d       	mul	r18, r14
     9fc:	c0 01       	movw	r24, r0
     9fe:	2f 9d       	mul	r18, r15
     a00:	90 0d       	add	r25, r0
     a02:	11 24       	eor	r1, r1
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
     a08:	ef 54       	subi	r30, 0x4F	; 79
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	93 81       	ldd	r25, Z+3	; 0x03
     a10:	8f 3f       	cpi	r24, 0xFF	; 255
     a12:	9f 47       	sbci	r25, 0x7F	; 127
     a14:	09 f4       	brne	.+2      	; 0xa18 <__stack+0x119>
     a16:	43 c0       	rjmp	.+134    	; 0xa9e <__stack+0x19f>
			{ // @TODO: How to check is it visited
				matrix[nextPos.x][nextPos.y].distToStart = matrix[position.x][position.y].distToStart +
     a18:	f1 01       	movw	r30, r2
     a1a:	40 81       	ld	r20, Z
     a1c:	51 81       	ldd	r21, Z+1	; 0x01
     a1e:	22 81       	ldd	r18, Z+2	; 0x02
     a20:	33 81       	ldd	r19, Z+3	; 0x03
     a22:	b9 01       	movw	r22, r18
     a24:	66 0f       	add	r22, r22
     a26:	77 1f       	adc	r23, r23
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	62 0f       	add	r22, r18
     a2e:	73 1f       	adc	r23, r19
     a30:	eb e4       	ldi	r30, 0x4B	; 75
     a32:	e4 9f       	mul	r30, r20
     a34:	c0 01       	movw	r24, r0
     a36:	e5 9f       	mul	r30, r21
     a38:	90 0d       	add	r25, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	86 0f       	add	r24, r22
     a3e:	97 1f       	adc	r25, r23
     a40:	fc 01       	movw	r30, r24
     a42:	ef 54       	subi	r30, 0x4F	; 79
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	60 81       	ld	r22, Z
     a48:	71 81       	ldd	r23, Z+1	; 0x01
		// !!!Only for one step!!!!
		short getDistance(Point2D prevPos, Point2D nextPos)
		{
			short distance = 0;
			
			if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     a4a:	4e 15       	cp	r20, r14
     a4c:	5f 05       	cpc	r21, r15
     a4e:	31 f0       	breq	.+12     	; 0xa5c <__stack+0x15d>
     a50:	20 17       	cp	r18, r16
     a52:	31 07       	cpc	r19, r17
     a54:	49 f4       	brne	.+18     	; 0xa68 <__stack+0x169>
			{
				distance = 3;
			}
			else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
			{
				distance = 2;
     a56:	22 e0       	ldi	r18, 0x02	; 2
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	0b c0       	rjmp	.+22     	; 0xa72 <__stack+0x173>
			
			if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
			{
				distance = 3;
			}
			else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     a5c:	20 17       	cp	r18, r16
     a5e:	31 07       	cpc	r19, r17
     a60:	31 f0       	breq	.+12     	; 0xa6e <__stack+0x16f>
			{
				distance = 2;
     a62:	22 e0       	ldi	r18, 0x02	; 2
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <__stack+0x173>
		{
			short distance = 0;
			
			if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
			{
				distance = 3;
     a68:	23 e0       	ldi	r18, 0x03	; 3
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x173>
		}

		// !!!Only for one step!!!!
		short getDistance(Point2D prevPos, Point2D nextPos)
		{
			short distance = 0;
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
			
			//Set position in matrix only if it is NULL
			if ( matrix[ nextPos.x ][ nextPos.y ].distToFinish != INT_MAX/* == NULL*/)
			{ // @TODO: How to check is it visited
				matrix[nextPos.x][nextPos.y].distToStart = matrix[position.x][position.y].distToStart +
					getDistance(position, nextPos);
     a72:	a8 01       	movw	r20, r16
     a74:	44 0f       	add	r20, r20
     a76:	55 1f       	adc	r21, r21
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	40 0f       	add	r20, r16
     a7e:	51 1f       	adc	r21, r17
     a80:	eb e4       	ldi	r30, 0x4B	; 75
     a82:	ee 9d       	mul	r30, r14
     a84:	c0 01       	movw	r24, r0
     a86:	ef 9d       	mul	r30, r15
     a88:	90 0d       	add	r25, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	84 0f       	add	r24, r20
     a8e:	95 1f       	adc	r25, r21
     a90:	fc 01       	movw	r30, r24
     a92:	ef 54       	subi	r30, 0x4F	; 79
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	26 0f       	add	r18, r22
     a98:	37 1f       	adc	r19, r23
     a9a:	31 83       	std	Z+1, r19	; 0x01
     a9c:	20 83       	st	Z, r18
					
			}
			
			//Move only when are not at goal
			if ( position.x != goalPos.x || position.y != goalPos.y )
     a9e:	d1 01       	movw	r26, r2
     aa0:	8d 91       	ld	r24, X+
     aa2:	9c 91       	ld	r25, X
     aa4:	11 97       	sbiw	r26, 0x01	; 1
     aa6:	86 15       	cp	r24, r6
     aa8:	97 05       	cpc	r25, r7
     aaa:	41 f4       	brne	.+16     	; 0xabc <__stack+0x1bd>
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	88 15       	cp	r24, r8
     ab6:	99 05       	cpc	r25, r9
     ab8:	09 f4       	brne	.+2      	; 0xabc <__stack+0x1bd>
     aba:	5b c0       	rjmp	.+182    	; 0xb72 <__stack+0x273>
			{

				position = nextPos;
     abc:	f1 01       	movw	r30, r2
     abe:	f1 82       	std	Z+1, r15	; 0x01
     ac0:	e0 82       	st	Z, r14
     ac2:	13 83       	std	Z+3, r17	; 0x03
     ac4:	02 83       	std	Z+2, r16	; 0x02
		{
			make_turn( 42, -42, turns );
		}
		
		void move_forward(){
			set_motors( 20, 20 );
     ac6:	64 e1       	ldi	r22, 0x14	; 20
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	84 e1       	ldi	r24, 0x14	; 20
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			set_motors( 0, 0 );
		}
		
		bool is_on_marker()
		{
			read_line_sensors( sensors, IR_EMITTERS_ON );
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad8:	0e 94 41 11 	call	0x2282	; 0x2282 <read_line_sensors>
			if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     adc:	d1 01       	movw	r26, r2
     ade:	1b 96       	adiw	r26, 0x0b	; 11
     ae0:	8d 91       	ld	r24, X+
     ae2:	9c 91       	ld	r25, X
     ae4:	1c 97       	sbiw	r26, 0x0c	; 12
     ae6:	81 3b       	cpi	r24, 0xB1	; 177
     ae8:	b4 e0       	ldi	r27, 0x04	; 4
     aea:	9b 07       	cpc	r25, r27
     aec:	80 f4       	brcc	.+32     	; 0xb0e <__stack+0x20f>
     aee:	f1 01       	movw	r30, r2
     af0:	25 85       	ldd	r18, Z+13	; 0x0d
     af2:	36 85       	ldd	r19, Z+14	; 0x0e
     af4:	21 3b       	cpi	r18, 0xB1	; 177
     af6:	f4 e0       	ldi	r31, 0x04	; 4
     af8:	3f 07       	cpc	r19, r31
     afa:	48 f4       	brcc	.+18     	; 0xb0e <__stack+0x20f>
     afc:	d1 01       	movw	r26, r2
     afe:	1f 96       	adiw	r26, 0x0f	; 15
     b00:	4d 91       	ld	r20, X+
     b02:	5c 91       	ld	r21, X
     b04:	50 97       	sbiw	r26, 0x10	; 16
     b06:	41 3b       	cpi	r20, 0xB1	; 177
     b08:	b4 e0       	ldi	r27, 0x04	; 4
     b0a:	5b 07       	cpc	r21, r27
     b0c:	d0 f0       	brcs	.+52     	; 0xb42 <__stack+0x243>
			{
				matrix[position.x][position.y].isObstacle = true;
     b0e:	f1 01       	movw	r30, r2
     b10:	20 81       	ld	r18, Z
     b12:	31 81       	ldd	r19, Z+1	; 0x01
     b14:	02 80       	ldd	r0, Z+2	; 0x02
     b16:	f3 81       	ldd	r31, Z+3	; 0x03
     b18:	e0 2d       	mov	r30, r0
     b1a:	cf 01       	movw	r24, r30
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	e8 0f       	add	r30, r24
     b26:	f9 1f       	adc	r31, r25
     b28:	4b e4       	ldi	r20, 0x4B	; 75
     b2a:	42 9f       	mul	r20, r18
     b2c:	c0 01       	movw	r24, r0
     b2e:	43 9f       	mul	r20, r19
     b30:	90 0d       	add	r25, r0
     b32:	11 24       	eor	r1, r1
     b34:	e8 0f       	add	r30, r24
     b36:	f9 1f       	adc	r31, r25
     b38:	ef 54       	subi	r30, 0x4F	; 79
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	84 83       	std	Z+4, r24	; 0x04
     b40:	0a c0       	rjmp	.+20     	; 0xb56 <__stack+0x257>
				return true;
			} else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     b42:	8f 35       	cpi	r24, 0x5F	; 95
     b44:	91 40       	sbci	r25, 0x01	; 1
     b46:	38 f4       	brcc	.+14     	; 0xb56 <__stack+0x257>
     b48:	2f 35       	cpi	r18, 0x5F	; 95
     b4a:	31 40       	sbci	r19, 0x01	; 1
     b4c:	20 f4       	brcc	.+8      	; 0xb56 <__stack+0x257>
		}
		
		void move_forward(){
			set_motors( 20, 20 );
			
			while(!is_on_marker()){}
     b4e:	4f 35       	cpi	r20, 0x5F	; 95
     b50:	51 40       	sbci	r21, 0x01	; 1
     b52:	08 f4       	brcc	.+2      	; 0xb56 <__stack+0x257>
     b54:	be cf       	rjmp	.-132    	; 0xad2 <__stack+0x1d3>
			
			play( ">>a32" );
     b56:	84 e4       	ldi	r24, 0x44	; 68
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <play>
			delay_ms( 900 );
     b5e:	84 e8       	ldi	r24, 0x84	; 132
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
			set_motors( 0, 0 );
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			while ( position.x != finishPos.x || position.y != finishPos.y || isLastStep )
			{
										
				stepToGoal( finishPos );
				
				if ( isLastStep )
     b72:	98 89       	ldd	r25, Y+16	; 0x10
     b74:	99 23       	and	r25, r25
     b76:	09 f4       	brne	.+2      	; 0xb7a <__stack+0x27b>
     b78:	cd c1       	rjmp	.+922    	; 0xf14 <__stack+0x615>
			finishPos = startPos;
		}
		
		void calculateDistToFinish()
		{
			Point2D currentPos( finishPos );
     b7a:	d1 01       	movw	r26, r2
     b7c:	15 96       	adiw	r26, 0x05	; 5
     b7e:	8d 90       	ld	r8, X+
     b80:	9c 90       	ld	r9, X
     b82:	16 97       	sbiw	r26, 0x06	; 6
     b84:	17 96       	adiw	r26, 0x07	; 7
     b86:	8d 91       	ld	r24, X+
     b88:	9c 91       	ld	r25, X
     b8a:	18 97       	sbiw	r26, 0x08	; 8
			short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
     b8c:	fc 01       	movw	r30, r24
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	e8 0f       	add	r30, r24
     b98:	f9 1f       	adc	r31, r25
     b9a:	4b e4       	ldi	r20, 0x4B	; 75
     b9c:	48 9d       	mul	r20, r8
     b9e:	90 01       	movw	r18, r0
     ba0:	49 9d       	mul	r20, r9
     ba2:	30 0d       	add	r19, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	e2 0f       	add	r30, r18
     ba8:	f3 1f       	adc	r31, r19
     baa:	ef 54       	subi	r30, 0x4F	; 79
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	20 81       	ld	r18, Z
     bb0:	31 81       	ldd	r19, Z+1	; 0x01
     bb2:	3e 87       	std	Y+14, r19	; 0x0e
     bb4:	2d 87       	std	Y+13, r18	; 0x0d
			
			while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     bb6:	21 15       	cp	r18, r1
     bb8:	31 05       	cpc	r19, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <__stack+0x2bf>
     bbc:	43 c1       	rjmp	.+646    	; 0xe44 <__stack+0x545>
     bbe:	3c 01       	movw	r6, r24
     bc0:	24 01       	movw	r4, r8
			{
				Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );
				
				if ( currCell.distToFinish < dist - currCell.distToStart )
     bc2:	0f 2e       	mov	r0, r31
     bc4:	fb e4       	ldi	r31, 0x4B	; 75
     bc6:	bf 2e       	mov	r11, r31
     bc8:	f0 2d       	mov	r31, r0
     bca:	79 01       	movw	r14, r18
     bcc:	39 8a       	std	Y+17, r3	; 0x11
     bce:	28 8a       	std	Y+16, r2	; 0x10
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__stack+0x2d7>
		void calculateDistToFinish()
		{
			Point2D currentPos( finishPos );
			short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
			
			while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     bd2:	3c 01       	movw	r6, r24
     bd4:	24 01       	movw	r4, r8
			{
				Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );
				
				if ( currCell.distToFinish < dist - currCell.distToStart )
     bd6:	a7 01       	movw	r20, r14
     bd8:	42 1b       	sub	r20, r18
     bda:	53 0b       	sbc	r21, r19
     bdc:	f3 01       	movw	r30, r6
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	e6 0d       	add	r30, r6
     be8:	f7 1d       	adc	r31, r7
     bea:	b4 9c       	mul	r11, r4
     bec:	90 01       	movw	r18, r0
     bee:	b5 9c       	mul	r11, r5
     bf0:	30 0d       	add	r19, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	e2 0f       	add	r30, r18
     bf6:	f3 1f       	adc	r31, r19
     bf8:	ef 54       	subi	r30, 0x4F	; 79
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	22 81       	ldd	r18, Z+2	; 0x02
     bfe:	33 81       	ldd	r19, Z+3	; 0x03
     c00:	24 17       	cp	r18, r20
     c02:	35 07       	cpc	r19, r21
     c04:	94 f4       	brge	.+36     	; 0xc2a <__stack+0x32b>
				{
					currCell.distToFinish = dist - currCell.distToStart;
     c06:	f3 01       	movw	r30, r6
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	e6 0d       	add	r30, r6
     c12:	f7 1d       	adc	r31, r7
     c14:	b4 9c       	mul	r11, r4
     c16:	90 01       	movw	r18, r0
     c18:	b5 9c       	mul	r11, r5
     c1a:	30 0d       	add	r19, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	ef 54       	subi	r30, 0x4F	; 79
     c24:	fe 4f       	sbci	r31, 0xFE	; 254
     c26:	53 83       	std	Z+3, r21	; 0x03
     c28:	42 83       	std	Z+2, r20	; 0x02
		}
		
		Point2D getNearestToStartAdjecent(const Point2D& currentPos)
		{
			Point2D nearestPos( currentPos );
			short	minDist = matrix[ currentPos.x ][ currentPos.y ].distToStart;
     c2a:	fc 01       	movw	r30, r24
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	e8 0f       	add	r30, r24
     c36:	f9 1f       	adc	r31, r25
     c38:	b8 9c       	mul	r11, r8
     c3a:	90 01       	movw	r18, r0
     c3c:	b9 9c       	mul	r11, r9
     c3e:	30 0d       	add	r19, r0
     c40:	11 24       	eor	r1, r1
     c42:	e2 0f       	add	r30, r18
     c44:	f3 1f       	adc	r31, r19
     c46:	ef 54       	subi	r30, 0x4F	; 79
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	20 81       	ld	r18, Z
     c4c:	31 81       	ldd	r19, Z+1	; 0x01
			
			if ( matrix[ currentPos.x - 1 ][ currentPos.y - 1 ].distToStart < minDist )
     c4e:	b4 01       	movw	r22, r8
     c50:	61 50       	subi	r22, 0x01	; 1
     c52:	71 09       	sbc	r23, r1
     c54:	ac 01       	movw	r20, r24
     c56:	41 50       	subi	r20, 0x01	; 1
     c58:	51 09       	sbc	r21, r1
     c5a:	fa 01       	movw	r30, r20
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e4 0f       	add	r30, r20
     c66:	f5 1f       	adc	r31, r21
     c68:	b6 9e       	mul	r11, r22
     c6a:	d0 01       	movw	r26, r0
     c6c:	b7 9e       	mul	r11, r23
     c6e:	b0 0d       	add	r27, r0
     c70:	11 24       	eor	r1, r1
     c72:	ea 0f       	add	r30, r26
     c74:	fb 1f       	adc	r31, r27
     c76:	ef 54       	subi	r30, 0x4F	; 79
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	01 90       	ld	r0, Z+
     c7c:	f0 81       	ld	r31, Z
     c7e:	e0 2d       	mov	r30, r0
     c80:	e2 17       	cp	r30, r18
     c82:	f3 07       	cpc	r31, r19
     c84:	34 f4       	brge	.+12     	; 0xc92 <__stack+0x393>
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y - 1 );
     c86:	34 2e       	mov	r3, r20
     c88:	a5 2e       	mov	r10, r21
     c8a:	c6 2e       	mov	r12, r22
     c8c:	d7 2e       	mov	r13, r23
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     c8e:	9f 01       	movw	r18, r30
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__stack+0x39b>
			}
		}
		
		Point2D getNearestToStartAdjecent(const Point2D& currentPos)
		{
			Point2D nearestPos( currentPos );
     c92:	36 2c       	mov	r3, r6
     c94:	a7 2c       	mov	r10, r7
     c96:	c4 2c       	mov	r12, r4
     c98:	d5 2c       	mov	r13, r5
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y - 1 );
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
			}
			
			if ( matrix[ currentPos.x ][ currentPos.y - 1 ].distToStart < minDist )
     c9a:	da 01       	movw	r26, r20
     c9c:	aa 0f       	add	r26, r26
     c9e:	bb 1f       	adc	r27, r27
     ca0:	aa 0f       	add	r26, r26
     ca2:	bb 1f       	adc	r27, r27
     ca4:	a4 0f       	add	r26, r20
     ca6:	b5 1f       	adc	r27, r21
     ca8:	b8 9c       	mul	r11, r8
     caa:	f0 01       	movw	r30, r0
     cac:	b9 9c       	mul	r11, r9
     cae:	f0 0d       	add	r31, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	ea 0f       	add	r30, r26
     cb4:	fb 1f       	adc	r31, r27
     cb6:	ef 54       	subi	r30, 0x4F	; 79
     cb8:	fe 4f       	sbci	r31, 0xFE	; 254
     cba:	01 90       	ld	r0, Z+
     cbc:	f0 81       	ld	r31, Z
     cbe:	e0 2d       	mov	r30, r0
     cc0:	e2 17       	cp	r30, r18
     cc2:	f3 07       	cpc	r31, r19
     cc4:	2c f4       	brge	.+10     	; 0xcd0 <__stack+0x3d1>
			{
				nearestPos	= Point2D( currentPos.x, currentPos.y - 1 );
     cc6:	34 2e       	mov	r3, r20
     cc8:	a5 2e       	mov	r10, r21
     cca:	c4 2c       	mov	r12, r4
     ccc:	d5 2c       	mov	r13, r5
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     cce:	9f 01       	movw	r18, r30
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y - 1 ].distToStart < minDist )
     cd0:	f4 01       	movw	r30, r8
     cd2:	31 96       	adiw	r30, 0x01	; 1
     cd4:	8a 01       	movw	r16, r20
     cd6:	00 0f       	add	r16, r16
     cd8:	11 1f       	adc	r17, r17
     cda:	00 0f       	add	r16, r16
     cdc:	11 1f       	adc	r17, r17
     cde:	04 0f       	add	r16, r20
     ce0:	15 1f       	adc	r17, r21
     ce2:	be 9e       	mul	r11, r30
     ce4:	d0 01       	movw	r26, r0
     ce6:	bf 9e       	mul	r11, r31
     ce8:	b0 0d       	add	r27, r0
     cea:	11 24       	eor	r1, r1
     cec:	a0 0f       	add	r26, r16
     cee:	b1 1f       	adc	r27, r17
     cf0:	af 54       	subi	r26, 0x4F	; 79
     cf2:	be 4f       	sbci	r27, 0xFE	; 254
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	a2 17       	cp	r26, r18
     cfc:	b3 07       	cpc	r27, r19
     cfe:	2c f4       	brge	.+10     	; 0xd0a <__stack+0x40b>
			{
				nearestPos	= Point2D( currentPos.x + 1, currentPos.y - 1 );
     d00:	34 2e       	mov	r3, r20
     d02:	a5 2e       	mov	r10, r21
     d04:	ce 2e       	mov	r12, r30
     d06:	df 2e       	mov	r13, r31
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     d08:	9d 01       	movw	r18, r26
			}
			
			if ( matrix[ currentPos.x - 1 ][ currentPos.y ].distToStart < minDist )
     d0a:	dc 01       	movw	r26, r24
     d0c:	aa 0f       	add	r26, r26
     d0e:	bb 1f       	adc	r27, r27
     d10:	aa 0f       	add	r26, r26
     d12:	bb 1f       	adc	r27, r27
     d14:	a8 0f       	add	r26, r24
     d16:	b9 1f       	adc	r27, r25
     d18:	b6 9e       	mul	r11, r22
     d1a:	a0 01       	movw	r20, r0
     d1c:	b7 9e       	mul	r11, r23
     d1e:	50 0d       	add	r21, r0
     d20:	11 24       	eor	r1, r1
     d22:	a4 0f       	add	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	af 54       	subi	r26, 0x4F	; 79
     d28:	be 4f       	sbci	r27, 0xFE	; 254
     d2a:	4d 91       	ld	r20, X+
     d2c:	5c 91       	ld	r21, X
     d2e:	42 17       	cp	r20, r18
     d30:	53 07       	cpc	r21, r19
     d32:	2c f4       	brge	.+10     	; 0xd3e <__stack+0x43f>
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y );
     d34:	36 2c       	mov	r3, r6
     d36:	a7 2c       	mov	r10, r7
     d38:	c6 2e       	mov	r12, r22
     d3a:	d7 2e       	mov	r13, r23
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     d3c:	9a 01       	movw	r18, r20
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y ].distToStart < minDist )
     d3e:	dc 01       	movw	r26, r24
     d40:	aa 0f       	add	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	aa 0f       	add	r26, r26
     d46:	bb 1f       	adc	r27, r27
     d48:	a8 0f       	add	r26, r24
     d4a:	b9 1f       	adc	r27, r25
     d4c:	be 9e       	mul	r11, r30
     d4e:	a0 01       	movw	r20, r0
     d50:	bf 9e       	mul	r11, r31
     d52:	50 0d       	add	r21, r0
     d54:	11 24       	eor	r1, r1
     d56:	a4 0f       	add	r26, r20
     d58:	b5 1f       	adc	r27, r21
     d5a:	af 54       	subi	r26, 0x4F	; 79
     d5c:	be 4f       	sbci	r27, 0xFE	; 254
     d5e:	4d 91       	ld	r20, X+
     d60:	5c 91       	ld	r21, X
     d62:	42 17       	cp	r20, r18
     d64:	53 07       	cpc	r21, r19
     d66:	2c f4       	brge	.+10     	; 0xd72 <__stack+0x473>
			{
				nearestPos	= Point2D( currentPos.x + 1, currentPos.y );
     d68:	36 2c       	mov	r3, r6
     d6a:	a7 2c       	mov	r10, r7
     d6c:	ce 2e       	mov	r12, r30
     d6e:	df 2e       	mov	r13, r31
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     d70:	9a 01       	movw	r18, r20
			}
			
			if ( matrix[ currentPos.x - 1 ][ currentPos.y + 1 ].distToStart < minDist )
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	dc 01       	movw	r26, r24
     d76:	aa 0f       	add	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	aa 0f       	add	r26, r26
     d7c:	bb 1f       	adc	r27, r27
     d7e:	a8 0f       	add	r26, r24
     d80:	b9 1f       	adc	r27, r25
     d82:	b6 9e       	mul	r11, r22
     d84:	a0 01       	movw	r20, r0
     d86:	b7 9e       	mul	r11, r23
     d88:	50 0d       	add	r21, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	a4 0f       	add	r26, r20
     d8e:	b5 1f       	adc	r27, r21
     d90:	af 54       	subi	r26, 0x4F	; 79
     d92:	be 4f       	sbci	r27, 0xFE	; 254
     d94:	4d 91       	ld	r20, X+
     d96:	5c 91       	ld	r21, X
     d98:	42 17       	cp	r20, r18
     d9a:	53 07       	cpc	r21, r19
     d9c:	2c f4       	brge	.+10     	; 0xda8 <__stack+0x4a9>
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y + 1 );
     d9e:	38 2e       	mov	r3, r24
     da0:	a9 2e       	mov	r10, r25
     da2:	c6 2e       	mov	r12, r22
     da4:	d7 2e       	mov	r13, r23
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     da6:	9a 01       	movw	r18, r20
			}
			
			if ( matrix[ currentPos.x ][ currentPos.y + 1 ].distToStart < minDist )
     da8:	bc 01       	movw	r22, r24
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	68 0f       	add	r22, r24
     db4:	79 1f       	adc	r23, r25
     db6:	b8 9c       	mul	r11, r8
     db8:	a0 01       	movw	r20, r0
     dba:	b9 9c       	mul	r11, r9
     dbc:	50 0d       	add	r21, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	46 0f       	add	r20, r22
     dc2:	57 1f       	adc	r21, r23
     dc4:	da 01       	movw	r26, r20
     dc6:	af 54       	subi	r26, 0x4F	; 79
     dc8:	be 4f       	sbci	r27, 0xFE	; 254
     dca:	4d 91       	ld	r20, X+
     dcc:	5c 91       	ld	r21, X
     dce:	42 17       	cp	r20, r18
     dd0:	53 07       	cpc	r21, r19
     dd2:	2c f4       	brge	.+10     	; 0xdde <__stack+0x4df>
			{
				nearestPos	= Point2D( currentPos.x, currentPos.y + 1 );
     dd4:	38 2e       	mov	r3, r24
     dd6:	a9 2e       	mov	r10, r25
     dd8:	c4 2c       	mov	r12, r4
     dda:	d5 2c       	mov	r13, r5
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     ddc:	9a 01       	movw	r18, r20
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y + 1 ].distToStart < minDist )
     dde:	dc 01       	movw	r26, r24
     de0:	aa 0f       	add	r26, r26
     de2:	bb 1f       	adc	r27, r27
     de4:	aa 0f       	add	r26, r26
     de6:	bb 1f       	adc	r27, r27
     de8:	a8 0f       	add	r26, r24
     dea:	b9 1f       	adc	r27, r25
     dec:	be 9e       	mul	r11, r30
     dee:	a0 01       	movw	r20, r0
     df0:	bf 9e       	mul	r11, r31
     df2:	50 0d       	add	r21, r0
     df4:	11 24       	eor	r1, r1
     df6:	a4 0f       	add	r26, r20
     df8:	b5 1f       	adc	r27, r21
     dfa:	af 54       	subi	r26, 0x4F	; 79
     dfc:	be 4f       	sbci	r27, 0xFE	; 254
     dfe:	4d 91       	ld	r20, X+
     e00:	5c 91       	ld	r21, X
     e02:	42 17       	cp	r20, r18
     e04:	53 07       	cpc	r21, r19
     e06:	14 f4       	brge	.+4      	; 0xe0c <__stack+0x50d>
			{
				nearestPos	= Point2D( currentPos.x + 1, currentPos.y + 1 );
     e08:	4f 01       	movw	r8, r30
     e0a:	04 c0       	rjmp	.+8      	; 0xe14 <__stack+0x515>
			{
				nearestPos	= Point2D( currentPos.x, currentPos.y + 1 );
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y + 1 ].distToStart < minDist )
     e0c:	83 2d       	mov	r24, r3
     e0e:	9a 2d       	mov	r25, r10
     e10:	8c 2c       	mov	r8, r12
     e12:	9d 2c       	mov	r9, r13
		void calculateDistToFinish()
		{
			Point2D currentPos( finishPos );
			short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
			
			while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     e14:	fc 01       	movw	r30, r24
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	b8 9c       	mul	r11, r8
     e24:	90 01       	movw	r18, r0
     e26:	b9 9c       	mul	r11, r9
     e28:	30 0d       	add	r19, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	e2 0f       	add	r30, r18
     e2e:	f3 1f       	adc	r31, r19
     e30:	ef 54       	subi	r30, 0x4F	; 79
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	20 81       	ld	r18, Z
     e36:	31 81       	ldd	r19, Z+1	; 0x01
     e38:	21 15       	cp	r18, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__stack+0x541>
     e3e:	c9 ce       	rjmp	.-622    	; 0xbd2 <__stack+0x2d3>
     e40:	28 88       	ldd	r2, Y+16	; 0x10
     e42:	39 88       	ldd	r3, Y+17	; 0x11
				currentPos = this->getNearestToStartAdjecent( currentPos );
			}
			
			Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );
			
			if ( currCell.distToFinish < dist - currCell.distToStart )
     e44:	fc 01       	movw	r30, r24
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	e8 0f       	add	r30, r24
     e50:	f9 1f       	adc	r31, r25
     e52:	4b e4       	ldi	r20, 0x4B	; 75
     e54:	48 9d       	mul	r20, r8
     e56:	90 01       	movw	r18, r0
     e58:	49 9d       	mul	r20, r9
     e5a:	30 0d       	add	r19, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	ef 54       	subi	r30, 0x4F	; 79
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	22 81       	ldd	r18, Z+2	; 0x02
     e68:	33 81       	ldd	r19, Z+3	; 0x03
     e6a:	4d 85       	ldd	r20, Y+13	; 0x0d
     e6c:	5e 85       	ldd	r21, Y+14	; 0x0e
     e6e:	24 17       	cp	r18, r20
     e70:	35 07       	cpc	r19, r21
     e72:	a4 f4       	brge	.+40     	; 0xe9c <__stack+0x59d>
			{
				currCell.distToFinish = dist - currCell.distToStart;
     e74:	9c 01       	movw	r18, r24
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	2b e4       	ldi	r18, 0x4B	; 75
     e84:	28 9d       	mul	r18, r8
     e86:	f0 01       	movw	r30, r0
     e88:	29 9d       	mul	r18, r9
     e8a:	f0 0d       	add	r31, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	8e 0f       	add	r24, r30
     e90:	9f 1f       	adc	r25, r31
     e92:	fc 01       	movw	r30, r24
     e94:	ef 54       	subi	r30, 0x4F	; 79
     e96:	fe 4f       	sbci	r31, 0xFE	; 254
     e98:	53 83       	std	Z+3, r21	; 0x03
     e9a:	42 83       	std	Z+2, r20	; 0x02
		void reverseDirection()
		{
			this->calculateDistToFinish();
			
			// swap dist to start with dist to finish and find start pos
			Point2D startPos( finishPos );
     e9c:	d1 01       	movw	r26, r2
     e9e:	15 96       	adiw	r26, 0x05	; 5
     ea0:	ac 90       	ld	r10, X
     ea2:	15 97       	sbiw	r26, 0x05	; 5
     ea4:	16 96       	adiw	r26, 0x06	; 6
     ea6:	bc 90       	ld	r11, X
     ea8:	16 97       	sbiw	r26, 0x06	; 6
     eaa:	17 96       	adiw	r26, 0x07	; 7
     eac:	cc 90       	ld	r12, X
     eae:	17 97       	sbiw	r26, 0x07	; 7
     eb0:	18 96       	adiw	r26, 0x08	; 8
     eb2:	dc 90       	ld	r13, X
     eb4:	01 eb       	ldi	r16, 0xB1	; 177
     eb6:	11 e0       	ldi	r17, 0x01	; 1
			
			for ( short i = 0; i < MAX_ROWS; i++ )
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
			{
				for ( short j = 0; j < MAX_ROWS; j++ )
				{	
					if ( /*matrix[ i ][ j ].isVisited*/true )
					{
						if ( matrix[ i ][ j ].distToStart == 0 )
     ec2:	e6 2e       	mov	r14, r22
     ec4:	f7 2e       	mov	r15, r23
     ec6:	df 01       	movw	r26, r30
     ec8:	20 81       	ld	r18, Z
     eca:	31 81       	ldd	r19, Z+1	; 0x01
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	21 f4       	brne	.+8      	; 0xeda <__stack+0x5db>
     ed2:	c8 2e       	mov	r12, r24
     ed4:	d9 2e       	mov	r13, r25
     ed6:	ae 2c       	mov	r10, r14
     ed8:	bf 2c       	mov	r11, r15
						{
							// start pos, save it.
							startPos = Point2D( i, j );
						}
						
						short tmp						= matrix[ i ][ j ].distToFinish;
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	4d 91       	ld	r20, X+
     ede:	5c 91       	ld	r21, X
     ee0:	13 97       	sbiw	r26, 0x03	; 3
						matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
     ee2:	13 96       	adiw	r26, 0x03	; 3
     ee4:	3c 93       	st	X, r19
     ee6:	2e 93       	st	-X, r18
     ee8:	12 97       	sbiw	r26, 0x02	; 2
						matrix[ i ][ j ].distToStart	= tmp;
     eea:	4d 93       	st	X+, r20
     eec:	5c 93       	st	X, r21
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	35 96       	adiw	r30, 0x05	; 5
			// swap dist to start with dist to finish and find start pos
			Point2D startPos( finishPos );
			
			for ( short i = 0; i < MAX_ROWS; i++ )
			{
				for ( short j = 0; j < MAX_ROWS; j++ )
     ef2:	8f 30       	cpi	r24, 0x0F	; 15
     ef4:	91 05       	cpc	r25, r1
     ef6:	39 f7       	brne	.-50     	; 0xec6 <__stack+0x5c7>
     ef8:	6f 5f       	subi	r22, 0xFF	; 255
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	05 5b       	subi	r16, 0xB5	; 181
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
			this->calculateDistToFinish();
			
			// swap dist to start with dist to finish and find start pos
			Point2D startPos( finishPos );
			
			for ( short i = 0; i < MAX_ROWS; i++ )
     f00:	6f 30       	cpi	r22, 0x0F	; 15
     f02:	71 05       	cpc	r23, r1
     f04:	d9 f6       	brne	.-74     	; 0xebc <__stack+0x5bd>
					}
				}
			}
			
			// Finally, make the start pos our next finish pos
			finishPos = startPos;
     f06:	f1 01       	movw	r30, r2
     f08:	a5 82       	std	Z+5, r10	; 0x05
     f0a:	b6 82       	std	Z+6, r11	; 0x06
     f0c:	c7 82       	std	Z+7, r12	; 0x07
     f0e:	d0 86       	std	Z+8, r13	; 0x08
										
				stepToGoal( finishPos );
				
				if ( isLastStep )
				{
					isLastStep = false;
     f10:	18 8a       	std	Y+16, r1	; 0x10
     f12:	46 c9       	rjmp	.-3444   	; 0x1a0 <_ZN5Robot14mainRobotLogicEv+0x42>
					
					this->reverseDirection();
				}
				else if ( position.x == finishPos.x && position.y == finishPos.y )
     f14:	d1 01       	movw	r26, r2
     f16:	2d 91       	ld	r18, X+
     f18:	3c 91       	ld	r19, X
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	15 96       	adiw	r26, 0x05	; 5
     f1e:	8d 91       	ld	r24, X+
     f20:	9c 91       	ld	r25, X
     f22:	16 97       	sbiw	r26, 0x06	; 6
     f24:	28 17       	cp	r18, r24
     f26:	39 07       	cpc	r19, r25
     f28:	09 f0       	breq	.+2      	; 0xf2c <__stack+0x62d>
     f2a:	3a c9       	rjmp	.-3468   	; 0x1a0 <_ZN5Robot14mainRobotLogicEv+0x42>
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	b8 8b       	std	Y+16, r27	; 0x10
     f30:	f1 01       	movw	r30, r2
     f32:	22 81       	ldd	r18, Z+2	; 0x02
     f34:	33 81       	ldd	r19, Z+3	; 0x03
     f36:	87 81       	ldd	r24, Z+7	; 0x07
     f38:	90 85       	ldd	r25, Z+8	; 0x08
     f3a:	28 17       	cp	r18, r24
     f3c:	39 07       	cpc	r19, r25
     f3e:	09 f4       	brne	.+2      	; 0xf42 <__stack+0x643>
     f40:	2f c9       	rjmp	.-3490   	; 0x1a0 <_ZN5Robot14mainRobotLogicEv+0x42>
     f42:	18 8a       	std	Y+16, r1	; 0x10
     f44:	2d c9       	rjmp	.-3494   	; 0x1a0 <_ZN5Robot14mainRobotLogicEv+0x42>
			return distance;
		}

		Point2D getNextPos(const Point2D& goalPos)
		{
			Point2D			nextPos( position.x + getSign(goalPos.x - position.x),
     f46:	ff ef       	ldi	r31, 0xFF	; 255
     f48:	ef 1a       	sub	r14, r31
     f4a:	ff 0a       	sbc	r15, r31
			return false;
		}
		
		int GetRobotAngle()
		{
			switch ( orientation )
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	91 05       	cpc	r25, r1
     f52:	08 f0       	brcs	.+2      	; 0xf56 <__stack+0x657>
     f54:	be c9       	rjmp	.-3204   	; 0x2d2 <_ZN5Robot14mainRobotLogicEv+0x174>
     f56:	fc 01       	movw	r30, r24
     f58:	ec 59       	subi	r30, 0x9C	; 156
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__tablejump2__>
				SetDeviceOrientation( angle );
			}
			while( orientation != startOrientation && ( !CheckIfDirectionIsTraversable() || backwardDirection == orientation ) );
			
			EOrientation finalOrientation = backwardDirection;
			if ( startOrientation != orientation )
     f60:	d1 01       	movw	r26, r2
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	4c 91       	ld	r20, X
				}
				SetDeviceOrientation( angle );
			}
			while( orientation != startOrientation && ( !CheckIfDirectionIsTraversable() || backwardDirection == orientation ) );
			
			EOrientation finalOrientation = backwardDirection;
     f66:	ef 85       	ldd	r30, Y+15	; 0x0f
     f68:	67 cb       	rjmp	.-2354   	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
				else if ( position.x == finishPos.x && position.y == finishPos.y )
				{
					isLastStep = true;
				}
			}
		}
     f6a:	61 96       	adiw	r28, 0x11	; 17
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	bf 90       	pop	r11
     f88:	af 90       	pop	r10
     f8a:	9f 90       	pop	r9
     f8c:	8f 90       	pop	r8
     f8e:	7f 90       	pop	r7
     f90:	6f 90       	pop	r6
     f92:	5f 90       	pop	r5
     f94:	4f 90       	pop	r4
     f96:	3f 90       	pop	r3
     f98:	2f 90       	pop	r2
     f9a:	08 95       	ret

00000f9c <main>:
};

// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	63 97       	sbiw	r28, 0x13	; 19
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
struct Point2D
{
	public:
	Point2D(short inX, short inY)
	: x( inX )
	, y ( inY )
     fb0:	1a 82       	std	Y+2, r1	; 0x02
     fb2:	19 82       	std	Y+1, r1	; 0x01
     fb4:	1c 82       	std	Y+4, r1	; 0x04
     fb6:	1b 82       	std	Y+3, r1	; 0x03
{
	public:
		Robot()
			: position( 0, 0 )
			, orientation( EOrientation::North )
			, finishPos( 0, 3 )
     fb8:	1d 82       	std	Y+5, r1	; 0x05
struct Point2D
{
	public:
	Point2D(short inX, short inY)
	: x( inX )
	, y ( inY )
     fba:	1f 82       	std	Y+7, r1	; 0x07
     fbc:	1e 82       	std	Y+6, r1	; 0x06
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	99 87       	std	Y+9, r25	; 0x09
     fc4:	88 87       	std	Y+8, r24	; 0x08
		
		// Waits for Button B to be pressed for user convenience and then
		// Initializes the line reading sensors
		void initialize()
		{	
			pololu_3pi_init( 2000 );
     fc6:	80 ed       	ldi	r24, 0xD0	; 208
     fc8:	97 e0       	ldi	r25, 0x07	; 7
     fca:	0e 94 76 11 	call	0x22ec	; 0x22ec <pololu_3pi_init>
			set_motors( 0, 0 );
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
			// Display battery voltage and wait for button press
			while ( !button_is_pressed( BUTTON_B ) )
			{
				if ( button_is_pressed( BUTTON_A ) )
				{
					finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     fda:	0f 2e       	mov	r0, r31
     fdc:	ff e0       	ldi	r31, 0x0F	; 15
     fde:	cf 2e       	mov	r12, r31
     fe0:	d1 2c       	mov	r13, r1
     fe2:	f0 2d       	mov	r31, r0
		}
		
		void doMenu()
		{
			// Display battery voltage and wait for button press
			while ( !button_is_pressed( BUTTON_B ) )
     fe4:	80 e1       	ldi	r24, 0x10	; 16
     fe6:	0e 94 ba 10 	call	0x2174	; 0x2174 <button_is_pressed>
     fea:	81 11       	cpse	r24, r1
     fec:	45 c0       	rjmp	.+138    	; 0x1078 <main+0xdc>
			{
				if ( button_is_pressed( BUTTON_A ) )
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	0e 94 ba 10 	call	0x2174	; 0x2174 <button_is_pressed>
     ff4:	88 23       	and	r24, r24
     ff6:	41 f0       	breq	.+16     	; 0x1008 <main+0x6c>
				{
					finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     ff8:	8e 81       	ldd	r24, Y+6	; 0x06
     ffa:	9f 81       	ldd	r25, Y+7	; 0x07
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 5f 14 	call	0x28be	; 0x28be <__divmodhi4>
    1004:	9f 83       	std	Y+7, r25	; 0x07
    1006:	8e 83       	std	Y+6, r24	; 0x06
				}
				
				if ( button_is_pressed( BUTTON_C ) )
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	0e 94 ba 10 	call	0x2174	; 0x2174 <button_is_pressed>
    100e:	88 23       	and	r24, r24
    1010:	41 f0       	breq	.+16     	; 0x1022 <main+0x86>
				{
					finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
    1012:	88 85       	ldd	r24, Y+8	; 0x08
    1014:	99 85       	ldd	r25, Y+9	; 0x09
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 5f 14 	call	0x28be	; 0x28be <__divmodhi4>
    101e:	99 87       	std	Y+9, r25	; 0x09
    1020:	88 87       	std	Y+8, r24	; 0x08
				}
				
				printPos(finishPos.x, finishPos.y);
    1022:	08 85       	ldd	r16, Y+8	; 0x08
    1024:	19 85       	ldd	r17, Y+9	; 0x09
    1026:	ee 80       	ldd	r14, Y+6	; 0x06
    1028:	ff 80       	ldd	r15, Y+7	; 0x07
				move_forward();
			}
		}
		
		void printPos(short x, short y){
			clear();
    102a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <clear>
			print("(");
    102e:	8d e3       	ldi	r24, 0x3D	; 61
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
			print_long( x );
    1036:	b7 01       	movw	r22, r14
    1038:	ff 0c       	add	r15, r15
    103a:	88 0b       	sbc	r24, r24
    103c:	99 0b       	sbc	r25, r25
    103e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			print(", ");
    1042:	8f e3       	ldi	r24, 0x3F	; 63
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
			print_long( y );
    104a:	b8 01       	movw	r22, r16
    104c:	11 0f       	add	r17, r17
    104e:	88 0b       	sbc	r24, r24
    1050:	99 0b       	sbc	r25, r25
    1052:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <print_long>
			print(")");
    1056:	82 e4       	ldi	r24, 0x42	; 66
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
					finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
				}
				
				printPos(finishPos.x, finishPos.y);
				
				lcd_goto_xy( 0, 1 );
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <lcd_goto_xy>
				print( " A B C " );
    1066:	8a e4       	ldi	r24, 0x4A	; 74
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <print>
				
				delay_ms( 100 );
    106e:	84 e6       	ldi	r24, 0x64	; 100
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    1076:	b6 cf       	rjmp	.-148    	; 0xfe4 <main+0x48>
			}
			
			// Always wait for the button to be released so that 3pi doesn't
			// start moving until your hand is away from it.
			wait_for_button_release( BUTTON_B );
    1078:	80 e1       	ldi	r24, 0x10	; 16
    107a:	0e 94 a6 10 	call	0x214c	; 0x214c <wait_for_button_release>
			delay_ms( 1000 );
    107e:	88 ee       	ldi	r24, 0xE8	; 232
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
{
	Robot robot;
	// set up the 3pi
	robot.initialize();
	
	robot.mainRobotLogic();
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN5Robot14mainRobotLogicEv>
	//robot.test_sensors();
	// Set Down of the robot.
	set_motors( 0, 0 );
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_motors>
    109a:	ff cf       	rjmp	.-2      	; 0x109a <main+0xfe>

0000109c <_GLOBAL__sub_I_matrix>:
	while ( true )
	{
		// Call this in the end in order not to let the robot execute random code!!!
	}
}
    109c:	41 eb       	ldi	r20, 0xB1	; 177
    109e:	51 e0       	ldi	r21, 0x01	; 1
{
	public:
	Cell()
	: distToStart( INT_MAX )
	, distToFinish( INT_MAX )
	, isObstacle( false )
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	9f e7       	ldi	r25, 0x7F	; 127
    10a4:	fa 01       	movw	r30, r20
    10a6:	45 5b       	subi	r20, 0xB5	; 181
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	9a 01       	movw	r18, r20
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    10b0:	93 83       	std	Z+3, r25	; 0x03
    10b2:	82 83       	std	Z+2, r24	; 0x02
    10b4:	14 82       	std	Z+4, r1	; 0x04
    10b6:	35 96       	adiw	r30, 0x05	; 5
	short distToStart;
	short distToFinish;
	bool isObstacle;
};

Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
    10b8:	e2 17       	cp	r30, r18
    10ba:	f3 07       	cpc	r31, r19
    10bc:	b9 f7       	brne	.-18     	; 0x10ac <_GLOBAL__sub_I_matrix+0x10>
    10be:	26 e0       	ldi	r18, 0x06	; 6
    10c0:	46 31       	cpi	r20, 0x16	; 22
    10c2:	52 07       	cpc	r21, r18
    10c4:	79 f7       	brne	.-34     	; 0x10a4 <_GLOBAL__sub_I_matrix+0x8>
	set_motors( 0, 0 );
	while ( true )
	{
		// Call this in the end in order not to let the robot execute random code!!!
	}
}
    10c6:	08 95       	ret

000010c8 <atan>:
    10c8:	df 93       	push	r29
    10ca:	dd 27       	eor	r29, r29
    10cc:	b9 2f       	mov	r27, r25
    10ce:	bf 77       	andi	r27, 0x7F	; 127
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	16 16       	cp	r1, r22
    10d6:	17 06       	cpc	r1, r23
    10d8:	48 07       	cpc	r20, r24
    10da:	5b 07       	cpc	r21, r27
    10dc:	18 f4       	brcc	.+6      	; 0x10e4 <atan+0x1c>
    10de:	d9 2f       	mov	r29, r25
    10e0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <inverse>
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	7f 93       	push	r23
    10ea:	6f 93       	push	r22
    10ec:	0e 94 89 0a 	call	0x1512	; 0x1512 <square>
    10f0:	e8 ed       	ldi	r30, 0xD8	; 216
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_powser>
    10f8:	0e 94 b6 09 	call	0x136c	; 0x136c <__fp_round>
    10fc:	2f 91       	pop	r18
    10fe:	3f 91       	pop	r19
    1100:	4f 91       	pop	r20
    1102:	5f 91       	pop	r21
    1104:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__mulsf3x>
    1108:	dd 23       	and	r29, r29
    110a:	51 f0       	breq	.+20     	; 0x1120 <atan+0x58>
    110c:	90 58       	subi	r25, 0x80	; 128
    110e:	a2 ea       	ldi	r26, 0xA2	; 162
    1110:	2a ed       	ldi	r18, 0xDA	; 218
    1112:	3f e0       	ldi	r19, 0x0F	; 15
    1114:	49 ec       	ldi	r20, 0xC9	; 201
    1116:	5f e3       	ldi	r21, 0x3F	; 63
    1118:	d0 78       	andi	r29, 0x80	; 128
    111a:	5d 27       	eor	r21, r29
    111c:	0e 94 9e 0a 	call	0x153c	; 0x153c <__addsf3x>
    1120:	df 91       	pop	r29
    1122:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_round>

00001126 <__divsf3>:
    1126:	0e 94 a7 08 	call	0x114e	; 0x114e <__divsf3x>
    112a:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_round>
    112e:	0e 94 af 09 	call	0x135e	; 0x135e <__fp_pscB>
    1132:	58 f0       	brcs	.+22     	; 0x114a <__divsf3+0x24>
    1134:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_pscA>
    1138:	40 f0       	brcs	.+16     	; 0x114a <__divsf3+0x24>
    113a:	29 f4       	brne	.+10     	; 0x1146 <__divsf3+0x20>
    113c:	5f 3f       	cpi	r21, 0xFF	; 255
    113e:	29 f0       	breq	.+10     	; 0x114a <__divsf3+0x24>
    1140:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    1144:	51 11       	cpse	r21, r1
    1146:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_szero>
    114a:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_nan>

0000114e <__divsf3x>:
    114e:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_split3>
    1152:	68 f3       	brcs	.-38     	; 0x112e <__divsf3+0x8>

00001154 <__divsf3_pse>:
    1154:	99 23       	and	r25, r25
    1156:	b1 f3       	breq	.-20     	; 0x1144 <__divsf3+0x1e>
    1158:	55 23       	and	r21, r21
    115a:	91 f3       	breq	.-28     	; 0x1140 <__divsf3+0x1a>
    115c:	95 1b       	sub	r25, r21
    115e:	55 0b       	sbc	r21, r21
    1160:	bb 27       	eor	r27, r27
    1162:	aa 27       	eor	r26, r26
    1164:	62 17       	cp	r22, r18
    1166:	73 07       	cpc	r23, r19
    1168:	84 07       	cpc	r24, r20
    116a:	38 f0       	brcs	.+14     	; 0x117a <__divsf3_pse+0x26>
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	44 1f       	adc	r20, r20
    1176:	aa 1f       	adc	r26, r26
    1178:	a9 f3       	breq	.-22     	; 0x1164 <__divsf3_pse+0x10>
    117a:	35 d0       	rcall	.+106    	; 0x11e6 <__divsf3_pse+0x92>
    117c:	0e 2e       	mov	r0, r30
    117e:	3a f0       	brmi	.+14     	; 0x118e <__divsf3_pse+0x3a>
    1180:	e0 e8       	ldi	r30, 0x80	; 128
    1182:	32 d0       	rcall	.+100    	; 0x11e8 <__divsf3_pse+0x94>
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	50 40       	sbci	r21, 0x00	; 0
    1188:	e6 95       	lsr	r30
    118a:	00 1c       	adc	r0, r0
    118c:	ca f7       	brpl	.-14     	; 0x1180 <__divsf3_pse+0x2c>
    118e:	2b d0       	rcall	.+86     	; 0x11e6 <__divsf3_pse+0x92>
    1190:	fe 2f       	mov	r31, r30
    1192:	29 d0       	rcall	.+82     	; 0x11e6 <__divsf3_pse+0x92>
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	bb 1f       	adc	r27, r27
    119c:	26 17       	cp	r18, r22
    119e:	37 07       	cpc	r19, r23
    11a0:	48 07       	cpc	r20, r24
    11a2:	ab 07       	cpc	r26, r27
    11a4:	b0 e8       	ldi	r27, 0x80	; 128
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__divsf3_pse+0x56>
    11a8:	bb 0b       	sbc	r27, r27
    11aa:	80 2d       	mov	r24, r0
    11ac:	bf 01       	movw	r22, r30
    11ae:	ff 27       	eor	r31, r31
    11b0:	93 58       	subi	r25, 0x83	; 131
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	3a f0       	brmi	.+14     	; 0x11c4 <__divsf3_pse+0x70>
    11b6:	9e 3f       	cpi	r25, 0xFE	; 254
    11b8:	51 05       	cpc	r21, r1
    11ba:	78 f0       	brcs	.+30     	; 0x11da <__divsf3_pse+0x86>
    11bc:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    11c0:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_szero>
    11c4:	5f 3f       	cpi	r21, 0xFF	; 255
    11c6:	e4 f3       	brlt	.-8      	; 0x11c0 <__divsf3_pse+0x6c>
    11c8:	98 3e       	cpi	r25, 0xE8	; 232
    11ca:	d4 f3       	brlt	.-12     	; 0x11c0 <__divsf3_pse+0x6c>
    11cc:	86 95       	lsr	r24
    11ce:	77 95       	ror	r23
    11d0:	67 95       	ror	r22
    11d2:	b7 95       	ror	r27
    11d4:	f7 95       	ror	r31
    11d6:	9f 5f       	subi	r25, 0xFF	; 255
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <__divsf3_pse+0x78>
    11da:	88 0f       	add	r24, r24
    11dc:	91 1d       	adc	r25, r1
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret
    11e6:	e1 e0       	ldi	r30, 0x01	; 1
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	bb 1f       	adc	r27, r27
    11f0:	62 17       	cp	r22, r18
    11f2:	73 07       	cpc	r23, r19
    11f4:	84 07       	cpc	r24, r20
    11f6:	ba 07       	cpc	r27, r26
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <__divsf3_pse+0xae>
    11fa:	62 1b       	sub	r22, r18
    11fc:	73 0b       	sbc	r23, r19
    11fe:	84 0b       	sbc	r24, r20
    1200:	ba 0b       	sbc	r27, r26
    1202:	ee 1f       	adc	r30, r30
    1204:	88 f7       	brcc	.-30     	; 0x11e8 <__divsf3_pse+0x94>
    1206:	e0 95       	com	r30
    1208:	08 95       	ret

0000120a <__fixsfsi>:
    120a:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
    120e:	68 94       	set
    1210:	b1 11       	cpse	r27, r1
    1212:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_szero>
    1216:	08 95       	ret

00001218 <__fixunssfsi>:
    1218:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_splitA>
    121c:	88 f0       	brcs	.+34     	; 0x1240 <__fixunssfsi+0x28>
    121e:	9f 57       	subi	r25, 0x7F	; 127
    1220:	98 f0       	brcs	.+38     	; 0x1248 <__fixunssfsi+0x30>
    1222:	b9 2f       	mov	r27, r25
    1224:	99 27       	eor	r25, r25
    1226:	b7 51       	subi	r27, 0x17	; 23
    1228:	b0 f0       	brcs	.+44     	; 0x1256 <__fixunssfsi+0x3e>
    122a:	e1 f0       	breq	.+56     	; 0x1264 <__fixunssfsi+0x4c>
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	1a f0       	brmi	.+6      	; 0x123c <__fixunssfsi+0x24>
    1236:	ba 95       	dec	r27
    1238:	c9 f7       	brne	.-14     	; 0x122c <__fixunssfsi+0x14>
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <__fixunssfsi+0x4c>
    123c:	b1 30       	cpi	r27, 0x01	; 1
    123e:	91 f0       	breq	.+36     	; 0x1264 <__fixunssfsi+0x4c>
    1240:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_zero>
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	08 95       	ret
    1248:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_zero>
    124c:	67 2f       	mov	r22, r23
    124e:	78 2f       	mov	r23, r24
    1250:	88 27       	eor	r24, r24
    1252:	b8 5f       	subi	r27, 0xF8	; 248
    1254:	39 f0       	breq	.+14     	; 0x1264 <__fixunssfsi+0x4c>
    1256:	b9 3f       	cpi	r27, 0xF9	; 249
    1258:	cc f3       	brlt	.-14     	; 0x124c <__fixunssfsi+0x34>
    125a:	86 95       	lsr	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b3 95       	inc	r27
    1262:	d9 f7       	brne	.-10     	; 0x125a <__fixunssfsi+0x42>
    1264:	3e f4       	brtc	.+14     	; 0x1274 <__fixunssfsi+0x5c>
    1266:	90 95       	com	r25
    1268:	80 95       	com	r24
    126a:	70 95       	com	r23
    126c:	61 95       	neg	r22
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__floatunsisf>:
    1276:	e8 94       	clt
    1278:	09 c0       	rjmp	.+18     	; 0x128c <__floatsisf+0x12>

0000127a <__floatsisf>:
    127a:	97 fb       	bst	r25, 7
    127c:	3e f4       	brtc	.+14     	; 0x128c <__floatsisf+0x12>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	99 23       	and	r25, r25
    128e:	a9 f0       	breq	.+42     	; 0x12ba <__floatsisf+0x40>
    1290:	f9 2f       	mov	r31, r25
    1292:	96 e9       	ldi	r25, 0x96	; 150
    1294:	bb 27       	eor	r27, r27
    1296:	93 95       	inc	r25
    1298:	f6 95       	lsr	r31
    129a:	87 95       	ror	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b7 95       	ror	r27
    12a2:	f1 11       	cpse	r31, r1
    12a4:	f8 cf       	rjmp	.-16     	; 0x1296 <__floatsisf+0x1c>
    12a6:	fa f4       	brpl	.+62     	; 0x12e6 <__floatsisf+0x6c>
    12a8:	bb 0f       	add	r27, r27
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <__floatsisf+0x36>
    12ac:	60 ff       	sbrs	r22, 0
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <__floatsisf+0x6c>
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	16 c0       	rjmp	.+44     	; 0x12e6 <__floatsisf+0x6c>
    12ba:	88 23       	and	r24, r24
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <__floatsisf+0x48>
    12be:	96 e9       	ldi	r25, 0x96	; 150
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <__floatsisf+0x6a>
    12c2:	77 23       	and	r23, r23
    12c4:	21 f0       	breq	.+8      	; 0x12ce <__floatsisf+0x54>
    12c6:	9e e8       	ldi	r25, 0x8E	; 142
    12c8:	87 2f       	mov	r24, r23
    12ca:	76 2f       	mov	r23, r22
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <__floatsisf+0x5e>
    12ce:	66 23       	and	r22, r22
    12d0:	71 f0       	breq	.+28     	; 0x12ee <__floatsisf+0x74>
    12d2:	96 e8       	ldi	r25, 0x86	; 134
    12d4:	86 2f       	mov	r24, r22
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	2a f0       	brmi	.+10     	; 0x12e6 <__floatsisf+0x6c>
    12dc:	9a 95       	dec	r25
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	da f7       	brpl	.-10     	; 0x12dc <__floatsisf+0x62>
    12e6:	88 0f       	add	r24, r24
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <__fp_inf>:
    12f0:	97 f9       	bld	r25, 7
    12f2:	9f 67       	ori	r25, 0x7F	; 127
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	08 95       	ret

000012fc <__fp_nan>:
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
    12fe:	80 ec       	ldi	r24, 0xC0	; 192
    1300:	08 95       	ret

00001302 <__fp_powser>:
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	1f 93       	push	r17
    1308:	0f 93       	push	r16
    130a:	ff 92       	push	r15
    130c:	ef 92       	push	r14
    130e:	df 92       	push	r13
    1310:	7b 01       	movw	r14, r22
    1312:	8c 01       	movw	r16, r24
    1314:	68 94       	set
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <__fp_powser+0x22>
    1318:	da 2e       	mov	r13, r26
    131a:	ef 01       	movw	r28, r30
    131c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__mulsf3x>
    1320:	fe 01       	movw	r30, r28
    1322:	e8 94       	clt
    1324:	a5 91       	lpm	r26, Z+
    1326:	25 91       	lpm	r18, Z+
    1328:	35 91       	lpm	r19, Z+
    132a:	45 91       	lpm	r20, Z+
    132c:	55 91       	lpm	r21, Z+
    132e:	a6 f3       	brts	.-24     	; 0x1318 <__fp_powser+0x16>
    1330:	ef 01       	movw	r28, r30
    1332:	0e 94 9e 0a 	call	0x153c	; 0x153c <__addsf3x>
    1336:	fe 01       	movw	r30, r28
    1338:	97 01       	movw	r18, r14
    133a:	a8 01       	movw	r20, r16
    133c:	da 94       	dec	r13
    133e:	69 f7       	brne	.-38     	; 0x131a <__fp_powser+0x18>
    1340:	df 90       	pop	r13
    1342:	ef 90       	pop	r14
    1344:	ff 90       	pop	r15
    1346:	0f 91       	pop	r16
    1348:	1f 91       	pop	r17
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <__fp_pscA>:
    1350:	00 24       	eor	r0, r0
    1352:	0a 94       	dec	r0
    1354:	16 16       	cp	r1, r22
    1356:	17 06       	cpc	r1, r23
    1358:	18 06       	cpc	r1, r24
    135a:	09 06       	cpc	r0, r25
    135c:	08 95       	ret

0000135e <__fp_pscB>:
    135e:	00 24       	eor	r0, r0
    1360:	0a 94       	dec	r0
    1362:	12 16       	cp	r1, r18
    1364:	13 06       	cpc	r1, r19
    1366:	14 06       	cpc	r1, r20
    1368:	05 06       	cpc	r0, r21
    136a:	08 95       	ret

0000136c <__fp_round>:
    136c:	09 2e       	mov	r0, r25
    136e:	03 94       	inc	r0
    1370:	00 0c       	add	r0, r0
    1372:	11 f4       	brne	.+4      	; 0x1378 <__fp_round+0xc>
    1374:	88 23       	and	r24, r24
    1376:	52 f0       	brmi	.+20     	; 0x138c <__fp_round+0x20>
    1378:	bb 0f       	add	r27, r27
    137a:	40 f4       	brcc	.+16     	; 0x138c <__fp_round+0x20>
    137c:	bf 2b       	or	r27, r31
    137e:	11 f4       	brne	.+4      	; 0x1384 <__fp_round+0x18>
    1380:	60 ff       	sbrs	r22, 0
    1382:	04 c0       	rjmp	.+8      	; 0x138c <__fp_round+0x20>
    1384:	6f 5f       	subi	r22, 0xFF	; 255
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	8f 4f       	sbci	r24, 0xFF	; 255
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	08 95       	ret

0000138e <__fp_split3>:
    138e:	57 fd       	sbrc	r21, 7
    1390:	90 58       	subi	r25, 0x80	; 128
    1392:	44 0f       	add	r20, r20
    1394:	55 1f       	adc	r21, r21
    1396:	59 f0       	breq	.+22     	; 0x13ae <__fp_splitA+0x10>
    1398:	5f 3f       	cpi	r21, 0xFF	; 255
    139a:	71 f0       	breq	.+28     	; 0x13b8 <__fp_splitA+0x1a>
    139c:	47 95       	ror	r20

0000139e <__fp_splitA>:
    139e:	88 0f       	add	r24, r24
    13a0:	97 fb       	bst	r25, 7
    13a2:	99 1f       	adc	r25, r25
    13a4:	61 f0       	breq	.+24     	; 0x13be <__fp_splitA+0x20>
    13a6:	9f 3f       	cpi	r25, 0xFF	; 255
    13a8:	79 f0       	breq	.+30     	; 0x13c8 <__fp_splitA+0x2a>
    13aa:	87 95       	ror	r24
    13ac:	08 95       	ret
    13ae:	12 16       	cp	r1, r18
    13b0:	13 06       	cpc	r1, r19
    13b2:	14 06       	cpc	r1, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	f2 cf       	rjmp	.-28     	; 0x139c <__fp_split3+0xe>
    13b8:	46 95       	lsr	r20
    13ba:	f1 df       	rcall	.-30     	; 0x139e <__fp_splitA>
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <__fp_splitA+0x30>
    13be:	16 16       	cp	r1, r22
    13c0:	17 06       	cpc	r1, r23
    13c2:	18 06       	cpc	r1, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	f1 cf       	rjmp	.-30     	; 0x13aa <__fp_splitA+0xc>
    13c8:	86 95       	lsr	r24
    13ca:	71 05       	cpc	r23, r1
    13cc:	61 05       	cpc	r22, r1
    13ce:	08 94       	sec
    13d0:	08 95       	ret

000013d2 <__fp_zero>:
    13d2:	e8 94       	clt

000013d4 <__fp_szero>:
    13d4:	bb 27       	eor	r27, r27
    13d6:	66 27       	eor	r22, r22
    13d8:	77 27       	eor	r23, r23
    13da:	cb 01       	movw	r24, r22
    13dc:	97 f9       	bld	r25, 7
    13de:	08 95       	ret

000013e0 <inverse>:
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	80 e8       	ldi	r24, 0x80	; 128
    13ea:	9f e3       	ldi	r25, 0x3F	; 63
    13ec:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__divsf3>

000013f0 <__mulsf3>:
    13f0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__mulsf3x>
    13f4:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_round>
    13f8:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_pscA>
    13fc:	38 f0       	brcs	.+14     	; 0x140c <__mulsf3+0x1c>
    13fe:	0e 94 af 09 	call	0x135e	; 0x135e <__fp_pscB>
    1402:	20 f0       	brcs	.+8      	; 0x140c <__mulsf3+0x1c>
    1404:	95 23       	and	r25, r21
    1406:	11 f0       	breq	.+4      	; 0x140c <__mulsf3+0x1c>
    1408:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    140c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_nan>
    1410:	11 24       	eor	r1, r1
    1412:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_szero>

00001416 <__mulsf3x>:
    1416:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_split3>
    141a:	70 f3       	brcs	.-36     	; 0x13f8 <__mulsf3+0x8>

0000141c <__mulsf3_pse>:
    141c:	95 9f       	mul	r25, r21
    141e:	c1 f3       	breq	.-16     	; 0x1410 <__mulsf3+0x20>
    1420:	95 0f       	add	r25, r21
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	55 1f       	adc	r21, r21
    1426:	62 9f       	mul	r22, r18
    1428:	f0 01       	movw	r30, r0
    142a:	72 9f       	mul	r23, r18
    142c:	bb 27       	eor	r27, r27
    142e:	f0 0d       	add	r31, r0
    1430:	b1 1d       	adc	r27, r1
    1432:	63 9f       	mul	r22, r19
    1434:	aa 27       	eor	r26, r26
    1436:	f0 0d       	add	r31, r0
    1438:	b1 1d       	adc	r27, r1
    143a:	aa 1f       	adc	r26, r26
    143c:	64 9f       	mul	r22, r20
    143e:	66 27       	eor	r22, r22
    1440:	b0 0d       	add	r27, r0
    1442:	a1 1d       	adc	r26, r1
    1444:	66 1f       	adc	r22, r22
    1446:	82 9f       	mul	r24, r18
    1448:	22 27       	eor	r18, r18
    144a:	b0 0d       	add	r27, r0
    144c:	a1 1d       	adc	r26, r1
    144e:	62 1f       	adc	r22, r18
    1450:	73 9f       	mul	r23, r19
    1452:	b0 0d       	add	r27, r0
    1454:	a1 1d       	adc	r26, r1
    1456:	62 1f       	adc	r22, r18
    1458:	83 9f       	mul	r24, r19
    145a:	a0 0d       	add	r26, r0
    145c:	61 1d       	adc	r22, r1
    145e:	22 1f       	adc	r18, r18
    1460:	74 9f       	mul	r23, r20
    1462:	33 27       	eor	r19, r19
    1464:	a0 0d       	add	r26, r0
    1466:	61 1d       	adc	r22, r1
    1468:	23 1f       	adc	r18, r19
    146a:	84 9f       	mul	r24, r20
    146c:	60 0d       	add	r22, r0
    146e:	21 1d       	adc	r18, r1
    1470:	82 2f       	mov	r24, r18
    1472:	76 2f       	mov	r23, r22
    1474:	6a 2f       	mov	r22, r26
    1476:	11 24       	eor	r1, r1
    1478:	9f 57       	subi	r25, 0x7F	; 127
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	9a f0       	brmi	.+38     	; 0x14a4 <__mulsf3_pse+0x88>
    147e:	f1 f0       	breq	.+60     	; 0x14bc <__mulsf3_pse+0xa0>
    1480:	88 23       	and	r24, r24
    1482:	4a f0       	brmi	.+18     	; 0x1496 <__mulsf3_pse+0x7a>
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	bb 1f       	adc	r27, r27
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	91 50       	subi	r25, 0x01	; 1
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	a9 f7       	brne	.-22     	; 0x1480 <__mulsf3_pse+0x64>
    1496:	9e 3f       	cpi	r25, 0xFE	; 254
    1498:	51 05       	cpc	r21, r1
    149a:	80 f0       	brcs	.+32     	; 0x14bc <__mulsf3_pse+0xa0>
    149c:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    14a0:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_szero>
    14a4:	5f 3f       	cpi	r21, 0xFF	; 255
    14a6:	e4 f3       	brlt	.-8      	; 0x14a0 <__mulsf3_pse+0x84>
    14a8:	98 3e       	cpi	r25, 0xE8	; 232
    14aa:	d4 f3       	brlt	.-12     	; 0x14a0 <__mulsf3_pse+0x84>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b7 95       	ror	r27
    14b4:	f7 95       	ror	r31
    14b6:	e7 95       	ror	r30
    14b8:	9f 5f       	subi	r25, 0xFF	; 255
    14ba:	c1 f7       	brne	.-16     	; 0x14ac <__mulsf3_pse+0x90>
    14bc:	fe 2b       	or	r31, r30
    14be:	88 0f       	add	r24, r24
    14c0:	91 1d       	adc	r25, r1
    14c2:	96 95       	lsr	r25
    14c4:	87 95       	ror	r24
    14c6:	97 f9       	bld	r25, 7
    14c8:	08 95       	ret

000014ca <round>:
    14ca:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_splitA>
    14ce:	e8 f0       	brcs	.+58     	; 0x150a <round+0x40>
    14d0:	9e 37       	cpi	r25, 0x7E	; 126
    14d2:	e8 f0       	brcs	.+58     	; 0x150e <round+0x44>
    14d4:	96 39       	cpi	r25, 0x96	; 150
    14d6:	b8 f4       	brcc	.+46     	; 0x1506 <round+0x3c>
    14d8:	9e 38       	cpi	r25, 0x8E	; 142
    14da:	48 f4       	brcc	.+18     	; 0x14ee <round+0x24>
    14dc:	67 2f       	mov	r22, r23
    14de:	78 2f       	mov	r23, r24
    14e0:	88 27       	eor	r24, r24
    14e2:	98 5f       	subi	r25, 0xF8	; 248
    14e4:	f9 cf       	rjmp	.-14     	; 0x14d8 <round+0xe>
    14e6:	86 95       	lsr	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	93 95       	inc	r25
    14ee:	95 39       	cpi	r25, 0x95	; 149
    14f0:	d0 f3       	brcs	.-12     	; 0x14e6 <round+0x1c>
    14f2:	b6 2f       	mov	r27, r22
    14f4:	b1 70       	andi	r27, 0x01	; 1
    14f6:	6b 0f       	add	r22, r27
    14f8:	71 1d       	adc	r23, r1
    14fa:	81 1d       	adc	r24, r1
    14fc:	20 f4       	brcc	.+8      	; 0x1506 <round+0x3c>
    14fe:	87 95       	ror	r24
    1500:	77 95       	ror	r23
    1502:	67 95       	ror	r22
    1504:	93 95       	inc	r25
    1506:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_mintl>
    150a:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__fp_mpack>
    150e:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_szero>

00001512 <square>:
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__mulsf3>
    151a:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_pscA>
    151e:	38 f0       	brcs	.+14     	; 0x152e <square+0x1c>
    1520:	0e 94 af 09 	call	0x135e	; 0x135e <__fp_pscB>
    1524:	20 f0       	brcs	.+8      	; 0x152e <square+0x1c>
    1526:	39 f4       	brne	.+14     	; 0x1536 <square+0x24>
    1528:	9f 3f       	cpi	r25, 0xFF	; 255
    152a:	19 f4       	brne	.+6      	; 0x1532 <square+0x20>
    152c:	26 f4       	brtc	.+8      	; 0x1536 <square+0x24>
    152e:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_nan>
    1532:	0e f4       	brtc	.+2      	; 0x1536 <square+0x24>
    1534:	e0 95       	com	r30
    1536:	e7 fb       	bst	r30, 7
    1538:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>

0000153c <__addsf3x>:
    153c:	e9 2f       	mov	r30, r25
    153e:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_split3>
    1542:	58 f3       	brcs	.-42     	; 0x151a <square+0x8>
    1544:	ba 17       	cp	r27, r26
    1546:	62 07       	cpc	r22, r18
    1548:	73 07       	cpc	r23, r19
    154a:	84 07       	cpc	r24, r20
    154c:	95 07       	cpc	r25, r21
    154e:	20 f0       	brcs	.+8      	; 0x1558 <__addsf3x+0x1c>
    1550:	79 f4       	brne	.+30     	; 0x1570 <__addsf3x+0x34>
    1552:	a6 f5       	brtc	.+104    	; 0x15bc <__addsf3x+0x80>
    1554:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_zero>
    1558:	0e f4       	brtc	.+2      	; 0x155c <__addsf3x+0x20>
    155a:	e0 95       	com	r30
    155c:	0b 2e       	mov	r0, r27
    155e:	ba 2f       	mov	r27, r26
    1560:	a0 2d       	mov	r26, r0
    1562:	0b 01       	movw	r0, r22
    1564:	b9 01       	movw	r22, r18
    1566:	90 01       	movw	r18, r0
    1568:	0c 01       	movw	r0, r24
    156a:	ca 01       	movw	r24, r20
    156c:	a0 01       	movw	r20, r0
    156e:	11 24       	eor	r1, r1
    1570:	ff 27       	eor	r31, r31
    1572:	59 1b       	sub	r21, r25
    1574:	99 f0       	breq	.+38     	; 0x159c <__addsf3x+0x60>
    1576:	59 3f       	cpi	r21, 0xF9	; 249
    1578:	50 f4       	brcc	.+20     	; 0x158e <__addsf3x+0x52>
    157a:	50 3e       	cpi	r21, 0xE0	; 224
    157c:	68 f1       	brcs	.+90     	; 0x15d8 <__addsf3x+0x9c>
    157e:	1a 16       	cp	r1, r26
    1580:	f0 40       	sbci	r31, 0x00	; 0
    1582:	a2 2f       	mov	r26, r18
    1584:	23 2f       	mov	r18, r19
    1586:	34 2f       	mov	r19, r20
    1588:	44 27       	eor	r20, r20
    158a:	58 5f       	subi	r21, 0xF8	; 248
    158c:	f3 cf       	rjmp	.-26     	; 0x1574 <__addsf3x+0x38>
    158e:	46 95       	lsr	r20
    1590:	37 95       	ror	r19
    1592:	27 95       	ror	r18
    1594:	a7 95       	ror	r26
    1596:	f0 40       	sbci	r31, 0x00	; 0
    1598:	53 95       	inc	r21
    159a:	c9 f7       	brne	.-14     	; 0x158e <__addsf3x+0x52>
    159c:	7e f4       	brtc	.+30     	; 0x15bc <__addsf3x+0x80>
    159e:	1f 16       	cp	r1, r31
    15a0:	ba 0b       	sbc	r27, r26
    15a2:	62 0b       	sbc	r22, r18
    15a4:	73 0b       	sbc	r23, r19
    15a6:	84 0b       	sbc	r24, r20
    15a8:	ba f0       	brmi	.+46     	; 0x15d8 <__addsf3x+0x9c>
    15aa:	91 50       	subi	r25, 0x01	; 1
    15ac:	a1 f0       	breq	.+40     	; 0x15d6 <__addsf3x+0x9a>
    15ae:	ff 0f       	add	r31, r31
    15b0:	bb 1f       	adc	r27, r27
    15b2:	66 1f       	adc	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	c2 f7       	brpl	.-16     	; 0x15aa <__addsf3x+0x6e>
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <__addsf3x+0x9c>
    15bc:	ba 0f       	add	r27, r26
    15be:	62 1f       	adc	r22, r18
    15c0:	73 1f       	adc	r23, r19
    15c2:	84 1f       	adc	r24, r20
    15c4:	48 f4       	brcc	.+18     	; 0x15d8 <__addsf3x+0x9c>
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	b7 95       	ror	r27
    15ce:	f7 95       	ror	r31
    15d0:	9e 3f       	cpi	r25, 0xFE	; 254
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__addsf3x+0x9a>
    15d4:	b0 cf       	rjmp	.-160    	; 0x1536 <square+0x24>
    15d6:	93 95       	inc	r25
    15d8:	88 0f       	add	r24, r24
    15da:	08 f0       	brcs	.+2      	; 0x15de <__addsf3x+0xa2>
    15dc:	99 27       	eor	r25, r25
    15de:	ee 0f       	add	r30, r30
    15e0:	97 95       	ror	r25
    15e2:	87 95       	ror	r24
    15e4:	08 95       	ret

000015e6 <__fp_mintl>:
    15e6:	88 23       	and	r24, r24
    15e8:	71 f4       	brne	.+28     	; 0x1606 <__fp_mintl+0x20>
    15ea:	77 23       	and	r23, r23
    15ec:	21 f0       	breq	.+8      	; 0x15f6 <__fp_mintl+0x10>
    15ee:	98 50       	subi	r25, 0x08	; 8
    15f0:	87 2b       	or	r24, r23
    15f2:	76 2f       	mov	r23, r22
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <__fp_mintl+0x1e>
    15f6:	66 23       	and	r22, r22
    15f8:	11 f4       	brne	.+4      	; 0x15fe <__fp_mintl+0x18>
    15fa:	99 27       	eor	r25, r25
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <__fp_mintl+0x32>
    15fe:	90 51       	subi	r25, 0x10	; 16
    1600:	86 2b       	or	r24, r22
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	2a f0       	brmi	.+10     	; 0x1612 <__fp_mintl+0x2c>
    1608:	9a 95       	dec	r25
    160a:	66 0f       	add	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	da f7       	brpl	.-10     	; 0x1608 <__fp_mintl+0x22>
    1612:	88 0f       	add	r24, r24
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	97 f9       	bld	r25, 7
    161a:	08 95       	ret

0000161c <__fp_mpack>:
    161c:	9f 3f       	cpi	r25, 0xFF	; 255
    161e:	31 f0       	breq	.+12     	; 0x162c <__fp_mpack_finite+0xc>

00001620 <__fp_mpack_finite>:
    1620:	91 50       	subi	r25, 0x01	; 1
    1622:	20 f4       	brcc	.+8      	; 0x162c <__fp_mpack_finite+0xc>
    1624:	87 95       	ror	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b7 95       	ror	r27
    162c:	88 0f       	add	r24, r24
    162e:	91 1d       	adc	r25, r1
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	97 f9       	bld	r25, 7
    1636:	08 95       	ret

00001638 <_ZL16currentCharacterv>:
    1638:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_ZL17use_program_space>
    163c:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__data_end>
    1640:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__data_end+0x1>
    1644:	99 23       	and	r25, r25
    1646:	11 f0       	breq	.+4      	; 0x164c <_ZL16currentCharacterv+0x14>
    1648:	84 91       	lpm	r24, Z
    164a:	01 c0       	rjmp	.+2      	; 0x164e <_ZL16currentCharacterv+0x16>
    164c:	80 81       	ld	r24, Z
    164e:	2f eb       	ldi	r18, 0xBF	; 191
    1650:	28 0f       	add	r18, r24
    1652:	2a 31       	cpi	r18, 0x1A	; 26
    1654:	10 f4       	brcc	.+4      	; 0x165a <_ZL16currentCharacterv+0x22>
    1656:	80 5e       	subi	r24, 0xE0	; 224
    1658:	08 95       	ret
    165a:	80 32       	cpi	r24, 0x20	; 32
    165c:	49 f4       	brne	.+18     	; 0x1670 <_ZL16currentCharacterv+0x38>
    165e:	9f 01       	movw	r18, r30
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__data_end+0x1>
    1668:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__data_end>
    166c:	ef 2b       	or	r30, r31
    166e:	31 f7       	brne	.-52     	; 0x163c <_ZL16currentCharacterv+0x4>
    1670:	08 95       	ret

00001672 <_ZL9getNumberv>:
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    167c:	c0 e0       	ldi	r28, 0x00	; 0
    167e:	d0 e0       	ldi	r29, 0x00	; 0
    1680:	1a e0       	ldi	r17, 0x0A	; 10
    1682:	90 ed       	ldi	r25, 0xD0	; 208
    1684:	98 0f       	add	r25, r24
    1686:	9a 30       	cpi	r25, 0x0A	; 10
    1688:	b8 f4       	brcc	.+46     	; 0x16b8 <_ZL9getNumberv+0x46>
    168a:	9e 01       	movw	r18, r28
    168c:	12 9f       	mul	r17, r18
    168e:	e0 01       	movw	r28, r0
    1690:	13 9f       	mul	r17, r19
    1692:	d0 0d       	add	r29, r0
    1694:	11 24       	eor	r1, r1
    1696:	c8 0f       	add	r28, r24
    1698:	d1 1d       	adc	r29, r1
    169a:	87 fd       	sbrc	r24, 7
    169c:	da 95       	dec	r29
    169e:	e0 97       	sbiw	r28, 0x30	; 48
    16a0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
    16a4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
    16ae:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
    16b2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    16b6:	e5 cf       	rjmp	.-54     	; 0x1682 <_ZL9getNumberv+0x10>
    16b8:	ce 01       	movw	r24, r28
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	08 95       	ret

000016c2 <_ZN15OrangutanBuzzer5init2Ev>:
    16c2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    16c6:	83 e2       	ldi	r24, 0x23	; 35
    16c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    16cc:	81 e1       	ldi	r24, 0x11	; 17
    16ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    16d2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    16d6:	80 e1       	ldi	r24, 0x10	; 16
    16d8:	97 e2       	ldi	r25, 0x27	; 39
    16da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    16e2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    16e6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    16ea:	22 9a       	sbi	0x04, 2	; 4
    16ec:	78 94       	sei
    16ee:	08 95       	ret

000016f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	5c 01       	movw	r10, r24
    1708:	8b 01       	movw	r16, r22
    170a:	d4 2e       	mov	r13, r20
    170c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <buzzerInitialized>
    1710:	81 11       	cpse	r24, r1
    1712:	05 c0       	rjmp	.+10     	; 0x171e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <buzzerInitialized>
    171a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN15OrangutanBuzzer5init2Ev>
    171e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
    1722:	b7 fe       	sbrs	r11, 7
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1726:	e8 94       	clt
    1728:	b7 f8       	bld	r11, 7
    172a:	2a e0       	ldi	r18, 0x0A	; 10
    172c:	f2 2e       	mov	r15, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1730:	ff 24       	eor	r15, r15
    1732:	f3 94       	inc	r15
    1734:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1738:	2e 2d       	mov	r18, r14
    173a:	28 7f       	andi	r18, 0xF8	; 248
    173c:	e2 2e       	mov	r14, r18
    173e:	48 ec       	ldi	r20, 0xC8	; 200
    1740:	f4 9e       	mul	r15, r20
    1742:	c0 01       	movw	r24, r0
    1744:	11 24       	eor	r1, r1
    1746:	8a 15       	cp	r24, r10
    1748:	9b 05       	cpc	r25, r11
    174a:	e0 f4       	brcc	.+56     	; 0x1784 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    174c:	e5 01       	movw	r28, r10
    174e:	51 e1       	ldi	r21, 0x11	; 17
    1750:	a5 16       	cp	r10, r21
    1752:	57 e2       	ldi	r21, 0x27	; 39
    1754:	b5 06       	cpc	r11, r21
    1756:	10 f0       	brcs	.+4      	; 0x175c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1758:	c0 e1       	ldi	r28, 0x10	; 16
    175a:	d7 e2       	ldi	r29, 0x27	; 39
    175c:	be 01       	movw	r22, r28
    175e:	76 95       	lsr	r23
    1760:	67 95       	ror	r22
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	60 58       	subi	r22, 0x80	; 128
    1768:	79 46       	sbci	r23, 0x69	; 105
    176a:	87 46       	sbci	r24, 0x67	; 103
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	4e 01       	movw	r8, r28
    1770:	a1 2c       	mov	r10, r1
    1772:	b1 2c       	mov	r11, r1
    1774:	a5 01       	movw	r20, r10
    1776:	94 01       	movw	r18, r8
    1778:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__udivmodsi4>
    177c:	59 01       	movw	r10, r18
    177e:	8e 2d       	mov	r24, r14
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	24 c0       	rjmp	.+72     	; 0x17cc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1784:	c8 e2       	ldi	r28, 0x28	; 40
    1786:	fc 9e       	mul	r15, r28
    1788:	c0 2d       	mov	r28, r0
    178a:	11 24       	eor	r1, r1
    178c:	d0 e0       	ldi	r29, 0x00	; 0
    178e:	ca 15       	cp	r28, r10
    1790:	db 05       	cpc	r29, r11
    1792:	08 f4       	brcc	.+2      	; 0x1796 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1794:	e5 01       	movw	r28, r10
    1796:	be 01       	movw	r22, r28
    1798:	76 95       	lsr	r23
    179a:	67 95       	ror	r22
    179c:	9e 01       	movw	r18, r28
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	8a e0       	ldi	r24, 0x0A	; 10
    17a4:	f8 12       	cpse	r15, r24
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	60 5e       	subi	r22, 0xE0	; 224
    17ae:	73 44       	sbci	r23, 0x43	; 67
    17b0:	81 44       	sbci	r24, 0x41	; 65
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	60 53       	subi	r22, 0x30	; 48
    17bc:	7d 4e       	sbci	r23, 0xED	; 237
    17be:	8c 4e       	sbci	r24, 0xEC	; 236
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__udivmodsi4>
    17c6:	59 01       	movw	r10, r18
    17c8:	8e 2d       	mov	r24, r14
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	88 2e       	mov	r8, r24
    17ce:	2a e0       	ldi	r18, 0x0A	; 10
    17d0:	f2 12       	cpse	r15, r18
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    17d4:	ce 01       	movw	r24, r28
    17d6:	05 96       	adiw	r24, 0x05	; 5
    17d8:	6a e0       	ldi	r22, 0x0A	; 10
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    17e0:	eb 01       	movw	r28, r22
    17e2:	c8 3e       	cpi	r28, 0xE8	; 232
    17e4:	43 e0       	ldi	r20, 0x03	; 3
    17e6:	d4 07       	cpc	r29, r20
    17e8:	59 f0       	breq	.+22     	; 0x1800 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    17ea:	98 01       	movw	r18, r16
    17ec:	de 01       	movw	r26, r28
    17ee:	0e 94 ba 14 	call	0x2974	; 0x2974 <__umulhisi3>
    17f2:	28 ee       	ldi	r18, 0xE8	; 232
    17f4:	33 e0       	ldi	r19, 0x03	; 3
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	0e 94 95 14 	call	0x292a	; 0x292a <__divmodsi4>
    17fe:	89 01       	movw	r16, r18
    1800:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1804:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1808:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    180c:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1810:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1814:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1818:	4d 2d       	mov	r20, r13
    181a:	40 31       	cpi	r20, 0x10	; 16
    181c:	08 f0       	brcs	.+2      	; 0x1820 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    181e:	4f e0       	ldi	r20, 0x0F	; 15
    1820:	80 e1       	ldi	r24, 0x10	; 16
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	84 1b       	sub	r24, r20
    1826:	91 09       	sbc	r25, r1
    1828:	a9 01       	movw	r20, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    182c:	56 95       	lsr	r21
    182e:	47 95       	ror	r20
    1830:	8a 95       	dec	r24
    1832:	e2 f7       	brpl	.-8      	; 0x182c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1834:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1838:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    183c:	10 93 5a 01 	sts	0x015A, r17	; 0x80015a <_ZL13buzzerTimeout+0x1>
    1840:	00 93 59 01 	sts	0x0159, r16	; 0x800159 <_ZL13buzzerTimeout>
    1844:	86 b3       	in	r24, 0x16	; 22
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	86 bb       	out	0x16, r24	; 22
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	bf 90       	pop	r11
    1860:	af 90       	pop	r10
    1862:	9f 90       	pop	r9
    1864:	8f 90       	pop	r8
    1866:	08 95       	ret

00001868 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	eb 01       	movw	r28, r22
    186e:	8f 3f       	cpi	r24, 0xFF	; 255
    1870:	11 f0       	breq	.+4      	; 0x1876 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1872:	41 11       	cpse	r20, r1
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	be 01       	movw	r22, r28
    187a:	88 ee       	ldi	r24, 0xE8	; 232
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	43 c0       	rjmp	.+134    	; 0x1906 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1880:	81 31       	cpi	r24, 0x11	; 17
    1882:	30 f0       	brcs	.+12     	; 0x1890 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1884:	50 ef       	ldi	r21, 0xF0	; 240
    1886:	58 0f       	add	r21, r24
    1888:	50 36       	cpi	r21, 0x60	; 96
    188a:	18 f0       	brcs	.+6      	; 0x1892 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    188c:	5f e5       	ldi	r21, 0x5F	; 95
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	85 2f       	mov	r24, r21
    1894:	6c e0       	ldi	r22, 0x0C	; 12
    1896:	0e 94 3f 14 	call	0x287e	; 0x287e <__udivmodqi4>
    189a:	68 2f       	mov	r22, r24
    189c:	74 ef       	ldi	r23, 0xF4	; 244
    189e:	76 03       	mulsu	r23, r22
    18a0:	90 01       	movw	r18, r0
    18a2:	11 24       	eor	r1, r1
    18a4:	25 0f       	add	r18, r21
    18a6:	31 1d       	adc	r19, r1
    18a8:	2c 30       	cpi	r18, 0x0C	; 12
    18aa:	31 05       	cpc	r19, r1
    18ac:	40 f4       	brcc	.+16     	; 0x18be <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    18ae:	f9 01       	movw	r30, r18
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ee 5e       	subi	r30, 0xEE	; 238
    18b6:	fe 4f       	sbci	r31, 0xFE	; 254
    18b8:	20 81       	ld	r18, Z
    18ba:	31 81       	ldd	r19, Z+1	; 0x01
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	87 30       	cpi	r24, 0x07	; 7
    18c4:	81 f0       	breq	.+32     	; 0x18e6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    18c6:	08 2e       	mov	r0, r24
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	28 f0       	brcs	.+10     	; 0x18e0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    18d6:	c9 01       	movw	r24, r18
    18d8:	05 96       	adiw	r24, 0x05	; 5
    18da:	6a e0       	ldi	r22, 0x0A	; 10
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    18e0:	c9 01       	movw	r24, r18
    18e2:	90 58       	subi	r25, 0x80	; 128
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    18e6:	c9 01       	movw	r24, r18
    18e8:	36 e0       	ldi	r19, 0x06	; 6
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	3a 95       	dec	r19
    18f0:	e1 f7       	brne	.-8      	; 0x18ea <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	65 e0       	ldi	r22, 0x05	; 5
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    18fc:	cb 01       	movw	r24, r22
    18fe:	40 31       	cpi	r20, 0x10	; 16
    1900:	08 f0       	brcs	.+2      	; 0x1904 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1902:	4f e0       	ldi	r20, 0x0F	; 15
    1904:	be 01       	movw	r22, r28
    1906:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <_ZL8nextNotev>:
    1910:	a2 e0       	ldi	r26, 0x02	; 2
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ee e8       	ldi	r30, 0x8E	; 142
    1916:	fc e0       	ldi	r31, 0x0C	; 12
    1918:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__prologue_saves__+0x4>
    191c:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    1920:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZL8staccato>
    1924:	88 23       	and	r24, r24
    1926:	21 f0       	breq	.+8      	; 0x1930 <_ZL8nextNotev+0x20>
    1928:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <_ZL22staccato_rest_duration>
    192c:	61 11       	cpse	r22, r1
    192e:	17 c0       	rjmp	.+46     	; 0x195e <_ZL8nextNotev+0x4e>
    1930:	77 24       	eor	r7, r7
    1932:	73 94       	inc	r7
    1934:	b0 ec       	ldi	r27, 0xC0	; 192
    1936:	ab 2e       	mov	r10, r27
    1938:	bd e5       	ldi	r27, 0x5D	; 93
    193a:	bb 2e       	mov	r11, r27
    193c:	1a e0       	ldi	r17, 0x0A	; 10
    193e:	61 2e       	mov	r6, r17
    1940:	04 e0       	ldi	r16, 0x04	; 4
    1942:	80 2e       	mov	r8, r16
    1944:	80 ed       	ldi	r24, 0xD0	; 208
    1946:	c8 2e       	mov	r12, r24
    1948:	87 e0       	ldi	r24, 0x07	; 7
    194a:	d8 2e       	mov	r13, r24
    194c:	94 e0       	ldi	r25, 0x04	; 4
    194e:	e9 2e       	mov	r14, r25
    1950:	f1 2c       	mov	r15, r1
    1952:	04 ef       	ldi	r16, 0xF4	; 244
    1954:	11 e0       	ldi	r17, 0x01	; 1
    1956:	2f e0       	ldi	r18, 0x0F	; 15
    1958:	42 2e       	mov	r4, r18
    195a:	51 2c       	mov	r5, r1
    195c:	15 c0       	rjmp	.+42     	; 0x1988 <_ZL8nextNotev+0x78>
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	88 ee       	ldi	r24, 0xE8	; 232
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    196a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_ZL22staccato_rest_duration>
    196e:	17 c1       	rjmp	.+558    	; 0x1b9e <_ZL8nextNotev+0x28e>
    1970:	86 36       	cpi	r24, 0x66	; 102
    1972:	d4 f5       	brge	.+116    	; 0x19e8 <_ZL8nextNotev+0xd8>
    1974:	81 36       	cpi	r24, 0x61	; 97
    1976:	09 f4       	brne	.+2      	; 0x197a <_ZL8nextNotev+0x6a>
    1978:	a9 c0       	rjmp	.+338    	; 0x1acc <_ZL8nextNotev+0x1bc>
    197a:	7c f5       	brge	.+94     	; 0x19da <_ZL8nextNotev+0xca>
    197c:	8c 33       	cpi	r24, 0x3C	; 60
    197e:	09 f4       	brne	.+2      	; 0x1982 <_ZL8nextNotev+0x72>
    1980:	60 c0       	rjmp	.+192    	; 0x1a42 <_ZL8nextNotev+0x132>
    1982:	8e 33       	cpi	r24, 0x3E	; 62
    1984:	81 f4       	brne	.+32     	; 0x19a6 <_ZL8nextNotev+0x96>
    1986:	93 94       	inc	r9
    1988:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    198c:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1990:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__data_end+0x1>
    199c:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__data_end>
    19a0:	85 36       	cpi	r24, 0x65	; 101
    19a2:	31 f7       	brne	.-52     	; 0x1970 <_ZL8nextNotev+0x60>
    19a4:	52 c0       	rjmp	.+164    	; 0x1a4a <_ZL8nextNotev+0x13a>
    19a6:	81 32       	cpi	r24, 0x21	; 33
    19a8:	09 f0       	breq	.+2      	; 0x19ac <_ZL8nextNotev+0x9c>
    19aa:	8b c0       	rjmp	.+278    	; 0x1ac2 <_ZL8nextNotev+0x1b2>
    19ac:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    19b0:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    19b4:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    19b8:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    19bc:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    19c0:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    19c4:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    19c8:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
    19cc:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
    19d0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <_ZL8staccato>
    19d4:	a4 e0       	ldi	r26, 0x04	; 4
    19d6:	9a 2e       	mov	r9, r26
    19d8:	d7 cf       	rjmp	.-82     	; 0x1988 <_ZL8nextNotev+0x78>
    19da:	83 36       	cpi	r24, 0x63	; 99
    19dc:	a1 f1       	breq	.+104    	; 0x1a46 <_ZL8nextNotev+0x136>
    19de:	0c f4       	brge	.+2      	; 0x19e2 <_ZL8nextNotev+0xd2>
    19e0:	78 c0       	rjmp	.+240    	; 0x1ad2 <_ZL8nextNotev+0x1c2>
    19e2:	10 e0       	ldi	r17, 0x00	; 0
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	77 c0       	rjmp	.+238    	; 0x1ad6 <_ZL8nextNotev+0x1c6>
    19e8:	8d 36       	cpi	r24, 0x6D	; 109
    19ea:	c1 f1       	breq	.+112    	; 0x1a5c <_ZL8nextNotev+0x14c>
    19ec:	94 f4       	brge	.+36     	; 0x1a12 <_ZL8nextNotev+0x102>
    19ee:	87 36       	cpi	r24, 0x67	; 103
    19f0:	91 f1       	breq	.+100    	; 0x1a56 <_ZL8nextNotev+0x146>
    19f2:	74 f1       	brlt	.+92     	; 0x1a50 <_ZL8nextNotev+0x140>
    19f4:	8c 36       	cpi	r24, 0x6C	; 108
    19f6:	09 f0       	breq	.+2      	; 0x19fa <_ZL8nextNotev+0xea>
    19f8:	64 c0       	rjmp	.+200    	; 0x1ac2 <_ZL8nextNotev+0x1b2>
    19fa:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZL9getNumberv>
    19fe:	bc 01       	movw	r22, r24
    1a00:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    1a04:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    1a08:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1a0c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1a10:	51 c0       	rjmp	.+162    	; 0x1ab4 <_ZL8nextNotev+0x1a4>
    1a12:	82 37       	cpi	r24, 0x72	; 114
    1a14:	c9 f1       	breq	.+114    	; 0x1a88 <_ZL8nextNotev+0x178>
    1a16:	4c f4       	brge	.+18     	; 0x1a2a <_ZL8nextNotev+0x11a>
    1a18:	8f 36       	cpi	r24, 0x6F	; 111
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <_ZL8nextNotev+0x10e>
    1a1c:	52 c0       	rjmp	.+164    	; 0x1ac2 <_ZL8nextNotev+0x1b2>
    1a1e:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZL9getNumberv>
    1a22:	98 2e       	mov	r9, r24
    1a24:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    1a28:	af cf       	rjmp	.-162    	; 0x1988 <_ZL8nextNotev+0x78>
    1a2a:	84 37       	cpi	r24, 0x74	; 116
    1a2c:	81 f1       	breq	.+96     	; 0x1a8e <_ZL8nextNotev+0x17e>
    1a2e:	86 37       	cpi	r24, 0x76	; 118
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <_ZL8nextNotev+0x124>
    1a32:	47 c0       	rjmp	.+142    	; 0x1ac2 <_ZL8nextNotev+0x1b2>
    1a34:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZL9getNumberv>
    1a38:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1a3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1a40:	a3 cf       	rjmp	.-186    	; 0x1988 <_ZL8nextNotev+0x78>
    1a42:	9a 94       	dec	r9
    1a44:	a1 cf       	rjmp	.-190    	; 0x1988 <_ZL8nextNotev+0x78>
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	20 c0       	rjmp	.+64     	; 0x1a8a <_ZL8nextNotev+0x17a>
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	43 c0       	rjmp	.+134    	; 0x1ad6 <_ZL8nextNotev+0x1c6>
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	85 e0       	ldi	r24, 0x05	; 5
    1a54:	40 c0       	rjmp	.+128    	; 0x1ad6 <_ZL8nextNotev+0x1c6>
    1a56:	10 e0       	ldi	r17, 0x00	; 0
    1a58:	87 e0       	ldi	r24, 0x07	; 7
    1a5a:	3d c0       	rjmp	.+122    	; 0x1ad6 <_ZL8nextNotev+0x1c6>
    1a5c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    1a60:	8c 36       	cpi	r24, 0x6C	; 108
    1a62:	19 f4       	brne	.+6      	; 0x1a6a <_ZL8nextNotev+0x15a>
    1a64:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <_ZL8staccato>
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <_ZL8nextNotev+0x162>
    1a6a:	70 92 56 01 	sts	0x0156, r7	; 0x800156 <_ZL8staccato>
    1a6e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_ZL22staccato_rest_duration>
    1a72:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1a76:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1a7a:	2f 5f       	subi	r18, 0xFF	; 255
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__data_end+0x1>
    1a82:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__data_end>
    1a86:	80 cf       	rjmp	.-256    	; 0x1988 <_ZL8nextNotev+0x78>
    1a88:	11 e0       	ldi	r17, 0x01	; 1
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	24 c0       	rjmp	.+72     	; 0x1ad6 <_ZL8nextNotev+0x1c6>
    1a8e:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZL9getNumberv>
    1a92:	bc 01       	movw	r22, r24
    1a94:	c5 01       	movw	r24, r10
    1a96:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    1a9a:	66 9e       	mul	r6, r22
    1a9c:	c0 01       	movw	r24, r0
    1a9e:	67 9e       	mul	r6, r23
    1aa0:	90 0d       	add	r25, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    1aa8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    1aac:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    1ab0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    1ab4:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    1ab8:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    1abc:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    1ac0:	63 cf       	rjmp	.-314    	; 0x1988 <_ZL8nextNotev+0x78>
    1ac2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
    1ac6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
    1aca:	69 c0       	rjmp	.+210    	; 0x1b9e <_ZL8nextNotev+0x28e>
    1acc:	10 e0       	ldi	r17, 0x00	; 0
    1ace:	89 e0       	ldi	r24, 0x09	; 9
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <_ZL8nextNotev+0x1c6>
    1ad2:	10 e0       	ldi	r17, 0x00	; 0
    1ad4:	8b e0       	ldi	r24, 0x0B	; 11
    1ad6:	08 2f       	mov	r16, r24
    1ad8:	9c e0       	ldi	r25, 0x0C	; 12
    1ada:	99 9e       	mul	r9, r25
    1adc:	00 0d       	add	r16, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	97 7f       	andi	r25, 0xF7	; 247
    1ae8:	93 32       	cpi	r25, 0x23	; 35
    1aea:	61 f4       	brne	.+24     	; 0x1b04 <_ZL8nextNotev+0x1f4>
    1aec:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1af0:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__data_end+0x1>
    1afc:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__data_end>
    1b00:	0f 5f       	subi	r16, 0xFF	; 255
    1b02:	ee cf       	rjmp	.-36     	; 0x1ae0 <_ZL8nextNotev+0x1d0>
    1b04:	8d 32       	cpi	r24, 0x2D	; 45
    1b06:	71 f4       	brne	.+28     	; 0x1b24 <_ZL8nextNotev+0x214>
    1b08:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1b0c:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1b10:	2f 5f       	subi	r18, 0xFF	; 255
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__data_end+0x1>
    1b18:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__data_end>
    1b1c:	01 50       	subi	r16, 0x01	; 1
    1b1e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    1b22:	f0 cf       	rjmp	.-32     	; 0x1b04 <_ZL8nextNotev+0x1f4>
    1b24:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    1b28:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    1b2c:	81 53       	subi	r24, 0x31	; 49
    1b2e:	88 30       	cpi	r24, 0x08	; 8
    1b30:	50 f4       	brcc	.+20     	; 0x1b46 <_ZL8nextNotev+0x236>
    1b32:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1b36:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1b3a:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZL9getNumberv>
    1b3e:	bc 01       	movw	r22, r24
    1b40:	c7 01       	movw	r24, r14
    1b42:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    1b46:	7b 01       	movw	r14, r22
    1b48:	f6 94       	lsr	r15
    1b4a:	e7 94       	ror	r14
    1b4c:	69 83       	std	Y+1, r22	; 0x01
    1b4e:	7a 83       	std	Y+2, r23	; 0x02
    1b50:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZL16currentCharacterv>
    1b54:	69 81       	ldd	r22, Y+1	; 0x01
    1b56:	7a 81       	ldd	r23, Y+2	; 0x02
    1b58:	8e 32       	cpi	r24, 0x2E	; 46
    1b5a:	69 f4       	brne	.+26     	; 0x1b76 <_ZL8nextNotev+0x266>
    1b5c:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1b60:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1b64:	2f 5f       	subi	r18, 0xFF	; 255
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__data_end+0x1>
    1b6c:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__data_end>
    1b70:	6e 0d       	add	r22, r14
    1b72:	7f 1d       	adc	r23, r15
    1b74:	e9 cf       	rjmp	.-46     	; 0x1b48 <_ZL8nextNotev+0x238>
    1b76:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZL8staccato>
    1b7a:	88 23       	and	r24, r24
    1b7c:	39 f0       	breq	.+14     	; 0x1b8c <_ZL8nextNotev+0x27c>
    1b7e:	9b 01       	movw	r18, r22
    1b80:	36 95       	lsr	r19
    1b82:	27 95       	ror	r18
    1b84:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <_ZL22staccato_rest_duration>
    1b88:	62 1b       	sub	r22, r18
    1b8a:	71 09       	sbc	r23, r1
    1b8c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1b90:	11 23       	and	r17, r17
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <_ZL8nextNotev+0x288>
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <_ZL8nextNotev+0x28a>
    1b98:	80 2f       	mov	r24, r16
    1b9a:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1b9e:	22 96       	adiw	r28, 0x02	; 2
    1ba0:	e0 e1       	ldi	r30, 0x10	; 16
    1ba2:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__epilogue_restores__+0x4>

00001ba6 <__vector_13>:
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
    1bc8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <_ZL13buzzerTimeout>
    1bcc:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <_ZL13buzzerTimeout+0x1>
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	21 50       	subi	r18, 0x01	; 1
    1bd4:	31 09       	sbc	r19, r1
    1bd6:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <_ZL13buzzerTimeout+0x1>
    1bda:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <_ZL13buzzerTimeout>
    1bde:	89 2b       	or	r24, r25
    1be0:	11 f5       	brne	.+68     	; 0x1c26 <__vector_13+0x80>
    1be2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1be6:	78 94       	sei
    1be8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1bec:	88 7f       	andi	r24, 0xF8	; 248
    1bee:	81 60       	ori	r24, 0x01	; 1
    1bf0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1bf4:	80 e1       	ldi	r24, 0x10	; 16
    1bf6:	97 e2       	ldi	r25, 0x27	; 39
    1bf8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1bfc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1c00:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1c04:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    1c0e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
    1c12:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
    1c16:	89 2b       	or	r24, r25
    1c18:	31 f0       	breq	.+12     	; 0x1c26 <__vector_13+0x80>
    1c1a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_ZL17play_mode_setting>
    1c1e:	81 11       	cpse	r24, r1
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <__vector_13+0x80>
    1c22:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL8nextNotev>
    1c26:	ff 91       	pop	r31
    1c28:	ef 91       	pop	r30
    1c2a:	bf 91       	pop	r27
    1c2c:	af 91       	pop	r26
    1c2e:	9f 91       	pop	r25
    1c30:	8f 91       	pop	r24
    1c32:	7f 91       	pop	r23
    1c34:	6f 91       	pop	r22
    1c36:	5f 91       	pop	r21
    1c38:	4f 91       	pop	r20
    1c3a:	3f 91       	pop	r19
    1c3c:	2f 91       	pop	r18
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <_ZN15OrangutanBuzzer4playEPKc>:
    1c48:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1c4c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
    1c50:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
    1c54:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <_ZL17use_program_space>
    1c58:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_ZL22staccato_rest_duration>
    1c5c:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZL8nextNotev>
    1c60:	08 95       	ret

00001c62 <play>:
    1c62:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN15OrangutanBuzzer4playEPKc>
    1c66:	08 95       	ret

00001c68 <delay_us.constprop.0>:
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	6f 93       	push	r22
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	6a 95       	dec	r22
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <delay_us.constprop.0+0x8>
    1c74:	6f 91       	pop	r22
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	c9 f7       	brne	.-14     	; 0x1c6c <delay_us.constprop.0+0x4>
    1c7a:	08 95       	ret

00001c7c <_ZN12OrangutanLCD8busyWaitEv>:
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	1a b1       	in	r17, 0x0a	; 10
    1c86:	57 98       	cbi	0x0a, 7	; 10
    1c88:	5a 98       	cbi	0x0b, 2	; 11
    1c8a:	28 9a       	sbi	0x05, 0	; 5
    1c8c:	c0 e0       	ldi	r28, 0x00	; 0
    1c8e:	d0 e0       	ldi	r29, 0x00	; 0
    1c90:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <delay_us.constprop.0>
    1c94:	5c 9a       	sbi	0x0b, 4	; 11
    1c96:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <delay_us.constprop.0>
    1c9a:	09 b1       	in	r16, 0x09	; 9
    1c9c:	5c 98       	cbi	0x0b, 4	; 11
    1c9e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <delay_us.constprop.0>
    1ca2:	5c 9a       	sbi	0x0b, 4	; 11
    1ca4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <delay_us.constprop.0>
    1ca8:	5c 98       	cbi	0x0b, 4	; 11
    1caa:	24 96       	adiw	r28, 0x04	; 4
    1cac:	07 ff       	sbrs	r16, 7
    1cae:	10 c0       	rjmp	.+32     	; 0x1cd0 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1cb0:	ae 01       	movw	r20, r28
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <lcdTimeout>
    1cba:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <lcdTimeout+0x1>
    1cbe:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <lcdTimeout+0x2>
    1cc2:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <lcdTimeout+0x3>
    1cc6:	48 17       	cp	r20, r24
    1cc8:	59 07       	cpc	r21, r25
    1cca:	6a 07       	cpc	r22, r26
    1ccc:	7b 07       	cpc	r23, r27
    1cce:	00 f3       	brcs	.-64     	; 0x1c90 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1cd0:	1a b9       	out	0x0a, r17	; 10
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <_ZN12OrangutanLCD8sendDataEh>:
    1cdc:	95 b1       	in	r25, 0x05	; 5
    1cde:	28 2f       	mov	r18, r24
    1ce0:	21 70       	andi	r18, 0x01	; 1
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	48 2f       	mov	r20, r24
    1cea:	46 70       	andi	r20, 0x06	; 6
    1cec:	68 e0       	ldi	r22, 0x08	; 8
    1cee:	46 9f       	mul	r20, r22
    1cf0:	a0 01       	movw	r20, r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	24 2b       	or	r18, r20
    1cf6:	9d 7c       	andi	r25, 0xCD	; 205
    1cf8:	29 2b       	or	r18, r25
    1cfa:	25 b9       	out	0x05, r18	; 5
    1cfc:	9b b1       	in	r25, 0x0b	; 11
    1cfe:	88 70       	andi	r24, 0x08	; 8
    1d00:	82 95       	swap	r24
    1d02:	80 7f       	andi	r24, 0xF0	; 240
    1d04:	9f 77       	andi	r25, 0x7F	; 127
    1d06:	89 2b       	or	r24, r25
    1d08:	8b b9       	out	0x0b, r24	; 11
    1d0a:	5c 9a       	sbi	0x0b, 4	; 11
    1d0c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <delay_us.constprop.0>
    1d10:	5c 98       	cbi	0x0b, 4	; 11
    1d12:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <delay_us.constprop.0>
    1d16:	08 95       	ret

00001d18 <_ZN12OrangutanLCD4sendEhhh>:
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e9       	ldi	r30, 0x92	; 146
    1d1e:	fe e0       	ldi	r31, 0x0E	; 14
    1d20:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x16>
    1d24:	c8 2f       	mov	r28, r24
    1d26:	d6 2e       	mov	r13, r22
    1d28:	e4 2e       	mov	r14, r20
    1d2a:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <_ZZN12OrangutanLCD4initEvE11initialized>
    1d2e:	81 11       	cpse	r24, r1
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <_ZN12OrangutanLCD4sendEhhh+0x24>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <_ZZN12OrangutanLCD4initEvE11initialized>
    1d38:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN12OrangutanLCD5init2Ev>
    1d3c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN12OrangutanLCD8busyWaitEv>
    1d40:	14 b1       	in	r17, 0x04	; 4
    1d42:	d5 b1       	in	r29, 0x05	; 5
    1d44:	fa b0       	in	r15, 0x0a	; 10
    1d46:	0b b1       	in	r16, 0x0b	; 11
    1d48:	28 98       	cbi	0x05, 0	; 5
    1d4a:	dd 20       	and	r13, r13
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1d4e:	5a 9a       	sbi	0x0b, 2	; 11
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1d52:	5a 98       	cbi	0x0b, 2	; 11
    1d54:	94 b1       	in	r25, 0x04	; 4
    1d56:	92 63       	ori	r25, 0x32	; 50
    1d58:	94 b9       	out	0x04, r25	; 4
    1d5a:	57 9a       	sbi	0x0a, 7	; 10
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	e8 16       	cp	r14, r24
    1d60:	29 f0       	breq	.+10     	; 0x1d6c <_ZN12OrangutanLCD4sendEhhh+0x54>
    1d62:	8c 2f       	mov	r24, r28
    1d64:	82 95       	swap	r24
    1d66:	8f 70       	andi	r24, 0x0F	; 15
    1d68:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN12OrangutanLCD8sendDataEh>
    1d6c:	8c 2f       	mov	r24, r28
    1d6e:	8f 70       	andi	r24, 0x0F	; 15
    1d70:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN12OrangutanLCD8sendDataEh>
    1d74:	fa b8       	out	0x0a, r15	; 10
    1d76:	0b b9       	out	0x0b, r16	; 11
    1d78:	14 b9       	out	0x04, r17	; 4
    1d7a:	d5 b9       	out	0x05, r29	; 5
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	e7 e0       	ldi	r30, 0x07	; 7
    1d82:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x16>

00001d86 <_ZN12OrangutanLCD8send_cmdEh>:
    1d86:	42 e0       	ldi	r20, 0x02	; 2
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN12OrangutanLCD4sendEhhh>
    1d8e:	08 95       	ret

00001d90 <_ZN12OrangutanLCD9send_dataEh>:
    1d90:	42 e0       	ldi	r20, 0x02	; 2
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN12OrangutanLCD4sendEhhh>
    1d98:	08 95       	ret

00001d9a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN12OrangutanLCD4sendEhhh>
    1da2:	08 95       	ret

00001da4 <_ZN12OrangutanLCD5init2Ev>:
    1da4:	80 e1       	ldi	r24, 0x10	; 16
    1da6:	97 e2       	ldi	r25, 0x27	; 39
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <lcdTimeout>
    1db0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <lcdTimeout+0x1>
    1db4:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <lcdTimeout+0x2>
    1db8:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <lcdTimeout+0x3>
    1dbc:	52 9a       	sbi	0x0a, 2	; 10
    1dbe:	20 9a       	sbi	0x04, 0	; 4
    1dc0:	54 9a       	sbi	0x0a, 4	; 10
    1dc2:	8e e1       	ldi	r24, 0x1E	; 30
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1dd0:	86 e0       	ldi	r24, 0x06	; 6
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    1e02:	88 e2       	ldi	r24, 0x28	; 40
    1e04:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1e08:	88 e0       	ldi	r24, 0x08	; 8
    1e0a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1e14:	86 e0       	ldi	r24, 0x06	; 6
    1e16:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1e1a:	8c e0       	ldi	r24, 0x0C	; 12
    1e1c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1e20:	08 95       	ret

00001e22 <_ZN12OrangutanLCD5clearEv>:
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1e28:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <printf_chars>
    1e2c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <printf_chars+0x1>
    1e30:	89 2b       	or	r24, r25
    1e32:	f9 f0       	breq	.+62     	; 0x1e72 <_ZN12OrangutanLCD5clearEv+0x50>
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	a0 e2       	ldi	r26, 0x20	; 32
    1e38:	26 2f       	mov	r18, r22
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <numLCDCols>
    1e40:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <numLCDRows>
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	78 9f       	mul	r23, r24
    1e4a:	a0 01       	movw	r20, r0
    1e4c:	79 9f       	mul	r23, r25
    1e4e:	50 0d       	add	r21, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	24 17       	cp	r18, r20
    1e54:	35 07       	cpc	r19, r21
    1e56:	4c f4       	brge	.+18     	; 0x1e6a <_ZN12OrangutanLCD5clearEv+0x48>
    1e58:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <printf_chars>
    1e5c:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <printf_chars+0x1>
    1e60:	e2 0f       	add	r30, r18
    1e62:	f3 1f       	adc	r31, r19
    1e64:	a0 83       	st	Z, r26
    1e66:	6f 5f       	subi	r22, 0xFF	; 255
    1e68:	e7 cf       	rjmp	.-50     	; 0x1e38 <_ZN12OrangutanLCD5clearEv+0x16>
    1e6a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <col>
    1e6e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <row>
    1e72:	08 95       	ret

00001e74 <clear>:
    1e74:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN12OrangutanLCD5clearEv>
    1e78:	08 95       	ret

00001e7a <_ZN12OrangutanLCD5printEPKc>:
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	ec 01       	movw	r28, r24
    1e80:	89 91       	ld	r24, Y+
    1e82:	88 23       	and	r24, r24
    1e84:	19 f0       	breq	.+6      	; 0x1e8c <_ZN12OrangutanLCD5printEPKc+0x12>
    1e86:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN12OrangutanLCD9send_dataEh>
    1e8a:	fa cf       	rjmp	.-12     	; 0x1e80 <_ZN12OrangutanLCD5printEPKc+0x6>
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <print>:
    1e92:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <_ZN12OrangutanLCD5printEPKc>
    1e96:	08 95       	ret

00001e98 <_ZN12OrangutanLCD5printEm>:
    1e98:	aa e0       	ldi	r26, 0x0A	; 10
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e2 e5       	ldi	r30, 0x52	; 82
    1e9e:	ff e0       	ldi	r31, 0x0F	; 15
    1ea0:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__prologue_saves__+0x14>
    1ea4:	1a e0       	ldi	r17, 0x0A	; 10
    1ea6:	5a e0       	ldi	r21, 0x0A	; 10
    1ea8:	c5 2e       	mov	r12, r21
    1eaa:	d1 2c       	mov	r13, r1
    1eac:	e1 2c       	mov	r14, r1
    1eae:	f1 2c       	mov	r15, r1
    1eb0:	06 2f       	mov	r16, r22
    1eb2:	a7 01       	movw	r20, r14
    1eb4:	96 01       	movw	r18, r12
    1eb6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__udivmodsi4>
    1eba:	ca 01       	movw	r24, r20
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	11 50       	subi	r17, 0x01	; 1
    1ec0:	e1 e0       	ldi	r30, 0x01	; 1
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	ec 0f       	add	r30, r28
    1ec6:	fd 1f       	adc	r31, r29
    1ec8:	e1 0f       	add	r30, r17
    1eca:	f1 1d       	adc	r31, r1
    1ecc:	00 5d       	subi	r16, 0xD0	; 208
    1ece:	2a e0       	ldi	r18, 0x0A	; 10
    1ed0:	62 9f       	mul	r22, r18
    1ed2:	00 19       	sub	r16, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	00 83       	st	Z, r16
    1ed8:	61 15       	cp	r22, r1
    1eda:	71 05       	cpc	r23, r1
    1edc:	81 05       	cpc	r24, r1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	39 f7       	brne	.-50     	; 0x1eb0 <_ZN12OrangutanLCD5printEm+0x18>
    1ee2:	1a 30       	cpi	r17, 0x0A	; 10
    1ee4:	58 f4       	brcc	.+22     	; 0x1efc <_ZN12OrangutanLCD5printEm+0x64>
    1ee6:	e1 e0       	ldi	r30, 0x01	; 1
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	ec 0f       	add	r30, r28
    1eec:	fd 1f       	adc	r31, r29
    1eee:	e1 0f       	add	r30, r17
    1ef0:	f1 1d       	adc	r31, r1
    1ef2:	80 81       	ld	r24, Z
    1ef4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN12OrangutanLCD9send_dataEh>
    1ef8:	1f 5f       	subi	r17, 0xFF	; 255
    1efa:	f3 cf       	rjmp	.-26     	; 0x1ee2 <_ZN12OrangutanLCD5printEm+0x4a>
    1efc:	2a 96       	adiw	r28, 0x0a	; 10
    1efe:	e8 e0       	ldi	r30, 0x08	; 8
    1f00:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__epilogue_restores__+0x14>

00001f04 <_ZN12OrangutanLCD5printEl>:
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	6b 01       	movw	r12, r22
    1f0e:	7c 01       	movw	r14, r24
    1f10:	97 ff       	sbrs	r25, 7
    1f12:	0b c0       	rjmp	.+22     	; 0x1f2a <_ZN12OrangutanLCD5printEl+0x26>
    1f14:	f0 94       	com	r15
    1f16:	e0 94       	com	r14
    1f18:	d0 94       	com	r13
    1f1a:	c0 94       	com	r12
    1f1c:	c1 1c       	adc	r12, r1
    1f1e:	d1 1c       	adc	r13, r1
    1f20:	e1 1c       	adc	r14, r1
    1f22:	f1 1c       	adc	r15, r1
    1f24:	8d e2       	ldi	r24, 0x2D	; 45
    1f26:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN12OrangutanLCD9send_dataEh>
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_ZN12OrangutanLCD5printEm>
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	08 95       	ret

00001f3c <print_long>:
    1f3c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN12OrangutanLCD5printEl>
    1f40:	08 95       	ret

00001f42 <_ZN12OrangutanLCD6gotoXYEhh>:
    1f42:	a5 e0       	ldi	r26, 0x05	; 5
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e7 ea       	ldi	r30, 0xA7	; 167
    1f48:	ff e0       	ldi	r31, 0x0F	; 15
    1f4a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x1e>
    1f4e:	18 2f       	mov	r17, r24
    1f50:	80 e8       	ldi	r24, 0x80	; 128
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	80 ec       	ldi	r24, 0xC0	; 192
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	84 e9       	ldi	r24, 0x94	; 148
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
    1f5c:	84 ed       	ldi	r24, 0xD4	; 212
    1f5e:	8c 83       	std	Y+4, r24	; 0x04
    1f60:	fe 01       	movw	r30, r28
    1f62:	e6 0f       	add	r30, r22
    1f64:	f1 1d       	adc	r31, r1
    1f66:	81 81       	ldd	r24, Z+1	; 0x01
    1f68:	81 0f       	add	r24, r17
    1f6a:	6d 83       	std	Y+5, r22	; 0x05
    1f6c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN12OrangutanLCD8send_cmdEh>
    1f70:	10 93 5f 01 	sts	0x015F, r17	; 0x80015f <col>
    1f74:	6d 81       	ldd	r22, Y+5	; 0x05
    1f76:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <row>
    1f7a:	25 96       	adiw	r28, 0x05	; 5
    1f7c:	e3 e0       	ldi	r30, 0x03	; 3
    1f7e:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x1e>

00001f82 <lcd_goto_xy>:
    1f82:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN12OrangutanLCD6gotoXYEhh>
    1f86:	08 95       	ret

00001f88 <_ZN16OrangutanDigital9setOutputEhh>:
    1f88:	88 30       	cpi	r24, 0x08	; 8
    1f8a:	58 f4       	brcc	.+22     	; 0x1fa2 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1f90:	99 0f       	add	r25, r25
    1f92:	8a 95       	dec	r24
    1f94:	ea f7       	brpl	.-6      	; 0x1f90 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1f96:	89 2f       	mov	r24, r25
    1f98:	aa e2       	ldi	r26, 0x2A	; 42
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e2       	ldi	r30, 0x2B	; 43
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	21 c0       	rjmp	.+66     	; 0x1fe4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1fa2:	8e 30       	cpi	r24, 0x0E	; 14
    1fa4:	60 f4       	brcc	.+24     	; 0x1fbe <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1fa6:	98 ef       	ldi	r25, 0xF8	; 248
    1fa8:	98 0f       	add	r25, r24
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1fae:	88 0f       	add	r24, r24
    1fb0:	9a 95       	dec	r25
    1fb2:	ea f7       	brpl	.-6      	; 0x1fae <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1fb4:	a4 e2       	ldi	r26, 0x24	; 36
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e5 e2       	ldi	r30, 0x25	; 37
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	13 c0       	rjmp	.+38     	; 0x1fe4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1fbe:	85 31       	cpi	r24, 0x15	; 21
    1fc0:	60 f4       	brcc	.+24     	; 0x1fda <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1fc2:	92 ef       	ldi	r25, 0xF2	; 242
    1fc4:	98 0f       	add	r25, r24
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1fca:	88 0f       	add	r24, r24
    1fcc:	9a 95       	dec	r25
    1fce:	ea f7       	brpl	.-6      	; 0x1fca <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1fd0:	a7 e2       	ldi	r26, 0x27	; 39
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e2       	ldi	r30, 0x28	; 40
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	a0 e0       	ldi	r26, 0x00	; 0
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e0 e0       	ldi	r30, 0x00	; 0
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	6f 3f       	cpi	r22, 0xFF	; 255
    1fe6:	19 f4       	brne	.+6      	; 0x1fee <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1fe8:	90 81       	ld	r25, Z
    1fea:	98 27       	eor	r25, r24
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1fee:	66 23       	and	r22, r22
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1ff2:	90 81       	ld	r25, Z
    1ff4:	98 2b       	or	r25, r24
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1ff8:	20 81       	ld	r18, Z
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	90 95       	com	r25
    1ffe:	92 23       	and	r25, r18
    2000:	90 83       	st	Z, r25
    2002:	9c 91       	ld	r25, X
    2004:	98 2b       	or	r25, r24
    2006:	9c 93       	st	X, r25
    2008:	08 95       	ret

0000200a <_ZN15OrangutanMotors5init2Ev>:
    200a:	83 ef       	ldi	r24, 0xF3	; 243
    200c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2010:	84 bd       	out	0x24, r24	; 36
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2018:	85 bd       	out	0x25, r24	; 37
    201a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    201e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2022:	18 bc       	out	0x28, r1	; 40
    2024:	17 bc       	out	0x27, r1	; 39
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN16OrangutanDigital9setOutputEhh>
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	85 e0       	ldi	r24, 0x05	; 5
    2032:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN16OrangutanDigital9setOutputEhh>
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	8b e0       	ldi	r24, 0x0B	; 11
    203a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN16OrangutanDigital9setOutputEhh>
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN16OrangutanDigital9setOutputEhh>
    2046:	08 95       	ret

00002048 <_ZN15OrangutanMotors4initEv>:
    2048:	80 91 17 06 	lds	r24, 0x0617	; 0x800617 <_ZZN15OrangutanMotors4initEvE11initialized>
    204c:	81 11       	cpse	r24, r1
    204e:	05 c0       	rjmp	.+10     	; 0x205a <_ZN15OrangutanMotors4initEv+0x12>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <_ZZN15OrangutanMotors4initEvE11initialized>
    2056:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN15OrangutanMotors5init2Ev>
    205a:	08 95       	ret

0000205c <_ZN15OrangutanMotors10setM1SpeedEi>:
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	ec 01       	movw	r28, r24
    2062:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN15OrangutanMotors4initEv>
    2066:	d7 ff       	sbrs	r29, 7
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    206a:	d1 95       	neg	r29
    206c:	c1 95       	neg	r28
    206e:	d1 09       	sbc	r29, r1
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	cf 3f       	cpi	r28, 0xFF	; 255
    2078:	d1 05       	cpc	r29, r1
    207a:	19 f0       	breq	.+6      	; 0x2082 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    207c:	14 f0       	brlt	.+4      	; 0x2082 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    207e:	cf ef       	ldi	r28, 0xFF	; 255
    2080:	d0 e0       	ldi	r29, 0x00	; 0
    2082:	88 23       	and	r24, r24
    2084:	19 f0       	breq	.+6      	; 0x208c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2086:	18 bc       	out	0x28, r1	; 40
    2088:	c7 bd       	out	0x27, r28	; 39
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    208c:	c8 bd       	out	0x28, r28	; 40
    208e:	17 bc       	out	0x27, r1	; 39
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	ec 01       	movw	r28, r24
    209c:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN15OrangutanMotors4initEv>
    20a0:	d7 ff       	sbrs	r29, 7
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    20a4:	d1 95       	neg	r29
    20a6:	c1 95       	neg	r28
    20a8:	d1 09       	sbc	r29, r1
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	cf 3f       	cpi	r28, 0xFF	; 255
    20b2:	d1 05       	cpc	r29, r1
    20b4:	19 f0       	breq	.+6      	; 0x20bc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    20b6:	14 f0       	brlt	.+4      	; 0x20bc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    20b8:	cf ef       	ldi	r28, 0xFF	; 255
    20ba:	d0 e0       	ldi	r29, 0x00	; 0
    20bc:	88 23       	and	r24, r24
    20be:	29 f0       	breq	.+10     	; 0x20ca <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    20c0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    20c4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    20c8:	04 c0       	rjmp	.+8      	; 0x20d2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    20ca:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    20ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	08 95       	ret

000020d8 <_ZN15OrangutanMotors9setSpeedsEii>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	eb 01       	movw	r28, r22
    20de:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN15OrangutanMotors10setM1SpeedEi>
    20e2:	ce 01       	movw	r24, r28
    20e4:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN15OrangutanMotors10setM2SpeedEi>
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	08 95       	ret

000020ee <set_motors>:
    20ee:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN15OrangutanMotors9setSpeedsEii>
    20f2:	08 95       	ret

000020f4 <_ZN20OrangutanPushbuttons5init2Ev>:
    20f4:	84 b1       	in	r24, 0x04	; 4
    20f6:	8d 7c       	andi	r24, 0xCD	; 205
    20f8:	84 b9       	out	0x04, r24	; 4
    20fa:	85 b1       	in	r24, 0x05	; 5
    20fc:	82 63       	ori	r24, 0x32	; 50
    20fe:	85 b9       	out	0x05, r24	; 5
    2100:	85 e0       	ldi	r24, 0x05	; 5
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	6f 93       	push	r22
    2106:	64 e0       	ldi	r22, 0x04	; 4
    2108:	6a 95       	dec	r22
    210a:	f1 f7       	brne	.-4      	; 0x2108 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    210c:	6f 91       	pop	r22
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	c9 f7       	brne	.-14     	; 0x2104 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2112:	08 95       	ret

00002114 <_ZN20OrangutanPushbuttons4initEv>:
    2114:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2118:	81 11       	cpse	r24, r1
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <_ZN20OrangutanPushbuttons4initEv+0x12>
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2122:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN20OrangutanPushbuttons5init2Ev>
    2126:	08 95       	ret

00002128 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2128:	cf 93       	push	r28
    212a:	c8 2f       	mov	r28, r24
    212c:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN20OrangutanPushbuttons4initEv>
    2130:	83 b1       	in	r24, 0x03	; 3
    2132:	8c 23       	and	r24, r28
    2134:	e9 f3       	breq	.-6      	; 0x2130 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2136:	8a e0       	ldi	r24, 0x0A	; 10
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 05 11 	call	0x220a	; 0x220a <delay_ms>
    213e:	83 b1       	in	r24, 0x03	; 3
    2140:	8c 23       	and	r24, r28
    2142:	b1 f3       	breq	.-20     	; 0x2130 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2144:	83 b1       	in	r24, 0x03	; 3
    2146:	8c 23       	and	r24, r28
    2148:	cf 91       	pop	r28
    214a:	08 95       	ret

0000214c <wait_for_button_release>:
    214c:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2150:	08 95       	ret

00002152 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2152:	a1 e0       	ldi	r26, 0x01	; 1
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	ef ea       	ldi	r30, 0xAF	; 175
    2158:	f0 e1       	ldi	r31, 0x10	; 16
    215a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x20>
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN20OrangutanPushbuttons4initEv>
    2164:	93 b1       	in	r25, 0x03	; 3
    2166:	90 95       	com	r25
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	89 23       	and	r24, r25
    216c:	21 96       	adiw	r28, 0x01	; 1
    216e:	e2 e0       	ldi	r30, 0x02	; 2
    2170:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x20>

00002174 <button_is_pressed>:
    2174:	0e 94 a9 10 	call	0x2152	; 0x2152 <_ZN20OrangutanPushbuttons9isPressedEh>
    2178:	08 95       	ret

0000217a <__vector_9>:
    217a:	2f 92       	push	r2
    217c:	8f 93       	push	r24
    217e:	9f 93       	push	r25
    2180:	2f b6       	in	r2, 0x3f	; 63
    2182:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <tickCount+0x1>
    2186:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <tickCount+0x2>
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <tickCount+0x1>
    2190:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <tickCount+0x2>
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <tickCount+0x3>
    219a:	89 1f       	adc	r24, r25
    219c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tickCount+0x3>
    21a0:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <us_over_10+0x1>
    21a4:	9c 5f       	subi	r25, 0xFC	; 252
    21a6:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <us_over_10+0x1>
    21aa:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <us_over_10>
    21ae:	80 51       	subi	r24, 0x10	; 16
    21b0:	97 42       	sbci	r25, 0x27	; 39
    21b2:	c0 f0       	brcs	.+48     	; 0x21e4 <end>
    21b4:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <us_over_10+0x1>
    21b8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <us_over_10>
    21bc:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msCounter>
    21c0:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <msCounter+0x1>
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <msCounter>
    21ca:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <msCounter+0x1>
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <msCounter+0x2>
    21d4:	89 1f       	adc	r24, r25
    21d6:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <msCounter+0x2>
    21da:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <msCounter+0x3>
    21de:	89 1f       	adc	r24, r25
    21e0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <msCounter+0x3>

000021e4 <end>:
    21e4:	2f be       	out	0x3f, r2	; 63
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	2f 90       	pop	r2
    21ec:	18 95       	reti

000021ee <_ZN13OrangutanTime17delayMillisecondsEj>:
    21ee:	28 ee       	ldi	r18, 0xE8	; 232
    21f0:	33 e0       	ldi	r19, 0x03	; 3
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	48 f0       	brcs	.+18     	; 0x2208 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    21f6:	f9 01       	movw	r30, r18
    21f8:	6f 93       	push	r22
    21fa:	64 e0       	ldi	r22, 0x04	; 4
    21fc:	6a 95       	dec	r22
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2200:	6f 91       	pop	r22
    2202:	31 97       	sbiw	r30, 0x01	; 1
    2204:	c9 f7       	brne	.-14     	; 0x21f8 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2206:	f5 cf       	rjmp	.-22     	; 0x21f2 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2208:	08 95       	ret

0000220a <delay_ms>:
    220a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_ZN13OrangutanTime17delayMillisecondsEj>
    220e:	08 95       	ret

00002210 <_ZN13OrangutanTime5init2Ev>:
    2210:	e0 e7       	ldi	r30, 0x70	; 112
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8e 7f       	andi	r24, 0xFE	; 254
    2218:	80 83       	st	Z, r24
    221a:	a0 eb       	ldi	r26, 0xB0	; 176
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	8c 91       	ld	r24, X
    2220:	83 60       	ori	r24, 0x03	; 3
    2222:	8c 93       	st	X, r24
    2224:	a1 eb       	ldi	r26, 0xB1	; 177
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	8c 91       	ld	r24, X
    222a:	80 7f       	andi	r24, 0xF0	; 240
    222c:	8c 93       	st	X, r24
    222e:	8c 91       	ld	r24, X
    2230:	82 60       	ori	r24, 0x02	; 2
    2232:	8c 93       	st	X, r24
    2234:	b8 9a       	sbi	0x17, 0	; 23
    2236:	80 81       	ld	r24, Z
    2238:	81 60       	ori	r24, 0x01	; 1
    223a:	80 83       	st	Z, r24
    223c:	78 94       	sei
    223e:	08 95       	ret

00002240 <_ZN13OrangutanTime4initEv>:
    2240:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <_ZZN13OrangutanTime4initEvE11initialized>
    2244:	81 11       	cpse	r24, r1
    2246:	05 c0       	rjmp	.+10     	; 0x2252 <_ZN13OrangutanTime4initEv+0x12>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <_ZZN13OrangutanTime4initEvE11initialized>
    224e:	0e 94 08 11 	call	0x2210	; 0x2210 <_ZN13OrangutanTime5init2Ev>
    2252:	08 95       	ret

00002254 <_ZN13OrangutanTime5resetEv>:
    2254:	0e 94 20 11 	call	0x2240	; 0x2240 <_ZN13OrangutanTime4initEv>
    2258:	e0 e7       	ldi	r30, 0x70	; 112
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8e 7f       	andi	r24, 0xFE	; 254
    2260:	80 83       	st	Z, r24
    2262:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <msCounter>
    2266:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <msCounter+0x1>
    226a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <msCounter+0x2>
    226e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <msCounter+0x3>
    2272:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <us_over_10+0x1>
    2276:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <us_over_10>
    227a:	80 81       	ld	r24, Z
    227c:	81 60       	ori	r24, 0x01	; 1
    227e:	80 83       	st	Z, r24
    2280:	08 95       	ret

00002282 <read_line_sensors>:
    2282:	46 2f       	mov	r20, r22
    2284:	bc 01       	movw	r22, r24
    2286:	8d e6       	ldi	r24, 0x6D	; 109
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	0e 94 c4 13 	call	0x2788	; 0x2788 <_ZN16PololuQTRSensors4readEPjh>
    228e:	08 95       	ret

00002290 <_ZN9Pololu3pi4initEjh>:
    2290:	0f 93       	push	r16
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	00 d0       	rcall	.+0      	; 0x2298 <_ZN9Pololu3pi4initEjh+0x8>
    2298:	00 d0       	rcall	.+0      	; 0x229a <_ZN9Pololu3pi4initEjh+0xa>
    229a:	1f 92       	push	r1
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	9c 01       	movw	r18, r24
    22a2:	85 e0       	ldi	r24, 0x05	; 5
    22a4:	ea e2       	ldi	r30, 0x2A	; 42
    22a6:	f1 e0       	ldi	r31, 0x01	; 1
    22a8:	de 01       	movw	r26, r28
    22aa:	11 96       	adiw	r26, 0x01	; 1
    22ac:	01 90       	ld	r0, Z+
    22ae:	0d 92       	st	X+, r0
    22b0:	8a 95       	dec	r24
    22b2:	e1 f7       	brne	.-8      	; 0x22ac <_ZN9Pololu3pi4initEjh+0x1c>
    22b4:	66 23       	and	r22, r22
    22b6:	11 f0       	breq	.+4      	; 0x22bc <_ZN9Pololu3pi4initEjh+0x2c>
    22b8:	0f ef       	ldi	r16, 0xFF	; 255
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <_ZN9Pololu3pi4initEjh+0x2e>
    22bc:	03 e1       	ldi	r16, 0x13	; 19
    22be:	45 e0       	ldi	r20, 0x05	; 5
    22c0:	be 01       	movw	r22, r28
    22c2:	6f 5f       	subi	r22, 0xFF	; 255
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8d e6       	ldi	r24, 0x6D	; 109
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    22ce:	8d e6       	ldi	r24, 0x6D	; 109
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN16PololuQTRSensors11emittersOffEv>
    22d6:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN13OrangutanTime5resetEv>
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	0f 91       	pop	r16
    22ea:	08 95       	ret

000022ec <pololu_3pi_init>:
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN9Pololu3pi4initEjh>
    22f2:	08 95       	ret

000022f4 <_GLOBAL__sub_D_pololu_3pi_init>:
    22f4:	8d e6       	ldi	r24, 0x6D	; 109
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN16PololuQTRSensorsD1Ev>
    22fc:	08 95       	ret

000022fe <delay_us>:
    22fe:	6f 93       	push	r22
    2300:	64 e0       	ldi	r22, 0x04	; 4
    2302:	6a 95       	dec	r22
    2304:	f1 f7       	brne	.-4      	; 0x2302 <delay_us+0x4>
    2306:	6f 91       	pop	r22
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	c9 f7       	brne	.-14     	; 0x22fe <delay_us>
    230c:	08 95       	ret

0000230e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    230e:	fc 01       	movw	r30, r24
    2310:	11 82       	std	Z+1, r1	; 0x01
    2312:	10 82       	st	Z, r1
    2314:	13 82       	std	Z+3, r1	; 0x03
    2316:	12 82       	std	Z+2, r1	; 0x02
    2318:	15 82       	std	Z+5, r1	; 0x05
    231a:	14 82       	std	Z+4, r1	; 0x04
    231c:	16 82       	std	Z+6, r1	; 0x06
    231e:	68 30       	cpi	r22, 0x08	; 8
    2320:	68 f4       	brcc	.+26     	; 0x233c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2322:	89 e2       	ldi	r24, 0x29	; 41
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	8b e2       	ldi	r24, 0x2B	; 43
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	93 83       	std	Z+3, r25	; 0x03
    2330:	82 83       	std	Z+2, r24	; 0x02
    2332:	8a e2       	ldi	r24, 0x2A	; 42
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	95 83       	std	Z+5, r25	; 0x05
    2338:	84 83       	std	Z+4, r24	; 0x04
    233a:	1f c0       	rjmp	.+62     	; 0x237a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    233c:	6e 30       	cpi	r22, 0x0E	; 14
    233e:	70 f4       	brcc	.+28     	; 0x235c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2340:	83 e2       	ldi	r24, 0x23	; 35
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	85 e2       	ldi	r24, 0x25	; 37
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	93 83       	std	Z+3, r25	; 0x03
    234e:	82 83       	std	Z+2, r24	; 0x02
    2350:	84 e2       	ldi	r24, 0x24	; 36
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	95 83       	std	Z+5, r25	; 0x05
    2356:	84 83       	std	Z+4, r24	; 0x04
    2358:	68 50       	subi	r22, 0x08	; 8
    235a:	0f c0       	rjmp	.+30     	; 0x237a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    235c:	65 31       	cpi	r22, 0x15	; 21
    235e:	98 f4       	brcc	.+38     	; 0x2386 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2360:	86 e2       	ldi	r24, 0x26	; 38
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	88 e2       	ldi	r24, 0x28	; 40
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	93 83       	std	Z+3, r25	; 0x03
    236e:	82 83       	std	Z+2, r24	; 0x02
    2370:	87 e2       	ldi	r24, 0x27	; 39
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	95 83       	std	Z+5, r25	; 0x05
    2376:	84 83       	std	Z+4, r24	; 0x04
    2378:	6e 50       	subi	r22, 0x0E	; 14
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    237e:	88 0f       	add	r24, r24
    2380:	6a 95       	dec	r22
    2382:	ea f7       	brpl	.-6      	; 0x237e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2384:	86 83       	std	Z+6, r24	; 0x06
    2386:	08 95       	ret

00002388 <_ZN16PololuQTRSensors4initEhhh>:
    2388:	a7 e0       	ldi	r26, 0x07	; 7
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ea ec       	ldi	r30, 0xCA	; 202
    238e:	f1 e1       	ldi	r31, 0x11	; 17
    2390:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x1c>
    2394:	8c 01       	movw	r16, r24
    2396:	fc 01       	movw	r30, r24
    2398:	11 82       	std	Z+1, r1	; 0x01
    239a:	10 82       	st	Z, r1
    239c:	13 82       	std	Z+3, r1	; 0x03
    239e:	12 82       	std	Z+2, r1	; 0x02
    23a0:	15 82       	std	Z+5, r1	; 0x05
    23a2:	14 82       	std	Z+4, r1	; 0x04
    23a4:	17 82       	std	Z+7, r1	; 0x07
    23a6:	16 82       	std	Z+6, r1	; 0x06
    23a8:	61 31       	cpi	r22, 0x11	; 17
    23aa:	18 f0       	brcs	.+6      	; 0x23b2 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    23ac:	80 e1       	ldi	r24, 0x10	; 16
    23ae:	80 87       	std	Z+8, r24	; 0x08
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    23b2:	fc 01       	movw	r30, r24
    23b4:	60 87       	std	Z+8, r22	; 0x08
    23b6:	f8 01       	movw	r30, r16
    23b8:	20 8b       	std	Z+16, r18	; 0x10
    23ba:	64 2f       	mov	r22, r20
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	0e 94 87 11 	call	0x230e	; 0x230e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    23c4:	8f 81       	ldd	r24, Y+7	; 0x07
    23c6:	f8 01       	movw	r30, r16
    23c8:	81 87       	std	Z+9, r24	; 0x09
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	93 87       	std	Z+11, r25	; 0x0b
    23d0:	82 87       	std	Z+10, r24	; 0x0a
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	95 87       	std	Z+13, r25	; 0x0d
    23d8:	84 87       	std	Z+12, r24	; 0x0c
    23da:	27 96       	adiw	r28, 0x07	; 7
    23dc:	e4 e0       	ldi	r30, 0x04	; 4
    23de:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x1c>

000023e2 <_ZN16PololuQTRSensors11emittersOffEv>:
    23e2:	fc 01       	movw	r30, r24
    23e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23e8:	10 97       	sbiw	r26, 0x00	; 0
    23ea:	79 f0       	breq	.+30     	; 0x240a <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    23ec:	8c 91       	ld	r24, X
    23ee:	91 85       	ldd	r25, Z+9	; 0x09
    23f0:	89 2b       	or	r24, r25
    23f2:	8c 93       	st	X, r24
    23f4:	a2 85       	ldd	r26, Z+10	; 0x0a
    23f6:	b3 85       	ldd	r27, Z+11	; 0x0b
    23f8:	9c 91       	ld	r25, X
    23fa:	81 85       	ldd	r24, Z+9	; 0x09
    23fc:	80 95       	com	r24
    23fe:	89 23       	and	r24, r25
    2400:	8c 93       	st	X, r24
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay_us>
    240a:	08 95       	ret

0000240c <_ZN16PololuQTRSensors10emittersOnEv>:
    240c:	fc 01       	movw	r30, r24
    240e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2410:	b5 85       	ldd	r27, Z+13	; 0x0d
    2412:	10 97       	sbiw	r26, 0x00	; 0
    2414:	71 f0       	breq	.+28     	; 0x2432 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2416:	8c 91       	ld	r24, X
    2418:	91 85       	ldd	r25, Z+9	; 0x09
    241a:	89 2b       	or	r24, r25
    241c:	8c 93       	st	X, r24
    241e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2420:	b3 85       	ldd	r27, Z+11	; 0x0b
    2422:	8c 91       	ld	r24, X
    2424:	91 85       	ldd	r25, Z+9	; 0x09
    2426:	89 2b       	or	r24, r25
    2428:	8c 93       	st	X, r24
    242a:	88 ec       	ldi	r24, 0xC8	; 200
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay_us>
    2432:	08 95       	ret

00002434 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2434:	a7 e0       	ldi	r26, 0x07	; 7
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e0 e2       	ldi	r30, 0x20	; 32
    243a:	f2 e1       	ldi	r31, 0x12	; 18
    243c:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x6>
    2440:	7c 01       	movw	r14, r24
    2442:	4b 01       	movw	r8, r22
    2444:	64 2f       	mov	r22, r20
    2446:	39 01       	movw	r6, r18
    2448:	40 2f       	mov	r20, r16
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	0e 94 c4 11 	call	0x2388	; 0x2388 <_ZN16PololuQTRSensors4initEhhh>
    2450:	87 01       	movw	r16, r14
    2452:	0f 5b       	subi	r16, 0xBF	; 191
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	f8 01       	movw	r30, r16
    2458:	10 82       	st	Z, r1
    245a:	67 01       	movw	r12, r14
    245c:	f2 e4       	ldi	r31, 0x42	; 66
    245e:	cf 0e       	add	r12, r31
    2460:	d1 1c       	adc	r13, r1
    2462:	f6 01       	movw	r30, r12
    2464:	10 82       	st	Z, r1
    2466:	57 01       	movw	r10, r14
    2468:	f3 e4       	ldi	r31, 0x43	; 67
    246a:	af 0e       	add	r10, r31
    246c:	b1 1c       	adc	r11, r1
    246e:	f5 01       	movw	r30, r10
    2470:	10 82       	st	Z, r1
    2472:	f7 01       	movw	r30, r14
    2474:	77 86       	std	Z+15, r7	; 0x0f
    2476:	66 86       	std	Z+14, r6	; 0x0e
    2478:	51 2c       	mov	r5, r1
    247a:	f7 01       	movw	r30, r14
    247c:	80 85       	ldd	r24, Z+8	; 0x08
    247e:	58 16       	cp	r5, r24
    2480:	50 f5       	brcc	.+84     	; 0x24d6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2482:	65 2c       	mov	r6, r5
    2484:	71 2c       	mov	r7, r1
    2486:	f4 01       	movw	r30, r8
    2488:	e6 0d       	add	r30, r6
    248a:	f7 1d       	adc	r31, r7
    248c:	60 81       	ld	r22, Z
    248e:	ce 01       	movw	r24, r28
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	0e 94 87 11 	call	0x230e	; 0x230e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2496:	2f 81       	ldd	r18, Y+7	; 0x07
    2498:	f7 01       	movw	r30, r14
    249a:	e6 0d       	add	r30, r6
    249c:	f7 1d       	adc	r31, r7
    249e:	21 8b       	std	Z+17, r18	; 0x11
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	f3 01       	movw	r30, r6
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	ee 0d       	add	r30, r14
    24ac:	ff 1d       	adc	r31, r15
    24ae:	92 a3       	std	Z+34, r25	; 0x22
    24b0:	81 a3       	std	Z+33, r24	; 0x21
    24b2:	83 32       	cpi	r24, 0x23	; 35
    24b4:	91 05       	cpc	r25, r1
    24b6:	11 f4       	brne	.+4      	; 0x24bc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    24b8:	f8 01       	movw	r30, r16
    24ba:	08 c0       	rjmp	.+16     	; 0x24cc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    24bc:	86 32       	cpi	r24, 0x26	; 38
    24be:	91 05       	cpc	r25, r1
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    24c2:	f6 01       	movw	r30, r12
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    24c6:	89 97       	sbiw	r24, 0x29	; 41
    24c8:	21 f4       	brne	.+8      	; 0x24d2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    24ca:	f5 01       	movw	r30, r10
    24cc:	80 81       	ld	r24, Z
    24ce:	82 2b       	or	r24, r18
    24d0:	80 83       	st	Z, r24
    24d2:	53 94       	inc	r5
    24d4:	d2 cf       	rjmp	.-92     	; 0x247a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    24d6:	27 96       	adiw	r28, 0x07	; 7
    24d8:	ef e0       	ldi	r30, 0x0F	; 15
    24da:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x6>

000024de <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    24de:	a0 e0       	ldi	r26, 0x00	; 0
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e7       	ldi	r30, 0x75	; 117
    24e4:	f2 e1       	ldi	r31, 0x12	; 18
    24e6:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__prologue_saves__+0xa>
    24ea:	ec 01       	movw	r28, r24
    24ec:	5b 01       	movw	r10, r22
    24ee:	6c 01       	movw	r12, r24
    24f0:	81 e4       	ldi	r24, 0x41	; 65
    24f2:	c8 0e       	add	r12, r24
    24f4:	d1 1c       	adc	r13, r1
    24f6:	f6 01       	movw	r30, r12
    24f8:	80 80       	ld	r8, Z
    24fa:	7e 01       	movw	r14, r28
    24fc:	f2 e4       	ldi	r31, 0x42	; 66
    24fe:	ef 0e       	add	r14, r31
    2500:	f1 1c       	adc	r15, r1
    2502:	f7 01       	movw	r30, r14
    2504:	70 80       	ld	r7, Z
    2506:	8e 01       	movw	r16, r28
    2508:	0d 5b       	subi	r16, 0xBD	; 189
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	f8 01       	movw	r30, r16
    250e:	90 80       	ld	r9, Z
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	98 85       	ldd	r25, Y+8	; 0x08
    2514:	89 17       	cp	r24, r25
    2516:	48 f4       	brcc	.+18     	; 0x252a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2518:	f5 01       	movw	r30, r10
    251a:	e8 0f       	add	r30, r24
    251c:	f1 1d       	adc	r31, r1
    251e:	e8 0f       	add	r30, r24
    2520:	f1 1d       	adc	r31, r1
    2522:	11 82       	std	Z+1, r1	; 0x01
    2524:	10 82       	st	Z, r1
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	f4 cf       	rjmp	.-24     	; 0x2512 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    252a:	84 b1       	in	r24, 0x04	; 4
    252c:	f6 01       	movw	r30, r12
    252e:	90 81       	ld	r25, Z
    2530:	89 2b       	or	r24, r25
    2532:	84 b9       	out	0x04, r24	; 4
    2534:	87 b1       	in	r24, 0x07	; 7
    2536:	f7 01       	movw	r30, r14
    2538:	90 81       	ld	r25, Z
    253a:	89 2b       	or	r24, r25
    253c:	87 b9       	out	0x07, r24	; 7
    253e:	8a b1       	in	r24, 0x0a	; 10
    2540:	f8 01       	movw	r30, r16
    2542:	90 81       	ld	r25, Z
    2544:	89 2b       	or	r24, r25
    2546:	8a b9       	out	0x0a, r24	; 10
    2548:	85 b1       	in	r24, 0x05	; 5
    254a:	f6 01       	movw	r30, r12
    254c:	90 81       	ld	r25, Z
    254e:	89 2b       	or	r24, r25
    2550:	85 b9       	out	0x05, r24	; 5
    2552:	88 b1       	in	r24, 0x08	; 8
    2554:	f7 01       	movw	r30, r14
    2556:	90 81       	ld	r25, Z
    2558:	89 2b       	or	r24, r25
    255a:	88 b9       	out	0x08, r24	; 8
    255c:	8b b1       	in	r24, 0x0b	; 11
    255e:	f8 01       	movw	r30, r16
    2560:	90 81       	ld	r25, Z
    2562:	89 2b       	or	r24, r25
    2564:	8b b9       	out	0x0b, r24	; 11
    2566:	8a e0       	ldi	r24, 0x0A	; 10
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay_us>
    256e:	94 b1       	in	r25, 0x04	; 4
    2570:	f6 01       	movw	r30, r12
    2572:	80 81       	ld	r24, Z
    2574:	80 95       	com	r24
    2576:	89 23       	and	r24, r25
    2578:	84 b9       	out	0x04, r24	; 4
    257a:	97 b1       	in	r25, 0x07	; 7
    257c:	f7 01       	movw	r30, r14
    257e:	80 81       	ld	r24, Z
    2580:	80 95       	com	r24
    2582:	89 23       	and	r24, r25
    2584:	87 b9       	out	0x07, r24	; 7
    2586:	9a b1       	in	r25, 0x0a	; 10
    2588:	f8 01       	movw	r30, r16
    258a:	80 81       	ld	r24, Z
    258c:	80 95       	com	r24
    258e:	89 23       	and	r24, r25
    2590:	8a b9       	out	0x0a, r24	; 10
    2592:	95 b1       	in	r25, 0x05	; 5
    2594:	f6 01       	movw	r30, r12
    2596:	80 81       	ld	r24, Z
    2598:	80 95       	com	r24
    259a:	89 23       	and	r24, r25
    259c:	85 b9       	out	0x05, r24	; 5
    259e:	98 b1       	in	r25, 0x08	; 8
    25a0:	f7 01       	movw	r30, r14
    25a2:	80 81       	ld	r24, Z
    25a4:	80 95       	com	r24
    25a6:	89 23       	and	r24, r25
    25a8:	88 b9       	out	0x08, r24	; 8
    25aa:	9b b1       	in	r25, 0x0b	; 11
    25ac:	f8 01       	movw	r30, r16
    25ae:	80 81       	ld	r24, Z
    25b0:	80 95       	com	r24
    25b2:	89 23       	and	r24, r25
    25b4:	8b b9       	out	0x0b, r24	; 11
    25b6:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25ba:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    25be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25c2:	83 60       	ori	r24, 0x03	; 3
    25c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    25ce:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    25d8:	3f 85       	ldd	r19, Y+15	; 0x0f
    25da:	82 17       	cp	r24, r18
    25dc:	93 07       	cpc	r25, r19
    25de:	20 f5       	brcc	.+72     	; 0x2628 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    25e0:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    25e4:	2c 2d       	mov	r18, r12
    25e6:	24 1b       	sub	r18, r20
    25e8:	82 0f       	add	r24, r18
    25ea:	91 1d       	adc	r25, r1
    25ec:	03 b1       	in	r16, 0x03	; 3
    25ee:	08 11       	cpse	r16, r8
    25f0:	32 c0       	rjmp	.+100    	; 0x2656 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    25f2:	f6 b0       	in	r15, 0x06	; 6
    25f4:	f7 10       	cpse	r15, r7
    25f6:	2f c0       	rjmp	.+94     	; 0x2656 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    25f8:	29 b1       	in	r18, 0x09	; 9
    25fa:	29 11       	cpse	r18, r9
    25fc:	2c c0       	rjmp	.+88     	; 0x2656 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    25fe:	10 c0       	rjmp	.+32     	; 0x2620 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2600:	21 2f       	mov	r18, r17
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	a9 01       	movw	r20, r18
    2606:	44 0f       	add	r20, r20
    2608:	55 1f       	adc	r21, r21
    260a:	f5 01       	movw	r30, r10
    260c:	e4 0f       	add	r30, r20
    260e:	f5 1f       	adc	r31, r21
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	67 2b       	or	r22, r23
    2616:	21 f1       	breq	.+72     	; 0x2660 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2618:	1f 5f       	subi	r17, 0xFF	; 255
    261a:	28 85       	ldd	r18, Y+8	; 0x08
    261c:	12 17       	cp	r17, r18
    261e:	80 f3       	brcs	.-32     	; 0x2600 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2620:	7f 2c       	mov	r7, r15
    2622:	80 2e       	mov	r8, r16
    2624:	4c 2d       	mov	r20, r12
    2626:	d7 cf       	rjmp	.-82     	; 0x25d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2628:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    262c:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	88 85       	ldd	r24, Y+8	; 0x08
    2634:	28 17       	cp	r18, r24
    2636:	30 f5       	brcc	.+76     	; 0x2684 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2638:	f5 01       	movw	r30, r10
    263a:	e2 0f       	add	r30, r18
    263c:	f1 1d       	adc	r31, r1
    263e:	e2 0f       	add	r30, r18
    2640:	f1 1d       	adc	r31, r1
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	89 2b       	or	r24, r25
    2648:	21 f4       	brne	.+8      	; 0x2652 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    264a:	8e 85       	ldd	r24, Y+14	; 0x0e
    264c:	9f 85       	ldd	r25, Y+15	; 0x0f
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	2f 5f       	subi	r18, 0xFF	; 255
    2654:	ee cf       	rjmp	.-36     	; 0x2632 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2656:	03 b1       	in	r16, 0x03	; 3
    2658:	f6 b0       	in	r15, 0x06	; 6
    265a:	99 b0       	in	r9, 0x09	; 9
    265c:	10 e0       	ldi	r17, 0x00	; 0
    265e:	dd cf       	rjmp	.-70     	; 0x261a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2660:	de 01       	movw	r26, r28
    2662:	a4 0f       	add	r26, r20
    2664:	b5 1f       	adc	r27, r21
    2666:	91 96       	adiw	r26, 0x21	; 33
    2668:	0d 90       	ld	r0, X+
    266a:	bc 91       	ld	r27, X
    266c:	a0 2d       	mov	r26, r0
    266e:	4c 91       	ld	r20, X
    2670:	de 01       	movw	r26, r28
    2672:	a2 0f       	add	r26, r18
    2674:	b3 1f       	adc	r27, r19
    2676:	51 96       	adiw	r26, 0x11	; 17
    2678:	2c 91       	ld	r18, X
    267a:	42 23       	and	r20, r18
    267c:	69 f6       	brne	.-102    	; 0x2618 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	80 83       	st	Z, r24
    2682:	ca cf       	rjmp	.-108    	; 0x2618 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	ed e0       	ldi	r30, 0x0D	; 13
    268a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__epilogue_restores__+0xa>

0000268e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    268e:	ef 92       	push	r14
    2690:	ff 92       	push	r15
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	fc 01       	movw	r30, r24
    269c:	9b 01       	movw	r18, r22
    269e:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    26a2:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26a6:	47 b1       	in	r20, 0x07	; 7
    26a8:	18 b1       	in	r17, 0x08	; 8
    26aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26ae:	86 fd       	sbrc	r24, 6
    26b0:	fc cf       	rjmp	.-8      	; 0x26aa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 85       	ldd	r25, Z+8	; 0x08
    26b6:	89 17       	cp	r24, r25
    26b8:	48 f4       	brcc	.+18     	; 0x26cc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    26ba:	d9 01       	movw	r26, r18
    26bc:	a8 0f       	add	r26, r24
    26be:	b1 1d       	adc	r27, r1
    26c0:	a8 0f       	add	r26, r24
    26c2:	b1 1d       	adc	r27, r1
    26c4:	1d 92       	st	X+, r1
    26c6:	1c 92       	st	X, r1
    26c8:	8f 5f       	subi	r24, 0xFF	; 255
    26ca:	f4 cf       	rjmp	.-24     	; 0x26b4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    26cc:	97 b1       	in	r25, 0x07	; 7
    26ce:	82 a1       	ldd	r24, Z+34	; 0x22
    26d0:	80 95       	com	r24
    26d2:	89 23       	and	r24, r25
    26d4:	87 b9       	out	0x07, r24	; 7
    26d6:	98 b1       	in	r25, 0x08	; 8
    26d8:	82 a1       	ldd	r24, Z+34	; 0x22
    26da:	80 95       	com	r24
    26dc:	89 23       	and	r24, r25
    26de:	88 b9       	out	0x08, r24	; 8
    26e0:	87 e8       	ldi	r24, 0x87	; 135
    26e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26e6:	e1 2c       	mov	r14, r1
    26e8:	81 a1       	ldd	r24, Z+33	; 0x21
    26ea:	e8 16       	cp	r14, r24
    26ec:	10 f0       	brcs	.+4      	; 0x26f2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    26ee:	e1 2c       	mov	r14, r1
    26f0:	29 c0       	rjmp	.+82     	; 0x2744 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	80 85       	ldd	r24, Z+8	; 0x08
    26f6:	58 17       	cp	r21, r24
    26f8:	18 f5       	brcc	.+70     	; 0x2740 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    26fa:	a5 2f       	mov	r26, r21
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ef 01       	movw	r28, r30
    2700:	ca 0f       	add	r28, r26
    2702:	db 1f       	adc	r29, r27
    2704:	89 89       	ldd	r24, Y+17	; 0x11
    2706:	80 64       	ori	r24, 0x40	; 64
    2708:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    270c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2710:	80 64       	ori	r24, 0x40	; 64
    2712:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2716:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    271a:	86 fd       	sbrc	r24, 6
    271c:	fc cf       	rjmp	.-8      	; 0x2716 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    271e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2722:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2726:	aa 0f       	add	r26, r26
    2728:	bb 1f       	adc	r27, r27
    272a:	a2 0f       	add	r26, r18
    272c:	b3 1f       	adc	r27, r19
    272e:	8d 91       	ld	r24, X+
    2730:	9c 91       	ld	r25, X
    2732:	11 97       	sbiw	r26, 0x01	; 1
    2734:	86 0f       	add	r24, r22
    2736:	97 1f       	adc	r25, r23
    2738:	8d 93       	st	X+, r24
    273a:	9c 93       	st	X, r25
    273c:	5f 5f       	subi	r21, 0xFF	; 255
    273e:	da cf       	rjmp	.-76     	; 0x26f4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2740:	e3 94       	inc	r14
    2742:	d2 cf       	rjmp	.-92     	; 0x26e8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2744:	80 85       	ldd	r24, Z+8	; 0x08
    2746:	e8 16       	cp	r14, r24
    2748:	a0 f4       	brcc	.+40     	; 0x2772 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    274a:	e9 01       	movw	r28, r18
    274c:	ce 0d       	add	r28, r14
    274e:	d1 1d       	adc	r29, r1
    2750:	ce 0d       	add	r28, r14
    2752:	d1 1d       	adc	r29, r1
    2754:	61 a1       	ldd	r22, Z+33	; 0x21
    2756:	70 e0       	ldi	r23, 0x00	; 0
    2758:	cb 01       	movw	r24, r22
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	a8 81       	ld	r26, Y
    2760:	b9 81       	ldd	r27, Y+1	; 0x01
    2762:	8a 0f       	add	r24, r26
    2764:	9b 1f       	adc	r25, r27
    2766:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    276a:	79 83       	std	Y+1, r23	; 0x01
    276c:	68 83       	st	Y, r22
    276e:	e3 94       	inc	r14
    2770:	e9 cf       	rjmp	.-46     	; 0x2744 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2772:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2776:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    277a:	18 b9       	out	0x08, r17	; 8
    277c:	47 b9       	out	0x07, r20	; 7
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	e6 e0       	ldi	r30, 0x06	; 6
    2784:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__+0x18>

00002788 <_ZN16PololuQTRSensors4readEPjh>:
    2788:	a0 e2       	ldi	r26, 0x20	; 32
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	ea ec       	ldi	r30, 0xCA	; 202
    278e:	f3 e1       	ldi	r31, 0x13	; 19
    2790:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x16>
    2794:	8c 01       	movw	r16, r24
    2796:	7b 01       	movw	r14, r22
    2798:	d4 2e       	mov	r13, r20
    279a:	8f ef       	ldi	r24, 0xFF	; 255
    279c:	84 0f       	add	r24, r20
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	18 f4       	brcc	.+6      	; 0x27a8 <_ZN16PololuQTRSensors4readEPjh+0x20>
    27a2:	c8 01       	movw	r24, r16
    27a4:	0e 94 06 12 	call	0x240c	; 0x240c <_ZN16PololuQTRSensors10emittersOnEv>
    27a8:	d8 01       	movw	r26, r16
    27aa:	50 96       	adiw	r26, 0x10	; 16
    27ac:	8c 91       	ld	r24, X
    27ae:	b7 01       	movw	r22, r14
    27b0:	81 11       	cpse	r24, r1
    27b2:	10 c0       	rjmp	.+32     	; 0x27d4 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    27b4:	c8 01       	movw	r24, r16
    27b6:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    27ba:	c8 01       	movw	r24, r16
    27bc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN16PololuQTRSensors11emittersOffEv>
    27c0:	b2 e0       	ldi	r27, 0x02	; 2
    27c2:	db 12       	cpse	r13, r27
    27c4:	3a c0       	rjmp	.+116    	; 0x283a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    27c6:	be 01       	movw	r22, r28
    27c8:	6f 5f       	subi	r22, 0xFF	; 255
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	c8 01       	movw	r24, r16
    27ce:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    27d4:	c8 01       	movw	r24, r16
    27d6:	0e 94 47 13 	call	0x268e	; 0x268e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    27da:	c8 01       	movw	r24, r16
    27dc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN16PololuQTRSensors11emittersOffEv>
    27e0:	e2 e0       	ldi	r30, 0x02	; 2
    27e2:	de 12       	cpse	r13, r30
    27e4:	2a c0       	rjmp	.+84     	; 0x283a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    27e6:	be 01       	movw	r22, r28
    27e8:	6f 5f       	subi	r22, 0xFF	; 255
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	c8 01       	movw	r24, r16
    27ee:	0e 94 47 13 	call	0x268e	; 0x268e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	f8 01       	movw	r30, r16
    27f6:	80 85       	ldd	r24, Z+8	; 0x08
    27f8:	48 17       	cp	r20, r24
    27fa:	f8 f4       	brcc	.+62     	; 0x283a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    27fc:	84 2f       	mov	r24, r20
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	f7 01       	movw	r30, r14
    2806:	e8 0f       	add	r30, r24
    2808:	f9 1f       	adc	r31, r25
    280a:	21 e0       	ldi	r18, 0x01	; 1
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	2c 0f       	add	r18, r28
    2810:	3d 1f       	adc	r19, r29
    2812:	82 0f       	add	r24, r18
    2814:	93 1f       	adc	r25, r19
    2816:	d8 01       	movw	r26, r16
    2818:	1e 96       	adiw	r26, 0x0e	; 14
    281a:	2d 91       	ld	r18, X+
    281c:	3c 91       	ld	r19, X
    281e:	1f 97       	sbiw	r26, 0x0f	; 15
    2820:	dc 01       	movw	r26, r24
    2822:	8d 91       	ld	r24, X+
    2824:	9c 91       	ld	r25, X
    2826:	28 1b       	sub	r18, r24
    2828:	39 0b       	sbc	r19, r25
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	82 0f       	add	r24, r18
    2830:	93 1f       	adc	r25, r19
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	4f 5f       	subi	r20, 0xFF	; 255
    2838:	dd cf       	rjmp	.-70     	; 0x27f4 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    283a:	a0 96       	adiw	r28, 0x20	; 32
    283c:	e7 e0       	ldi	r30, 0x07	; 7
    283e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x16>

00002842 <_ZN16PololuQTRSensorsD1Ev>:
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	ec 01       	movw	r28, r24
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	9b 81       	ldd	r25, Y+3	; 0x03
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	11 f0       	breq	.+4      	; 0x2854 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2850:	0e 94 98 15 	call	0x2b30	; 0x2b30 <free>
    2854:	8e 81       	ldd	r24, Y+6	; 0x06
    2856:	9f 81       	ldd	r25, Y+7	; 0x07
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	11 f0       	breq	.+4      	; 0x2860 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    285c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <free>
    2860:	88 81       	ld	r24, Y
    2862:	99 81       	ldd	r25, Y+1	; 0x01
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	11 f0       	breq	.+4      	; 0x286c <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2868:	0e 94 98 15 	call	0x2b30	; 0x2b30 <free>
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	11 f0       	breq	.+4      	; 0x2878 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2874:	0e 94 98 15 	call	0x2b30	; 0x2b30 <free>
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <__udivmodqi4>:
    287e:	99 1b       	sub	r25, r25
    2880:	79 e0       	ldi	r23, 0x09	; 9
    2882:	04 c0       	rjmp	.+8      	; 0x288c <__udivmodqi4_ep>

00002884 <__udivmodqi4_loop>:
    2884:	99 1f       	adc	r25, r25
    2886:	96 17       	cp	r25, r22
    2888:	08 f0       	brcs	.+2      	; 0x288c <__udivmodqi4_ep>
    288a:	96 1b       	sub	r25, r22

0000288c <__udivmodqi4_ep>:
    288c:	88 1f       	adc	r24, r24
    288e:	7a 95       	dec	r23
    2890:	c9 f7       	brne	.-14     	; 0x2884 <__udivmodqi4_loop>
    2892:	80 95       	com	r24
    2894:	08 95       	ret

00002896 <__udivmodhi4>:
    2896:	aa 1b       	sub	r26, r26
    2898:	bb 1b       	sub	r27, r27
    289a:	51 e1       	ldi	r21, 0x11	; 17
    289c:	07 c0       	rjmp	.+14     	; 0x28ac <__udivmodhi4_ep>

0000289e <__udivmodhi4_loop>:
    289e:	aa 1f       	adc	r26, r26
    28a0:	bb 1f       	adc	r27, r27
    28a2:	a6 17       	cp	r26, r22
    28a4:	b7 07       	cpc	r27, r23
    28a6:	10 f0       	brcs	.+4      	; 0x28ac <__udivmodhi4_ep>
    28a8:	a6 1b       	sub	r26, r22
    28aa:	b7 0b       	sbc	r27, r23

000028ac <__udivmodhi4_ep>:
    28ac:	88 1f       	adc	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	5a 95       	dec	r21
    28b2:	a9 f7       	brne	.-22     	; 0x289e <__udivmodhi4_loop>
    28b4:	80 95       	com	r24
    28b6:	90 95       	com	r25
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	08 95       	ret

000028be <__divmodhi4>:
    28be:	97 fb       	bst	r25, 7
    28c0:	07 2e       	mov	r0, r23
    28c2:	16 f4       	brtc	.+4      	; 0x28c8 <__divmodhi4+0xa>
    28c4:	00 94       	com	r0
    28c6:	07 d0       	rcall	.+14     	; 0x28d6 <__divmodhi4_neg1>
    28c8:	77 fd       	sbrc	r23, 7
    28ca:	09 d0       	rcall	.+18     	; 0x28de <__divmodhi4_neg2>
    28cc:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodhi4>
    28d0:	07 fc       	sbrc	r0, 7
    28d2:	05 d0       	rcall	.+10     	; 0x28de <__divmodhi4_neg2>
    28d4:	3e f4       	brtc	.+14     	; 0x28e4 <__divmodhi4_exit>

000028d6 <__divmodhi4_neg1>:
    28d6:	90 95       	com	r25
    28d8:	81 95       	neg	r24
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	08 95       	ret

000028de <__divmodhi4_neg2>:
    28de:	70 95       	com	r23
    28e0:	61 95       	neg	r22
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255

000028e4 <__divmodhi4_exit>:
    28e4:	08 95       	ret

000028e6 <__udivmodsi4>:
    28e6:	a1 e2       	ldi	r26, 0x21	; 33
    28e8:	1a 2e       	mov	r1, r26
    28ea:	aa 1b       	sub	r26, r26
    28ec:	bb 1b       	sub	r27, r27
    28ee:	fd 01       	movw	r30, r26
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <__udivmodsi4_ep>

000028f2 <__udivmodsi4_loop>:
    28f2:	aa 1f       	adc	r26, r26
    28f4:	bb 1f       	adc	r27, r27
    28f6:	ee 1f       	adc	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	a2 17       	cp	r26, r18
    28fc:	b3 07       	cpc	r27, r19
    28fe:	e4 07       	cpc	r30, r20
    2900:	f5 07       	cpc	r31, r21
    2902:	20 f0       	brcs	.+8      	; 0x290c <__udivmodsi4_ep>
    2904:	a2 1b       	sub	r26, r18
    2906:	b3 0b       	sbc	r27, r19
    2908:	e4 0b       	sbc	r30, r20
    290a:	f5 0b       	sbc	r31, r21

0000290c <__udivmodsi4_ep>:
    290c:	66 1f       	adc	r22, r22
    290e:	77 1f       	adc	r23, r23
    2910:	88 1f       	adc	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	1a 94       	dec	r1
    2916:	69 f7       	brne	.-38     	; 0x28f2 <__udivmodsi4_loop>
    2918:	60 95       	com	r22
    291a:	70 95       	com	r23
    291c:	80 95       	com	r24
    291e:	90 95       	com	r25
    2920:	9b 01       	movw	r18, r22
    2922:	ac 01       	movw	r20, r24
    2924:	bd 01       	movw	r22, r26
    2926:	cf 01       	movw	r24, r30
    2928:	08 95       	ret

0000292a <__divmodsi4>:
    292a:	05 2e       	mov	r0, r21
    292c:	97 fb       	bst	r25, 7
    292e:	1e f4       	brtc	.+6      	; 0x2936 <__divmodsi4+0xc>
    2930:	00 94       	com	r0
    2932:	0e 94 ac 14 	call	0x2958	; 0x2958 <__negsi2>
    2936:	57 fd       	sbrc	r21, 7
    2938:	07 d0       	rcall	.+14     	; 0x2948 <__divmodsi4_neg2>
    293a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__udivmodsi4>
    293e:	07 fc       	sbrc	r0, 7
    2940:	03 d0       	rcall	.+6      	; 0x2948 <__divmodsi4_neg2>
    2942:	4e f4       	brtc	.+18     	; 0x2956 <__divmodsi4_exit>
    2944:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__negsi2>

00002948 <__divmodsi4_neg2>:
    2948:	50 95       	com	r21
    294a:	40 95       	com	r20
    294c:	30 95       	com	r19
    294e:	21 95       	neg	r18
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
    2952:	4f 4f       	sbci	r20, 0xFF	; 255
    2954:	5f 4f       	sbci	r21, 0xFF	; 255

00002956 <__divmodsi4_exit>:
    2956:	08 95       	ret

00002958 <__negsi2>:
    2958:	90 95       	com	r25
    295a:	80 95       	com	r24
    295c:	70 95       	com	r23
    295e:	61 95       	neg	r22
    2960:	7f 4f       	sbci	r23, 0xFF	; 255
    2962:	8f 4f       	sbci	r24, 0xFF	; 255
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	08 95       	ret

00002968 <__tablejump2__>:
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	05 90       	lpm	r0, Z+
    296e:	f4 91       	lpm	r31, Z
    2970:	e0 2d       	mov	r30, r0
    2972:	09 94       	ijmp

00002974 <__umulhisi3>:
    2974:	a2 9f       	mul	r26, r18
    2976:	b0 01       	movw	r22, r0
    2978:	b3 9f       	mul	r27, r19
    297a:	c0 01       	movw	r24, r0
    297c:	a3 9f       	mul	r26, r19
    297e:	70 0d       	add	r23, r0
    2980:	81 1d       	adc	r24, r1
    2982:	11 24       	eor	r1, r1
    2984:	91 1d       	adc	r25, r1
    2986:	b2 9f       	mul	r27, r18
    2988:	70 0d       	add	r23, r0
    298a:	81 1d       	adc	r24, r1
    298c:	11 24       	eor	r1, r1
    298e:	91 1d       	adc	r25, r1
    2990:	08 95       	ret

00002992 <__prologue_saves__>:
    2992:	2f 92       	push	r2
    2994:	3f 92       	push	r3
    2996:	4f 92       	push	r4
    2998:	5f 92       	push	r5
    299a:	6f 92       	push	r6
    299c:	7f 92       	push	r7
    299e:	8f 92       	push	r8
    29a0:	9f 92       	push	r9
    29a2:	af 92       	push	r10
    29a4:	bf 92       	push	r11
    29a6:	cf 92       	push	r12
    29a8:	df 92       	push	r13
    29aa:	ef 92       	push	r14
    29ac:	ff 92       	push	r15
    29ae:	0f 93       	push	r16
    29b0:	1f 93       	push	r17
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	ca 1b       	sub	r28, r26
    29bc:	db 0b       	sbc	r29, r27
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	09 94       	ijmp

000029ca <__epilogue_restores__>:
    29ca:	2a 88       	ldd	r2, Y+18	; 0x12
    29cc:	39 88       	ldd	r3, Y+17	; 0x11
    29ce:	48 88       	ldd	r4, Y+16	; 0x10
    29d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    29d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    29da:	aa 84       	ldd	r10, Y+10	; 0x0a
    29dc:	b9 84       	ldd	r11, Y+9	; 0x09
    29de:	c8 84       	ldd	r12, Y+8	; 0x08
    29e0:	df 80       	ldd	r13, Y+7	; 0x07
    29e2:	ee 80       	ldd	r14, Y+6	; 0x06
    29e4:	fd 80       	ldd	r15, Y+5	; 0x05
    29e6:	0c 81       	ldd	r16, Y+4	; 0x04
    29e8:	1b 81       	ldd	r17, Y+3	; 0x03
    29ea:	aa 81       	ldd	r26, Y+2	; 0x02
    29ec:	b9 81       	ldd	r27, Y+1	; 0x01
    29ee:	ce 0f       	add	r28, r30
    29f0:	d1 1d       	adc	r29, r1
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	ed 01       	movw	r28, r26
    29fe:	08 95       	ret

00002a00 <malloc>:
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	82 30       	cpi	r24, 0x02	; 2
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	10 f4       	brcc	.+4      	; 0x2a12 <malloc+0x12>
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	e0 91 1c 06 	lds	r30, 0x061C	; 0x80061c <__flp>
    2a16:	f0 91 1d 06 	lds	r31, 0x061D	; 0x80061d <__flp+0x1>
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	30 97       	sbiw	r30, 0x00	; 0
    2a24:	19 f1       	breq	.+70     	; 0x2a6c <malloc+0x6c>
    2a26:	40 81       	ld	r20, Z
    2a28:	51 81       	ldd	r21, Z+1	; 0x01
    2a2a:	02 81       	ldd	r16, Z+2	; 0x02
    2a2c:	13 81       	ldd	r17, Z+3	; 0x03
    2a2e:	48 17       	cp	r20, r24
    2a30:	59 07       	cpc	r21, r25
    2a32:	c8 f0       	brcs	.+50     	; 0x2a66 <malloc+0x66>
    2a34:	84 17       	cp	r24, r20
    2a36:	95 07       	cpc	r25, r21
    2a38:	69 f4       	brne	.+26     	; 0x2a54 <malloc+0x54>
    2a3a:	10 97       	sbiw	r26, 0x00	; 0
    2a3c:	31 f0       	breq	.+12     	; 0x2a4a <malloc+0x4a>
    2a3e:	12 96       	adiw	r26, 0x02	; 2
    2a40:	0c 93       	st	X, r16
    2a42:	12 97       	sbiw	r26, 0x02	; 2
    2a44:	13 96       	adiw	r26, 0x03	; 3
    2a46:	1c 93       	st	X, r17
    2a48:	27 c0       	rjmp	.+78     	; 0x2a98 <malloc+0x98>
    2a4a:	00 93 1c 06 	sts	0x061C, r16	; 0x80061c <__flp>
    2a4e:	10 93 1d 06 	sts	0x061D, r17	; 0x80061d <__flp+0x1>
    2a52:	22 c0       	rjmp	.+68     	; 0x2a98 <malloc+0x98>
    2a54:	21 15       	cp	r18, r1
    2a56:	31 05       	cpc	r19, r1
    2a58:	19 f0       	breq	.+6      	; 0x2a60 <malloc+0x60>
    2a5a:	42 17       	cp	r20, r18
    2a5c:	53 07       	cpc	r21, r19
    2a5e:	18 f4       	brcc	.+6      	; 0x2a66 <malloc+0x66>
    2a60:	9a 01       	movw	r18, r20
    2a62:	bd 01       	movw	r22, r26
    2a64:	ef 01       	movw	r28, r30
    2a66:	df 01       	movw	r26, r30
    2a68:	f8 01       	movw	r30, r16
    2a6a:	db cf       	rjmp	.-74     	; 0x2a22 <malloc+0x22>
    2a6c:	21 15       	cp	r18, r1
    2a6e:	31 05       	cpc	r19, r1
    2a70:	f9 f0       	breq	.+62     	; 0x2ab0 <malloc+0xb0>
    2a72:	28 1b       	sub	r18, r24
    2a74:	39 0b       	sbc	r19, r25
    2a76:	24 30       	cpi	r18, 0x04	; 4
    2a78:	31 05       	cpc	r19, r1
    2a7a:	80 f4       	brcc	.+32     	; 0x2a9c <malloc+0x9c>
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	61 15       	cp	r22, r1
    2a82:	71 05       	cpc	r23, r1
    2a84:	21 f0       	breq	.+8      	; 0x2a8e <malloc+0x8e>
    2a86:	fb 01       	movw	r30, r22
    2a88:	93 83       	std	Z+3, r25	; 0x03
    2a8a:	82 83       	std	Z+2, r24	; 0x02
    2a8c:	04 c0       	rjmp	.+8      	; 0x2a96 <malloc+0x96>
    2a8e:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <__flp+0x1>
    2a92:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__flp>
    2a96:	fe 01       	movw	r30, r28
    2a98:	32 96       	adiw	r30, 0x02	; 2
    2a9a:	44 c0       	rjmp	.+136    	; 0x2b24 <malloc+0x124>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	81 93       	st	Z+, r24
    2aa4:	91 93       	st	Z+, r25
    2aa6:	22 50       	subi	r18, 0x02	; 2
    2aa8:	31 09       	sbc	r19, r1
    2aaa:	39 83       	std	Y+1, r19	; 0x01
    2aac:	28 83       	st	Y, r18
    2aae:	3a c0       	rjmp	.+116    	; 0x2b24 <malloc+0x124>
    2ab0:	20 91 1a 06 	lds	r18, 0x061A	; 0x80061a <__brkval>
    2ab4:	30 91 1b 06 	lds	r19, 0x061B	; 0x80061b <__brkval+0x1>
    2ab8:	23 2b       	or	r18, r19
    2aba:	41 f4       	brne	.+16     	; 0x2acc <malloc+0xcc>
    2abc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_start>
    2ac0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_start+0x1>
    2ac4:	30 93 1b 06 	sts	0x061B, r19	; 0x80061b <__brkval+0x1>
    2ac8:	20 93 1a 06 	sts	0x061A, r18	; 0x80061a <__brkval>
    2acc:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_end>
    2ad0:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_end+0x1>
    2ad4:	21 15       	cp	r18, r1
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	41 f4       	brne	.+16     	; 0x2aea <malloc+0xea>
    2ada:	2d b7       	in	r18, 0x3d	; 61
    2adc:	3e b7       	in	r19, 0x3e	; 62
    2ade:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__malloc_margin>
    2ae2:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__malloc_margin+0x1>
    2ae6:	24 1b       	sub	r18, r20
    2ae8:	35 0b       	sbc	r19, r21
    2aea:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <__brkval>
    2aee:	f0 91 1b 06 	lds	r31, 0x061B	; 0x80061b <__brkval+0x1>
    2af2:	e2 17       	cp	r30, r18
    2af4:	f3 07       	cpc	r31, r19
    2af6:	a0 f4       	brcc	.+40     	; 0x2b20 <malloc+0x120>
    2af8:	2e 1b       	sub	r18, r30
    2afa:	3f 0b       	sbc	r19, r31
    2afc:	28 17       	cp	r18, r24
    2afe:	39 07       	cpc	r19, r25
    2b00:	78 f0       	brcs	.+30     	; 0x2b20 <malloc+0x120>
    2b02:	ac 01       	movw	r20, r24
    2b04:	4e 5f       	subi	r20, 0xFE	; 254
    2b06:	5f 4f       	sbci	r21, 0xFF	; 255
    2b08:	24 17       	cp	r18, r20
    2b0a:	35 07       	cpc	r19, r21
    2b0c:	48 f0       	brcs	.+18     	; 0x2b20 <malloc+0x120>
    2b0e:	4e 0f       	add	r20, r30
    2b10:	5f 1f       	adc	r21, r31
    2b12:	50 93 1b 06 	sts	0x061B, r21	; 0x80061b <__brkval+0x1>
    2b16:	40 93 1a 06 	sts	0x061A, r20	; 0x80061a <__brkval>
    2b1a:	81 93       	st	Z+, r24
    2b1c:	91 93       	st	Z+, r25
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <malloc+0x124>
    2b20:	e0 e0       	ldi	r30, 0x00	; 0
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	cf 01       	movw	r24, r30
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	08 95       	ret

00002b30 <free>:
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <free+0xa>
    2b38:	81 c0       	rjmp	.+258    	; 0x2c3c <free+0x10c>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	32 97       	sbiw	r30, 0x02	; 2
    2b3e:	13 82       	std	Z+3, r1	; 0x03
    2b40:	12 82       	std	Z+2, r1	; 0x02
    2b42:	a0 91 1c 06 	lds	r26, 0x061C	; 0x80061c <__flp>
    2b46:	b0 91 1d 06 	lds	r27, 0x061D	; 0x80061d <__flp+0x1>
    2b4a:	10 97       	sbiw	r26, 0x00	; 0
    2b4c:	81 f4       	brne	.+32     	; 0x2b6e <free+0x3e>
    2b4e:	20 81       	ld	r18, Z
    2b50:	31 81       	ldd	r19, Z+1	; 0x01
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	20 91 1a 06 	lds	r18, 0x061A	; 0x80061a <__brkval>
    2b5a:	30 91 1b 06 	lds	r19, 0x061B	; 0x80061b <__brkval+0x1>
    2b5e:	28 17       	cp	r18, r24
    2b60:	39 07       	cpc	r19, r25
    2b62:	51 f5       	brne	.+84     	; 0x2bb8 <free+0x88>
    2b64:	f0 93 1b 06 	sts	0x061B, r31	; 0x80061b <__brkval+0x1>
    2b68:	e0 93 1a 06 	sts	0x061A, r30	; 0x80061a <__brkval>
    2b6c:	67 c0       	rjmp	.+206    	; 0x2c3c <free+0x10c>
    2b6e:	ed 01       	movw	r28, r26
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	ce 17       	cp	r28, r30
    2b76:	df 07       	cpc	r29, r31
    2b78:	40 f4       	brcc	.+16     	; 0x2b8a <free+0x5a>
    2b7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2b7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2b7e:	9e 01       	movw	r18, r28
    2b80:	41 15       	cp	r20, r1
    2b82:	51 05       	cpc	r21, r1
    2b84:	f1 f0       	breq	.+60     	; 0x2bc2 <free+0x92>
    2b86:	ea 01       	movw	r28, r20
    2b88:	f5 cf       	rjmp	.-22     	; 0x2b74 <free+0x44>
    2b8a:	d3 83       	std	Z+3, r29	; 0x03
    2b8c:	c2 83       	std	Z+2, r28	; 0x02
    2b8e:	40 81       	ld	r20, Z
    2b90:	51 81       	ldd	r21, Z+1	; 0x01
    2b92:	84 0f       	add	r24, r20
    2b94:	95 1f       	adc	r25, r21
    2b96:	c8 17       	cp	r28, r24
    2b98:	d9 07       	cpc	r29, r25
    2b9a:	59 f4       	brne	.+22     	; 0x2bb2 <free+0x82>
    2b9c:	88 81       	ld	r24, Y
    2b9e:	99 81       	ldd	r25, Y+1	; 0x01
    2ba0:	84 0f       	add	r24, r20
    2ba2:	95 1f       	adc	r25, r21
    2ba4:	02 96       	adiw	r24, 0x02	; 2
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	93 83       	std	Z+3, r25	; 0x03
    2bb0:	82 83       	std	Z+2, r24	; 0x02
    2bb2:	21 15       	cp	r18, r1
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	29 f4       	brne	.+10     	; 0x2bc2 <free+0x92>
    2bb8:	f0 93 1d 06 	sts	0x061D, r31	; 0x80061d <__flp+0x1>
    2bbc:	e0 93 1c 06 	sts	0x061C, r30	; 0x80061c <__flp>
    2bc0:	3d c0       	rjmp	.+122    	; 0x2c3c <free+0x10c>
    2bc2:	e9 01       	movw	r28, r18
    2bc4:	fb 83       	std	Y+3, r31	; 0x03
    2bc6:	ea 83       	std	Y+2, r30	; 0x02
    2bc8:	49 91       	ld	r20, Y+
    2bca:	59 91       	ld	r21, Y+
    2bcc:	c4 0f       	add	r28, r20
    2bce:	d5 1f       	adc	r29, r21
    2bd0:	ec 17       	cp	r30, r28
    2bd2:	fd 07       	cpc	r31, r29
    2bd4:	61 f4       	brne	.+24     	; 0x2bee <free+0xbe>
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	84 0f       	add	r24, r20
    2bdc:	95 1f       	adc	r25, r21
    2bde:	02 96       	adiw	r24, 0x02	; 2
    2be0:	e9 01       	movw	r28, r18
    2be2:	99 83       	std	Y+1, r25	; 0x01
    2be4:	88 83       	st	Y, r24
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	e0 e0       	ldi	r30, 0x00	; 0
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	12 96       	adiw	r26, 0x02	; 2
    2bf4:	8d 91       	ld	r24, X+
    2bf6:	9c 91       	ld	r25, X
    2bf8:	13 97       	sbiw	r26, 0x03	; 3
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	19 f0       	breq	.+6      	; 0x2c04 <free+0xd4>
    2bfe:	fd 01       	movw	r30, r26
    2c00:	dc 01       	movw	r26, r24
    2c02:	f7 cf       	rjmp	.-18     	; 0x2bf2 <free+0xc2>
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	11 97       	sbiw	r26, 0x01	; 1
    2c0a:	9d 01       	movw	r18, r26
    2c0c:	2e 5f       	subi	r18, 0xFE	; 254
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c10:	82 0f       	add	r24, r18
    2c12:	93 1f       	adc	r25, r19
    2c14:	20 91 1a 06 	lds	r18, 0x061A	; 0x80061a <__brkval>
    2c18:	30 91 1b 06 	lds	r19, 0x061B	; 0x80061b <__brkval+0x1>
    2c1c:	28 17       	cp	r18, r24
    2c1e:	39 07       	cpc	r19, r25
    2c20:	69 f4       	brne	.+26     	; 0x2c3c <free+0x10c>
    2c22:	30 97       	sbiw	r30, 0x00	; 0
    2c24:	29 f4       	brne	.+10     	; 0x2c30 <free+0x100>
    2c26:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <__flp+0x1>
    2c2a:	10 92 1c 06 	sts	0x061C, r1	; 0x80061c <__flp>
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <free+0x104>
    2c30:	13 82       	std	Z+3, r1	; 0x03
    2c32:	12 82       	std	Z+2, r1	; 0x02
    2c34:	b0 93 1b 06 	sts	0x061B, r27	; 0x80061b <__brkval+0x1>
    2c38:	a0 93 1a 06 	sts	0x061A, r26	; 0x80061a <__brkval>
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <__do_global_dtors>:
    2c42:	10 e0       	ldi	r17, 0x00	; 0
    2c44:	c4 e8       	ldi	r28, 0x84	; 132
    2c46:	d0 e0       	ldi	r29, 0x00	; 0
    2c48:	04 c0       	rjmp	.+8      	; 0x2c52 <__do_global_dtors+0x10>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	0e 94 b4 14 	call	0x2968	; 0x2968 <__tablejump2__>
    2c50:	21 96       	adiw	r28, 0x01	; 1
    2c52:	c5 38       	cpi	r28, 0x85	; 133
    2c54:	d1 07       	cpc	r29, r17
    2c56:	c9 f7       	brne	.-14     	; 0x2c4a <__do_global_dtors+0x8>
    2c58:	f8 94       	cli

00002c5a <__stop_program>:
    2c5a:	ff cf       	rjmp	.-2      	; 0x2c5a <__stop_program>
