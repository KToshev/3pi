
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000028a2  00002936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000076f  00800172  00800172  000029a8  2**0
                  ALLOC
  3 .stab         000058bc  00000000  00000000  000029a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007fad  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00010211  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00010254  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000038  00000000  00000000  00010294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001c0f  00000000  00000000  000102cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000099d  00000000  00000000  00011edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000a16  00000000  00000000  00012878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000c4  00000000  00000000  00013290  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b57  00000000  00000000  00013354  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000c00  00000000  00000000  00013eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00014aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__dtors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_13>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	a2 01       	movw	r20, r4
      6a:	9c 01       	movw	r18, r24
      6c:	99 01       	movw	r18, r18
      6e:	92 01       	movw	r18, r4
      70:	ba 01       	movw	r22, r20
      72:	b4 01       	movw	r22, r8
      74:	ae 01       	movw	r20, r28
      76:	a8 01       	movw	r20, r16
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__ctors_start>:
      a6:	70 06       	cpc	r7, r16

000000a8 <__ctors_end>:
      a8:	9d 0f       	add	r25, r29

000000aa <__dtors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e2 ea       	ldi	r30, 0xA2	; 162
      be:	f8 e2       	ldi	r31, 0x28	; 40
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a2 37       	cpi	r26, 0x72	; 114
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	28 e0       	ldi	r18, 0x08	; 8
      ce:	a2 e7       	ldi	r26, 0x72	; 114
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a1 3e       	cpi	r26, 0xE1	; 225
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c4 e5       	ldi	r28, 0x54	; 84
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	04 c0       	rjmp	.+8      	; 0xec <__do_global_ctors+0x10>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__tablejump2__>
      ec:	c3 35       	cpi	r28, 0x53	; 83
      ee:	d1 07       	cpc	r29, r17
      f0:	c9 f7       	brne	.-14     	; 0xe4 <__do_global_ctors+0x8>
      f2:	0e 94 e7 05 	call	0xbce	; 0xbce <main>
      f6:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__do_global_dtors>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <_ZN5Robot14mainRobotLogicEv>:
			
			this->doMenu();
		}
		
		// Our main logic function
		void mainRobotLogic()
      fe:	2f 92       	push	r2
     100:	3f 92       	push	r3
     102:	4f 92       	push	r4
     104:	5f 92       	push	r5
     106:	6f 92       	push	r6
     108:	7f 92       	push	r7
     10a:	8f 92       	push	r8
     10c:	9f 92       	push	r9
     10e:	af 92       	push	r10
     110:	bf 92       	push	r11
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	61 97       	sbiw	r28, 0x11	; 17
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	0f be       	out	0x3f, r0	; 63
     130:	cd bf       	out	0x3d, r28	; 61
     132:	1c 01       	movw	r2, r24
		{
			bool			isLastStep	= false;
     134:	19 8a       	std	Y+17, r1	; 0x11
     136:	2c 01       	movw	r4, r24
     138:	20 e8       	ldi	r18, 0x80	; 128
     13a:	42 0e       	add	r4, r18
     13c:	51 1c       	adc	r5, r1
			set_motors( 0, 0 );
		}
		
		bool is_on_marker()
		{
			read_line_sensors( sensors, IR_EMITTERS_ON );
     13e:	ac 01       	movw	r20, r24
     140:	47 5d       	subi	r20, 0xD7	; 215
     142:	5f 4f       	sbci	r21, 0xFF	; 255
     144:	5c 87       	std	Y+12, r21	; 0x0c
     146:	4b 87       	std	Y+11, r20	; 0x0b
		// Our main logic function
		void mainRobotLogic()
		{
			bool			isLastStep	= false;
			
			while ( position.x != finishPos.x || position.y != finishPos.y || isLastStep )
     148:	d1 01       	movw	r26, r2
     14a:	90 96       	adiw	r26, 0x20	; 32
     14c:	2d 91       	ld	r18, X+
     14e:	3c 91       	ld	r19, X
     150:	91 97       	sbiw	r26, 0x21	; 33
     152:	95 96       	adiw	r26, 0x25	; 37
     154:	8d 91       	ld	r24, X+
     156:	9c 91       	ld	r25, X
     158:	96 97       	sbiw	r26, 0x26	; 38
     15a:	28 17       	cp	r18, r24
     15c:	39 07       	cpc	r19, r25
     15e:	79 f4       	brne	.+30     	; 0x17e <_ZN5Robot14mainRobotLogicEv+0x80>
     160:	92 96       	adiw	r26, 0x22	; 34
     162:	2d 91       	ld	r18, X+
     164:	3c 91       	ld	r19, X
     166:	93 97       	sbiw	r26, 0x23	; 35
     168:	97 96       	adiw	r26, 0x27	; 39
     16a:	8d 91       	ld	r24, X+
     16c:	9c 91       	ld	r25, X
     16e:	98 97       	sbiw	r26, 0x28	; 40
     170:	28 17       	cp	r18, r24
     172:	39 07       	cpc	r19, r25
     174:	21 f4       	brne	.+8      	; 0x17e <_ZN5Robot14mainRobotLogicEv+0x80>
     176:	b9 89       	ldd	r27, Y+17	; 0x11
     178:	bb 23       	and	r27, r27
     17a:	09 f4       	brne	.+2      	; 0x17e <_ZN5Robot14mainRobotLogicEv+0x80>
     17c:	0f c5       	rjmp	.+2590   	; 0xb9c <__stack+0x29d>
     17e:	f1 01       	movw	r30, r2
     180:	05 a0       	ldd	r0, Z+37	; 0x25
     182:	f6 a1       	ldd	r31, Z+38	; 0x26
     184:	e0 2d       	mov	r30, r0
     186:	fe 87       	std	Y+14, r31	; 0x0e
     188:	ed 87       	std	Y+13, r30	; 0x0d
     18a:	d1 01       	movw	r26, r2
     18c:	97 96       	adiw	r26, 0x27	; 39
     18e:	0d 90       	ld	r0, X+
     190:	bc 91       	ld	r27, X
     192:	a0 2d       	mov	r26, r0
     194:	b8 8b       	std	Y+16, r27	; 0x10
     196:	af 87       	std	Y+15, r26	; 0x0f
		}
		
		// Our main logic function
		void mainRobotLogic()
		{
			bool			isLastStep	= false;
     198:	68 94       	set
     19a:	66 24       	eor	r6, r6
     19c:	63 f8       	bld	r6, 3
     19e:	71 2c       	mov	r7, r1
			
			Point2D nextPos( -1, -1 );
			
			for ( int i = 0; i < 8; i++ )
			{
				short x = position.x + childernNodesCoords[i][0];
     1a0:	f1 01       	movw	r30, r2
     1a2:	e0 a0       	ldd	r14, Z+32	; 0x20
     1a4:	f1 a0       	ldd	r15, Z+33	; 0x21
				short y = position.y + childernNodesCoords[i][1];
     1a6:	c2 a0       	ldd	r12, Z+34	; 0x22
     1a8:	d3 a0       	ldd	r13, Z+35	; 0x23
     1aa:	d1 01       	movw	r26, r2
struct Point2D
{
	public:
	Point2D(short inX, short inY)
	: x( inX )
	, y ( inY )
     1ac:	88 24       	eor	r8, r8
     1ae:	8a 94       	dec	r8
     1b0:	99 24       	eor	r9, r9
     1b2:	9a 94       	dec	r9
     1b4:	aa 24       	eor	r10, r10
     1b6:	aa 94       	dec	r10
     1b8:	bb 24       	eor	r11, r11
     1ba:	ba 94       	dec	r11
			
			Point2D nextPos( -1, -1 );
			
			for ( int i = 0; i < 8; i++ )
			{
				short x = position.x + childernNodesCoords[i][0];
     1bc:	8d 91       	ld	r24, X+
     1be:	9c 91       	ld	r25, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	8e 0d       	add	r24, r14
     1c4:	9f 1d       	adc	r25, r15
				short y = position.y + childernNodesCoords[i][1];
				
				if ( x < 0 || x > MAX_ROWS || y < 0 || y > MAX_ROWS || matrix[x][y].isObstacle || matrix[x][y].isVisited )
     1c6:	80 31       	cpi	r24, 0x10	; 16
     1c8:	91 05       	cpc	r25, r1
     1ca:	08 f0       	brcs	.+2      	; 0x1ce <_ZN5Robot14mainRobotLogicEv+0xd0>
     1cc:	6f c0       	rjmp	.+222    	; 0x2ac <_ZN5Robot14mainRobotLogicEv+0x1ae>
			Point2D nextPos( -1, -1 );
			
			for ( int i = 0; i < 8; i++ )
			{
				short x = position.x + childernNodesCoords[i][0];
				short y = position.y + childernNodesCoords[i][1];
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	2d 91       	ld	r18, X+
     1d2:	3c 91       	ld	r19, X
     1d4:	13 97       	sbiw	r26, 0x03	; 3
     1d6:	2c 0d       	add	r18, r12
     1d8:	3d 1d       	adc	r19, r13
				
				if ( x < 0 || x > MAX_ROWS || y < 0 || y > MAX_ROWS || matrix[x][y].isObstacle || matrix[x][y].isVisited )
     1da:	20 31       	cpi	r18, 0x10	; 16
     1dc:	31 05       	cpc	r19, r1
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <_ZN5Robot14mainRobotLogicEv+0xe4>
     1e0:	65 c0       	rjmp	.+202    	; 0x2ac <_ZN5Robot14mainRobotLogicEv+0x1ae>
     1e2:	4f e0       	ldi	r20, 0x0F	; 15
     1e4:	48 9f       	mul	r20, r24
     1e6:	f0 01       	movw	r30, r0
     1e8:	49 9f       	mul	r20, r25
     1ea:	f0 0d       	add	r31, r0
     1ec:	11 24       	eor	r1, r1
     1ee:	e2 0f       	add	r30, r18
     1f0:	f3 1f       	adc	r31, r19
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	ee 0f       	add	r30, r30
     1fc:	ff 1f       	adc	r31, r31
     1fe:	ef 52       	subi	r30, 0x2F	; 47
     200:	fe 4f       	sbci	r31, 0xFE	; 254
     202:	44 81       	ldd	r20, Z+4	; 0x04
     204:	41 11       	cpse	r20, r1
     206:	52 c0       	rjmp	.+164    	; 0x2ac <_ZN5Robot14mainRobotLogicEv+0x1ae>
     208:	5f e0       	ldi	r21, 0x0F	; 15
     20a:	58 9f       	mul	r21, r24
     20c:	f0 01       	movw	r30, r0
     20e:	59 9f       	mul	r21, r25
     210:	f0 0d       	add	r31, r0
     212:	11 24       	eor	r1, r1
     214:	e2 0f       	add	r30, r18
     216:	f3 1f       	adc	r31, r19
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	ef 52       	subi	r30, 0x2F	; 47
     226:	fe 4f       	sbci	r31, 0xFE	; 254
     228:	47 81       	ldd	r20, Z+7	; 0x07
     22a:	41 11       	cpse	r20, r1
     22c:	3f c0       	rjmp	.+126    	; 0x2ac <_ZN5Robot14mainRobotLogicEv+0x1ae>
				{
					continue;
				}
				
				Point2D tempPos(x,y);
				if ( nextPos.x == -1 )
     22e:	6f ef       	ldi	r22, 0xFF	; 255
     230:	a6 16       	cp	r10, r22
     232:	b6 06       	cpc	r11, r22
     234:	c9 f1       	breq	.+114    	; 0x2a8 <_ZN5Robot14mainRobotLogicEv+0x1aa>
				{
					nextPos.x = x;
					nextPos.y = y;	
				}
				else if ( HeuristicDist( nextPos, goalPos ) > HeuristicDist( tempPos, goalPos ) )
     236:	a5 01       	movw	r20, r10
     238:	ed 85       	ldd	r30, Y+13	; 0x0d
     23a:	fe 85       	ldd	r31, Y+14	; 0x0e
     23c:	4e 1b       	sub	r20, r30
     23e:	5f 0b       	sbc	r21, r31
     240:	fa 01       	movw	r30, r20
     242:	ff 23       	and	r31, r31
     244:	24 f4       	brge	.+8      	; 0x24e <_ZN5Robot14mainRobotLogicEv+0x150>
     246:	ee 27       	eor	r30, r30
     248:	ff 27       	eor	r31, r31
     24a:	e4 1b       	sub	r30, r20
     24c:	f5 0b       	sbc	r31, r21
     24e:	b4 01       	movw	r22, r8
     250:	4f 85       	ldd	r20, Y+15	; 0x0f
     252:	58 89       	ldd	r21, Y+16	; 0x10
     254:	64 1b       	sub	r22, r20
     256:	75 0b       	sbc	r23, r21
     258:	ab 01       	movw	r20, r22
     25a:	22 f4       	brpl	.+8      	; 0x264 <_ZN5Robot14mainRobotLogicEv+0x166>
     25c:	44 27       	eor	r20, r20
     25e:	55 27       	eor	r21, r21
     260:	46 1b       	sub	r20, r22
     262:	57 0b       	sbc	r21, r23
     264:	8f 01       	movw	r16, r30
     266:	04 0f       	add	r16, r20
     268:	15 1f       	adc	r17, r21
     26a:	ac 01       	movw	r20, r24
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	46 1b       	sub	r20, r22
     272:	57 0b       	sbc	r21, r23
     274:	fa 01       	movw	r30, r20
     276:	ff 23       	and	r31, r31
     278:	24 f4       	brge	.+8      	; 0x282 <_ZN5Robot14mainRobotLogicEv+0x184>
     27a:	ee 27       	eor	r30, r30
     27c:	ff 27       	eor	r31, r31
     27e:	e4 1b       	sub	r30, r20
     280:	f5 0b       	sbc	r31, r21
     282:	b9 01       	movw	r22, r18
     284:	4f 85       	ldd	r20, Y+15	; 0x0f
     286:	58 89       	ldd	r21, Y+16	; 0x10
     288:	64 1b       	sub	r22, r20
     28a:	75 0b       	sbc	r23, r21
     28c:	ab 01       	movw	r20, r22
     28e:	22 f4       	brpl	.+8      	; 0x298 <_ZN5Robot14mainRobotLogicEv+0x19a>
     290:	44 27       	eor	r20, r20
     292:	55 27       	eor	r21, r21
     294:	46 1b       	sub	r20, r22
     296:	57 0b       	sbc	r21, r23
     298:	4e 0f       	add	r20, r30
     29a:	5f 1f       	adc	r21, r31
     29c:	40 17       	cp	r20, r16
     29e:	51 07       	cpc	r21, r17
     2a0:	2c f4       	brge	.+10     	; 0x2ac <_ZN5Robot14mainRobotLogicEv+0x1ae>
				{
					nextPos = tempPos;
     2a2:	49 01       	movw	r8, r18
     2a4:	5c 01       	movw	r10, r24
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <_ZN5Robot14mainRobotLogicEv+0x1ae>
				
				Point2D tempPos(x,y);
				if ( nextPos.x == -1 )
				{
					nextPos.x = x;
					nextPos.y = y;	
     2a8:	49 01       	movw	r8, r18
				}
				
				Point2D tempPos(x,y);
				if ( nextPos.x == -1 )
				{
					nextPos.x = x;
     2aa:	5c 01       	movw	r10, r24
     2ac:	50 96       	adiw	r26, 0x10	; 16
			//Point2D			nextPos( position.x + getSign(goalPos.x - position.x),
			//position.y + getSign(goalPos.y - position.y) );
			
			Point2D nextPos( -1, -1 );
			
			for ( int i = 0; i < 8; i++ )
     2ae:	a4 15       	cp	r26, r4
     2b0:	b5 05       	cpc	r27, r5
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <_ZN5Robot14mainRobotLogicEv+0x1b8>
     2b4:	83 cf       	rjmp	.-250    	; 0x1bc <_ZN5Robot14mainRobotLogicEv+0xbe>
			{
				count ++;
				nextPos = this->getNextPos( goalPos );
			
				//appropriate next node not found
				if ( nextPos.x == -1 )
     2b6:	5f ef       	ldi	r21, 0xFF	; 255
     2b8:	a5 16       	cp	r10, r21
     2ba:	b5 06       	cpc	r11, r21
     2bc:	b9 f4       	brne	.+46     	; 0x2ec <_ZN5Robot14mainRobotLogicEv+0x1ee>
				{
					//if prevPos == NULL, we are at beginning print impassable matrix
					nextPos = *matrix[ position.x ][ position.y ].parent;
     2be:	6f e0       	ldi	r22, 0x0F	; 15
     2c0:	6e 9d       	mul	r22, r14
     2c2:	f0 01       	movw	r30, r0
     2c4:	6f 9d       	mul	r22, r15
     2c6:	f0 0d       	add	r31, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	ec 0d       	add	r30, r12
     2cc:	fd 1d       	adc	r31, r13
     2ce:	ee 0f       	add	r30, r30
     2d0:	ff 1f       	adc	r31, r31
     2d2:	ee 0f       	add	r30, r30
     2d4:	ff 1f       	adc	r31, r31
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	ef 52       	subi	r30, 0x2F	; 47
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	05 80       	ldd	r0, Z+5	; 0x05
     2e0:	f6 81       	ldd	r31, Z+6	; 0x06
     2e2:	e0 2d       	mov	r30, r0
     2e4:	a0 80       	ld	r10, Z
     2e6:	b1 80       	ldd	r11, Z+1	; 0x01
     2e8:	82 80       	ldd	r8, Z+2	; 0x02
     2ea:	93 80       	ldd	r9, Z+3	; 0x03
		}

		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
     2ec:	d1 01       	movw	r26, r2
     2ee:	90 96       	adiw	r26, 0x20	; 32
     2f0:	8d 91       	ld	r24, X+
     2f2:	9c 91       	ld	r25, X
     2f4:	91 97       	sbiw	r26, 0x21	; 33
     2f6:	75 01       	movw	r14, r10
     2f8:	e8 1a       	sub	r14, r24
     2fa:	f9 0a       	sbc	r15, r25
			short	y			= -startPoint.y + endPoint.y;
     2fc:	92 96       	adiw	r26, 0x22	; 34
     2fe:	8d 91       	ld	r24, X+
     300:	9c 91       	ld	r25, X
     302:	93 97       	sbiw	r26, 0x23	; 35
     304:	f4 01       	movw	r30, r8
     306:	e8 1b       	sub	r30, r24
     308:	f9 0b       	sbc	r31, r25
     30a:	cf 01       	movw	r24, r30
			return false;
		}
		
		int GetRobotAngle()
		{
			switch ( orientation )
     30c:	94 96       	adiw	r26, 0x24	; 36
     30e:	ec 91       	ld	r30, X
     310:	4e 2f       	mov	r20, r30
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	48 30       	cpi	r20, 0x08	; 8
     316:	51 05       	cpc	r21, r1
     318:	38 f5       	brcc	.+78     	; 0x368 <_ZN5Robot14mainRobotLogicEv+0x26a>
     31a:	fa 01       	movw	r30, r20
     31c:	ec 5c       	subi	r30, 0xCC	; 204
     31e:	ff 4f       	sbci	r31, 0xFF	; 255
     320:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__tablejump2__>
			{
				case EOrientation::South:		return -90;
				case EOrientation::SouthEast:	return -45;
     324:	0f 2e       	mov	r0, r31
     326:	f3 ed       	ldi	r31, 0xD3	; 211
     328:	cf 2e       	mov	r12, r31
     32a:	f0 2d       	mov	r31, r0
     32c:	dd 24       	eor	r13, r13
     32e:	da 94       	dec	r13
     330:	27 c0       	rjmp	.+78     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
				case EOrientation::East:		return 0;
     332:	c1 2c       	mov	r12, r1
     334:	d1 2c       	mov	r13, r1
     336:	24 c0       	rjmp	.+72     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
				case EOrientation::NorthEast:	return 45;
     338:	0f 2e       	mov	r0, r31
     33a:	fd e2       	ldi	r31, 0x2D	; 45
     33c:	cf 2e       	mov	r12, r31
     33e:	d1 2c       	mov	r13, r1
     340:	f0 2d       	mov	r31, r0
     342:	1e c0       	rjmp	.+60     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
				case EOrientation::North:		return 90;
     344:	0f 2e       	mov	r0, r31
     346:	fa e5       	ldi	r31, 0x5A	; 90
     348:	cf 2e       	mov	r12, r31
     34a:	d1 2c       	mov	r13, r1
     34c:	f0 2d       	mov	r31, r0
     34e:	18 c0       	rjmp	.+48     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
				case EOrientation::NorthWest:	return 135;
     350:	0f 2e       	mov	r0, r31
     352:	f7 e8       	ldi	r31, 0x87	; 135
     354:	cf 2e       	mov	r12, r31
     356:	f0 2d       	mov	r31, r0
     358:	d1 2c       	mov	r13, r1
     35a:	12 c0       	rjmp	.+36     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
				case EOrientation::West:		return 180;
     35c:	0f 2e       	mov	r0, r31
     35e:	f4 eb       	ldi	r31, 0xB4	; 180
     360:	cf 2e       	mov	r12, r31
     362:	f0 2d       	mov	r31, r0
     364:	d1 2c       	mov	r13, r1
     366:	0c c0       	rjmp	.+24     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
				case EOrientation::SouthWest:
				default:						return 225;
     368:	0f 2e       	mov	r0, r31
     36a:	f1 ee       	ldi	r31, 0xE1	; 225
     36c:	cf 2e       	mov	r12, r31
     36e:	f0 2d       	mov	r31, r0
     370:	d1 2c       	mov	r13, r1
     372:	06 c0       	rjmp	.+12     	; 0x380 <_ZN5Robot14mainRobotLogicEv+0x282>
		
		int GetRobotAngle()
		{
			switch ( orientation )
			{
				case EOrientation::South:		return -90;
     374:	0f 2e       	mov	r0, r31
     376:	f6 ea       	ldi	r31, 0xA6	; 166
     378:	cf 2e       	mov	r12, r31
     37a:	f0 2d       	mov	r31, r0
     37c:	dd 24       	eor	r13, r13
     37e:	da 94       	dec	r13
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
			int		direction	= 0;
			int		robotAngle	= GetRobotAngle();
			
			if ( x == 0 )
     380:	e1 14       	cp	r14, r1
     382:	f1 04       	cpc	r15, r1
     384:	41 f4       	brne	.+16     	; 0x396 <_ZN5Robot14mainRobotLogicEv+0x298>
			{
				if ( y > 0 )
     386:	18 16       	cp	r1, r24
     388:	19 06       	cpc	r1, r25
     38a:	24 f1       	brlt	.+72     	; 0x3d4 <_ZN5Robot14mainRobotLogicEv+0x2d6>
				{
					angle = 90;
				}
				else if( y < 0 )
     38c:	99 23       	and	r25, r25
     38e:	2c f5       	brge	.+74     	; 0x3da <_ZN5Robot14mainRobotLogicEv+0x2dc>
				{
					angle = -90;
     390:	06 ea       	ldi	r16, 0xA6	; 166
     392:	1f ef       	ldi	r17, 0xFF	; 255
     394:	24 c0       	rjmp	.+72     	; 0x3de <_ZN5Robot14mainRobotLogicEv+0x2e0>
				}
			}
			else
			{
				angle = (int)(atan(y/x)* 180 / PI);
     396:	b7 01       	movw	r22, r14
     398:	0e 94 82 12 	call	0x2504	; 0x2504 <__divmodhi4>
     39c:	07 2e       	mov	r0, r23
     39e:	00 0c       	add	r0, r0
     3a0:	88 0b       	sbc	r24, r24
     3a2:	99 0b       	sbc	r25, r25
     3a4:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     3a8:	0e 94 87 06 	call	0xd0e	; 0xd0e <atan>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	44 e3       	ldi	r20, 0x34	; 52
     3b2:	53 e4       	ldi	r21, 0x43	; 67
     3b4:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     3b8:	2b ed       	ldi	r18, 0xDB	; 219
     3ba:	3f e0       	ldi	r19, 0x0F	; 15
     3bc:	49 e4       	ldi	r20, 0x49	; 73
     3be:	50 e4       	ldi	r21, 0x40	; 64
     3c0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__divsf3>
     3c4:	0e 94 28 07 	call	0xe50	; 0xe50 <__fixsfsi>
     3c8:	8b 01       	movw	r16, r22
				
				if ( x < 0 )
     3ca:	ff 20       	and	r15, r15
     3cc:	44 f4       	brge	.+16     	; 0x3de <_ZN5Robot14mainRobotLogicEv+0x2e0>
				{
					angle += 180;
     3ce:	0c 54       	subi	r16, 0x4C	; 76
     3d0:	1f 4f       	sbci	r17, 0xFF	; 255
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <_ZN5Robot14mainRobotLogicEv+0x2e0>
			
			if ( x == 0 )
			{
				if ( y > 0 )
				{
					angle = 90;
     3d4:	0a e5       	ldi	r16, 0x5A	; 90
     3d6:	10 e0       	ldi	r17, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <_ZN5Robot14mainRobotLogicEv+0x2e0>
		//1,2,3,4 clockwise, -1,-2,-3,-4 anticlockwise
		void SetDirection(Point2D startPoint, Point2D endPoint)
		{
			short	x			= -startPoint.x + endPoint.x;
			short	y			= -startPoint.y + endPoint.y;
			int		angle		= 0;
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
				{
					angle += 180;
				}
			}
			
			direction = (int)(round((robotAngle - angle)/45));
     3de:	c6 01       	movw	r24, r12
     3e0:	80 1b       	sub	r24, r16
     3e2:	91 0b       	sbc	r25, r17
     3e4:	6d e2       	ldi	r22, 0x2D	; 45
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	0e 94 82 12 	call	0x2504	; 0x2504 <__divmodhi4>
     3ec:	07 2e       	mov	r0, r23
     3ee:	00 0c       	add	r0, r0
     3f0:	88 0b       	sbc	r24, r24
     3f2:	99 0b       	sbc	r25, r25
     3f4:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     3f8:	0e 94 88 08 	call	0x1110	; 0x1110 <round>
     3fc:	0e 94 28 07 	call	0xe50	; 0xe50 <__fixsfsi>
     400:	7b 01       	movw	r14, r22
			
			if ( direction > 4 )
     402:	65 30       	cpi	r22, 0x05	; 5
     404:	71 05       	cpc	r23, r1
     406:	1c f0       	brlt	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			{
				direction = -8 + direction;
     408:	28 e0       	ldi	r18, 0x08	; 8
     40a:	e2 1a       	sub	r14, r18
     40c:	f1 08       	sbc	r15, r1
			}
			
			if ( direction < -4 )
     40e:	3c ef       	ldi	r19, 0xFC	; 252
     410:	e3 16       	cp	r14, r19
     412:	3f ef       	ldi	r19, 0xFF	; 255
     414:	f3 06       	cpc	r15, r19
     416:	1c f4       	brge	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			{
				direction = 8 + direction;
     418:	48 e0       	ldi	r20, 0x08	; 8
     41a:	e4 0e       	add	r14, r20
     41c:	f1 1c       	adc	r15, r1
			}
			
			clear();
     41e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear>
			print_long( direction );
     422:	b7 01       	movw	r22, r14
     424:	0f 2c       	mov	r0, r15
     426:	00 0c       	add	r0, r0
     428:	88 0b       	sbc	r24, r24
     42a:	99 0b       	sbc	r25, r25
     42c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <print_long>
			lcd_goto_xy( 0, 1 );
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <lcd_goto_xy>
			print_long( angle );
     438:	b8 01       	movw	r22, r16
     43a:	01 2e       	mov	r0, r17
     43c:	00 0c       	add	r0, r0
     43e:	88 0b       	sbc	r24, r24
     440:	99 0b       	sbc	r25, r25
     442:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <print_long>
			}
		}

		void SetDeviceOrientation(int angle)
		{
			switch( angle )
     446:	0d 32       	cpi	r16, 0x2D	; 45
     448:	11 05       	cpc	r17, r1
     44a:	49 f1       	breq	.+82     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     44c:	5c f4       	brge	.+22     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     44e:	03 3d       	cpi	r16, 0xD3	; 211
     450:	5f ef       	ldi	r21, 0xFF	; 255
     452:	15 07       	cpc	r17, r21
     454:	d9 f0       	breq	.+54     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     456:	01 15       	cp	r16, r1
     458:	11 05       	cpc	r17, r1
     45a:	e1 f0       	breq	.+56     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     45c:	06 3a       	cpi	r16, 0xA6	; 166
     45e:	1f 4f       	sbci	r17, 0xFF	; 255
     460:	99 f5       	brne	.+102    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     462:	0f c0       	rjmp	.+30     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     464:	07 38       	cpi	r16, 0x87	; 135
     466:	11 05       	cpc	r17, r1
     468:	11 f1       	breq	.+68     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     46a:	24 f4       	brge	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     46c:	0a 35       	cpi	r16, 0x5A	; 90
     46e:	11 05       	cpc	r17, r1
     470:	d1 f0       	breq	.+52     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     472:	2a c0       	rjmp	.+84     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     474:	04 3b       	cpi	r16, 0xB4	; 180
     476:	11 05       	cpc	r17, r1
     478:	f1 f0       	breq	.+60     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     47a:	01 3e       	cpi	r16, 0xE1	; 225
     47c:	11 05       	cpc	r17, r1
     47e:	01 f1       	breq	.+64     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     480:	23 c0       	rjmp	.+70     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			{
				case -90:	orientation = EOrientation::South;		break;
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	d1 01       	movw	r26, r2
     486:	94 96       	adiw	r26, 0x24	; 36
     488:	8c 93       	st	X, r24
     48a:	1e c0       	rjmp	.+60     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case -45:	orientation = EOrientation::SouthEast;	break;
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	f1 01       	movw	r30, r2
     490:	84 a3       	std	Z+36, r24	; 0x24
     492:	1a c0       	rjmp	.+52     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case 0:		orientation = EOrientation::East;		break;
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	d1 01       	movw	r26, r2
     498:	94 96       	adiw	r26, 0x24	; 36
     49a:	8c 93       	st	X, r24
     49c:	15 c0       	rjmp	.+42     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case 45:	orientation = EOrientation::NorthEast;	break;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	f1 01       	movw	r30, r2
     4a2:	84 a3       	std	Z+36, r24	; 0x24
     4a4:	11 c0       	rjmp	.+34     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case 90:	orientation = EOrientation::North;		break;
     4a6:	d1 01       	movw	r26, r2
     4a8:	94 96       	adiw	r26, 0x24	; 36
     4aa:	1c 92       	st	X, r1
     4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case 135:	orientation = EOrientation::NorthWest;	break;
     4ae:	27 e0       	ldi	r18, 0x07	; 7
     4b0:	f1 01       	movw	r30, r2
     4b2:	24 a3       	std	Z+36, r18	; 0x24
     4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case 180:	orientation = EOrientation::West;		break;
     4b6:	e6 e0       	ldi	r30, 0x06	; 6
     4b8:	d1 01       	movw	r26, r2
     4ba:	94 96       	adiw	r26, 0x24	; 36
     4bc:	ec 93       	st	X, r30
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				case 225:	orientation = EOrientation::SouthWest;	break;
     4c0:	85 e0       	ldi	r24, 0x05	; 5
     4c2:	d1 01       	movw	r26, r2
     4c4:	94 96       	adiw	r26, 0x24	; 36
     4c6:	8c 93       	st	X, r24
			lcd_goto_xy( 0, 1 );
			print_long( angle );
			//delay_ms(1000);
			
			SetDeviceOrientation( angle );
			if ( direction < 0 )
     4c8:	ff 20       	and	r15, r15
     4ca:	ec f4       	brge	.+58     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     4cc:	6a e2       	ldi	r22, 0x2A	; 42
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	86 ed       	ldi	r24, 0xD6	; 214
     4d2:	9f ef       	ldi	r25, 0xFF	; 255
     4d4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
			delay_ms( 200 * cnt );
     4d8:	c7 01       	movw	r24, r14
     4da:	99 23       	and	r25, r25
     4dc:	24 f4       	brge	.+8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4de:	88 27       	eor	r24, r24
     4e0:	99 27       	eor	r25, r25
     4e2:	8e 19       	sub	r24, r14
     4e4:	9f 09       	sbc	r25, r15
     4e6:	28 ec       	ldi	r18, 0xC8	; 200
     4e8:	fc 01       	movw	r30, r24
     4ea:	2e 9f       	mul	r18, r30
     4ec:	c0 01       	movw	r24, r0
     4ee:	2f 9f       	mul	r18, r31
     4f0:	90 0d       	add	r25, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
			
			set_motors( 0, 0 );
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
     504:	1f c0       	rjmp	.+62     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			if ( direction < 0 )
			{
				//turn left
				turn_half_left( abs( direction ) );
			}
			else if ( direction > 0 )
     506:	1e 14       	cp	r1, r14
     508:	1f 04       	cpc	r1, r15
     50a:	e4 f4       	brge	.+56     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
		}
		
	protected:
		void make_turn(short left_speed, short right_speed, short cnt)
		{
			set_motors( left_speed, right_speed );
     50c:	66 ed       	ldi	r22, 0xD6	; 214
     50e:	7f ef       	ldi	r23, 0xFF	; 255
     510:	8a e2       	ldi	r24, 0x2A	; 42
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
			delay_ms( 200 * cnt );
     518:	c7 01       	movw	r24, r14
     51a:	99 23       	and	r25, r25
     51c:	24 f4       	brge	.+8      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     51e:	88 27       	eor	r24, r24
     520:	99 27       	eor	r25, r25
     522:	8e 19       	sub	r24, r14
     524:	9f 09       	sbc	r25, r15
     526:	28 ec       	ldi	r18, 0xC8	; 200
     528:	ac 01       	movw	r20, r24
     52a:	24 9f       	mul	r18, r20
     52c:	c0 01       	movw	r24, r0
     52e:	25 9f       	mul	r18, r21
     530:	90 0d       	add	r25, r0
     532:	11 24       	eor	r1, r1
     534:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
			
			set_motors( 0, 0 );
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
			else if ( direction > 0 )
			{
				//turn right
				turn_half_right( abs( direction ) );
			}
			set_motors( 0, 0 );
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
		}
		
		bool CheckIfDirectionIsTraversable()
		{
			unsigned int	sensors[ 5 ]; 
			read_line_sensors( sensors, IR_EMITTERS_ON );
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <read_line_sensors>
			
			if ( sensors[ 1 ] > OBSTACLE_VALUE || sensors[ 2 ] > OBSTACLE_VALUE || sensors[ 3 ] > OBSTACLE_VALUE )
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	9c 81       	ldd	r25, Y+4	; 0x04
     55e:	81 3b       	cpi	r24, 0xB1	; 177
     560:	94 40       	sbci	r25, 0x04	; 4
     562:	50 f4       	brcc	.+20     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     564:	8d 81       	ldd	r24, Y+5	; 0x05
     566:	9e 81       	ldd	r25, Y+6	; 0x06
     568:	81 3b       	cpi	r24, 0xB1	; 177
     56a:	94 40       	sbci	r25, 0x04	; 4
     56c:	28 f4       	brcc	.+10     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	81 3b       	cpi	r24, 0xB1	; 177
     574:	94 40       	sbci	r25, 0x04	; 4
     576:	10 f1       	brcs	.+68     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
			{
				clear();
     578:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear>
				print("!OBS!");
     57c:	8f e4       	ldi	r24, 0x4F	; 79
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
				delay_ms(2000);
     584:	80 ed       	ldi	r24, 0xD0	; 208
     586:	97 e0       	ldi	r25, 0x07	; 7
     588:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
				{
					return nextPos;
				}
				else
				{
					matrix[ nextPos.x ][ nextPos.y ].isObstacle = true;	
     58c:	8f e0       	ldi	r24, 0x0F	; 15
     58e:	8a 9d       	mul	r24, r10
     590:	f0 01       	movw	r30, r0
     592:	8b 9d       	mul	r24, r11
     594:	f0 0d       	add	r31, r0
     596:	11 24       	eor	r1, r1
     598:	e8 0d       	add	r30, r8
     59a:	f9 1d       	adc	r31, r9
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	ef 52       	subi	r30, 0x2F	; 47
     5aa:	fe 4f       	sbci	r31, 0xFE	; 254
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	84 83       	std	Z+4, r24	; 0x04
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	69 1a       	sub	r6, r25
     5b4:	71 08       	sbc	r7, r1
		{
			//EOrientation	backwardDirection = GetBackwardDirection();
			Point2D	nextPos( -1, -1 );
			int		count = 0;
			
			while ( count < 8 )
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5b8:	f3 cd       	rjmp	.-1050   	; 0x1a0 <_ZN5Robot14mainRobotLogicEv+0xa2>
     5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
				print("!OBS!");
				delay_ms(2000);
				return false;
			}
			
			clear();
     5bc:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear>
			print("NOT OBS");
     5c0:	85 e5       	ldi	r24, 0x55	; 85
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
			delay_ms(2000);
     5c8:	80 ed       	ldi	r24, 0xD0	; 208
     5ca:	97 e0       	ldi	r25, 0x07	; 7
     5cc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>

		
		void stepToGoal(Point2D goalPos)
		{
			Point2D nextPos = nextStepToFinish( goalPos );
			*matrix[nextPos.x][nextPos.y].parent = position;
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	8a 9d       	mul	r24, r10
     5d4:	80 01       	movw	r16, r0
     5d6:	8b 9d       	mul	r24, r11
     5d8:	10 0d       	add	r17, r0
     5da:	11 24       	eor	r1, r1
     5dc:	08 0d       	add	r16, r8
     5de:	19 1d       	adc	r17, r9
     5e0:	00 0f       	add	r16, r16
     5e2:	11 1f       	adc	r17, r17
     5e4:	00 0f       	add	r16, r16
     5e6:	11 1f       	adc	r17, r17
     5e8:	00 0f       	add	r16, r16
     5ea:	11 1f       	adc	r17, r17
     5ec:	0f 52       	subi	r16, 0x2F	; 47
     5ee:	1e 4f       	sbci	r17, 0xFE	; 254
     5f0:	d8 01       	movw	r26, r16
     5f2:	15 96       	adiw	r26, 0x05	; 5
     5f4:	2d 91       	ld	r18, X+
     5f6:	3c 91       	ld	r19, X
     5f8:	16 97       	sbiw	r26, 0x06	; 6
     5fa:	f1 01       	movw	r30, r2
     5fc:	80 a1       	ldd	r24, Z+32	; 0x20
     5fe:	91 a1       	ldd	r25, Z+33	; 0x21
     600:	a2 a1       	ldd	r26, Z+34	; 0x22
     602:	b3 a1       	ldd	r27, Z+35	; 0x23
     604:	f9 01       	movw	r30, r18
     606:	80 83       	st	Z, r24
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	a2 83       	std	Z+2, r26	; 0x02
     60c:	b3 83       	std	Z+3, r27	; 0x03
			}
			
		}
		
		void printPos(short x, short y){
			clear();
     60e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear>
			print("(");
     612:	8d e5       	ldi	r24, 0x5D	; 93
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
			print_long( x );
     61a:	b5 01       	movw	r22, r10
     61c:	0b 2c       	mov	r0, r11
     61e:	00 0c       	add	r0, r0
     620:	88 0b       	sbc	r24, r24
     622:	99 0b       	sbc	r25, r25
     624:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <print_long>
			print(", ");
     628:	8f e5       	ldi	r24, 0x5F	; 95
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
			print_long( y );
     630:	b4 01       	movw	r22, r8
     632:	09 2c       	mov	r0, r9
     634:	00 0c       	add	r0, r0
     636:	88 0b       	sbc	r24, r24
     638:	99 0b       	sbc	r25, r25
     63a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <print_long>
			print(")");
     63e:	82 e6       	ldi	r24, 0x62	; 98
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
		void stepToGoal(Point2D goalPos)
		{
			Point2D nextPos = nextStepToFinish( goalPos );
			*matrix[nextPos.x][nextPos.y].parent = position;
			printPos( nextPos.x, nextPos.y );
			delay_ms(2000);
     646:	80 ed       	ldi	r24, 0xD0	; 208
     648:	97 e0       	ldi	r25, 0x07	; 7
     64a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
			// delay_ms(1000);
			
			//Set position in matrix only if it is NULL
			if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
     64e:	d8 01       	movw	r26, r16
     650:	17 96       	adiw	r26, 0x07	; 7
     652:	8c 91       	ld	r24, X
     654:	81 11       	cpse	r24, r1
     656:	57 c0       	rjmp	.+174    	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
			{ // @TODO: How to check is it visited
				short savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
     658:	6f e0       	ldi	r22, 0x0F	; 15
     65a:	f8 01       	movw	r30, r16
     65c:	40 81       	ld	r20, Z
     65e:	51 81       	ldd	r21, Z+1	; 0x01
				short currDist	= matrix[ position.x ][ position.y ].distToStart + getDistance( position, nextPos );
     660:	f1 01       	movw	r30, r2
     662:	80 a1       	ldd	r24, Z+32	; 0x20
     664:	91 a1       	ldd	r25, Z+33	; 0x21
     666:	22 a1       	ldd	r18, Z+34	; 0x22
     668:	33 a1       	ldd	r19, Z+35	; 0x23
     66a:	68 9f       	mul	r22, r24
     66c:	f0 01       	movw	r30, r0
     66e:	69 9f       	mul	r22, r25
     670:	f0 0d       	add	r31, r0
     672:	11 24       	eor	r1, r1
     674:	e2 0f       	add	r30, r18
     676:	f3 1f       	adc	r31, r19
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	ef 52       	subi	r30, 0x2F	; 47
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	60 81       	ld	r22, Z
     68a:	71 81       	ldd	r23, Z+1	; 0x01
		// !!!Only for one step!!!!
		short getDistance(Point2D prevPos, Point2D nextPos)
		{
			short distance = 0;
			
			if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
     68c:	8a 15       	cp	r24, r10
     68e:	9b 05       	cpc	r25, r11
     690:	31 f0       	breq	.+12     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     692:	28 15       	cp	r18, r8
     694:	39 05       	cpc	r19, r9
     696:	49 f4       	brne	.+18     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
			{
				distance = 3;
			}
			else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
			{
				distance = 2;
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
			
			if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
			{
				distance = 3;
			}
			else if ( prevPos.x - nextPos.x != 0 || prevPos.y - nextPos.y != 0 )
     69e:	28 15       	cp	r18, r8
     6a0:	39 05       	cpc	r19, r9
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
			{
				distance = 2;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
		{
			short distance = 0;
			
			if ( prevPos.x - nextPos.x != 0 && prevPos.y - nextPos.y != 0 )
			{
				distance = 3;
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
		}

		// !!!Only for one step!!!!
		short getDistance(Point2D prevPos, Point2D nextPos)
		{
			short distance = 0;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
			
			//Set position in matrix only if it is NULL
			if ( !matrix[ nextPos.x ][ nextPos.y ].isVisited )
			{ // @TODO: How to check is it visited
				short savedDist	= matrix[ nextPos.x ][ nextPos.y ].distToStart;
				short currDist	= matrix[ position.x ][ position.y ].distToStart + getDistance( position, nextPos );
     6b4:	86 0f       	add	r24, r22
     6b6:	97 1f       	adc	r25, r23
				
				if ( savedDist > currDist )
     6b8:	84 17       	cp	r24, r20
     6ba:	95 07       	cpc	r25, r21
     6bc:	94 f4       	brge	.+36     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
				{
					matrix[ nextPos.x ][ nextPos.y ].distToStart = currDist;
     6be:	2f e0       	ldi	r18, 0x0F	; 15
     6c0:	2a 9d       	mul	r18, r10
     6c2:	f0 01       	movw	r30, r0
     6c4:	2b 9d       	mul	r18, r11
     6c6:	f0 0d       	add	r31, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	e8 0d       	add	r30, r8
     6cc:	f9 1d       	adc	r31, r9
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	ef 52       	subi	r30, 0x2F	; 47
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24
				}

				matrix[nextPos.x][nextPos.y].isVisited = true;
     6e2:	8f e0       	ldi	r24, 0x0F	; 15
     6e4:	8a 9d       	mul	r24, r10
     6e6:	f0 01       	movw	r30, r0
     6e8:	8b 9d       	mul	r24, r11
     6ea:	f0 0d       	add	r31, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	e8 0d       	add	r30, r8
     6f0:	f9 1d       	adc	r31, r9
     6f2:	ee 0f       	add	r30, r30
     6f4:	ff 1f       	adc	r31, r31
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	ef 52       	subi	r30, 0x2F	; 47
     700:	fe 4f       	sbci	r31, 0xFE	; 254
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	87 83       	std	Z+7, r24	; 0x07
			}
						
			//Move only when are not at goal
			if ( position.x != goalPos.x || position.y != goalPos.y )
     706:	d1 01       	movw	r26, r2
     708:	90 96       	adiw	r26, 0x20	; 32
     70a:	8d 91       	ld	r24, X+
     70c:	9c 91       	ld	r25, X
     70e:	91 97       	sbiw	r26, 0x21	; 33
     710:	ed 85       	ldd	r30, Y+13	; 0x0d
     712:	fe 85       	ldd	r31, Y+14	; 0x0e
     714:	8e 17       	cp	r24, r30
     716:	9f 07       	cpc	r25, r31
     718:	51 f4       	brne	.+20     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     71a:	92 96       	adiw	r26, 0x22	; 34
     71c:	8d 91       	ld	r24, X+
     71e:	9c 91       	ld	r25, X
     720:	93 97       	sbiw	r26, 0x23	; 35
     722:	2f 85       	ldd	r18, Y+15	; 0x0f
     724:	38 89       	ldd	r19, Y+16	; 0x10
     726:	82 17       	cp	r24, r18
     728:	93 07       	cpc	r25, r19
     72a:	09 f4       	brne	.+2      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     72c:	5f c0       	rjmp	.+190    	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
			{
				position = nextPos;
     72e:	d1 01       	movw	r26, r2
     730:	91 96       	adiw	r26, 0x21	; 33
     732:	bc 92       	st	X, r11
     734:	ae 92       	st	-X, r10
     736:	90 97       	sbiw	r26, 0x20	; 32
     738:	93 96       	adiw	r26, 0x23	; 35
     73a:	9c 92       	st	X, r9
     73c:	8e 92       	st	-X, r8
     73e:	92 97       	sbiw	r26, 0x22	; 34
			make_turn( 42, -42, turns );
		}
		
		void move_forward()
		{
			set_motors( 20, 20 );
     740:	64 e1       	ldi	r22, 0x14	; 20
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	84 e1       	ldi	r24, 0x14	; 20
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
			set_motors( 0, 0 );
		}
		
		bool is_on_marker()
		{
			read_line_sensors( sensors, IR_EMITTERS_ON );
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	8b 85       	ldd	r24, Y+11	; 0x0b
     750:	9c 85       	ldd	r25, Y+12	; 0x0c
     752:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <read_line_sensors>
			if ( sensors[1] > OBSTACLE_VALUE || sensors[2] > OBSTACLE_VALUE || sensors[3] > OBSTACLE_VALUE ) // there is obstacle
     756:	f1 01       	movw	r30, r2
     758:	83 a5       	ldd	r24, Z+43	; 0x2b
     75a:	94 a5       	ldd	r25, Z+44	; 0x2c
     75c:	81 3b       	cpi	r24, 0xB1	; 177
     75e:	f4 e0       	ldi	r31, 0x04	; 4
     760:	9f 07       	cpc	r25, r31
     762:	80 f4       	brcc	.+32     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     764:	d1 01       	movw	r26, r2
     766:	9d 96       	adiw	r26, 0x2d	; 45
     768:	2d 91       	ld	r18, X+
     76a:	3c 91       	ld	r19, X
     76c:	9e 97       	sbiw	r26, 0x2e	; 46
     76e:	21 3b       	cpi	r18, 0xB1	; 177
     770:	b4 e0       	ldi	r27, 0x04	; 4
     772:	3b 07       	cpc	r19, r27
     774:	38 f4       	brcc	.+14     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     776:	f1 01       	movw	r30, r2
     778:	47 a5       	ldd	r20, Z+47	; 0x2f
     77a:	50 a9       	ldd	r21, Z+48	; 0x30
     77c:	41 3b       	cpi	r20, 0xB1	; 177
     77e:	f4 e0       	ldi	r31, 0x04	; 4
     780:	5f 07       	cpc	r21, r31
     782:	e0 f0       	brcs	.+56     	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
			{
				matrix[ position.x ][ position.y ].isObstacle = true;
     784:	d1 01       	movw	r26, r2
     786:	90 96       	adiw	r26, 0x20	; 32
     788:	2d 91       	ld	r18, X+
     78a:	3c 91       	ld	r19, X
     78c:	91 97       	sbiw	r26, 0x21	; 33
     78e:	92 96       	adiw	r26, 0x22	; 34
     790:	8d 91       	ld	r24, X+
     792:	9c 91       	ld	r25, X
     794:	93 97       	sbiw	r26, 0x23	; 35
     796:	4f e0       	ldi	r20, 0x0F	; 15
     798:	42 9f       	mul	r20, r18
     79a:	f0 01       	movw	r30, r0
     79c:	43 9f       	mul	r20, r19
     79e:	f0 0d       	add	r31, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	e8 0f       	add	r30, r24
     7a4:	f9 1f       	adc	r31, r25
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	ef 52       	subi	r30, 0x2F	; 47
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	84 83       	std	Z+4, r24	; 0x04
     7ba:	0a c0       	rjmp	.+20     	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
				return true;
			}
			else if ( sensors[1] > MARKER_VALUE || sensors[2] > MARKER_VALUE || sensors[3] > MARKER_VALUE ) // there is marker
     7bc:	8f 35       	cpi	r24, 0x5F	; 95
     7be:	91 40       	sbci	r25, 0x01	; 1
     7c0:	38 f4       	brcc	.+14     	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     7c2:	2f 35       	cpi	r18, 0x5F	; 95
     7c4:	31 40       	sbci	r19, 0x01	; 1
     7c6:	20 f4       	brcc	.+8      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
		
		void move_forward()
		{
			set_motors( 20, 20 );
			
			while ( !is_on_marker() ){}
     7c8:	4f 35       	cpi	r20, 0x5F	; 95
     7ca:	51 40       	sbci	r21, 0x01	; 1
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     7ce:	be cf       	rjmp	.-132    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
			
			play( ">>a32" );
     7d0:	84 e6       	ldi	r24, 0x64	; 100
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <play>
			delay_ms( 900 );
     7d8:	84 e8       	ldi	r24, 0x84	; 132
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
			set_motors( 0, 0 );
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
			while ( position.x != finishPos.x || position.y != finishPos.y || isLastStep )
			{
										
				stepToGoal( finishPos );
				
				if ( isLastStep )
     7ec:	29 89       	ldd	r18, Y+17	; 0x11
     7ee:	22 23       	and	r18, r18
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
     7f2:	ba c1       	rjmp	.+884    	; 0xb68 <__stack+0x269>
			finishPos = startPos;
		}
		
		void calculateDistToFinish()
		{
			Point2D currentPos( finishPos );
     7f4:	d1 01       	movw	r26, r2
     7f6:	95 96       	adiw	r26, 0x25	; 37
     7f8:	ad 90       	ld	r10, X+
     7fa:	bc 90       	ld	r11, X
     7fc:	96 97       	sbiw	r26, 0x26	; 38
     7fe:	97 96       	adiw	r26, 0x27	; 39
     800:	8d 91       	ld	r24, X+
     802:	9c 91       	ld	r25, X
     804:	98 97       	sbiw	r26, 0x28	; 40
			short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
     806:	2f e0       	ldi	r18, 0x0F	; 15
     808:	2a 9d       	mul	r18, r10
     80a:	f0 01       	movw	r30, r0
     80c:	2b 9d       	mul	r18, r11
     80e:	f0 0d       	add	r31, r0
     810:	11 24       	eor	r1, r1
     812:	e8 0f       	add	r30, r24
     814:	f9 1f       	adc	r31, r25
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ef 52       	subi	r30, 0x2F	; 47
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	c0 80       	ld	r12, Z
     828:	d1 80       	ldd	r13, Z+1	; 0x01
			
			while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     82a:	96 01       	movw	r18, r12
     82c:	c1 14       	cp	r12, r1
     82e:	d1 04       	cpc	r13, r1
     830:	09 f4       	brne	.+2      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     832:	37 c1       	rjmp	.+622    	; 0xaa2 <__stack+0x1a3>
     834:	4c 01       	movw	r8, r24
     836:	35 01       	movw	r6, r10
			{
				Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );
				
				if ( currCell.distToFinish < dist - currCell.distToStart )
     838:	4f e0       	ldi	r20, 0x0F	; 15
     83a:	5e 86       	std	Y+14, r5	; 0x0e
     83c:	4d 86       	std	Y+13, r4	; 0x0d
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
		void calculateDistToFinish()
		{
			Point2D currentPos( finishPos );
			short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
			
			while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     840:	4c 01       	movw	r8, r24
     842:	35 01       	movw	r6, r10
			{
				Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );
				
				if ( currCell.distToFinish < dist - currCell.distToStart )
     844:	f6 01       	movw	r30, r12
     846:	e2 1b       	sub	r30, r18
     848:	f3 0b       	sbc	r31, r19
     84a:	9f 01       	movw	r18, r30
     84c:	46 9d       	mul	r20, r6
     84e:	f0 01       	movw	r30, r0
     850:	47 9d       	mul	r20, r7
     852:	f0 0d       	add	r31, r0
     854:	11 24       	eor	r1, r1
     856:	e8 0d       	add	r30, r8
     858:	f9 1d       	adc	r31, r9
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	ef 52       	subi	r30, 0x2F	; 47
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	62 81       	ldd	r22, Z+2	; 0x02
     86c:	73 81       	ldd	r23, Z+3	; 0x03
     86e:	62 17       	cp	r22, r18
     870:	73 07       	cpc	r23, r19
     872:	8c f4       	brge	.+34     	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
				{
					currCell.distToFinish = dist - currCell.distToStart;
     874:	46 9d       	mul	r20, r6
     876:	f0 01       	movw	r30, r0
     878:	47 9d       	mul	r20, r7
     87a:	f0 0d       	add	r31, r0
     87c:	11 24       	eor	r1, r1
     87e:	e8 0d       	add	r30, r8
     880:	f9 1d       	adc	r31, r9
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ef 52       	subi	r30, 0x2F	; 47
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	33 83       	std	Z+3, r19	; 0x03
     894:	22 83       	std	Z+2, r18	; 0x02
		}
		
		Point2D getNearestToStartAdjecent(const Point2D& currentPos)
		{
			Point2D nearestPos( currentPos );
			short	minDist = matrix[ currentPos.x ][ currentPos.y ].distToStart;
     896:	4a 9d       	mul	r20, r10
     898:	f0 01       	movw	r30, r0
     89a:	4b 9d       	mul	r20, r11
     89c:	f0 0d       	add	r31, r0
     89e:	11 24       	eor	r1, r1
     8a0:	e8 0f       	add	r30, r24
     8a2:	f9 1f       	adc	r31, r25
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	ef 52       	subi	r30, 0x2F	; 47
     8b2:	fe 4f       	sbci	r31, 0xFE	; 254
     8b4:	20 81       	ld	r18, Z
     8b6:	31 81       	ldd	r19, Z+1	; 0x01
			
			if ( matrix[ currentPos.x - 1 ][ currentPos.y - 1 ].distToStart < minDist )
     8b8:	b5 01       	movw	r22, r10
     8ba:	61 50       	subi	r22, 0x01	; 1
     8bc:	71 09       	sbc	r23, r1
     8be:	dc 01       	movw	r26, r24
     8c0:	11 97       	sbiw	r26, 0x01	; 1
     8c2:	46 9f       	mul	r20, r22
     8c4:	f0 01       	movw	r30, r0
     8c6:	47 9f       	mul	r20, r23
     8c8:	f0 0d       	add	r31, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	ea 0f       	add	r30, r26
     8ce:	fb 1f       	adc	r31, r27
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ef 52       	subi	r30, 0x2F	; 47
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	01 90       	ld	r0, Z+
     8e2:	f0 81       	ld	r31, Z
     8e4:	e0 2d       	mov	r30, r0
     8e6:	e2 17       	cp	r30, r18
     8e8:	f3 07       	cpc	r31, r19
     8ea:	34 f4       	brge	.+12     	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y - 1 );
     8ec:	5a 2e       	mov	r5, r26
     8ee:	eb 2e       	mov	r14, r27
     8f0:	f6 2e       	mov	r15, r22
     8f2:	57 2f       	mov	r21, r23
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     8f4:	9f 01       	movw	r18, r30
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <__stack+0x1>
			}
		}
		
		Point2D getNearestToStartAdjecent(const Point2D& currentPos)
		{
			Point2D nearestPos( currentPos );
     8f8:	58 2c       	mov	r5, r8
     8fa:	e9 2c       	mov	r14, r9
     8fc:	f6 2c       	mov	r15, r6
     8fe:	57 2d       	mov	r21, r7
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y - 1 );
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
			}
			
			if ( matrix[ currentPos.x ][ currentPos.y - 1 ].distToStart < minDist )
     900:	4a 9d       	mul	r20, r10
     902:	f0 01       	movw	r30, r0
     904:	4b 9d       	mul	r20, r11
     906:	f0 0d       	add	r31, r0
     908:	11 24       	eor	r1, r1
     90a:	ea 0f       	add	r30, r26
     90c:	fb 1f       	adc	r31, r27
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ef 52       	subi	r30, 0x2F	; 47
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	01 90       	ld	r0, Z+
     920:	f0 81       	ld	r31, Z
     922:	e0 2d       	mov	r30, r0
     924:	e2 17       	cp	r30, r18
     926:	f3 07       	cpc	r31, r19
     928:	2c f4       	brge	.+10     	; 0x934 <__stack+0x35>
			{
				nearestPos	= Point2D( currentPos.x, currentPos.y - 1 );
     92a:	5a 2e       	mov	r5, r26
     92c:	eb 2e       	mov	r14, r27
     92e:	f6 2c       	mov	r15, r6
     930:	57 2d       	mov	r21, r7
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     932:	9f 01       	movw	r18, r30
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y - 1 ].distToStart < minDist )
     934:	85 01       	movw	r16, r10
     936:	0f 5f       	subi	r16, 0xFF	; 255
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	40 9f       	mul	r20, r16
     93c:	f0 01       	movw	r30, r0
     93e:	41 9f       	mul	r20, r17
     940:	f0 0d       	add	r31, r0
     942:	11 24       	eor	r1, r1
     944:	ea 0f       	add	r30, r26
     946:	fb 1f       	adc	r31, r27
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	ef 52       	subi	r30, 0x2F	; 47
     956:	fe 4f       	sbci	r31, 0xFE	; 254
     958:	01 90       	ld	r0, Z+
     95a:	f0 81       	ld	r31, Z
     95c:	e0 2d       	mov	r30, r0
     95e:	e2 17       	cp	r30, r18
     960:	f3 07       	cpc	r31, r19
     962:	2c f4       	brge	.+10     	; 0x96e <__stack+0x6f>
			{
				nearestPos	= Point2D( currentPos.x + 1, currentPos.y - 1 );
     964:	5a 2e       	mov	r5, r26
     966:	eb 2e       	mov	r14, r27
     968:	f0 2e       	mov	r15, r16
     96a:	51 2f       	mov	r21, r17
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     96c:	9f 01       	movw	r18, r30
			}
			
			if ( matrix[ currentPos.x - 1 ][ currentPos.y ].distToStart < minDist )
     96e:	46 9f       	mul	r20, r22
     970:	f0 01       	movw	r30, r0
     972:	47 9f       	mul	r20, r23
     974:	f0 0d       	add	r31, r0
     976:	11 24       	eor	r1, r1
     978:	e8 0f       	add	r30, r24
     97a:	f9 1f       	adc	r31, r25
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ef 52       	subi	r30, 0x2F	; 47
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	01 90       	ld	r0, Z+
     98e:	f0 81       	ld	r31, Z
     990:	e0 2d       	mov	r30, r0
     992:	e2 17       	cp	r30, r18
     994:	f3 07       	cpc	r31, r19
     996:	2c f4       	brge	.+10     	; 0x9a2 <__stack+0xa3>
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y );
     998:	58 2c       	mov	r5, r8
     99a:	e9 2c       	mov	r14, r9
     99c:	f6 2e       	mov	r15, r22
     99e:	57 2f       	mov	r21, r23
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     9a0:	9f 01       	movw	r18, r30
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y ].distToStart < minDist )
     9a2:	40 9f       	mul	r20, r16
     9a4:	f0 01       	movw	r30, r0
     9a6:	41 9f       	mul	r20, r17
     9a8:	f0 0d       	add	r31, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	ef 52       	subi	r30, 0x2F	; 47
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	01 90       	ld	r0, Z+
     9c2:	f0 81       	ld	r31, Z
     9c4:	e0 2d       	mov	r30, r0
     9c6:	e2 17       	cp	r30, r18
     9c8:	f3 07       	cpc	r31, r19
     9ca:	2c f4       	brge	.+10     	; 0x9d6 <__stack+0xd7>
			{
				nearestPos	= Point2D( currentPos.x + 1, currentPos.y );
     9cc:	58 2c       	mov	r5, r8
     9ce:	e9 2c       	mov	r14, r9
     9d0:	f0 2e       	mov	r15, r16
     9d2:	51 2f       	mov	r21, r17
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     9d4:	9f 01       	movw	r18, r30
			}
			
			if ( matrix[ currentPos.x - 1 ][ currentPos.y + 1 ].distToStart < minDist )
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	46 9f       	mul	r20, r22
     9da:	f0 01       	movw	r30, r0
     9dc:	47 9f       	mul	r20, r23
     9de:	f0 0d       	add	r31, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	e8 0f       	add	r30, r24
     9e4:	f9 1f       	adc	r31, r25
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	ef 52       	subi	r30, 0x2F	; 47
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	01 90       	ld	r0, Z+
     9f8:	f0 81       	ld	r31, Z
     9fa:	e0 2d       	mov	r30, r0
     9fc:	e2 17       	cp	r30, r18
     9fe:	f3 07       	cpc	r31, r19
     a00:	2c f4       	brge	.+10     	; 0xa0c <__stack+0x10d>
			{
				nearestPos	= Point2D( currentPos.x - 1, currentPos.y + 1 );
     a02:	58 2e       	mov	r5, r24
     a04:	e9 2e       	mov	r14, r25
     a06:	f6 2e       	mov	r15, r22
     a08:	57 2f       	mov	r21, r23
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     a0a:	9f 01       	movw	r18, r30
			}
			
			if ( matrix[ currentPos.x ][ currentPos.y + 1 ].distToStart < minDist )
     a0c:	4a 9d       	mul	r20, r10
     a0e:	b0 01       	movw	r22, r0
     a10:	4b 9d       	mul	r20, r11
     a12:	70 0d       	add	r23, r0
     a14:	11 24       	eor	r1, r1
     a16:	fb 01       	movw	r30, r22
     a18:	e8 0f       	add	r30, r24
     a1a:	f9 1f       	adc	r31, r25
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	ef 52       	subi	r30, 0x2F	; 47
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	60 81       	ld	r22, Z
     a2e:	71 81       	ldd	r23, Z+1	; 0x01
     a30:	62 17       	cp	r22, r18
     a32:	73 07       	cpc	r23, r19
     a34:	2c f4       	brge	.+10     	; 0xa40 <__stack+0x141>
			{
				nearestPos	= Point2D( currentPos.x, currentPos.y + 1 );
     a36:	58 2e       	mov	r5, r24
     a38:	e9 2e       	mov	r14, r25
     a3a:	f6 2c       	mov	r15, r6
     a3c:	57 2d       	mov	r21, r7
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
     a3e:	9b 01       	movw	r18, r22
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y + 1 ].distToStart < minDist )
     a40:	40 9f       	mul	r20, r16
     a42:	f0 01       	movw	r30, r0
     a44:	41 9f       	mul	r20, r17
     a46:	f0 0d       	add	r31, r0
     a48:	11 24       	eor	r1, r1
     a4a:	e8 0f       	add	r30, r24
     a4c:	f9 1f       	adc	r31, r25
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ef 52       	subi	r30, 0x2F	; 47
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	60 81       	ld	r22, Z
     a60:	71 81       	ldd	r23, Z+1	; 0x01
     a62:	62 17       	cp	r22, r18
     a64:	73 07       	cpc	r23, r19
     a66:	14 f4       	brge	.+4      	; 0xa6c <__stack+0x16d>
			{
				nearestPos	= Point2D( currentPos.x + 1, currentPos.y + 1 );
     a68:	58 01       	movw	r10, r16
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__stack+0x175>
			{
				nearestPos	= Point2D( currentPos.x, currentPos.y + 1 );
				minDist		= matrix[ nearestPos.x ][ nearestPos.y ].distToStart;
			}
			
			if ( matrix[ currentPos.x + 1 ][ currentPos.y + 1 ].distToStart < minDist )
     a6c:	85 2d       	mov	r24, r5
     a6e:	9e 2d       	mov	r25, r14
     a70:	af 2c       	mov	r10, r15
     a72:	b5 2e       	mov	r11, r21
		void calculateDistToFinish()
		{
			Point2D currentPos( finishPos );
			short	dist = matrix[ finishPos.x ][ finishPos.y ].distToStart;
			
			while ( matrix[ currentPos.x ][ currentPos.y ].distToStart != 0  )
     a74:	4a 9d       	mul	r20, r10
     a76:	f0 01       	movw	r30, r0
     a78:	4b 9d       	mul	r20, r11
     a7a:	f0 0d       	add	r31, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	e8 0f       	add	r30, r24
     a80:	f9 1f       	adc	r31, r25
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	ef 52       	subi	r30, 0x2F	; 47
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	20 81       	ld	r18, Z
     a94:	31 81       	ldd	r19, Z+1	; 0x01
     a96:	21 15       	cp	r18, r1
     a98:	31 05       	cpc	r19, r1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	d1 ce       	rjmp	.-606    	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
     a9e:	4d 84       	ldd	r4, Y+13	; 0x0d
     aa0:	5e 84       	ldd	r5, Y+14	; 0x0e
				currentPos = this->getNearestToStartAdjecent( currentPos );
			}
			
			Cell& currCell( matrix[ currentPos.x ][ currentPos.y ] );
			
			if ( currCell.distToFinish < dist - currCell.distToStart )
     aa2:	2f e0       	ldi	r18, 0x0F	; 15
     aa4:	2a 9d       	mul	r18, r10
     aa6:	f0 01       	movw	r30, r0
     aa8:	2b 9d       	mul	r18, r11
     aaa:	f0 0d       	add	r31, r0
     aac:	11 24       	eor	r1, r1
     aae:	e8 0f       	add	r30, r24
     ab0:	f9 1f       	adc	r31, r25
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ef 52       	subi	r30, 0x2F	; 47
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	22 81       	ldd	r18, Z+2	; 0x02
     ac4:	33 81       	ldd	r19, Z+3	; 0x03
     ac6:	2c 15       	cp	r18, r12
     ac8:	3d 05       	cpc	r19, r13
     aca:	94 f4       	brge	.+36     	; 0xaf0 <__stack+0x1f1>
			{
				currCell.distToFinish = dist - currCell.distToStart;
     acc:	2f e0       	ldi	r18, 0x0F	; 15
     ace:	2a 9d       	mul	r18, r10
     ad0:	f0 01       	movw	r30, r0
     ad2:	2b 9d       	mul	r18, r11
     ad4:	f0 0d       	add	r31, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	e8 0f       	add	r30, r24
     ada:	f9 1f       	adc	r31, r25
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ef 52       	subi	r30, 0x2F	; 47
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	d3 82       	std	Z+3, r13	; 0x03
     aee:	c2 82       	std	Z+2, r12	; 0x02
		void reverseDirection()
		{
			this->calculateDistToFinish();
			
			// swap dist to start with dist to finish and find start pos
			Point2D startPos( finishPos );
     af0:	d1 01       	movw	r26, r2
     af2:	95 96       	adiw	r26, 0x25	; 37
     af4:	ac 90       	ld	r10, X
     af6:	95 97       	sbiw	r26, 0x25	; 37
     af8:	96 96       	adiw	r26, 0x26	; 38
     afa:	bc 90       	ld	r11, X
     afc:	96 97       	sbiw	r26, 0x26	; 38
     afe:	97 96       	adiw	r26, 0x27	; 39
     b00:	cc 90       	ld	r12, X
     b02:	97 97       	sbiw	r26, 0x27	; 39
     b04:	98 96       	adiw	r26, 0x28	; 40
     b06:	dc 90       	ld	r13, X
     b08:	01 ed       	ldi	r16, 0xD1	; 209
     b0a:	11 e0       	ldi	r17, 0x01	; 1
			
			for ( short i = 0; i < MAX_ROWS; i++ )
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	f8 01       	movw	r30, r16
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
			{
				for ( short j = 0; j < MAX_ROWS; j++ )
				{	
					if ( /*matrix[ i ][ j ].isVisited*/true )
					{
						if ( matrix[ i ][ j ].distToStart == 0 )
     b16:	e6 2e       	mov	r14, r22
     b18:	f7 2e       	mov	r15, r23
     b1a:	df 01       	movw	r26, r30
     b1c:	20 81       	ld	r18, Z
     b1e:	31 81       	ldd	r19, Z+1	; 0x01
     b20:	21 15       	cp	r18, r1
     b22:	31 05       	cpc	r19, r1
     b24:	21 f4       	brne	.+8      	; 0xb2e <__stack+0x22f>
     b26:	c8 2e       	mov	r12, r24
     b28:	d9 2e       	mov	r13, r25
     b2a:	ae 2c       	mov	r10, r14
     b2c:	bf 2c       	mov	r11, r15
						{
							// start pos, save it.
							startPos = Point2D( i, j );
						}
						
						short tmp						= matrix[ i ][ j ].distToFinish;
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	4d 91       	ld	r20, X+
     b32:	5c 91       	ld	r21, X
     b34:	13 97       	sbiw	r26, 0x03	; 3
						matrix[ i ][ j ].distToFinish	= matrix[ i ][ j ].distToStart;
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	3c 93       	st	X, r19
     b3a:	2e 93       	st	-X, r18
     b3c:	12 97       	sbiw	r26, 0x02	; 2
						matrix[ i ][ j ].distToStart	= tmp;
     b3e:	4d 93       	st	X+, r20
     b40:	5c 93       	st	X, r21
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	38 96       	adiw	r30, 0x08	; 8
			// swap dist to start with dist to finish and find start pos
			Point2D startPos( finishPos );
			
			for ( short i = 0; i < MAX_ROWS; i++ )
			{
				for ( short j = 0; j < MAX_ROWS; j++ )
     b46:	8f 30       	cpi	r24, 0x0F	; 15
     b48:	91 05       	cpc	r25, r1
     b4a:	39 f7       	brne	.-50     	; 0xb1a <__stack+0x21b>
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	08 58       	subi	r16, 0x88	; 136
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
			this->calculateDistToFinish();
			
			// swap dist to start with dist to finish and find start pos
			Point2D startPos( finishPos );
			
			for ( short i = 0; i < MAX_ROWS; i++ )
     b54:	6f 30       	cpi	r22, 0x0F	; 15
     b56:	71 05       	cpc	r23, r1
     b58:	d9 f6       	brne	.-74     	; 0xb10 <__stack+0x211>
					}
				}
			}
			
			// Finally, make the start pos our next finish pos
			finishPos = startPos;
     b5a:	f1 01       	movw	r30, r2
     b5c:	a5 a2       	std	Z+37, r10	; 0x25
     b5e:	b6 a2       	std	Z+38, r11	; 0x26
     b60:	c7 a2       	std	Z+39, r12	; 0x27
     b62:	d0 a6       	std	Z+40, r13	; 0x28
										
				stepToGoal( finishPos );
				
				if ( isLastStep )
				{
					isLastStep = false;
     b64:	19 8a       	std	Y+17, r1	; 0x11
     b66:	f0 ca       	rjmp	.-2592   	; 0x148 <_ZN5Robot14mainRobotLogicEv+0x4a>
					
					this->reverseDirection();
				}
				else if ( position.x == finishPos.x && position.y == finishPos.y )
     b68:	d1 01       	movw	r26, r2
     b6a:	90 96       	adiw	r26, 0x20	; 32
     b6c:	2d 91       	ld	r18, X+
     b6e:	3c 91       	ld	r19, X
     b70:	91 97       	sbiw	r26, 0x21	; 33
     b72:	95 96       	adiw	r26, 0x25	; 37
     b74:	8d 91       	ld	r24, X+
     b76:	9c 91       	ld	r25, X
     b78:	96 97       	sbiw	r26, 0x26	; 38
     b7a:	28 17       	cp	r18, r24
     b7c:	39 07       	cpc	r19, r25
     b7e:	09 f0       	breq	.+2      	; 0xb82 <__stack+0x283>
     b80:	e3 ca       	rjmp	.-2618   	; 0x148 <_ZN5Robot14mainRobotLogicEv+0x4a>
     b82:	b1 e0       	ldi	r27, 0x01	; 1
     b84:	b9 8b       	std	Y+17, r27	; 0x11
     b86:	f1 01       	movw	r30, r2
     b88:	22 a1       	ldd	r18, Z+34	; 0x22
     b8a:	33 a1       	ldd	r19, Z+35	; 0x23
     b8c:	87 a1       	ldd	r24, Z+39	; 0x27
     b8e:	90 a5       	ldd	r25, Z+40	; 0x28
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	09 f4       	brne	.+2      	; 0xb98 <__stack+0x299>
     b96:	d8 ca       	rjmp	.-2640   	; 0x148 <_ZN5Robot14mainRobotLogicEv+0x4a>
     b98:	19 8a       	std	Y+17, r1	; 0x11
     b9a:	d6 ca       	rjmp	.-2644   	; 0x148 <_ZN5Robot14mainRobotLogicEv+0x4a>
				{
					isLastStep = true;
				}
			}
		}
     b9c:	61 96       	adiw	r28, 0x11	; 17
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	5f 90       	pop	r5
     bc6:	4f 90       	pop	r4
     bc8:	3f 90       	pop	r3
     bca:	2f 90       	pop	r2
     bcc:	08 95       	ret

00000bce <main>:
};

// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	e3 97       	sbiw	r28, 0x33	; 51
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
{
	public:
		Robot()
			: position( 0, 0 )
			, orientation( EOrientation::North )
			, finishPos( 0, 3 )
     be2:	80 e2       	ldi	r24, 0x20	; 32
     be4:	e2 e1       	ldi	r30, 0x12	; 18
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	de 01       	movw	r26, r28
     bea:	11 96       	adiw	r26, 0x01	; 1
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	8a 95       	dec	r24
     bf2:	e1 f7       	brne	.-8      	; 0xbec <main+0x1e>
struct Point2D
{
	public:
	Point2D(short inX, short inY)
	: x( inX )
	, y ( inY )
     bf4:	1a a2       	std	Y+34, r1	; 0x22
     bf6:	19 a2       	std	Y+33, r1	; 0x21
     bf8:	1c a2       	std	Y+36, r1	; 0x24
     bfa:	1b a2       	std	Y+35, r1	; 0x23
{
	public:
		Robot()
			: position( 0, 0 )
			, orientation( EOrientation::North )
			, finishPos( 0, 3 )
     bfc:	1d a2       	std	Y+37, r1	; 0x25
struct Point2D
{
	public:
	Point2D(short inX, short inY)
	: x( inX )
	, y ( inY )
     bfe:	1f a2       	std	Y+39, r1	; 0x27
     c00:	1e a2       	std	Y+38, r1	; 0x26
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	99 a7       	std	Y+41, r25	; 0x29
     c08:	88 a7       	std	Y+40, r24	; 0x28
		
		// Waits for Button B to be pressed for user convenience and then
		// Initializes the line reading sensors
		void initialize()
		{	
			pololu_3pi_init( 2000 );
     c0a:	80 ed       	ldi	r24, 0xD0	; 208
     c0c:	97 e0       	ldi	r25, 0x07	; 7
     c0e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <pololu_3pi_init>
			set_motors( 0, 0 );
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
			// Display battery voltage and wait for button press
			while ( !button_is_pressed( BUTTON_B ) )
			{
				if ( button_is_pressed( BUTTON_A ) )
				{
					finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     c1e:	0f 2e       	mov	r0, r31
     c20:	ff e0       	ldi	r31, 0x0F	; 15
     c22:	cf 2e       	mov	r12, r31
     c24:	d1 2c       	mov	r13, r1
     c26:	f0 2d       	mov	r31, r0
		}
		
		void doMenu()
		{
			// Display battery voltage and wait for button press
			while ( !button_is_pressed( BUTTON_B ) )
     c28:	80 e1       	ldi	r24, 0x10	; 16
     c2a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <button_is_pressed>
     c2e:	81 11       	cpse	r24, r1
     c30:	45 c0       	rjmp	.+138    	; 0xcbc <main+0xee>
			{
				if ( button_is_pressed( BUTTON_A ) )
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <button_is_pressed>
     c38:	88 23       	and	r24, r24
     c3a:	41 f0       	breq	.+16     	; 0xc4c <main+0x7e>
				{
					finishPos.x = ( finishPos.x + 1 ) % MAX_ROWS;
     c3c:	8e a1       	ldd	r24, Y+38	; 0x26
     c3e:	9f a1       	ldd	r25, Y+39	; 0x27
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 82 12 	call	0x2504	; 0x2504 <__divmodhi4>
     c48:	9f a3       	std	Y+39, r25	; 0x27
     c4a:	8e a3       	std	Y+38, r24	; 0x26
				}
				
				if ( button_is_pressed( BUTTON_C ) )
     c4c:	80 e2       	ldi	r24, 0x20	; 32
     c4e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <button_is_pressed>
     c52:	88 23       	and	r24, r24
     c54:	41 f0       	breq	.+16     	; 0xc66 <main+0x98>
				{
					finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
     c56:	88 a5       	ldd	r24, Y+40	; 0x28
     c58:	99 a5       	ldd	r25, Y+41	; 0x29
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	b6 01       	movw	r22, r12
     c5e:	0e 94 82 12 	call	0x2504	; 0x2504 <__divmodhi4>
     c62:	99 a7       	std	Y+41, r25	; 0x29
     c64:	88 a7       	std	Y+40, r24	; 0x28
				}
				
				printPos(finishPos.x, finishPos.y);
     c66:	08 a5       	ldd	r16, Y+40	; 0x28
     c68:	19 a5       	ldd	r17, Y+41	; 0x29
     c6a:	ee a0       	ldd	r14, Y+38	; 0x26
     c6c:	ff a0       	ldd	r15, Y+39	; 0x27
			}
			
		}
		
		void printPos(short x, short y){
			clear();
     c6e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear>
			print("(");
     c72:	8d e5       	ldi	r24, 0x5D	; 93
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
			print_long( x );
     c7a:	b7 01       	movw	r22, r14
     c7c:	ff 0c       	add	r15, r15
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <print_long>
			print(", ");
     c86:	8f e5       	ldi	r24, 0x5F	; 95
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
			print_long( y );
     c8e:	b8 01       	movw	r22, r16
     c90:	11 0f       	add	r17, r17
     c92:	88 0b       	sbc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <print_long>
			print(")");
     c9a:	82 e6       	ldi	r24, 0x62	; 98
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
					finishPos.y = ( finishPos.y + 1 ) % MAX_ROWS;
				}
				
				printPos(finishPos.x, finishPos.y);
				
				lcd_goto_xy( 0, 1 );
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <lcd_goto_xy>
				print( " A B C " );
     caa:	8a e6       	ldi	r24, 0x6A	; 106
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <print>
				
				delay_ms( 100 );
     cb2:	84 e6       	ldi	r24, 0x64	; 100
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
     cba:	b6 cf       	rjmp	.-148    	; 0xc28 <main+0x5a>
			}
			
			// Always wait for the button to be released so that 3pi doesn't
			// start moving until your hand is away from it.
			wait_for_button_release( BUTTON_B );
     cbc:	80 e1       	ldi	r24, 0x10	; 16
     cbe:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <wait_for_button_release>
			delay_ms( 1000 );
     cc2:	88 ee       	ldi	r24, 0xE8	; 232
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
{
	Robot robot;
	// set up the 3pi
	robot.initialize();
	
	robot.mainRobotLogic();
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN5Robot14mainRobotLogicEv>
	//robot.test_sensors();
	// Set Down of the robot.
	set_motors( 0, 0 );
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <set_motors>
     cde:	ff cf       	rjmp	.-2      	; 0xcde <main+0x110>

00000ce0 <_GLOBAL__sub_I_matrix>:
	while ( true )
	{
		// Call this in the end in order not to let the robot execute random code!!!
	}
}
     ce0:	41 ed       	ldi	r20, 0xD1	; 209
     ce2:	51 e0       	ldi	r21, 0x01	; 1
	public:
	Cell()
	: distToStart( INT_MAX )
	, distToFinish( INT_MAX )
	, isObstacle( false )
	, isVisited( false )
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	9f e7       	ldi	r25, 0x7F	; 127
     ce8:	fa 01       	movw	r30, r20
     cea:	48 58       	subi	r20, 0x88	; 136
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	9a 01       	movw	r18, r20
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	80 83       	st	Z, r24
     cf4:	93 83       	std	Z+3, r25	; 0x03
     cf6:	82 83       	std	Z+2, r24	; 0x02
     cf8:	14 82       	std	Z+4, r1	; 0x04
     cfa:	17 82       	std	Z+7, r1	; 0x07
     cfc:	38 96       	adiw	r30, 0x08	; 8
	Point2D*	parent;
	bool		isVisited;

};

Cell matrix[ MAX_ROWS ][ MAX_ROWS ];
     cfe:	e2 17       	cp	r30, r18
     d00:	f3 07       	cpc	r31, r19
     d02:	b1 f7       	brne	.-20     	; 0xcf0 <_GLOBAL__sub_I_matrix+0x10>
     d04:	28 e0       	ldi	r18, 0x08	; 8
     d06:	49 3d       	cpi	r20, 0xD9	; 217
     d08:	52 07       	cpc	r21, r18
     d0a:	71 f7       	brne	.-36     	; 0xce8 <_GLOBAL__sub_I_matrix+0x8>
	set_motors( 0, 0 );
	while ( true )
	{
		// Call this in the end in order not to let the robot execute random code!!!
	}
}
     d0c:	08 95       	ret

00000d0e <atan>:
     d0e:	df 93       	push	r29
     d10:	dd 27       	eor	r29, r29
     d12:	b9 2f       	mov	r27, r25
     d14:	bf 77       	andi	r27, 0x7F	; 127
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	16 16       	cp	r1, r22
     d1c:	17 06       	cpc	r1, r23
     d1e:	48 07       	cpc	r20, r24
     d20:	5b 07       	cpc	r21, r27
     d22:	18 f4       	brcc	.+6      	; 0xd2a <atan+0x1c>
     d24:	d9 2f       	mov	r29, r25
     d26:	0e 94 13 08 	call	0x1026	; 0x1026 <inverse>
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	7f 93       	push	r23
     d30:	6f 93       	push	r22
     d32:	0e 94 ac 08 	call	0x1158	; 0x1158 <square>
     d36:	e8 e7       	ldi	r30, 0x78	; 120
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_powser>
     d3e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_round>
     d42:	2f 91       	pop	r18
     d44:	3f 91       	pop	r19
     d46:	4f 91       	pop	r20
     d48:	5f 91       	pop	r21
     d4a:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
     d4e:	dd 23       	and	r29, r29
     d50:	51 f0       	breq	.+20     	; 0xd66 <atan+0x58>
     d52:	90 58       	subi	r25, 0x80	; 128
     d54:	a2 ea       	ldi	r26, 0xA2	; 162
     d56:	2a ed       	ldi	r18, 0xDA	; 218
     d58:	3f e0       	ldi	r19, 0x0F	; 15
     d5a:	49 ec       	ldi	r20, 0xC9	; 201
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	d0 78       	andi	r29, 0x80	; 128
     d60:	5d 27       	eor	r21, r29
     d62:	0e 94 c1 08 	call	0x1182	; 0x1182 <__addsf3x>
     d66:	df 91       	pop	r29
     d68:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_round>

00000d6c <__divsf3>:
     d6c:	0e 94 ca 06 	call	0xd94	; 0xd94 <__divsf3x>
     d70:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_round>
     d74:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_pscB>
     d78:	58 f0       	brcs	.+22     	; 0xd90 <__divsf3+0x24>
     d7a:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_pscA>
     d7e:	40 f0       	brcs	.+16     	; 0xd90 <__divsf3+0x24>
     d80:	29 f4       	brne	.+10     	; 0xd8c <__divsf3+0x20>
     d82:	5f 3f       	cpi	r21, 0xFF	; 255
     d84:	29 f0       	breq	.+10     	; 0xd90 <__divsf3+0x24>
     d86:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>
     d8a:	51 11       	cpse	r21, r1
     d8c:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_szero>
     d90:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_nan>

00000d94 <__divsf3x>:
     d94:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_split3>
     d98:	68 f3       	brcs	.-38     	; 0xd74 <__divsf3+0x8>

00000d9a <__divsf3_pse>:
     d9a:	99 23       	and	r25, r25
     d9c:	b1 f3       	breq	.-20     	; 0xd8a <__divsf3+0x1e>
     d9e:	55 23       	and	r21, r21
     da0:	91 f3       	breq	.-28     	; 0xd86 <__divsf3+0x1a>
     da2:	95 1b       	sub	r25, r21
     da4:	55 0b       	sbc	r21, r21
     da6:	bb 27       	eor	r27, r27
     da8:	aa 27       	eor	r26, r26
     daa:	62 17       	cp	r22, r18
     dac:	73 07       	cpc	r23, r19
     dae:	84 07       	cpc	r24, r20
     db0:	38 f0       	brcs	.+14     	; 0xdc0 <__divsf3_pse+0x26>
     db2:	9f 5f       	subi	r25, 0xFF	; 255
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	44 1f       	adc	r20, r20
     dbc:	aa 1f       	adc	r26, r26
     dbe:	a9 f3       	breq	.-22     	; 0xdaa <__divsf3_pse+0x10>
     dc0:	35 d0       	rcall	.+106    	; 0xe2c <__divsf3_pse+0x92>
     dc2:	0e 2e       	mov	r0, r30
     dc4:	3a f0       	brmi	.+14     	; 0xdd4 <__divsf3_pse+0x3a>
     dc6:	e0 e8       	ldi	r30, 0x80	; 128
     dc8:	32 d0       	rcall	.+100    	; 0xe2e <__divsf3_pse+0x94>
     dca:	91 50       	subi	r25, 0x01	; 1
     dcc:	50 40       	sbci	r21, 0x00	; 0
     dce:	e6 95       	lsr	r30
     dd0:	00 1c       	adc	r0, r0
     dd2:	ca f7       	brpl	.-14     	; 0xdc6 <__divsf3_pse+0x2c>
     dd4:	2b d0       	rcall	.+86     	; 0xe2c <__divsf3_pse+0x92>
     dd6:	fe 2f       	mov	r31, r30
     dd8:	29 d0       	rcall	.+82     	; 0xe2c <__divsf3_pse+0x92>
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	88 1f       	adc	r24, r24
     de0:	bb 1f       	adc	r27, r27
     de2:	26 17       	cp	r18, r22
     de4:	37 07       	cpc	r19, r23
     de6:	48 07       	cpc	r20, r24
     de8:	ab 07       	cpc	r26, r27
     dea:	b0 e8       	ldi	r27, 0x80	; 128
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__divsf3_pse+0x56>
     dee:	bb 0b       	sbc	r27, r27
     df0:	80 2d       	mov	r24, r0
     df2:	bf 01       	movw	r22, r30
     df4:	ff 27       	eor	r31, r31
     df6:	93 58       	subi	r25, 0x83	; 131
     df8:	5f 4f       	sbci	r21, 0xFF	; 255
     dfa:	3a f0       	brmi	.+14     	; 0xe0a <__divsf3_pse+0x70>
     dfc:	9e 3f       	cpi	r25, 0xFE	; 254
     dfe:	51 05       	cpc	r21, r1
     e00:	78 f0       	brcs	.+30     	; 0xe20 <__divsf3_pse+0x86>
     e02:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>
     e06:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_szero>
     e0a:	5f 3f       	cpi	r21, 0xFF	; 255
     e0c:	e4 f3       	brlt	.-8      	; 0xe06 <__divsf3_pse+0x6c>
     e0e:	98 3e       	cpi	r25, 0xE8	; 232
     e10:	d4 f3       	brlt	.-12     	; 0xe06 <__divsf3_pse+0x6c>
     e12:	86 95       	lsr	r24
     e14:	77 95       	ror	r23
     e16:	67 95       	ror	r22
     e18:	b7 95       	ror	r27
     e1a:	f7 95       	ror	r31
     e1c:	9f 5f       	subi	r25, 0xFF	; 255
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__divsf3_pse+0x78>
     e20:	88 0f       	add	r24, r24
     e22:	91 1d       	adc	r25, r1
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	97 f9       	bld	r25, 7
     e2a:	08 95       	ret
     e2c:	e1 e0       	ldi	r30, 0x01	; 1
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	bb 1f       	adc	r27, r27
     e36:	62 17       	cp	r22, r18
     e38:	73 07       	cpc	r23, r19
     e3a:	84 07       	cpc	r24, r20
     e3c:	ba 07       	cpc	r27, r26
     e3e:	20 f0       	brcs	.+8      	; 0xe48 <__divsf3_pse+0xae>
     e40:	62 1b       	sub	r22, r18
     e42:	73 0b       	sbc	r23, r19
     e44:	84 0b       	sbc	r24, r20
     e46:	ba 0b       	sbc	r27, r26
     e48:	ee 1f       	adc	r30, r30
     e4a:	88 f7       	brcc	.-30     	; 0xe2e <__divsf3_pse+0x94>
     e4c:	e0 95       	com	r30
     e4e:	08 95       	ret

00000e50 <__fixsfsi>:
     e50:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fixunssfsi>
     e54:	68 94       	set
     e56:	b1 11       	cpse	r27, r1
     e58:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_szero>
     e5c:	08 95       	ret

00000e5e <__fixunssfsi>:
     e5e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_splitA>
     e62:	88 f0       	brcs	.+34     	; 0xe86 <__fixunssfsi+0x28>
     e64:	9f 57       	subi	r25, 0x7F	; 127
     e66:	98 f0       	brcs	.+38     	; 0xe8e <__fixunssfsi+0x30>
     e68:	b9 2f       	mov	r27, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	b7 51       	subi	r27, 0x17	; 23
     e6e:	b0 f0       	brcs	.+44     	; 0xe9c <__fixunssfsi+0x3e>
     e70:	e1 f0       	breq	.+56     	; 0xeaa <__fixunssfsi+0x4c>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	1a f0       	brmi	.+6      	; 0xe82 <__fixunssfsi+0x24>
     e7c:	ba 95       	dec	r27
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__fixunssfsi+0x14>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <__fixunssfsi+0x4c>
     e82:	b1 30       	cpi	r27, 0x01	; 1
     e84:	91 f0       	breq	.+36     	; 0xeaa <__fixunssfsi+0x4c>
     e86:	0e 94 0c 08 	call	0x1018	; 0x1018 <__fp_zero>
     e8a:	b1 e0       	ldi	r27, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__fp_zero>
     e92:	67 2f       	mov	r22, r23
     e94:	78 2f       	mov	r23, r24
     e96:	88 27       	eor	r24, r24
     e98:	b8 5f       	subi	r27, 0xF8	; 248
     e9a:	39 f0       	breq	.+14     	; 0xeaa <__fixunssfsi+0x4c>
     e9c:	b9 3f       	cpi	r27, 0xF9	; 249
     e9e:	cc f3       	brlt	.-14     	; 0xe92 <__fixunssfsi+0x34>
     ea0:	86 95       	lsr	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b3 95       	inc	r27
     ea8:	d9 f7       	brne	.-10     	; 0xea0 <__fixunssfsi+0x42>
     eaa:	3e f4       	brtc	.+14     	; 0xeba <__fixunssfsi+0x5c>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	08 95       	ret

00000ebc <__floatunsisf>:
     ebc:	e8 94       	clt
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <__floatsisf+0x12>

00000ec0 <__floatsisf>:
     ec0:	97 fb       	bst	r25, 7
     ec2:	3e f4       	brtc	.+14     	; 0xed2 <__floatsisf+0x12>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	99 23       	and	r25, r25
     ed4:	a9 f0       	breq	.+42     	; 0xf00 <__floatsisf+0x40>
     ed6:	f9 2f       	mov	r31, r25
     ed8:	96 e9       	ldi	r25, 0x96	; 150
     eda:	bb 27       	eor	r27, r27
     edc:	93 95       	inc	r25
     ede:	f6 95       	lsr	r31
     ee0:	87 95       	ror	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	b7 95       	ror	r27
     ee8:	f1 11       	cpse	r31, r1
     eea:	f8 cf       	rjmp	.-16     	; 0xedc <__floatsisf+0x1c>
     eec:	fa f4       	brpl	.+62     	; 0xf2c <__floatsisf+0x6c>
     eee:	bb 0f       	add	r27, r27
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__floatsisf+0x36>
     ef2:	60 ff       	sbrs	r22, 0
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__floatsisf+0x6c>
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <__floatsisf+0x6c>
     f00:	88 23       	and	r24, r24
     f02:	11 f0       	breq	.+4      	; 0xf08 <__floatsisf+0x48>
     f04:	96 e9       	ldi	r25, 0x96	; 150
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <__floatsisf+0x6a>
     f08:	77 23       	and	r23, r23
     f0a:	21 f0       	breq	.+8      	; 0xf14 <__floatsisf+0x54>
     f0c:	9e e8       	ldi	r25, 0x8E	; 142
     f0e:	87 2f       	mov	r24, r23
     f10:	76 2f       	mov	r23, r22
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__floatsisf+0x5e>
     f14:	66 23       	and	r22, r22
     f16:	71 f0       	breq	.+28     	; 0xf34 <__floatsisf+0x74>
     f18:	96 e8       	ldi	r25, 0x86	; 134
     f1a:	86 2f       	mov	r24, r22
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	2a f0       	brmi	.+10     	; 0xf2c <__floatsisf+0x6c>
     f22:	9a 95       	dec	r25
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	da f7       	brpl	.-10     	; 0xf22 <__floatsisf+0x62>
     f2c:	88 0f       	add	r24, r24
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	97 f9       	bld	r25, 7
     f34:	08 95       	ret

00000f36 <__fp_inf>:
     f36:	97 f9       	bld	r25, 7
     f38:	9f 67       	ori	r25, 0x7F	; 127
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	08 95       	ret

00000f42 <__fp_nan>:
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	80 ec       	ldi	r24, 0xC0	; 192
     f46:	08 95       	ret

00000f48 <__fp_powser>:
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	1f 93       	push	r17
     f4e:	0f 93       	push	r16
     f50:	ff 92       	push	r15
     f52:	ef 92       	push	r14
     f54:	df 92       	push	r13
     f56:	7b 01       	movw	r14, r22
     f58:	8c 01       	movw	r16, r24
     f5a:	68 94       	set
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <__fp_powser+0x22>
     f5e:	da 2e       	mov	r13, r26
     f60:	ef 01       	movw	r28, r30
     f62:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
     f66:	fe 01       	movw	r30, r28
     f68:	e8 94       	clt
     f6a:	a5 91       	lpm	r26, Z+
     f6c:	25 91       	lpm	r18, Z+
     f6e:	35 91       	lpm	r19, Z+
     f70:	45 91       	lpm	r20, Z+
     f72:	55 91       	lpm	r21, Z+
     f74:	a6 f3       	brts	.-24     	; 0xf5e <__fp_powser+0x16>
     f76:	ef 01       	movw	r28, r30
     f78:	0e 94 c1 08 	call	0x1182	; 0x1182 <__addsf3x>
     f7c:	fe 01       	movw	r30, r28
     f7e:	97 01       	movw	r18, r14
     f80:	a8 01       	movw	r20, r16
     f82:	da 94       	dec	r13
     f84:	69 f7       	brne	.-38     	; 0xf60 <__fp_powser+0x18>
     f86:	df 90       	pop	r13
     f88:	ef 90       	pop	r14
     f8a:	ff 90       	pop	r15
     f8c:	0f 91       	pop	r16
     f8e:	1f 91       	pop	r17
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <__fp_pscA>:
     f96:	00 24       	eor	r0, r0
     f98:	0a 94       	dec	r0
     f9a:	16 16       	cp	r1, r22
     f9c:	17 06       	cpc	r1, r23
     f9e:	18 06       	cpc	r1, r24
     fa0:	09 06       	cpc	r0, r25
     fa2:	08 95       	ret

00000fa4 <__fp_pscB>:
     fa4:	00 24       	eor	r0, r0
     fa6:	0a 94       	dec	r0
     fa8:	12 16       	cp	r1, r18
     faa:	13 06       	cpc	r1, r19
     fac:	14 06       	cpc	r1, r20
     fae:	05 06       	cpc	r0, r21
     fb0:	08 95       	ret

00000fb2 <__fp_round>:
     fb2:	09 2e       	mov	r0, r25
     fb4:	03 94       	inc	r0
     fb6:	00 0c       	add	r0, r0
     fb8:	11 f4       	brne	.+4      	; 0xfbe <__fp_round+0xc>
     fba:	88 23       	and	r24, r24
     fbc:	52 f0       	brmi	.+20     	; 0xfd2 <__fp_round+0x20>
     fbe:	bb 0f       	add	r27, r27
     fc0:	40 f4       	brcc	.+16     	; 0xfd2 <__fp_round+0x20>
     fc2:	bf 2b       	or	r27, r31
     fc4:	11 f4       	brne	.+4      	; 0xfca <__fp_round+0x18>
     fc6:	60 ff       	sbrs	r22, 0
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <__fp_round+0x20>
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	08 95       	ret

00000fd4 <__fp_split3>:
     fd4:	57 fd       	sbrc	r21, 7
     fd6:	90 58       	subi	r25, 0x80	; 128
     fd8:	44 0f       	add	r20, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	59 f0       	breq	.+22     	; 0xff4 <__fp_splitA+0x10>
     fde:	5f 3f       	cpi	r21, 0xFF	; 255
     fe0:	71 f0       	breq	.+28     	; 0xffe <__fp_splitA+0x1a>
     fe2:	47 95       	ror	r20

00000fe4 <__fp_splitA>:
     fe4:	88 0f       	add	r24, r24
     fe6:	97 fb       	bst	r25, 7
     fe8:	99 1f       	adc	r25, r25
     fea:	61 f0       	breq	.+24     	; 0x1004 <__fp_splitA+0x20>
     fec:	9f 3f       	cpi	r25, 0xFF	; 255
     fee:	79 f0       	breq	.+30     	; 0x100e <__fp_splitA+0x2a>
     ff0:	87 95       	ror	r24
     ff2:	08 95       	ret
     ff4:	12 16       	cp	r1, r18
     ff6:	13 06       	cpc	r1, r19
     ff8:	14 06       	cpc	r1, r20
     ffa:	55 1f       	adc	r21, r21
     ffc:	f2 cf       	rjmp	.-28     	; 0xfe2 <__fp_split3+0xe>
     ffe:	46 95       	lsr	r20
    1000:	f1 df       	rcall	.-30     	; 0xfe4 <__fp_splitA>
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <__fp_splitA+0x30>
    1004:	16 16       	cp	r1, r22
    1006:	17 06       	cpc	r1, r23
    1008:	18 06       	cpc	r1, r24
    100a:	99 1f       	adc	r25, r25
    100c:	f1 cf       	rjmp	.-30     	; 0xff0 <__fp_splitA+0xc>
    100e:	86 95       	lsr	r24
    1010:	71 05       	cpc	r23, r1
    1012:	61 05       	cpc	r22, r1
    1014:	08 94       	sec
    1016:	08 95       	ret

00001018 <__fp_zero>:
    1018:	e8 94       	clt

0000101a <__fp_szero>:
    101a:	bb 27       	eor	r27, r27
    101c:	66 27       	eor	r22, r22
    101e:	77 27       	eor	r23, r23
    1020:	cb 01       	movw	r24, r22
    1022:	97 f9       	bld	r25, 7
    1024:	08 95       	ret

00001026 <inverse>:
    1026:	9b 01       	movw	r18, r22
    1028:	ac 01       	movw	r20, r24
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	9f e3       	ldi	r25, 0x3F	; 63
    1032:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__divsf3>

00001036 <__mulsf3>:
    1036:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
    103a:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_round>
    103e:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_pscA>
    1042:	38 f0       	brcs	.+14     	; 0x1052 <__mulsf3+0x1c>
    1044:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_pscB>
    1048:	20 f0       	brcs	.+8      	; 0x1052 <__mulsf3+0x1c>
    104a:	95 23       	and	r25, r21
    104c:	11 f0       	breq	.+4      	; 0x1052 <__mulsf3+0x1c>
    104e:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>
    1052:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_nan>
    1056:	11 24       	eor	r1, r1
    1058:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_szero>

0000105c <__mulsf3x>:
    105c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_split3>
    1060:	70 f3       	brcs	.-36     	; 0x103e <__mulsf3+0x8>

00001062 <__mulsf3_pse>:
    1062:	95 9f       	mul	r25, r21
    1064:	c1 f3       	breq	.-16     	; 0x1056 <__mulsf3+0x20>
    1066:	95 0f       	add	r25, r21
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	55 1f       	adc	r21, r21
    106c:	62 9f       	mul	r22, r18
    106e:	f0 01       	movw	r30, r0
    1070:	72 9f       	mul	r23, r18
    1072:	bb 27       	eor	r27, r27
    1074:	f0 0d       	add	r31, r0
    1076:	b1 1d       	adc	r27, r1
    1078:	63 9f       	mul	r22, r19
    107a:	aa 27       	eor	r26, r26
    107c:	f0 0d       	add	r31, r0
    107e:	b1 1d       	adc	r27, r1
    1080:	aa 1f       	adc	r26, r26
    1082:	64 9f       	mul	r22, r20
    1084:	66 27       	eor	r22, r22
    1086:	b0 0d       	add	r27, r0
    1088:	a1 1d       	adc	r26, r1
    108a:	66 1f       	adc	r22, r22
    108c:	82 9f       	mul	r24, r18
    108e:	22 27       	eor	r18, r18
    1090:	b0 0d       	add	r27, r0
    1092:	a1 1d       	adc	r26, r1
    1094:	62 1f       	adc	r22, r18
    1096:	73 9f       	mul	r23, r19
    1098:	b0 0d       	add	r27, r0
    109a:	a1 1d       	adc	r26, r1
    109c:	62 1f       	adc	r22, r18
    109e:	83 9f       	mul	r24, r19
    10a0:	a0 0d       	add	r26, r0
    10a2:	61 1d       	adc	r22, r1
    10a4:	22 1f       	adc	r18, r18
    10a6:	74 9f       	mul	r23, r20
    10a8:	33 27       	eor	r19, r19
    10aa:	a0 0d       	add	r26, r0
    10ac:	61 1d       	adc	r22, r1
    10ae:	23 1f       	adc	r18, r19
    10b0:	84 9f       	mul	r24, r20
    10b2:	60 0d       	add	r22, r0
    10b4:	21 1d       	adc	r18, r1
    10b6:	82 2f       	mov	r24, r18
    10b8:	76 2f       	mov	r23, r22
    10ba:	6a 2f       	mov	r22, r26
    10bc:	11 24       	eor	r1, r1
    10be:	9f 57       	subi	r25, 0x7F	; 127
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	9a f0       	brmi	.+38     	; 0x10ea <__mulsf3_pse+0x88>
    10c4:	f1 f0       	breq	.+60     	; 0x1102 <__mulsf3_pse+0xa0>
    10c6:	88 23       	and	r24, r24
    10c8:	4a f0       	brmi	.+18     	; 0x10dc <__mulsf3_pse+0x7a>
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	bb 1f       	adc	r27, r27
    10d0:	66 1f       	adc	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	91 50       	subi	r25, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	a9 f7       	brne	.-22     	; 0x10c6 <__mulsf3_pse+0x64>
    10dc:	9e 3f       	cpi	r25, 0xFE	; 254
    10de:	51 05       	cpc	r21, r1
    10e0:	80 f0       	brcs	.+32     	; 0x1102 <__mulsf3_pse+0xa0>
    10e2:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>
    10e6:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_szero>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	e4 f3       	brlt	.-8      	; 0x10e6 <__mulsf3_pse+0x84>
    10ee:	98 3e       	cpi	r25, 0xE8	; 232
    10f0:	d4 f3       	brlt	.-12     	; 0x10e6 <__mulsf3_pse+0x84>
    10f2:	86 95       	lsr	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	f7 95       	ror	r31
    10fc:	e7 95       	ror	r30
    10fe:	9f 5f       	subi	r25, 0xFF	; 255
    1100:	c1 f7       	brne	.-16     	; 0x10f2 <__mulsf3_pse+0x90>
    1102:	fe 2b       	or	r31, r30
    1104:	88 0f       	add	r24, r24
    1106:	91 1d       	adc	r25, r1
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	97 f9       	bld	r25, 7
    110e:	08 95       	ret

00001110 <round>:
    1110:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_splitA>
    1114:	e8 f0       	brcs	.+58     	; 0x1150 <round+0x40>
    1116:	9e 37       	cpi	r25, 0x7E	; 126
    1118:	e8 f0       	brcs	.+58     	; 0x1154 <round+0x44>
    111a:	96 39       	cpi	r25, 0x96	; 150
    111c:	b8 f4       	brcc	.+46     	; 0x114c <round+0x3c>
    111e:	9e 38       	cpi	r25, 0x8E	; 142
    1120:	48 f4       	brcc	.+18     	; 0x1134 <round+0x24>
    1122:	67 2f       	mov	r22, r23
    1124:	78 2f       	mov	r23, r24
    1126:	88 27       	eor	r24, r24
    1128:	98 5f       	subi	r25, 0xF8	; 248
    112a:	f9 cf       	rjmp	.-14     	; 0x111e <round+0xe>
    112c:	86 95       	lsr	r24
    112e:	77 95       	ror	r23
    1130:	67 95       	ror	r22
    1132:	93 95       	inc	r25
    1134:	95 39       	cpi	r25, 0x95	; 149
    1136:	d0 f3       	brcs	.-12     	; 0x112c <round+0x1c>
    1138:	b6 2f       	mov	r27, r22
    113a:	b1 70       	andi	r27, 0x01	; 1
    113c:	6b 0f       	add	r22, r27
    113e:	71 1d       	adc	r23, r1
    1140:	81 1d       	adc	r24, r1
    1142:	20 f4       	brcc	.+8      	; 0x114c <round+0x3c>
    1144:	87 95       	ror	r24
    1146:	77 95       	ror	r23
    1148:	67 95       	ror	r22
    114a:	93 95       	inc	r25
    114c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_mintl>
    1150:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__fp_mpack>
    1154:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_szero>

00001158 <square>:
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__mulsf3>
    1160:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_pscA>
    1164:	38 f0       	brcs	.+14     	; 0x1174 <square+0x1c>
    1166:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_pscB>
    116a:	20 f0       	brcs	.+8      	; 0x1174 <square+0x1c>
    116c:	39 f4       	brne	.+14     	; 0x117c <square+0x24>
    116e:	9f 3f       	cpi	r25, 0xFF	; 255
    1170:	19 f4       	brne	.+6      	; 0x1178 <square+0x20>
    1172:	26 f4       	brtc	.+8      	; 0x117c <square+0x24>
    1174:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_nan>
    1178:	0e f4       	brtc	.+2      	; 0x117c <square+0x24>
    117a:	e0 95       	com	r30
    117c:	e7 fb       	bst	r30, 7
    117e:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>

00001182 <__addsf3x>:
    1182:	e9 2f       	mov	r30, r25
    1184:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_split3>
    1188:	58 f3       	brcs	.-42     	; 0x1160 <square+0x8>
    118a:	ba 17       	cp	r27, r26
    118c:	62 07       	cpc	r22, r18
    118e:	73 07       	cpc	r23, r19
    1190:	84 07       	cpc	r24, r20
    1192:	95 07       	cpc	r25, r21
    1194:	20 f0       	brcs	.+8      	; 0x119e <__addsf3x+0x1c>
    1196:	79 f4       	brne	.+30     	; 0x11b6 <__addsf3x+0x34>
    1198:	a6 f5       	brtc	.+104    	; 0x1202 <__addsf3x+0x80>
    119a:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__fp_zero>
    119e:	0e f4       	brtc	.+2      	; 0x11a2 <__addsf3x+0x20>
    11a0:	e0 95       	com	r30
    11a2:	0b 2e       	mov	r0, r27
    11a4:	ba 2f       	mov	r27, r26
    11a6:	a0 2d       	mov	r26, r0
    11a8:	0b 01       	movw	r0, r22
    11aa:	b9 01       	movw	r22, r18
    11ac:	90 01       	movw	r18, r0
    11ae:	0c 01       	movw	r0, r24
    11b0:	ca 01       	movw	r24, r20
    11b2:	a0 01       	movw	r20, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	ff 27       	eor	r31, r31
    11b8:	59 1b       	sub	r21, r25
    11ba:	99 f0       	breq	.+38     	; 0x11e2 <__addsf3x+0x60>
    11bc:	59 3f       	cpi	r21, 0xF9	; 249
    11be:	50 f4       	brcc	.+20     	; 0x11d4 <__addsf3x+0x52>
    11c0:	50 3e       	cpi	r21, 0xE0	; 224
    11c2:	68 f1       	brcs	.+90     	; 0x121e <__addsf3x+0x9c>
    11c4:	1a 16       	cp	r1, r26
    11c6:	f0 40       	sbci	r31, 0x00	; 0
    11c8:	a2 2f       	mov	r26, r18
    11ca:	23 2f       	mov	r18, r19
    11cc:	34 2f       	mov	r19, r20
    11ce:	44 27       	eor	r20, r20
    11d0:	58 5f       	subi	r21, 0xF8	; 248
    11d2:	f3 cf       	rjmp	.-26     	; 0x11ba <__addsf3x+0x38>
    11d4:	46 95       	lsr	r20
    11d6:	37 95       	ror	r19
    11d8:	27 95       	ror	r18
    11da:	a7 95       	ror	r26
    11dc:	f0 40       	sbci	r31, 0x00	; 0
    11de:	53 95       	inc	r21
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <__addsf3x+0x52>
    11e2:	7e f4       	brtc	.+30     	; 0x1202 <__addsf3x+0x80>
    11e4:	1f 16       	cp	r1, r31
    11e6:	ba 0b       	sbc	r27, r26
    11e8:	62 0b       	sbc	r22, r18
    11ea:	73 0b       	sbc	r23, r19
    11ec:	84 0b       	sbc	r24, r20
    11ee:	ba f0       	brmi	.+46     	; 0x121e <__addsf3x+0x9c>
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	a1 f0       	breq	.+40     	; 0x121c <__addsf3x+0x9a>
    11f4:	ff 0f       	add	r31, r31
    11f6:	bb 1f       	adc	r27, r27
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	c2 f7       	brpl	.-16     	; 0x11f0 <__addsf3x+0x6e>
    1200:	0e c0       	rjmp	.+28     	; 0x121e <__addsf3x+0x9c>
    1202:	ba 0f       	add	r27, r26
    1204:	62 1f       	adc	r22, r18
    1206:	73 1f       	adc	r23, r19
    1208:	84 1f       	adc	r24, r20
    120a:	48 f4       	brcc	.+18     	; 0x121e <__addsf3x+0x9c>
    120c:	87 95       	ror	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	b7 95       	ror	r27
    1214:	f7 95       	ror	r31
    1216:	9e 3f       	cpi	r25, 0xFE	; 254
    1218:	08 f0       	brcs	.+2      	; 0x121c <__addsf3x+0x9a>
    121a:	b0 cf       	rjmp	.-160    	; 0x117c <square+0x24>
    121c:	93 95       	inc	r25
    121e:	88 0f       	add	r24, r24
    1220:	08 f0       	brcs	.+2      	; 0x1224 <__addsf3x+0xa2>
    1222:	99 27       	eor	r25, r25
    1224:	ee 0f       	add	r30, r30
    1226:	97 95       	ror	r25
    1228:	87 95       	ror	r24
    122a:	08 95       	ret

0000122c <__fp_mintl>:
    122c:	88 23       	and	r24, r24
    122e:	71 f4       	brne	.+28     	; 0x124c <__fp_mintl+0x20>
    1230:	77 23       	and	r23, r23
    1232:	21 f0       	breq	.+8      	; 0x123c <__fp_mintl+0x10>
    1234:	98 50       	subi	r25, 0x08	; 8
    1236:	87 2b       	or	r24, r23
    1238:	76 2f       	mov	r23, r22
    123a:	07 c0       	rjmp	.+14     	; 0x124a <__fp_mintl+0x1e>
    123c:	66 23       	and	r22, r22
    123e:	11 f4       	brne	.+4      	; 0x1244 <__fp_mintl+0x18>
    1240:	99 27       	eor	r25, r25
    1242:	0d c0       	rjmp	.+26     	; 0x125e <__fp_mintl+0x32>
    1244:	90 51       	subi	r25, 0x10	; 16
    1246:	86 2b       	or	r24, r22
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	2a f0       	brmi	.+10     	; 0x1258 <__fp_mintl+0x2c>
    124e:	9a 95       	dec	r25
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	da f7       	brpl	.-10     	; 0x124e <__fp_mintl+0x22>
    1258:	88 0f       	add	r24, r24
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	97 f9       	bld	r25, 7
    1260:	08 95       	ret

00001262 <__fp_mpack>:
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	31 f0       	breq	.+12     	; 0x1272 <__fp_mpack_finite+0xc>

00001266 <__fp_mpack_finite>:
    1266:	91 50       	subi	r25, 0x01	; 1
    1268:	20 f4       	brcc	.+8      	; 0x1272 <__fp_mpack_finite+0xc>
    126a:	87 95       	ror	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b7 95       	ror	r27
    1272:	88 0f       	add	r24, r24
    1274:	91 1d       	adc	r25, r1
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	97 f9       	bld	r25, 7
    127c:	08 95       	ret

0000127e <_ZL16currentCharacterv>:
    127e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <_ZL17use_program_space>
    1282:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <__data_end>
    1286:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <__data_end+0x1>
    128a:	99 23       	and	r25, r25
    128c:	11 f0       	breq	.+4      	; 0x1292 <_ZL16currentCharacterv+0x14>
    128e:	84 91       	lpm	r24, Z
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <_ZL16currentCharacterv+0x16>
    1292:	80 81       	ld	r24, Z
    1294:	2f eb       	ldi	r18, 0xBF	; 191
    1296:	28 0f       	add	r18, r24
    1298:	2a 31       	cpi	r18, 0x1A	; 26
    129a:	10 f4       	brcc	.+4      	; 0x12a0 <_ZL16currentCharacterv+0x22>
    129c:	80 5e       	subi	r24, 0xE0	; 224
    129e:	08 95       	ret
    12a0:	80 32       	cpi	r24, 0x20	; 32
    12a2:	49 f4       	brne	.+18     	; 0x12b6 <_ZL16currentCharacterv+0x38>
    12a4:	9f 01       	movw	r18, r30
    12a6:	2f 5f       	subi	r18, 0xFF	; 255
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    12ae:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    12b2:	ef 2b       	or	r30, r31
    12b4:	31 f7       	brne	.-52     	; 0x1282 <_ZL16currentCharacterv+0x4>
    12b6:	08 95       	ret

000012b8 <_ZL9getNumberv>:
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    12c2:	c0 e0       	ldi	r28, 0x00	; 0
    12c4:	d0 e0       	ldi	r29, 0x00	; 0
    12c6:	1a e0       	ldi	r17, 0x0A	; 10
    12c8:	90 ed       	ldi	r25, 0xD0	; 208
    12ca:	98 0f       	add	r25, r24
    12cc:	9a 30       	cpi	r25, 0x0A	; 10
    12ce:	b8 f4       	brcc	.+46     	; 0x12fe <_ZL9getNumberv+0x46>
    12d0:	9e 01       	movw	r18, r28
    12d2:	12 9f       	mul	r17, r18
    12d4:	e0 01       	movw	r28, r0
    12d6:	13 9f       	mul	r17, r19
    12d8:	d0 0d       	add	r29, r0
    12da:	11 24       	eor	r1, r1
    12dc:	c8 0f       	add	r28, r24
    12de:	d1 1d       	adc	r29, r1
    12e0:	87 fd       	sbrc	r24, 7
    12e2:	da 95       	dec	r29
    12e4:	e0 97       	sbiw	r28, 0x30	; 48
    12e6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
    12ea:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
    12f4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
    12f8:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    12fc:	e5 cf       	rjmp	.-54     	; 0x12c8 <_ZL9getNumberv+0x10>
    12fe:	ce 01       	movw	r24, r28
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	08 95       	ret

00001308 <_ZN15OrangutanBuzzer5init2Ev>:
    1308:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    130c:	83 e2       	ldi	r24, 0x23	; 35
    130e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1312:	81 e1       	ldi	r24, 0x11	; 17
    1314:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1318:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    131c:	80 e1       	ldi	r24, 0x10	; 16
    131e:	97 e2       	ldi	r25, 0x27	; 39
    1320:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1324:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1328:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    132c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1330:	22 9a       	sbi	0x04, 2	; 4
    1332:	78 94       	sei
    1334:	08 95       	ret

00001336 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	5c 01       	movw	r10, r24
    134e:	8b 01       	movw	r16, r22
    1350:	d4 2e       	mov	r13, r20
    1352:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <buzzerInitialized>
    1356:	81 11       	cpse	r24, r1
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <buzzerInitialized>
    1360:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN15OrangutanBuzzer5init2Ev>
    1364:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
    1368:	b7 fe       	sbrs	r11, 7
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    136c:	e8 94       	clt
    136e:	b7 f8       	bld	r11, 7
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	f2 2e       	mov	r15, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1376:	ff 24       	eor	r15, r15
    1378:	f3 94       	inc	r15
    137a:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    137e:	2e 2d       	mov	r18, r14
    1380:	28 7f       	andi	r18, 0xF8	; 248
    1382:	e2 2e       	mov	r14, r18
    1384:	48 ec       	ldi	r20, 0xC8	; 200
    1386:	f4 9e       	mul	r15, r20
    1388:	c0 01       	movw	r24, r0
    138a:	11 24       	eor	r1, r1
    138c:	8a 15       	cp	r24, r10
    138e:	9b 05       	cpc	r25, r11
    1390:	e0 f4       	brcc	.+56     	; 0x13ca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1392:	e5 01       	movw	r28, r10
    1394:	51 e1       	ldi	r21, 0x11	; 17
    1396:	a5 16       	cp	r10, r21
    1398:	57 e2       	ldi	r21, 0x27	; 39
    139a:	b5 06       	cpc	r11, r21
    139c:	10 f0       	brcs	.+4      	; 0x13a2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    139e:	c0 e1       	ldi	r28, 0x10	; 16
    13a0:	d7 e2       	ldi	r29, 0x27	; 39
    13a2:	be 01       	movw	r22, r28
    13a4:	76 95       	lsr	r23
    13a6:	67 95       	ror	r22
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	60 58       	subi	r22, 0x80	; 128
    13ae:	79 46       	sbci	r23, 0x69	; 105
    13b0:	87 46       	sbci	r24, 0x67	; 103
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	4e 01       	movw	r8, r28
    13b6:	a1 2c       	mov	r10, r1
    13b8:	b1 2c       	mov	r11, r1
    13ba:	a5 01       	movw	r20, r10
    13bc:	94 01       	movw	r18, r8
    13be:	0e 94 96 12 	call	0x252c	; 0x252c <__udivmodsi4>
    13c2:	59 01       	movw	r10, r18
    13c4:	8e 2d       	mov	r24, r14
    13c6:	81 60       	ori	r24, 0x01	; 1
    13c8:	24 c0       	rjmp	.+72     	; 0x1412 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    13ca:	c8 e2       	ldi	r28, 0x28	; 40
    13cc:	fc 9e       	mul	r15, r28
    13ce:	c0 2d       	mov	r28, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	d0 e0       	ldi	r29, 0x00	; 0
    13d4:	ca 15       	cp	r28, r10
    13d6:	db 05       	cpc	r29, r11
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    13da:	e5 01       	movw	r28, r10
    13dc:	be 01       	movw	r22, r28
    13de:	76 95       	lsr	r23
    13e0:	67 95       	ror	r22
    13e2:	9e 01       	movw	r18, r28
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	8a e0       	ldi	r24, 0x0A	; 10
    13ea:	f8 12       	cpse	r15, r24
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	60 5e       	subi	r22, 0xE0	; 224
    13f4:	73 44       	sbci	r23, 0x43	; 67
    13f6:	81 44       	sbci	r24, 0x41	; 65
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	60 53       	subi	r22, 0x30	; 48
    1402:	7d 4e       	sbci	r23, 0xED	; 237
    1404:	8c 4e       	sbci	r24, 0xEC	; 236
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	0e 94 96 12 	call	0x252c	; 0x252c <__udivmodsi4>
    140c:	59 01       	movw	r10, r18
    140e:	8e 2d       	mov	r24, r14
    1410:	82 60       	ori	r24, 0x02	; 2
    1412:	88 2e       	mov	r8, r24
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	f2 12       	cpse	r15, r18
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    141a:	ce 01       	movw	r24, r28
    141c:	05 96       	adiw	r24, 0x05	; 5
    141e:	6a e0       	ldi	r22, 0x0A	; 10
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    1426:	eb 01       	movw	r28, r22
    1428:	c8 3e       	cpi	r28, 0xE8	; 232
    142a:	43 e0       	ldi	r20, 0x03	; 3
    142c:	d4 07       	cpc	r29, r20
    142e:	59 f0       	breq	.+22     	; 0x1446 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1430:	98 01       	movw	r18, r16
    1432:	de 01       	movw	r26, r28
    1434:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__umulhisi3>
    1438:	28 ee       	ldi	r18, 0xE8	; 232
    143a:	33 e0       	ldi	r19, 0x03	; 3
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	0e 94 b8 12 	call	0x2570	; 0x2570 <__divmodsi4>
    1444:	89 01       	movw	r16, r18
    1446:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    144a:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    144e:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1452:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1456:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    145a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    145e:	4d 2d       	mov	r20, r13
    1460:	40 31       	cpi	r20, 0x10	; 16
    1462:	08 f0       	brcs	.+2      	; 0x1466 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1464:	4f e0       	ldi	r20, 0x0F	; 15
    1466:	80 e1       	ldi	r24, 0x10	; 16
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	84 1b       	sub	r24, r20
    146c:	91 09       	sbc	r25, r1
    146e:	a9 01       	movw	r20, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1472:	56 95       	lsr	r21
    1474:	47 95       	ror	r20
    1476:	8a 95       	dec	r24
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    147a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    147e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1482:	10 93 7a 01 	sts	0x017A, r17	; 0x80017a <_ZL13buzzerTimeout+0x1>
    1486:	00 93 79 01 	sts	0x0179, r16	; 0x800179 <_ZL13buzzerTimeout>
    148a:	86 b3       	in	r24, 0x16	; 22
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	86 bb       	out	0x16, r24	; 22
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	08 95       	ret

000014ae <_ZN15OrangutanBuzzer8playNoteEhjh>:
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	eb 01       	movw	r28, r22
    14b4:	8f 3f       	cpi	r24, 0xFF	; 255
    14b6:	11 f0       	breq	.+4      	; 0x14bc <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    14b8:	41 11       	cpse	r20, r1
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	be 01       	movw	r22, r28
    14c0:	88 ee       	ldi	r24, 0xE8	; 232
    14c2:	93 e0       	ldi	r25, 0x03	; 3
    14c4:	43 c0       	rjmp	.+134    	; 0x154c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    14c6:	81 31       	cpi	r24, 0x11	; 17
    14c8:	30 f0       	brcs	.+12     	; 0x14d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    14ca:	50 ef       	ldi	r21, 0xF0	; 240
    14cc:	58 0f       	add	r21, r24
    14ce:	50 36       	cpi	r21, 0x60	; 96
    14d0:	18 f0       	brcs	.+6      	; 0x14d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    14d2:	5f e5       	ldi	r21, 0x5F	; 95
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	85 2f       	mov	r24, r21
    14da:	6c e0       	ldi	r22, 0x0C	; 12
    14dc:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__udivmodqi4>
    14e0:	68 2f       	mov	r22, r24
    14e2:	74 ef       	ldi	r23, 0xF4	; 244
    14e4:	76 03       	mulsu	r23, r22
    14e6:	90 01       	movw	r18, r0
    14e8:	11 24       	eor	r1, r1
    14ea:	25 0f       	add	r18, r21
    14ec:	31 1d       	adc	r19, r1
    14ee:	2c 30       	cpi	r18, 0x0C	; 12
    14f0:	31 05       	cpc	r19, r1
    14f2:	40 f4       	brcc	.+16     	; 0x1504 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    14f4:	f9 01       	movw	r30, r18
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ee 5c       	subi	r30, 0xCE	; 206
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	20 81       	ld	r18, Z
    1500:	31 81       	ldd	r19, Z+1	; 0x01
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	87 30       	cpi	r24, 0x07	; 7
    150a:	81 f0       	breq	.+32     	; 0x152c <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    150c:	08 2e       	mov	r0, r24
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	28 f0       	brcs	.+10     	; 0x1526 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    151c:	c9 01       	movw	r24, r18
    151e:	05 96       	adiw	r24, 0x05	; 5
    1520:	6a e0       	ldi	r22, 0x0A	; 10
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	0c c0       	rjmp	.+24     	; 0x153e <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1526:	c9 01       	movw	r24, r18
    1528:	90 58       	subi	r25, 0x80	; 128
    152a:	0c c0       	rjmp	.+24     	; 0x1544 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    152c:	c9 01       	movw	r24, r18
    152e:	36 e0       	ldi	r19, 0x06	; 6
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	3a 95       	dec	r19
    1536:	e1 f7       	brne	.-8      	; 0x1530 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1538:	02 96       	adiw	r24, 0x02	; 2
    153a:	65 e0       	ldi	r22, 0x05	; 5
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    1542:	cb 01       	movw	r24, r22
    1544:	40 31       	cpi	r20, 0x10	; 16
    1546:	08 f0       	brcs	.+2      	; 0x154a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1548:	4f e0       	ldi	r20, 0x0F	; 15
    154a:	be 01       	movw	r22, r28
    154c:	0e 94 9b 09 	call	0x1336	; 0x1336 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <_ZL8nextNotev>:
    1556:	a2 e0       	ldi	r26, 0x02	; 2
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e1 eb       	ldi	r30, 0xB1	; 177
    155c:	fa e0       	ldi	r31, 0x0A	; 10
    155e:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x4>
    1562:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    1566:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZL8staccato>
    156a:	88 23       	and	r24, r24
    156c:	21 f0       	breq	.+8      	; 0x1576 <_ZL8nextNotev+0x20>
    156e:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <_ZL22staccato_rest_duration>
    1572:	61 11       	cpse	r22, r1
    1574:	17 c0       	rjmp	.+46     	; 0x15a4 <_ZL8nextNotev+0x4e>
    1576:	77 24       	eor	r7, r7
    1578:	73 94       	inc	r7
    157a:	b0 ec       	ldi	r27, 0xC0	; 192
    157c:	ab 2e       	mov	r10, r27
    157e:	bd e5       	ldi	r27, 0x5D	; 93
    1580:	bb 2e       	mov	r11, r27
    1582:	1a e0       	ldi	r17, 0x0A	; 10
    1584:	61 2e       	mov	r6, r17
    1586:	04 e0       	ldi	r16, 0x04	; 4
    1588:	80 2e       	mov	r8, r16
    158a:	80 ed       	ldi	r24, 0xD0	; 208
    158c:	c8 2e       	mov	r12, r24
    158e:	87 e0       	ldi	r24, 0x07	; 7
    1590:	d8 2e       	mov	r13, r24
    1592:	94 e0       	ldi	r25, 0x04	; 4
    1594:	e9 2e       	mov	r14, r25
    1596:	f1 2c       	mov	r15, r1
    1598:	04 ef       	ldi	r16, 0xF4	; 244
    159a:	11 e0       	ldi	r17, 0x01	; 1
    159c:	2f e0       	ldi	r18, 0x0F	; 15
    159e:	42 2e       	mov	r4, r18
    15a0:	51 2c       	mov	r5, r1
    15a2:	15 c0       	rjmp	.+42     	; 0x15ce <_ZL8nextNotev+0x78>
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	88 ee       	ldi	r24, 0xE8	; 232
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	0e 94 9b 09 	call	0x1336	; 0x1336 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    15b0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL22staccato_rest_duration>
    15b4:	17 c1       	rjmp	.+558    	; 0x17e4 <_ZL8nextNotev+0x28e>
    15b6:	86 36       	cpi	r24, 0x66	; 102
    15b8:	d4 f5       	brge	.+116    	; 0x162e <_ZL8nextNotev+0xd8>
    15ba:	81 36       	cpi	r24, 0x61	; 97
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <_ZL8nextNotev+0x6a>
    15be:	a9 c0       	rjmp	.+338    	; 0x1712 <_ZL8nextNotev+0x1bc>
    15c0:	7c f5       	brge	.+94     	; 0x1620 <_ZL8nextNotev+0xca>
    15c2:	8c 33       	cpi	r24, 0x3C	; 60
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <_ZL8nextNotev+0x72>
    15c6:	60 c0       	rjmp	.+192    	; 0x1688 <_ZL8nextNotev+0x132>
    15c8:	8e 33       	cpi	r24, 0x3E	; 62
    15ca:	81 f4       	brne	.+32     	; 0x15ec <_ZL8nextNotev+0x96>
    15cc:	93 94       	inc	r9
    15ce:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    15d2:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    15d6:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    15e2:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    15e6:	85 36       	cpi	r24, 0x65	; 101
    15e8:	31 f7       	brne	.-52     	; 0x15b6 <_ZL8nextNotev+0x60>
    15ea:	52 c0       	rjmp	.+164    	; 0x1690 <_ZL8nextNotev+0x13a>
    15ec:	81 32       	cpi	r24, 0x21	; 33
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <_ZL8nextNotev+0x9c>
    15f0:	8b c0       	rjmp	.+278    	; 0x1708 <_ZL8nextNotev+0x1b2>
    15f2:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    15f6:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    15fa:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    15fe:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    1602:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    1606:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    160a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    160e:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
    1612:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
    1616:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZL8staccato>
    161a:	a4 e0       	ldi	r26, 0x04	; 4
    161c:	9a 2e       	mov	r9, r26
    161e:	d7 cf       	rjmp	.-82     	; 0x15ce <_ZL8nextNotev+0x78>
    1620:	83 36       	cpi	r24, 0x63	; 99
    1622:	a1 f1       	breq	.+104    	; 0x168c <_ZL8nextNotev+0x136>
    1624:	0c f4       	brge	.+2      	; 0x1628 <_ZL8nextNotev+0xd2>
    1626:	78 c0       	rjmp	.+240    	; 0x1718 <_ZL8nextNotev+0x1c2>
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	77 c0       	rjmp	.+238    	; 0x171c <_ZL8nextNotev+0x1c6>
    162e:	8d 36       	cpi	r24, 0x6D	; 109
    1630:	c1 f1       	breq	.+112    	; 0x16a2 <_ZL8nextNotev+0x14c>
    1632:	94 f4       	brge	.+36     	; 0x1658 <_ZL8nextNotev+0x102>
    1634:	87 36       	cpi	r24, 0x67	; 103
    1636:	91 f1       	breq	.+100    	; 0x169c <_ZL8nextNotev+0x146>
    1638:	74 f1       	brlt	.+92     	; 0x1696 <_ZL8nextNotev+0x140>
    163a:	8c 36       	cpi	r24, 0x6C	; 108
    163c:	09 f0       	breq	.+2      	; 0x1640 <_ZL8nextNotev+0xea>
    163e:	64 c0       	rjmp	.+200    	; 0x1708 <_ZL8nextNotev+0x1b2>
    1640:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZL9getNumberv>
    1644:	bc 01       	movw	r22, r24
    1646:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    164a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    164e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1652:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1656:	51 c0       	rjmp	.+162    	; 0x16fa <_ZL8nextNotev+0x1a4>
    1658:	82 37       	cpi	r24, 0x72	; 114
    165a:	c9 f1       	breq	.+114    	; 0x16ce <_ZL8nextNotev+0x178>
    165c:	4c f4       	brge	.+18     	; 0x1670 <_ZL8nextNotev+0x11a>
    165e:	8f 36       	cpi	r24, 0x6F	; 111
    1660:	09 f0       	breq	.+2      	; 0x1664 <_ZL8nextNotev+0x10e>
    1662:	52 c0       	rjmp	.+164    	; 0x1708 <_ZL8nextNotev+0x1b2>
    1664:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZL9getNumberv>
    1668:	98 2e       	mov	r9, r24
    166a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    166e:	af cf       	rjmp	.-162    	; 0x15ce <_ZL8nextNotev+0x78>
    1670:	84 37       	cpi	r24, 0x74	; 116
    1672:	81 f1       	breq	.+96     	; 0x16d4 <_ZL8nextNotev+0x17e>
    1674:	86 37       	cpi	r24, 0x76	; 118
    1676:	09 f0       	breq	.+2      	; 0x167a <_ZL8nextNotev+0x124>
    1678:	47 c0       	rjmp	.+142    	; 0x1708 <_ZL8nextNotev+0x1b2>
    167a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZL9getNumberv>
    167e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1682:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1686:	a3 cf       	rjmp	.-186    	; 0x15ce <_ZL8nextNotev+0x78>
    1688:	9a 94       	dec	r9
    168a:	a1 cf       	rjmp	.-190    	; 0x15ce <_ZL8nextNotev+0x78>
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	20 c0       	rjmp	.+64     	; 0x16d0 <_ZL8nextNotev+0x17a>
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	43 c0       	rjmp	.+134    	; 0x171c <_ZL8nextNotev+0x1c6>
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	85 e0       	ldi	r24, 0x05	; 5
    169a:	40 c0       	rjmp	.+128    	; 0x171c <_ZL8nextNotev+0x1c6>
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	87 e0       	ldi	r24, 0x07	; 7
    16a0:	3d c0       	rjmp	.+122    	; 0x171c <_ZL8nextNotev+0x1c6>
    16a2:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    16a6:	8c 36       	cpi	r24, 0x6C	; 108
    16a8:	19 f4       	brne	.+6      	; 0x16b0 <_ZL8nextNotev+0x15a>
    16aa:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZL8staccato>
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <_ZL8nextNotev+0x162>
    16b0:	70 92 76 01 	sts	0x0176, r7	; 0x800176 <_ZL8staccato>
    16b4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL22staccato_rest_duration>
    16b8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    16bc:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    16c8:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    16cc:	80 cf       	rjmp	.-256    	; 0x15ce <_ZL8nextNotev+0x78>
    16ce:	11 e0       	ldi	r17, 0x01	; 1
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	24 c0       	rjmp	.+72     	; 0x171c <_ZL8nextNotev+0x1c6>
    16d4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZL9getNumberv>
    16d8:	bc 01       	movw	r22, r24
    16da:	c5 01       	movw	r24, r10
    16dc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    16e0:	66 9e       	mul	r6, r22
    16e2:	c0 01       	movw	r24, r0
    16e4:	67 9e       	mul	r6, r23
    16e6:	90 0d       	add	r25, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    16ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    16f2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    16f6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    16fa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    16fe:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    1702:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    1706:	63 cf       	rjmp	.-314    	; 0x15ce <_ZL8nextNotev+0x78>
    1708:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__data_end+0x1>
    170c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
    1710:	69 c0       	rjmp	.+210    	; 0x17e4 <_ZL8nextNotev+0x28e>
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	89 e0       	ldi	r24, 0x09	; 9
    1716:	02 c0       	rjmp	.+4      	; 0x171c <_ZL8nextNotev+0x1c6>
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	8b e0       	ldi	r24, 0x0B	; 11
    171c:	08 2f       	mov	r16, r24
    171e:	9c e0       	ldi	r25, 0x0C	; 12
    1720:	99 9e       	mul	r9, r25
    1722:	00 0d       	add	r16, r0
    1724:	11 24       	eor	r1, r1
    1726:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    172a:	98 2f       	mov	r25, r24
    172c:	97 7f       	andi	r25, 0xF7	; 247
    172e:	93 32       	cpi	r25, 0x23	; 35
    1730:	61 f4       	brne	.+24     	; 0x174a <_ZL8nextNotev+0x1f4>
    1732:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    1736:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    1742:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    1746:	0f 5f       	subi	r16, 0xFF	; 255
    1748:	ee cf       	rjmp	.-36     	; 0x1726 <_ZL8nextNotev+0x1d0>
    174a:	8d 32       	cpi	r24, 0x2D	; 45
    174c:	71 f4       	brne	.+28     	; 0x176a <_ZL8nextNotev+0x214>
    174e:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    1752:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    175e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    1762:	01 50       	subi	r16, 0x01	; 1
    1764:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    1768:	f0 cf       	rjmp	.-32     	; 0x174a <_ZL8nextNotev+0x1f4>
    176a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    176e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    1772:	81 53       	subi	r24, 0x31	; 49
    1774:	88 30       	cpi	r24, 0x08	; 8
    1776:	50 f4       	brcc	.+20     	; 0x178c <_ZL8nextNotev+0x236>
    1778:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    177c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1780:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZL9getNumberv>
    1784:	bc 01       	movw	r22, r24
    1786:	c7 01       	movw	r24, r14
    1788:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    178c:	7b 01       	movw	r14, r22
    178e:	f6 94       	lsr	r15
    1790:	e7 94       	ror	r14
    1792:	69 83       	std	Y+1, r22	; 0x01
    1794:	7a 83       	std	Y+2, r23	; 0x02
    1796:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZL16currentCharacterv>
    179a:	69 81       	ldd	r22, Y+1	; 0x01
    179c:	7a 81       	ldd	r23, Y+2	; 0x02
    179e:	8e 32       	cpi	r24, 0x2E	; 46
    17a0:	69 f4       	brne	.+26     	; 0x17bc <_ZL8nextNotev+0x266>
    17a2:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    17a6:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <__data_end+0x1>
    17b2:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <__data_end>
    17b6:	6e 0d       	add	r22, r14
    17b8:	7f 1d       	adc	r23, r15
    17ba:	e9 cf       	rjmp	.-46     	; 0x178e <_ZL8nextNotev+0x238>
    17bc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZL8staccato>
    17c0:	88 23       	and	r24, r24
    17c2:	39 f0       	breq	.+14     	; 0x17d2 <_ZL8nextNotev+0x27c>
    17c4:	9b 01       	movw	r18, r22
    17c6:	36 95       	lsr	r19
    17c8:	27 95       	ror	r18
    17ca:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <_ZL22staccato_rest_duration>
    17ce:	62 1b       	sub	r22, r18
    17d0:	71 09       	sbc	r23, r1
    17d2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    17d6:	11 23       	and	r17, r17
    17d8:	11 f0       	breq	.+4      	; 0x17de <_ZL8nextNotev+0x288>
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <_ZL8nextNotev+0x28a>
    17de:	80 2f       	mov	r24, r16
    17e0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN15OrangutanBuzzer8playNoteEhjh>
    17e4:	22 96       	adiw	r28, 0x02	; 2
    17e6:	e0 e1       	ldi	r30, 0x10	; 16
    17e8:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x4>

000017ec <__vector_13>:
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZL13buzzerTimeout>
    1812:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZL13buzzerTimeout+0x1>
    1816:	9c 01       	movw	r18, r24
    1818:	21 50       	subi	r18, 0x01	; 1
    181a:	31 09       	sbc	r19, r1
    181c:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <_ZL13buzzerTimeout+0x1>
    1820:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <_ZL13buzzerTimeout>
    1824:	89 2b       	or	r24, r25
    1826:	11 f5       	brne	.+68     	; 0x186c <__vector_13+0x80>
    1828:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    182c:	78 94       	sei
    182e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1832:	88 7f       	andi	r24, 0xF8	; 248
    1834:	81 60       	ori	r24, 0x01	; 1
    1836:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    183a:	80 e1       	ldi	r24, 0x10	; 16
    183c:	97 e2       	ldi	r25, 0x27	; 39
    183e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1842:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1846:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    184a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    1854:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
    1858:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
    185c:	89 2b       	or	r24, r25
    185e:	31 f0       	breq	.+12     	; 0x186c <__vector_13+0x80>
    1860:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_ZL17play_mode_setting>
    1864:	81 11       	cpse	r24, r1
    1866:	02 c0       	rjmp	.+4      	; 0x186c <__vector_13+0x80>
    1868:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZL8nextNotev>
    186c:	ff 91       	pop	r31
    186e:	ef 91       	pop	r30
    1870:	bf 91       	pop	r27
    1872:	af 91       	pop	r26
    1874:	9f 91       	pop	r25
    1876:	8f 91       	pop	r24
    1878:	7f 91       	pop	r23
    187a:	6f 91       	pop	r22
    187c:	5f 91       	pop	r21
    187e:	4f 91       	pop	r20
    1880:	3f 91       	pop	r19
    1882:	2f 91       	pop	r18
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <_ZN15OrangutanBuzzer4playEPKc>:
    188e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1892:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
    1896:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
    189a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZL17use_program_space>
    189e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL22staccato_rest_duration>
    18a2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZL8nextNotev>
    18a6:	08 95       	ret

000018a8 <play>:
    18a8:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN15OrangutanBuzzer4playEPKc>
    18ac:	08 95       	ret

000018ae <delay_us.constprop.0>:
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	6f 93       	push	r22
    18b4:	64 e0       	ldi	r22, 0x04	; 4
    18b6:	6a 95       	dec	r22
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <delay_us.constprop.0+0x8>
    18ba:	6f 91       	pop	r22
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	c9 f7       	brne	.-14     	; 0x18b2 <delay_us.constprop.0+0x4>
    18c0:	08 95       	ret

000018c2 <_ZN12OrangutanLCD8busyWaitEv>:
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	1a b1       	in	r17, 0x0a	; 10
    18cc:	57 98       	cbi	0x0a, 7	; 10
    18ce:	5a 98       	cbi	0x0b, 2	; 11
    18d0:	28 9a       	sbi	0x05, 0	; 5
    18d2:	c0 e0       	ldi	r28, 0x00	; 0
    18d4:	d0 e0       	ldi	r29, 0x00	; 0
    18d6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <delay_us.constprop.0>
    18da:	5c 9a       	sbi	0x0b, 4	; 11
    18dc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <delay_us.constprop.0>
    18e0:	09 b1       	in	r16, 0x09	; 9
    18e2:	5c 98       	cbi	0x0b, 4	; 11
    18e4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <delay_us.constprop.0>
    18e8:	5c 9a       	sbi	0x0b, 4	; 11
    18ea:	0e 94 57 0c 	call	0x18ae	; 0x18ae <delay_us.constprop.0>
    18ee:	5c 98       	cbi	0x0b, 4	; 11
    18f0:	24 96       	adiw	r28, 0x04	; 4
    18f2:	07 ff       	sbrs	r16, 7
    18f4:	10 c0       	rjmp	.+32     	; 0x1916 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    18f6:	ae 01       	movw	r20, r28
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <lcdTimeout>
    1900:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <lcdTimeout+0x1>
    1904:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <lcdTimeout+0x2>
    1908:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <lcdTimeout+0x3>
    190c:	48 17       	cp	r20, r24
    190e:	59 07       	cpc	r21, r25
    1910:	6a 07       	cpc	r22, r26
    1912:	7b 07       	cpc	r23, r27
    1914:	00 f3       	brcs	.-64     	; 0x18d6 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1916:	1a b9       	out	0x0a, r17	; 10
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <_ZN12OrangutanLCD8sendDataEh>:
    1922:	95 b1       	in	r25, 0x05	; 5
    1924:	28 2f       	mov	r18, r24
    1926:	21 70       	andi	r18, 0x01	; 1
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	48 2f       	mov	r20, r24
    1930:	46 70       	andi	r20, 0x06	; 6
    1932:	68 e0       	ldi	r22, 0x08	; 8
    1934:	46 9f       	mul	r20, r22
    1936:	a0 01       	movw	r20, r0
    1938:	11 24       	eor	r1, r1
    193a:	24 2b       	or	r18, r20
    193c:	9d 7c       	andi	r25, 0xCD	; 205
    193e:	29 2b       	or	r18, r25
    1940:	25 b9       	out	0x05, r18	; 5
    1942:	9b b1       	in	r25, 0x0b	; 11
    1944:	88 70       	andi	r24, 0x08	; 8
    1946:	82 95       	swap	r24
    1948:	80 7f       	andi	r24, 0xF0	; 240
    194a:	9f 77       	andi	r25, 0x7F	; 127
    194c:	89 2b       	or	r24, r25
    194e:	8b b9       	out	0x0b, r24	; 11
    1950:	5c 9a       	sbi	0x0b, 4	; 11
    1952:	0e 94 57 0c 	call	0x18ae	; 0x18ae <delay_us.constprop.0>
    1956:	5c 98       	cbi	0x0b, 4	; 11
    1958:	0e 94 57 0c 	call	0x18ae	; 0x18ae <delay_us.constprop.0>
    195c:	08 95       	ret

0000195e <_ZN12OrangutanLCD4sendEhhh>:
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 eb       	ldi	r30, 0xB5	; 181
    1964:	fc e0       	ldi	r31, 0x0C	; 12
    1966:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x16>
    196a:	c8 2f       	mov	r28, r24
    196c:	d6 2e       	mov	r13, r22
    196e:	e4 2e       	mov	r14, r20
    1970:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <_ZZN12OrangutanLCD4initEvE11initialized>
    1974:	81 11       	cpse	r24, r1
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <_ZZN12OrangutanLCD4initEvE11initialized>
    197e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN12OrangutanLCD5init2Ev>
    1982:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_ZN12OrangutanLCD8busyWaitEv>
    1986:	14 b1       	in	r17, 0x04	; 4
    1988:	d5 b1       	in	r29, 0x05	; 5
    198a:	fa b0       	in	r15, 0x0a	; 10
    198c:	0b b1       	in	r16, 0x0b	; 11
    198e:	28 98       	cbi	0x05, 0	; 5
    1990:	dd 20       	and	r13, r13
    1992:	11 f0       	breq	.+4      	; 0x1998 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1994:	5a 9a       	sbi	0x0b, 2	; 11
    1996:	01 c0       	rjmp	.+2      	; 0x199a <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1998:	5a 98       	cbi	0x0b, 2	; 11
    199a:	94 b1       	in	r25, 0x04	; 4
    199c:	92 63       	ori	r25, 0x32	; 50
    199e:	94 b9       	out	0x04, r25	; 4
    19a0:	57 9a       	sbi	0x0a, 7	; 10
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	e8 16       	cp	r14, r24
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <_ZN12OrangutanLCD4sendEhhh+0x54>
    19a8:	8c 2f       	mov	r24, r28
    19aa:	82 95       	swap	r24
    19ac:	8f 70       	andi	r24, 0x0F	; 15
    19ae:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12OrangutanLCD8sendDataEh>
    19b2:	8c 2f       	mov	r24, r28
    19b4:	8f 70       	andi	r24, 0x0F	; 15
    19b6:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12OrangutanLCD8sendDataEh>
    19ba:	fa b8       	out	0x0a, r15	; 10
    19bc:	0b b9       	out	0x0b, r16	; 11
    19be:	14 b9       	out	0x04, r17	; 4
    19c0:	d5 b9       	out	0x05, r29	; 5
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	e7 e0       	ldi	r30, 0x07	; 7
    19c8:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x16>

000019cc <_ZN12OrangutanLCD8send_cmdEh>:
    19cc:	42 e0       	ldi	r20, 0x02	; 2
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12OrangutanLCD4sendEhhh>
    19d4:	08 95       	ret

000019d6 <_ZN12OrangutanLCD9send_dataEh>:
    19d6:	42 e0       	ldi	r20, 0x02	; 2
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12OrangutanLCD4sendEhhh>
    19de:	08 95       	ret

000019e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12OrangutanLCD4sendEhhh>
    19e8:	08 95       	ret

000019ea <_ZN12OrangutanLCD5init2Ev>:
    19ea:	80 e1       	ldi	r24, 0x10	; 16
    19ec:	97 e2       	ldi	r25, 0x27	; 39
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lcdTimeout>
    19f6:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <lcdTimeout+0x1>
    19fa:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <lcdTimeout+0x2>
    19fe:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <lcdTimeout+0x3>
    1a02:	52 9a       	sbi	0x0a, 2	; 10
    1a04:	20 9a       	sbi	0x04, 0	; 4
    1a06:	54 9a       	sbi	0x0a, 4	; 10
    1a08:	8e e1       	ldi	r24, 0x1E	; 30
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a16:	86 e0       	ldi	r24, 0x06	; 6
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
    1a48:	88 e2       	ldi	r24, 0x28	; 40
    1a4a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1a4e:	88 e0       	ldi	r24, 0x08	; 8
    1a50:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1a60:	8c e0       	ldi	r24, 0x0C	; 12
    1a62:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1a66:	08 95       	ret

00001a68 <_ZN12OrangutanLCD5clearEv>:
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1a6e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <printf_chars>
    1a72:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <printf_chars+0x1>
    1a76:	89 2b       	or	r24, r25
    1a78:	f9 f0       	breq	.+62     	; 0x1ab8 <_ZN12OrangutanLCD5clearEv+0x50>
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	a0 e2       	ldi	r26, 0x20	; 32
    1a7e:	26 2f       	mov	r18, r22
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <numLCDCols>
    1a86:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <numLCDRows>
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	78 9f       	mul	r23, r24
    1a90:	a0 01       	movw	r20, r0
    1a92:	79 9f       	mul	r23, r25
    1a94:	50 0d       	add	r21, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	24 17       	cp	r18, r20
    1a9a:	35 07       	cpc	r19, r21
    1a9c:	4c f4       	brge	.+18     	; 0x1ab0 <_ZN12OrangutanLCD5clearEv+0x48>
    1a9e:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <printf_chars>
    1aa2:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <printf_chars+0x1>
    1aa6:	e2 0f       	add	r30, r18
    1aa8:	f3 1f       	adc	r31, r19
    1aaa:	a0 83       	st	Z, r26
    1aac:	6f 5f       	subi	r22, 0xFF	; 255
    1aae:	e7 cf       	rjmp	.-50     	; 0x1a7e <_ZN12OrangutanLCD5clearEv+0x16>
    1ab0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <col>
    1ab4:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <row>
    1ab8:	08 95       	ret

00001aba <clear>:
    1aba:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_ZN12OrangutanLCD5clearEv>
    1abe:	08 95       	ret

00001ac0 <_ZN12OrangutanLCD5printEPKc>:
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ec 01       	movw	r28, r24
    1ac6:	89 91       	ld	r24, Y+
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <_ZN12OrangutanLCD5printEPKc+0x12>
    1acc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN12OrangutanLCD9send_dataEh>
    1ad0:	fa cf       	rjmp	.-12     	; 0x1ac6 <_ZN12OrangutanLCD5printEPKc+0x6>
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <print>:
    1ad8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_ZN12OrangutanLCD5printEPKc>
    1adc:	08 95       	ret

00001ade <_ZN12OrangutanLCD5printEm>:
    1ade:	aa e0       	ldi	r26, 0x0A	; 10
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e7       	ldi	r30, 0x75	; 117
    1ae4:	fd e0       	ldi	r31, 0x0D	; 13
    1ae6:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x14>
    1aea:	1a e0       	ldi	r17, 0x0A	; 10
    1aec:	5a e0       	ldi	r21, 0x0A	; 10
    1aee:	c5 2e       	mov	r12, r21
    1af0:	d1 2c       	mov	r13, r1
    1af2:	e1 2c       	mov	r14, r1
    1af4:	f1 2c       	mov	r15, r1
    1af6:	06 2f       	mov	r16, r22
    1af8:	a7 01       	movw	r20, r14
    1afa:	96 01       	movw	r18, r12
    1afc:	0e 94 96 12 	call	0x252c	; 0x252c <__udivmodsi4>
    1b00:	ca 01       	movw	r24, r20
    1b02:	b9 01       	movw	r22, r18
    1b04:	11 50       	subi	r17, 0x01	; 1
    1b06:	e1 e0       	ldi	r30, 0x01	; 1
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	ec 0f       	add	r30, r28
    1b0c:	fd 1f       	adc	r31, r29
    1b0e:	e1 0f       	add	r30, r17
    1b10:	f1 1d       	adc	r31, r1
    1b12:	00 5d       	subi	r16, 0xD0	; 208
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	62 9f       	mul	r22, r18
    1b18:	00 19       	sub	r16, r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	00 83       	st	Z, r16
    1b1e:	61 15       	cp	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	81 05       	cpc	r24, r1
    1b24:	91 05       	cpc	r25, r1
    1b26:	39 f7       	brne	.-50     	; 0x1af6 <_ZN12OrangutanLCD5printEm+0x18>
    1b28:	1a 30       	cpi	r17, 0x0A	; 10
    1b2a:	58 f4       	brcc	.+22     	; 0x1b42 <_ZN12OrangutanLCD5printEm+0x64>
    1b2c:	e1 e0       	ldi	r30, 0x01	; 1
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	ec 0f       	add	r30, r28
    1b32:	fd 1f       	adc	r31, r29
    1b34:	e1 0f       	add	r30, r17
    1b36:	f1 1d       	adc	r31, r1
    1b38:	80 81       	ld	r24, Z
    1b3a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN12OrangutanLCD9send_dataEh>
    1b3e:	1f 5f       	subi	r17, 0xFF	; 255
    1b40:	f3 cf       	rjmp	.-26     	; 0x1b28 <_ZN12OrangutanLCD5printEm+0x4a>
    1b42:	2a 96       	adiw	r28, 0x0a	; 10
    1b44:	e8 e0       	ldi	r30, 0x08	; 8
    1b46:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x14>

00001b4a <_ZN12OrangutanLCD5printEl>:
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	6b 01       	movw	r12, r22
    1b54:	7c 01       	movw	r14, r24
    1b56:	97 ff       	sbrs	r25, 7
    1b58:	0b c0       	rjmp	.+22     	; 0x1b70 <_ZN12OrangutanLCD5printEl+0x26>
    1b5a:	f0 94       	com	r15
    1b5c:	e0 94       	com	r14
    1b5e:	d0 94       	com	r13
    1b60:	c0 94       	com	r12
    1b62:	c1 1c       	adc	r12, r1
    1b64:	d1 1c       	adc	r13, r1
    1b66:	e1 1c       	adc	r14, r1
    1b68:	f1 1c       	adc	r15, r1
    1b6a:	8d e2       	ldi	r24, 0x2D	; 45
    1b6c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN12OrangutanLCD9send_dataEh>
    1b70:	c7 01       	movw	r24, r14
    1b72:	b6 01       	movw	r22, r12
    1b74:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_ZN12OrangutanLCD5printEm>
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	08 95       	ret

00001b82 <print_long>:
    1b82:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_ZN12OrangutanLCD5printEl>
    1b86:	08 95       	ret

00001b88 <_ZN12OrangutanLCD6gotoXYEhh>:
    1b88:	a5 e0       	ldi	r26, 0x05	; 5
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ea ec       	ldi	r30, 0xCA	; 202
    1b8e:	fd e0       	ldi	r31, 0x0D	; 13
    1b90:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x1e>
    1b94:	18 2f       	mov	r17, r24
    1b96:	80 e8       	ldi	r24, 0x80	; 128
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	80 ec       	ldi	r24, 0xC0	; 192
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	84 e9       	ldi	r24, 0x94	; 148
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
    1ba2:	84 ed       	ldi	r24, 0xD4	; 212
    1ba4:	8c 83       	std	Y+4, r24	; 0x04
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e6 0f       	add	r30, r22
    1baa:	f1 1d       	adc	r31, r1
    1bac:	81 81       	ldd	r24, Z+1	; 0x01
    1bae:	81 0f       	add	r24, r17
    1bb0:	6d 83       	std	Y+5, r22	; 0x05
    1bb2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN12OrangutanLCD8send_cmdEh>
    1bb6:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <col>
    1bba:	6d 81       	ldd	r22, Y+5	; 0x05
    1bbc:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <row>
    1bc0:	25 96       	adiw	r28, 0x05	; 5
    1bc2:	e3 e0       	ldi	r30, 0x03	; 3
    1bc4:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x1e>

00001bc8 <lcd_goto_xy>:
    1bc8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN12OrangutanLCD6gotoXYEhh>
    1bcc:	08 95       	ret

00001bce <_ZN16OrangutanDigital9setOutputEhh>:
    1bce:	88 30       	cpi	r24, 0x08	; 8
    1bd0:	58 f4       	brcc	.+22     	; 0x1be8 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1bd6:	99 0f       	add	r25, r25
    1bd8:	8a 95       	dec	r24
    1bda:	ea f7       	brpl	.-6      	; 0x1bd6 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1bdc:	89 2f       	mov	r24, r25
    1bde:	aa e2       	ldi	r26, 0x2A	; 42
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	eb e2       	ldi	r30, 0x2B	; 43
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	21 c0       	rjmp	.+66     	; 0x1c2a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1be8:	8e 30       	cpi	r24, 0x0E	; 14
    1bea:	60 f4       	brcc	.+24     	; 0x1c04 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1bec:	98 ef       	ldi	r25, 0xF8	; 248
    1bee:	98 0f       	add	r25, r24
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	9a 95       	dec	r25
    1bf8:	ea f7       	brpl	.-6      	; 0x1bf4 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1bfa:	a4 e2       	ldi	r26, 0x24	; 36
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e2       	ldi	r30, 0x25	; 37
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	13 c0       	rjmp	.+38     	; 0x1c2a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1c04:	85 31       	cpi	r24, 0x15	; 21
    1c06:	60 f4       	brcc	.+24     	; 0x1c20 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1c08:	92 ef       	ldi	r25, 0xF2	; 242
    1c0a:	98 0f       	add	r25, r24
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1c10:	88 0f       	add	r24, r24
    1c12:	9a 95       	dec	r25
    1c14:	ea f7       	brpl	.-6      	; 0x1c10 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1c16:	a7 e2       	ldi	r26, 0x27	; 39
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e2       	ldi	r30, 0x28	; 40
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	a0 e0       	ldi	r26, 0x00	; 0
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e0 e0       	ldi	r30, 0x00	; 0
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	6f 3f       	cpi	r22, 0xFF	; 255
    1c2c:	19 f4       	brne	.+6      	; 0x1c34 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1c2e:	90 81       	ld	r25, Z
    1c30:	98 27       	eor	r25, r24
    1c32:	09 c0       	rjmp	.+18     	; 0x1c46 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1c34:	66 23       	and	r22, r22
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1c38:	90 81       	ld	r25, Z
    1c3a:	98 2b       	or	r25, r24
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1c3e:	20 81       	ld	r18, Z
    1c40:	98 2f       	mov	r25, r24
    1c42:	90 95       	com	r25
    1c44:	92 23       	and	r25, r18
    1c46:	90 83       	st	Z, r25
    1c48:	9c 91       	ld	r25, X
    1c4a:	98 2b       	or	r25, r24
    1c4c:	9c 93       	st	X, r25
    1c4e:	08 95       	ret

00001c50 <_ZN15OrangutanMotors5init2Ev>:
    1c50:	83 ef       	ldi	r24, 0xF3	; 243
    1c52:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1c56:	84 bd       	out	0x24, r24	; 36
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1c5e:	85 bd       	out	0x25, r24	; 37
    1c60:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1c64:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1c68:	18 bc       	out	0x28, r1	; 40
    1c6a:	17 bc       	out	0x27, r1	; 39
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	86 e0       	ldi	r24, 0x06	; 6
    1c70:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN16OrangutanDigital9setOutputEhh>
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	85 e0       	ldi	r24, 0x05	; 5
    1c78:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN16OrangutanDigital9setOutputEhh>
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	8b e0       	ldi	r24, 0x0B	; 11
    1c80:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN16OrangutanDigital9setOutputEhh>
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN16OrangutanDigital9setOutputEhh>
    1c8c:	08 95       	ret

00001c8e <_ZN15OrangutanMotors4initEv>:
    1c8e:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <_ZZN15OrangutanMotors4initEvE11initialized>
    1c92:	81 11       	cpse	r24, r1
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <_ZN15OrangutanMotors4initEv+0x12>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <_ZZN15OrangutanMotors4initEvE11initialized>
    1c9c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN15OrangutanMotors5init2Ev>
    1ca0:	08 95       	ret

00001ca2 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN15OrangutanMotors4initEv>
    1cac:	d7 ff       	sbrs	r29, 7
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1cb0:	d1 95       	neg	r29
    1cb2:	c1 95       	neg	r28
    1cb4:	d1 09       	sbc	r29, r1
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	cf 3f       	cpi	r28, 0xFF	; 255
    1cbe:	d1 05       	cpc	r29, r1
    1cc0:	19 f0       	breq	.+6      	; 0x1cc8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1cc2:	14 f0       	brlt	.+4      	; 0x1cc8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1cc4:	cf ef       	ldi	r28, 0xFF	; 255
    1cc6:	d0 e0       	ldi	r29, 0x00	; 0
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1ccc:	18 bc       	out	0x28, r1	; 40
    1cce:	c7 bd       	out	0x27, r28	; 39
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1cd2:	c8 bd       	out	0x28, r28	; 40
    1cd4:	17 bc       	out	0x27, r1	; 39
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	08 95       	ret

00001cdc <_ZN15OrangutanMotors10setM2SpeedEi>:
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN15OrangutanMotors4initEv>
    1ce6:	d7 ff       	sbrs	r29, 7
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1cea:	d1 95       	neg	r29
    1cec:	c1 95       	neg	r28
    1cee:	d1 09       	sbc	r29, r1
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	cf 3f       	cpi	r28, 0xFF	; 255
    1cf8:	d1 05       	cpc	r29, r1
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1cfc:	14 f0       	brlt	.+4      	; 0x1d02 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1cfe:	cf ef       	ldi	r28, 0xFF	; 255
    1d00:	d0 e0       	ldi	r29, 0x00	; 0
    1d02:	88 23       	and	r24, r24
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1d06:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1d0a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1d10:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1d14:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <_ZN15OrangutanMotors9setSpeedsEii>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	eb 01       	movw	r28, r22
    1d24:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN15OrangutanMotors10setM1SpeedEi>
    1d28:	ce 01       	movw	r24, r28
    1d2a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN15OrangutanMotors10setM2SpeedEi>
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <set_motors>:
    1d34:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN15OrangutanMotors9setSpeedsEii>
    1d38:	08 95       	ret

00001d3a <_ZN20OrangutanPushbuttons5init2Ev>:
    1d3a:	84 b1       	in	r24, 0x04	; 4
    1d3c:	8d 7c       	andi	r24, 0xCD	; 205
    1d3e:	84 b9       	out	0x04, r24	; 4
    1d40:	85 b1       	in	r24, 0x05	; 5
    1d42:	82 63       	ori	r24, 0x32	; 50
    1d44:	85 b9       	out	0x05, r24	; 5
    1d46:	85 e0       	ldi	r24, 0x05	; 5
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	6f 93       	push	r22
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	6a 95       	dec	r22
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1d52:	6f 91       	pop	r22
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	c9 f7       	brne	.-14     	; 0x1d4a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1d58:	08 95       	ret

00001d5a <_ZN20OrangutanPushbuttons4initEv>:
    1d5a:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <_ZN20OrangutanPushbuttons4initEv+0x12>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1d68:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN20OrangutanPushbuttons5init2Ev>
    1d6c:	08 95       	ret

00001d6e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1d6e:	cf 93       	push	r28
    1d70:	c8 2f       	mov	r28, r24
    1d72:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN20OrangutanPushbuttons4initEv>
    1d76:	83 b1       	in	r24, 0x03	; 3
    1d78:	8c 23       	and	r24, r28
    1d7a:	e9 f3       	breq	.-6      	; 0x1d76 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1d7c:	8a e0       	ldi	r24, 0x0A	; 10
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <delay_ms>
    1d84:	83 b1       	in	r24, 0x03	; 3
    1d86:	8c 23       	and	r24, r28
    1d88:	b1 f3       	breq	.-20     	; 0x1d76 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1d8a:	83 b1       	in	r24, 0x03	; 3
    1d8c:	8c 23       	and	r24, r28
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <wait_for_button_release>:
    1d92:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1d96:	08 95       	ret

00001d98 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1d98:	a1 e0       	ldi	r26, 0x01	; 1
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1d9e:	fe e0       	ldi	r31, 0x0E	; 14
    1da0:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__+0x20>
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN20OrangutanPushbuttons4initEv>
    1daa:	93 b1       	in	r25, 0x03	; 3
    1dac:	90 95       	com	r25
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	89 23       	and	r24, r25
    1db2:	21 96       	adiw	r28, 0x01	; 1
    1db4:	e2 e0       	ldi	r30, 0x02	; 2
    1db6:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__+0x20>

00001dba <button_is_pressed>:
    1dba:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN20OrangutanPushbuttons9isPressedEh>
    1dbe:	08 95       	ret

00001dc0 <__vector_9>:
    1dc0:	2f 92       	push	r2
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	2f b6       	in	r2, 0x3f	; 63
    1dc8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tickCount+0x1>
    1dcc:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <tickCount+0x2>
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <tickCount+0x1>
    1dd6:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <tickCount+0x2>
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tickCount+0x3>
    1de0:	89 1f       	adc	r24, r25
    1de2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tickCount+0x3>
    1de6:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <us_over_10+0x1>
    1dea:	9c 5f       	subi	r25, 0xFC	; 252
    1dec:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <us_over_10+0x1>
    1df0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <us_over_10>
    1df4:	80 51       	subi	r24, 0x10	; 16
    1df6:	97 42       	sbci	r25, 0x27	; 39
    1df8:	c0 f0       	brcs	.+48     	; 0x1e2a <end>
    1dfa:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <us_over_10+0x1>
    1dfe:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <us_over_10>
    1e02:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <msCounter>
    1e06:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <msCounter+0x1>
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <msCounter>
    1e10:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <msCounter+0x1>
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <msCounter+0x2>
    1e1a:	89 1f       	adc	r24, r25
    1e1c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <msCounter+0x2>
    1e20:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <msCounter+0x3>
    1e24:	89 1f       	adc	r24, r25
    1e26:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <msCounter+0x3>

00001e2a <end>:
    1e2a:	2f be       	out	0x3f, r2	; 63
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	2f 90       	pop	r2
    1e32:	18 95       	reti

00001e34 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1e34:	28 ee       	ldi	r18, 0xE8	; 232
    1e36:	33 e0       	ldi	r19, 0x03	; 3
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	48 f0       	brcs	.+18     	; 0x1e4e <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	6f 93       	push	r22
    1e40:	64 e0       	ldi	r22, 0x04	; 4
    1e42:	6a 95       	dec	r22
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1e46:	6f 91       	pop	r22
    1e48:	31 97       	sbiw	r30, 0x01	; 1
    1e4a:	c9 f7       	brne	.-14     	; 0x1e3e <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1e4c:	f5 cf       	rjmp	.-22     	; 0x1e38 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1e4e:	08 95       	ret

00001e50 <delay_ms>:
    1e50:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN13OrangutanTime17delayMillisecondsEj>
    1e54:	08 95       	ret

00001e56 <_ZN13OrangutanTime5init2Ev>:
    1e56:	e0 e7       	ldi	r30, 0x70	; 112
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	80 83       	st	Z, r24
    1e60:	a0 eb       	ldi	r26, 0xB0	; 176
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	8c 91       	ld	r24, X
    1e66:	83 60       	ori	r24, 0x03	; 3
    1e68:	8c 93       	st	X, r24
    1e6a:	a1 eb       	ldi	r26, 0xB1	; 177
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	8c 91       	ld	r24, X
    1e70:	80 7f       	andi	r24, 0xF0	; 240
    1e72:	8c 93       	st	X, r24
    1e74:	8c 91       	ld	r24, X
    1e76:	82 60       	ori	r24, 0x02	; 2
    1e78:	8c 93       	st	X, r24
    1e7a:	b8 9a       	sbi	0x17, 0	; 23
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 60       	ori	r24, 0x01	; 1
    1e80:	80 83       	st	Z, r24
    1e82:	78 94       	sei
    1e84:	08 95       	ret

00001e86 <_ZN13OrangutanTime4initEv>:
    1e86:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_ZZN13OrangutanTime4initEvE11initialized>
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <_ZN13OrangutanTime4initEv+0x12>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <_ZZN13OrangutanTime4initEvE11initialized>
    1e94:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN13OrangutanTime5init2Ev>
    1e98:	08 95       	ret

00001e9a <_ZN13OrangutanTime5resetEv>:
    1e9a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_ZN13OrangutanTime4initEv>
    1e9e:	e0 e7       	ldi	r30, 0x70	; 112
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8e 7f       	andi	r24, 0xFE	; 254
    1ea6:	80 83       	st	Z, r24
    1ea8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <msCounter>
    1eac:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <msCounter+0x1>
    1eb0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <msCounter+0x2>
    1eb4:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <msCounter+0x3>
    1eb8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <us_over_10+0x1>
    1ebc:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <us_over_10>
    1ec0:	80 81       	ld	r24, Z
    1ec2:	81 60       	ori	r24, 0x01	; 1
    1ec4:	80 83       	st	Z, r24
    1ec6:	08 95       	ret

00001ec8 <read_line_sensors>:
    1ec8:	46 2f       	mov	r20, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	8d e8       	ldi	r24, 0x8D	; 141
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <_ZN16PololuQTRSensors4readEPjh>
    1ed4:	08 95       	ret

00001ed6 <_ZN9Pololu3pi4initEjh>:
    1ed6:	0f 93       	push	r16
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <_ZN9Pololu3pi4initEjh+0x8>
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <_ZN9Pololu3pi4initEjh+0xa>
    1ee0:	1f 92       	push	r1
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9c 01       	movw	r18, r24
    1ee8:	85 e0       	ldi	r24, 0x05	; 5
    1eea:	ea e4       	ldi	r30, 0x4A	; 74
    1eec:	f1 e0       	ldi	r31, 0x01	; 1
    1eee:	de 01       	movw	r26, r28
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	0d 92       	st	X+, r0
    1ef6:	8a 95       	dec	r24
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <_ZN9Pololu3pi4initEjh+0x1c>
    1efa:	66 23       	and	r22, r22
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <_ZN9Pololu3pi4initEjh+0x2c>
    1efe:	0f ef       	ldi	r16, 0xFF	; 255
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <_ZN9Pololu3pi4initEjh+0x2e>
    1f02:	03 e1       	ldi	r16, 0x13	; 19
    1f04:	45 e0       	ldi	r20, 0x05	; 5
    1f06:	be 01       	movw	r22, r28
    1f08:	6f 5f       	subi	r22, 0xFF	; 255
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	8d e8       	ldi	r24, 0x8D	; 141
    1f0e:	91 e0       	ldi	r25, 0x01	; 1
    1f10:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1f14:	8d e8       	ldi	r24, 0x8D	; 141
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	0e 94 14 10 	call	0x2028	; 0x2028 <_ZN16PololuQTRSensors11emittersOffEv>
    1f1c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_ZN13OrangutanTime5resetEv>
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	0f 91       	pop	r16
    1f30:	08 95       	ret

00001f32 <pololu_3pi_init>:
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN9Pololu3pi4initEjh>
    1f38:	08 95       	ret

00001f3a <_GLOBAL__sub_D_pololu_3pi_init>:
    1f3a:	8d e8       	ldi	r24, 0x8D	; 141
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN16PololuQTRSensorsD1Ev>
    1f42:	08 95       	ret

00001f44 <delay_us>:
    1f44:	6f 93       	push	r22
    1f46:	64 e0       	ldi	r22, 0x04	; 4
    1f48:	6a 95       	dec	r22
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <delay_us+0x4>
    1f4c:	6f 91       	pop	r22
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <delay_us>
    1f52:	08 95       	ret

00001f54 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1f54:	fc 01       	movw	r30, r24
    1f56:	11 82       	std	Z+1, r1	; 0x01
    1f58:	10 82       	st	Z, r1
    1f5a:	13 82       	std	Z+3, r1	; 0x03
    1f5c:	12 82       	std	Z+2, r1	; 0x02
    1f5e:	15 82       	std	Z+5, r1	; 0x05
    1f60:	14 82       	std	Z+4, r1	; 0x04
    1f62:	16 82       	std	Z+6, r1	; 0x06
    1f64:	68 30       	cpi	r22, 0x08	; 8
    1f66:	68 f4       	brcc	.+26     	; 0x1f82 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1f68:	89 e2       	ldi	r24, 0x29	; 41
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	8b e2       	ldi	r24, 0x2B	; 43
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	93 83       	std	Z+3, r25	; 0x03
    1f76:	82 83       	std	Z+2, r24	; 0x02
    1f78:	8a e2       	ldi	r24, 0x2A	; 42
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	95 83       	std	Z+5, r25	; 0x05
    1f7e:	84 83       	std	Z+4, r24	; 0x04
    1f80:	1f c0       	rjmp	.+62     	; 0x1fc0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1f82:	6e 30       	cpi	r22, 0x0E	; 14
    1f84:	70 f4       	brcc	.+28     	; 0x1fa2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    1f86:	83 e2       	ldi	r24, 0x23	; 35
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    1f8e:	85 e2       	ldi	r24, 0x25	; 37
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	93 83       	std	Z+3, r25	; 0x03
    1f94:	82 83       	std	Z+2, r24	; 0x02
    1f96:	84 e2       	ldi	r24, 0x24	; 36
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	95 83       	std	Z+5, r25	; 0x05
    1f9c:	84 83       	std	Z+4, r24	; 0x04
    1f9e:	68 50       	subi	r22, 0x08	; 8
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1fa2:	65 31       	cpi	r22, 0x15	; 21
    1fa4:	98 f4       	brcc	.+38     	; 0x1fcc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    1fa6:	86 e2       	ldi	r24, 0x26	; 38
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	88 e2       	ldi	r24, 0x28	; 40
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	93 83       	std	Z+3, r25	; 0x03
    1fb4:	82 83       	std	Z+2, r24	; 0x02
    1fb6:	87 e2       	ldi	r24, 0x27	; 39
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	95 83       	std	Z+5, r25	; 0x05
    1fbc:	84 83       	std	Z+4, r24	; 0x04
    1fbe:	6e 50       	subi	r22, 0x0E	; 14
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	6a 95       	dec	r22
    1fc8:	ea f7       	brpl	.-6      	; 0x1fc4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    1fca:	86 83       	std	Z+6, r24	; 0x06
    1fcc:	08 95       	ret

00001fce <_ZN16PololuQTRSensors4initEhhh>:
    1fce:	a7 e0       	ldi	r26, 0x07	; 7
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	ed ee       	ldi	r30, 0xED	; 237
    1fd4:	ff e0       	ldi	r31, 0x0F	; 15
    1fd6:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__prologue_saves__+0x1c>
    1fda:	8c 01       	movw	r16, r24
    1fdc:	fc 01       	movw	r30, r24
    1fde:	11 82       	std	Z+1, r1	; 0x01
    1fe0:	10 82       	st	Z, r1
    1fe2:	13 82       	std	Z+3, r1	; 0x03
    1fe4:	12 82       	std	Z+2, r1	; 0x02
    1fe6:	15 82       	std	Z+5, r1	; 0x05
    1fe8:	14 82       	std	Z+4, r1	; 0x04
    1fea:	17 82       	std	Z+7, r1	; 0x07
    1fec:	16 82       	std	Z+6, r1	; 0x06
    1fee:	61 31       	cpi	r22, 0x11	; 17
    1ff0:	18 f0       	brcs	.+6      	; 0x1ff8 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1ff2:	80 e1       	ldi	r24, 0x10	; 16
    1ff4:	80 87       	std	Z+8, r24	; 0x08
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	60 87       	std	Z+8, r22	; 0x08
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	20 8b       	std	Z+16, r18	; 0x10
    2000:	64 2f       	mov	r22, r20
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    200a:	8f 81       	ldd	r24, Y+7	; 0x07
    200c:	f8 01       	movw	r30, r16
    200e:	81 87       	std	Z+9, r24	; 0x09
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	93 87       	std	Z+11, r25	; 0x0b
    2016:	82 87       	std	Z+10, r24	; 0x0a
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	95 87       	std	Z+13, r25	; 0x0d
    201e:	84 87       	std	Z+12, r24	; 0x0c
    2020:	27 96       	adiw	r28, 0x07	; 7
    2022:	e4 e0       	ldi	r30, 0x04	; 4
    2024:	0c 94 16 13 	jmp	0x262c	; 0x262c <__epilogue_restores__+0x1c>

00002028 <_ZN16PololuQTRSensors11emittersOffEv>:
    2028:	fc 01       	movw	r30, r24
    202a:	a4 85       	ldd	r26, Z+12	; 0x0c
    202c:	b5 85       	ldd	r27, Z+13	; 0x0d
    202e:	10 97       	sbiw	r26, 0x00	; 0
    2030:	79 f0       	breq	.+30     	; 0x2050 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2032:	8c 91       	ld	r24, X
    2034:	91 85       	ldd	r25, Z+9	; 0x09
    2036:	89 2b       	or	r24, r25
    2038:	8c 93       	st	X, r24
    203a:	a2 85       	ldd	r26, Z+10	; 0x0a
    203c:	b3 85       	ldd	r27, Z+11	; 0x0b
    203e:	9c 91       	ld	r25, X
    2040:	81 85       	ldd	r24, Z+9	; 0x09
    2042:	80 95       	com	r24
    2044:	89 23       	and	r24, r25
    2046:	8c 93       	st	X, r24
    2048:	88 ec       	ldi	r24, 0xC8	; 200
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <delay_us>
    2050:	08 95       	ret

00002052 <_ZN16PololuQTRSensors10emittersOnEv>:
    2052:	fc 01       	movw	r30, r24
    2054:	a4 85       	ldd	r26, Z+12	; 0x0c
    2056:	b5 85       	ldd	r27, Z+13	; 0x0d
    2058:	10 97       	sbiw	r26, 0x00	; 0
    205a:	71 f0       	breq	.+28     	; 0x2078 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    205c:	8c 91       	ld	r24, X
    205e:	91 85       	ldd	r25, Z+9	; 0x09
    2060:	89 2b       	or	r24, r25
    2062:	8c 93       	st	X, r24
    2064:	a2 85       	ldd	r26, Z+10	; 0x0a
    2066:	b3 85       	ldd	r27, Z+11	; 0x0b
    2068:	8c 91       	ld	r24, X
    206a:	91 85       	ldd	r25, Z+9	; 0x09
    206c:	89 2b       	or	r24, r25
    206e:	8c 93       	st	X, r24
    2070:	88 ec       	ldi	r24, 0xC8	; 200
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <delay_us>
    2078:	08 95       	ret

0000207a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    207a:	a7 e0       	ldi	r26, 0x07	; 7
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e3 e4       	ldi	r30, 0x43	; 67
    2080:	f0 e1       	ldi	r31, 0x10	; 16
    2082:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__prologue_saves__+0x6>
    2086:	7c 01       	movw	r14, r24
    2088:	4b 01       	movw	r8, r22
    208a:	64 2f       	mov	r22, r20
    208c:	39 01       	movw	r6, r18
    208e:	40 2f       	mov	r20, r16
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN16PololuQTRSensors4initEhhh>
    2096:	87 01       	movw	r16, r14
    2098:	0f 5b       	subi	r16, 0xBF	; 191
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	f8 01       	movw	r30, r16
    209e:	10 82       	st	Z, r1
    20a0:	67 01       	movw	r12, r14
    20a2:	f2 e4       	ldi	r31, 0x42	; 66
    20a4:	cf 0e       	add	r12, r31
    20a6:	d1 1c       	adc	r13, r1
    20a8:	f6 01       	movw	r30, r12
    20aa:	10 82       	st	Z, r1
    20ac:	57 01       	movw	r10, r14
    20ae:	f3 e4       	ldi	r31, 0x43	; 67
    20b0:	af 0e       	add	r10, r31
    20b2:	b1 1c       	adc	r11, r1
    20b4:	f5 01       	movw	r30, r10
    20b6:	10 82       	st	Z, r1
    20b8:	f7 01       	movw	r30, r14
    20ba:	77 86       	std	Z+15, r7	; 0x0f
    20bc:	66 86       	std	Z+14, r6	; 0x0e
    20be:	51 2c       	mov	r5, r1
    20c0:	f7 01       	movw	r30, r14
    20c2:	80 85       	ldd	r24, Z+8	; 0x08
    20c4:	58 16       	cp	r5, r24
    20c6:	50 f5       	brcc	.+84     	; 0x211c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    20c8:	65 2c       	mov	r6, r5
    20ca:	71 2c       	mov	r7, r1
    20cc:	f4 01       	movw	r30, r8
    20ce:	e6 0d       	add	r30, r6
    20d0:	f7 1d       	adc	r31, r7
    20d2:	60 81       	ld	r22, Z
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    20dc:	2f 81       	ldd	r18, Y+7	; 0x07
    20de:	f7 01       	movw	r30, r14
    20e0:	e6 0d       	add	r30, r6
    20e2:	f7 1d       	adc	r31, r7
    20e4:	21 8b       	std	Z+17, r18	; 0x11
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	f3 01       	movw	r30, r6
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	ee 0d       	add	r30, r14
    20f2:	ff 1d       	adc	r31, r15
    20f4:	92 a3       	std	Z+34, r25	; 0x22
    20f6:	81 a3       	std	Z+33, r24	; 0x21
    20f8:	83 32       	cpi	r24, 0x23	; 35
    20fa:	91 05       	cpc	r25, r1
    20fc:	11 f4       	brne	.+4      	; 0x2102 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    20fe:	f8 01       	movw	r30, r16
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2102:	86 32       	cpi	r24, 0x26	; 38
    2104:	91 05       	cpc	r25, r1
    2106:	11 f4       	brne	.+4      	; 0x210c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2108:	f6 01       	movw	r30, r12
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    210c:	89 97       	sbiw	r24, 0x29	; 41
    210e:	21 f4       	brne	.+8      	; 0x2118 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2110:	f5 01       	movw	r30, r10
    2112:	80 81       	ld	r24, Z
    2114:	82 2b       	or	r24, r18
    2116:	80 83       	st	Z, r24
    2118:	53 94       	inc	r5
    211a:	d2 cf       	rjmp	.-92     	; 0x20c0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    211c:	27 96       	adiw	r28, 0x07	; 7
    211e:	ef e0       	ldi	r30, 0x0F	; 15
    2120:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__epilogue_restores__+0x6>

00002124 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e9       	ldi	r30, 0x98	; 152
    212a:	f0 e1       	ldi	r31, 0x10	; 16
    212c:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__prologue_saves__+0xa>
    2130:	ec 01       	movw	r28, r24
    2132:	5b 01       	movw	r10, r22
    2134:	6c 01       	movw	r12, r24
    2136:	81 e4       	ldi	r24, 0x41	; 65
    2138:	c8 0e       	add	r12, r24
    213a:	d1 1c       	adc	r13, r1
    213c:	f6 01       	movw	r30, r12
    213e:	80 80       	ld	r8, Z
    2140:	7e 01       	movw	r14, r28
    2142:	f2 e4       	ldi	r31, 0x42	; 66
    2144:	ef 0e       	add	r14, r31
    2146:	f1 1c       	adc	r15, r1
    2148:	f7 01       	movw	r30, r14
    214a:	70 80       	ld	r7, Z
    214c:	8e 01       	movw	r16, r28
    214e:	0d 5b       	subi	r16, 0xBD	; 189
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	f8 01       	movw	r30, r16
    2154:	90 80       	ld	r9, Z
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	98 85       	ldd	r25, Y+8	; 0x08
    215a:	89 17       	cp	r24, r25
    215c:	48 f4       	brcc	.+18     	; 0x2170 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    215e:	f5 01       	movw	r30, r10
    2160:	e8 0f       	add	r30, r24
    2162:	f1 1d       	adc	r31, r1
    2164:	e8 0f       	add	r30, r24
    2166:	f1 1d       	adc	r31, r1
    2168:	11 82       	std	Z+1, r1	; 0x01
    216a:	10 82       	st	Z, r1
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	f4 cf       	rjmp	.-24     	; 0x2158 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2170:	84 b1       	in	r24, 0x04	; 4
    2172:	f6 01       	movw	r30, r12
    2174:	90 81       	ld	r25, Z
    2176:	89 2b       	or	r24, r25
    2178:	84 b9       	out	0x04, r24	; 4
    217a:	87 b1       	in	r24, 0x07	; 7
    217c:	f7 01       	movw	r30, r14
    217e:	90 81       	ld	r25, Z
    2180:	89 2b       	or	r24, r25
    2182:	87 b9       	out	0x07, r24	; 7
    2184:	8a b1       	in	r24, 0x0a	; 10
    2186:	f8 01       	movw	r30, r16
    2188:	90 81       	ld	r25, Z
    218a:	89 2b       	or	r24, r25
    218c:	8a b9       	out	0x0a, r24	; 10
    218e:	85 b1       	in	r24, 0x05	; 5
    2190:	f6 01       	movw	r30, r12
    2192:	90 81       	ld	r25, Z
    2194:	89 2b       	or	r24, r25
    2196:	85 b9       	out	0x05, r24	; 5
    2198:	88 b1       	in	r24, 0x08	; 8
    219a:	f7 01       	movw	r30, r14
    219c:	90 81       	ld	r25, Z
    219e:	89 2b       	or	r24, r25
    21a0:	88 b9       	out	0x08, r24	; 8
    21a2:	8b b1       	in	r24, 0x0b	; 11
    21a4:	f8 01       	movw	r30, r16
    21a6:	90 81       	ld	r25, Z
    21a8:	89 2b       	or	r24, r25
    21aa:	8b b9       	out	0x0b, r24	; 11
    21ac:	8a e0       	ldi	r24, 0x0A	; 10
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <delay_us>
    21b4:	94 b1       	in	r25, 0x04	; 4
    21b6:	f6 01       	movw	r30, r12
    21b8:	80 81       	ld	r24, Z
    21ba:	80 95       	com	r24
    21bc:	89 23       	and	r24, r25
    21be:	84 b9       	out	0x04, r24	; 4
    21c0:	97 b1       	in	r25, 0x07	; 7
    21c2:	f7 01       	movw	r30, r14
    21c4:	80 81       	ld	r24, Z
    21c6:	80 95       	com	r24
    21c8:	89 23       	and	r24, r25
    21ca:	87 b9       	out	0x07, r24	; 7
    21cc:	9a b1       	in	r25, 0x0a	; 10
    21ce:	f8 01       	movw	r30, r16
    21d0:	80 81       	ld	r24, Z
    21d2:	80 95       	com	r24
    21d4:	89 23       	and	r24, r25
    21d6:	8a b9       	out	0x0a, r24	; 10
    21d8:	95 b1       	in	r25, 0x05	; 5
    21da:	f6 01       	movw	r30, r12
    21dc:	80 81       	ld	r24, Z
    21de:	80 95       	com	r24
    21e0:	89 23       	and	r24, r25
    21e2:	85 b9       	out	0x05, r24	; 5
    21e4:	98 b1       	in	r25, 0x08	; 8
    21e6:	f7 01       	movw	r30, r14
    21e8:	80 81       	ld	r24, Z
    21ea:	80 95       	com	r24
    21ec:	89 23       	and	r24, r25
    21ee:	88 b9       	out	0x08, r24	; 8
    21f0:	9b b1       	in	r25, 0x0b	; 11
    21f2:	f8 01       	movw	r30, r16
    21f4:	80 81       	ld	r24, Z
    21f6:	80 95       	com	r24
    21f8:	89 23       	and	r24, r25
    21fa:	8b b9       	out	0x0b, r24	; 11
    21fc:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2200:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2204:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2208:	83 60       	ori	r24, 0x03	; 3
    220a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2214:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	2e 85       	ldd	r18, Y+14	; 0x0e
    221e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2220:	82 17       	cp	r24, r18
    2222:	93 07       	cpc	r25, r19
    2224:	20 f5       	brcc	.+72     	; 0x226e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2226:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    222a:	2c 2d       	mov	r18, r12
    222c:	24 1b       	sub	r18, r20
    222e:	82 0f       	add	r24, r18
    2230:	91 1d       	adc	r25, r1
    2232:	03 b1       	in	r16, 0x03	; 3
    2234:	08 11       	cpse	r16, r8
    2236:	32 c0       	rjmp	.+100    	; 0x229c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2238:	f6 b0       	in	r15, 0x06	; 6
    223a:	f7 10       	cpse	r15, r7
    223c:	2f c0       	rjmp	.+94     	; 0x229c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    223e:	29 b1       	in	r18, 0x09	; 9
    2240:	29 11       	cpse	r18, r9
    2242:	2c c0       	rjmp	.+88     	; 0x229c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2244:	10 c0       	rjmp	.+32     	; 0x2266 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2246:	21 2f       	mov	r18, r17
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	a9 01       	movw	r20, r18
    224c:	44 0f       	add	r20, r20
    224e:	55 1f       	adc	r21, r21
    2250:	f5 01       	movw	r30, r10
    2252:	e4 0f       	add	r30, r20
    2254:	f5 1f       	adc	r31, r21
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	67 2b       	or	r22, r23
    225c:	21 f1       	breq	.+72     	; 0x22a6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    225e:	1f 5f       	subi	r17, 0xFF	; 255
    2260:	28 85       	ldd	r18, Y+8	; 0x08
    2262:	12 17       	cp	r17, r18
    2264:	80 f3       	brcs	.-32     	; 0x2246 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2266:	7f 2c       	mov	r7, r15
    2268:	80 2e       	mov	r8, r16
    226a:	4c 2d       	mov	r20, r12
    226c:	d7 cf       	rjmp	.-82     	; 0x221c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    226e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2272:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	88 85       	ldd	r24, Y+8	; 0x08
    227a:	28 17       	cp	r18, r24
    227c:	30 f5       	brcc	.+76     	; 0x22ca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    227e:	f5 01       	movw	r30, r10
    2280:	e2 0f       	add	r30, r18
    2282:	f1 1d       	adc	r31, r1
    2284:	e2 0f       	add	r30, r18
    2286:	f1 1d       	adc	r31, r1
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	89 2b       	or	r24, r25
    228e:	21 f4       	brne	.+8      	; 0x2298 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2290:	8e 85       	ldd	r24, Y+14	; 0x0e
    2292:	9f 85       	ldd	r25, Y+15	; 0x0f
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	ee cf       	rjmp	.-36     	; 0x2278 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    229c:	03 b1       	in	r16, 0x03	; 3
    229e:	f6 b0       	in	r15, 0x06	; 6
    22a0:	99 b0       	in	r9, 0x09	; 9
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	dd cf       	rjmp	.-70     	; 0x2260 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    22a6:	de 01       	movw	r26, r28
    22a8:	a4 0f       	add	r26, r20
    22aa:	b5 1f       	adc	r27, r21
    22ac:	91 96       	adiw	r26, 0x21	; 33
    22ae:	0d 90       	ld	r0, X+
    22b0:	bc 91       	ld	r27, X
    22b2:	a0 2d       	mov	r26, r0
    22b4:	4c 91       	ld	r20, X
    22b6:	de 01       	movw	r26, r28
    22b8:	a2 0f       	add	r26, r18
    22ba:	b3 1f       	adc	r27, r19
    22bc:	51 96       	adiw	r26, 0x11	; 17
    22be:	2c 91       	ld	r18, X
    22c0:	42 23       	and	r20, r18
    22c2:	69 f6       	brne	.-102    	; 0x225e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	ca cf       	rjmp	.-108    	; 0x225e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	ed e0       	ldi	r30, 0x0D	; 13
    22d0:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__epilogue_restores__+0xa>

000022d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    22d4:	ef 92       	push	r14
    22d6:	ff 92       	push	r15
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	fc 01       	movw	r30, r24
    22e2:	9b 01       	movw	r18, r22
    22e4:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    22e8:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22ec:	47 b1       	in	r20, 0x07	; 7
    22ee:	18 b1       	in	r17, 0x08	; 8
    22f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22f4:	86 fd       	sbrc	r24, 6
    22f6:	fc cf       	rjmp	.-8      	; 0x22f0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 85       	ldd	r25, Z+8	; 0x08
    22fc:	89 17       	cp	r24, r25
    22fe:	48 f4       	brcc	.+18     	; 0x2312 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2300:	d9 01       	movw	r26, r18
    2302:	a8 0f       	add	r26, r24
    2304:	b1 1d       	adc	r27, r1
    2306:	a8 0f       	add	r26, r24
    2308:	b1 1d       	adc	r27, r1
    230a:	1d 92       	st	X+, r1
    230c:	1c 92       	st	X, r1
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	f4 cf       	rjmp	.-24     	; 0x22fa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2312:	97 b1       	in	r25, 0x07	; 7
    2314:	82 a1       	ldd	r24, Z+34	; 0x22
    2316:	80 95       	com	r24
    2318:	89 23       	and	r24, r25
    231a:	87 b9       	out	0x07, r24	; 7
    231c:	98 b1       	in	r25, 0x08	; 8
    231e:	82 a1       	ldd	r24, Z+34	; 0x22
    2320:	80 95       	com	r24
    2322:	89 23       	and	r24, r25
    2324:	88 b9       	out	0x08, r24	; 8
    2326:	87 e8       	ldi	r24, 0x87	; 135
    2328:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    232c:	e1 2c       	mov	r14, r1
    232e:	81 a1       	ldd	r24, Z+33	; 0x21
    2330:	e8 16       	cp	r14, r24
    2332:	10 f0       	brcs	.+4      	; 0x2338 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2334:	e1 2c       	mov	r14, r1
    2336:	29 c0       	rjmp	.+82     	; 0x238a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	80 85       	ldd	r24, Z+8	; 0x08
    233c:	58 17       	cp	r21, r24
    233e:	18 f5       	brcc	.+70     	; 0x2386 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2340:	a5 2f       	mov	r26, r21
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	ef 01       	movw	r28, r30
    2346:	ca 0f       	add	r28, r26
    2348:	db 1f       	adc	r29, r27
    234a:	89 89       	ldd	r24, Y+17	; 0x11
    234c:	80 64       	ori	r24, 0x40	; 64
    234e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2352:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2356:	80 64       	ori	r24, 0x40	; 64
    2358:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    235c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2360:	86 fd       	sbrc	r24, 6
    2362:	fc cf       	rjmp	.-8      	; 0x235c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2364:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2368:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    236c:	aa 0f       	add	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	a2 0f       	add	r26, r18
    2372:	b3 1f       	adc	r27, r19
    2374:	8d 91       	ld	r24, X+
    2376:	9c 91       	ld	r25, X
    2378:	11 97       	sbiw	r26, 0x01	; 1
    237a:	86 0f       	add	r24, r22
    237c:	97 1f       	adc	r25, r23
    237e:	8d 93       	st	X+, r24
    2380:	9c 93       	st	X, r25
    2382:	5f 5f       	subi	r21, 0xFF	; 255
    2384:	da cf       	rjmp	.-76     	; 0x233a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2386:	e3 94       	inc	r14
    2388:	d2 cf       	rjmp	.-92     	; 0x232e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    238a:	80 85       	ldd	r24, Z+8	; 0x08
    238c:	e8 16       	cp	r14, r24
    238e:	a0 f4       	brcc	.+40     	; 0x23b8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2390:	e9 01       	movw	r28, r18
    2392:	ce 0d       	add	r28, r14
    2394:	d1 1d       	adc	r29, r1
    2396:	ce 0d       	add	r28, r14
    2398:	d1 1d       	adc	r29, r1
    239a:	61 a1       	ldd	r22, Z+33	; 0x21
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	cb 01       	movw	r24, r22
    23a0:	95 95       	asr	r25
    23a2:	87 95       	ror	r24
    23a4:	a8 81       	ld	r26, Y
    23a6:	b9 81       	ldd	r27, Y+1	; 0x01
    23a8:	8a 0f       	add	r24, r26
    23aa:	9b 1f       	adc	r25, r27
    23ac:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    23b0:	79 83       	std	Y+1, r23	; 0x01
    23b2:	68 83       	st	Y, r22
    23b4:	e3 94       	inc	r14
    23b6:	e9 cf       	rjmp	.-46     	; 0x238a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    23b8:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    23bc:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23c0:	18 b9       	out	0x08, r17	; 8
    23c2:	47 b9       	out	0x07, r20	; 7
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	e6 e0       	ldi	r30, 0x06	; 6
    23ca:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

000023ce <_ZN16PololuQTRSensors4readEPjh>:
    23ce:	a0 e2       	ldi	r26, 0x20	; 32
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ed ee       	ldi	r30, 0xED	; 237
    23d4:	f1 e1       	ldi	r31, 0x11	; 17
    23d6:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x16>
    23da:	8c 01       	movw	r16, r24
    23dc:	7b 01       	movw	r14, r22
    23de:	d4 2e       	mov	r13, r20
    23e0:	8f ef       	ldi	r24, 0xFF	; 255
    23e2:	84 0f       	add	r24, r20
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	18 f4       	brcc	.+6      	; 0x23ee <_ZN16PololuQTRSensors4readEPjh+0x20>
    23e8:	c8 01       	movw	r24, r16
    23ea:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN16PololuQTRSensors10emittersOnEv>
    23ee:	d8 01       	movw	r26, r16
    23f0:	50 96       	adiw	r26, 0x10	; 16
    23f2:	8c 91       	ld	r24, X
    23f4:	b7 01       	movw	r22, r14
    23f6:	81 11       	cpse	r24, r1
    23f8:	10 c0       	rjmp	.+32     	; 0x241a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    23fa:	c8 01       	movw	r24, r16
    23fc:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2400:	c8 01       	movw	r24, r16
    2402:	0e 94 14 10 	call	0x2028	; 0x2028 <_ZN16PololuQTRSensors11emittersOffEv>
    2406:	b2 e0       	ldi	r27, 0x02	; 2
    2408:	db 12       	cpse	r13, r27
    240a:	3a c0       	rjmp	.+116    	; 0x2480 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    240c:	be 01       	movw	r22, r28
    240e:	6f 5f       	subi	r22, 0xFF	; 255
    2410:	7f 4f       	sbci	r23, 0xFF	; 255
    2412:	c8 01       	movw	r24, r16
    2414:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    241a:	c8 01       	movw	r24, r16
    241c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2420:	c8 01       	movw	r24, r16
    2422:	0e 94 14 10 	call	0x2028	; 0x2028 <_ZN16PololuQTRSensors11emittersOffEv>
    2426:	e2 e0       	ldi	r30, 0x02	; 2
    2428:	de 12       	cpse	r13, r30
    242a:	2a c0       	rjmp	.+84     	; 0x2480 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    242c:	be 01       	movw	r22, r28
    242e:	6f 5f       	subi	r22, 0xFF	; 255
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	c8 01       	movw	r24, r16
    2434:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	f8 01       	movw	r30, r16
    243c:	80 85       	ldd	r24, Z+8	; 0x08
    243e:	48 17       	cp	r20, r24
    2440:	f8 f4       	brcc	.+62     	; 0x2480 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2442:	84 2f       	mov	r24, r20
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	f7 01       	movw	r30, r14
    244c:	e8 0f       	add	r30, r24
    244e:	f9 1f       	adc	r31, r25
    2450:	21 e0       	ldi	r18, 0x01	; 1
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	2c 0f       	add	r18, r28
    2456:	3d 1f       	adc	r19, r29
    2458:	82 0f       	add	r24, r18
    245a:	93 1f       	adc	r25, r19
    245c:	d8 01       	movw	r26, r16
    245e:	1e 96       	adiw	r26, 0x0e	; 14
    2460:	2d 91       	ld	r18, X+
    2462:	3c 91       	ld	r19, X
    2464:	1f 97       	sbiw	r26, 0x0f	; 15
    2466:	dc 01       	movw	r26, r24
    2468:	8d 91       	ld	r24, X+
    246a:	9c 91       	ld	r25, X
    246c:	28 1b       	sub	r18, r24
    246e:	39 0b       	sbc	r19, r25
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	82 0f       	add	r24, r18
    2476:	93 1f       	adc	r25, r19
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	4f 5f       	subi	r20, 0xFF	; 255
    247e:	dd cf       	rjmp	.-70     	; 0x243a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2480:	a0 96       	adiw	r28, 0x20	; 32
    2482:	e7 e0       	ldi	r30, 0x07	; 7
    2484:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x16>

00002488 <_ZN16PololuQTRSensorsD1Ev>:
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	ec 01       	movw	r28, r24
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	9b 81       	ldd	r25, Y+3	; 0x03
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	11 f0       	breq	.+4      	; 0x249a <_ZN16PololuQTRSensorsD1Ev+0x12>
    2496:	0e 94 bb 13 	call	0x2776	; 0x2776 <free>
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	9f 81       	ldd	r25, Y+7	; 0x07
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    24a2:	0e 94 bb 13 	call	0x2776	; 0x2776 <free>
    24a6:	88 81       	ld	r24, Y
    24a8:	99 81       	ldd	r25, Y+1	; 0x01
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	11 f0       	breq	.+4      	; 0x24b2 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    24ae:	0e 94 bb 13 	call	0x2776	; 0x2776 <free>
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	11 f0       	breq	.+4      	; 0x24be <_ZN16PololuQTRSensorsD1Ev+0x36>
    24ba:	0e 94 bb 13 	call	0x2776	; 0x2776 <free>
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	08 95       	ret

000024c4 <__udivmodqi4>:
    24c4:	99 1b       	sub	r25, r25
    24c6:	79 e0       	ldi	r23, 0x09	; 9
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <__udivmodqi4_ep>

000024ca <__udivmodqi4_loop>:
    24ca:	99 1f       	adc	r25, r25
    24cc:	96 17       	cp	r25, r22
    24ce:	08 f0       	brcs	.+2      	; 0x24d2 <__udivmodqi4_ep>
    24d0:	96 1b       	sub	r25, r22

000024d2 <__udivmodqi4_ep>:
    24d2:	88 1f       	adc	r24, r24
    24d4:	7a 95       	dec	r23
    24d6:	c9 f7       	brne	.-14     	; 0x24ca <__udivmodqi4_loop>
    24d8:	80 95       	com	r24
    24da:	08 95       	ret

000024dc <__udivmodhi4>:
    24dc:	aa 1b       	sub	r26, r26
    24de:	bb 1b       	sub	r27, r27
    24e0:	51 e1       	ldi	r21, 0x11	; 17
    24e2:	07 c0       	rjmp	.+14     	; 0x24f2 <__udivmodhi4_ep>

000024e4 <__udivmodhi4_loop>:
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	a6 17       	cp	r26, r22
    24ea:	b7 07       	cpc	r27, r23
    24ec:	10 f0       	brcs	.+4      	; 0x24f2 <__udivmodhi4_ep>
    24ee:	a6 1b       	sub	r26, r22
    24f0:	b7 0b       	sbc	r27, r23

000024f2 <__udivmodhi4_ep>:
    24f2:	88 1f       	adc	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	5a 95       	dec	r21
    24f8:	a9 f7       	brne	.-22     	; 0x24e4 <__udivmodhi4_loop>
    24fa:	80 95       	com	r24
    24fc:	90 95       	com	r25
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	08 95       	ret

00002504 <__divmodhi4>:
    2504:	97 fb       	bst	r25, 7
    2506:	07 2e       	mov	r0, r23
    2508:	16 f4       	brtc	.+4      	; 0x250e <__divmodhi4+0xa>
    250a:	00 94       	com	r0
    250c:	07 d0       	rcall	.+14     	; 0x251c <__divmodhi4_neg1>
    250e:	77 fd       	sbrc	r23, 7
    2510:	09 d0       	rcall	.+18     	; 0x2524 <__divmodhi4_neg2>
    2512:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    2516:	07 fc       	sbrc	r0, 7
    2518:	05 d0       	rcall	.+10     	; 0x2524 <__divmodhi4_neg2>
    251a:	3e f4       	brtc	.+14     	; 0x252a <__divmodhi4_exit>

0000251c <__divmodhi4_neg1>:
    251c:	90 95       	com	r25
    251e:	81 95       	neg	r24
    2520:	9f 4f       	sbci	r25, 0xFF	; 255
    2522:	08 95       	ret

00002524 <__divmodhi4_neg2>:
    2524:	70 95       	com	r23
    2526:	61 95       	neg	r22
    2528:	7f 4f       	sbci	r23, 0xFF	; 255

0000252a <__divmodhi4_exit>:
    252a:	08 95       	ret

0000252c <__udivmodsi4>:
    252c:	a1 e2       	ldi	r26, 0x21	; 33
    252e:	1a 2e       	mov	r1, r26
    2530:	aa 1b       	sub	r26, r26
    2532:	bb 1b       	sub	r27, r27
    2534:	fd 01       	movw	r30, r26
    2536:	0d c0       	rjmp	.+26     	; 0x2552 <__udivmodsi4_ep>

00002538 <__udivmodsi4_loop>:
    2538:	aa 1f       	adc	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	ee 1f       	adc	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	a2 17       	cp	r26, r18
    2542:	b3 07       	cpc	r27, r19
    2544:	e4 07       	cpc	r30, r20
    2546:	f5 07       	cpc	r31, r21
    2548:	20 f0       	brcs	.+8      	; 0x2552 <__udivmodsi4_ep>
    254a:	a2 1b       	sub	r26, r18
    254c:	b3 0b       	sbc	r27, r19
    254e:	e4 0b       	sbc	r30, r20
    2550:	f5 0b       	sbc	r31, r21

00002552 <__udivmodsi4_ep>:
    2552:	66 1f       	adc	r22, r22
    2554:	77 1f       	adc	r23, r23
    2556:	88 1f       	adc	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	1a 94       	dec	r1
    255c:	69 f7       	brne	.-38     	; 0x2538 <__udivmodsi4_loop>
    255e:	60 95       	com	r22
    2560:	70 95       	com	r23
    2562:	80 95       	com	r24
    2564:	90 95       	com	r25
    2566:	9b 01       	movw	r18, r22
    2568:	ac 01       	movw	r20, r24
    256a:	bd 01       	movw	r22, r26
    256c:	cf 01       	movw	r24, r30
    256e:	08 95       	ret

00002570 <__divmodsi4>:
    2570:	05 2e       	mov	r0, r21
    2572:	97 fb       	bst	r25, 7
    2574:	1e f4       	brtc	.+6      	; 0x257c <__divmodsi4+0xc>
    2576:	00 94       	com	r0
    2578:	0e 94 cf 12 	call	0x259e	; 0x259e <__negsi2>
    257c:	57 fd       	sbrc	r21, 7
    257e:	07 d0       	rcall	.+14     	; 0x258e <__divmodsi4_neg2>
    2580:	0e 94 96 12 	call	0x252c	; 0x252c <__udivmodsi4>
    2584:	07 fc       	sbrc	r0, 7
    2586:	03 d0       	rcall	.+6      	; 0x258e <__divmodsi4_neg2>
    2588:	4e f4       	brtc	.+18     	; 0x259c <__divmodsi4_exit>
    258a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__negsi2>

0000258e <__divmodsi4_neg2>:
    258e:	50 95       	com	r21
    2590:	40 95       	com	r20
    2592:	30 95       	com	r19
    2594:	21 95       	neg	r18
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	4f 4f       	sbci	r20, 0xFF	; 255
    259a:	5f 4f       	sbci	r21, 0xFF	; 255

0000259c <__divmodsi4_exit>:
    259c:	08 95       	ret

0000259e <__negsi2>:
    259e:	90 95       	com	r25
    25a0:	80 95       	com	r24
    25a2:	70 95       	com	r23
    25a4:	61 95       	neg	r22
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	8f 4f       	sbci	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	08 95       	ret

000025ae <__tablejump2__>:
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	05 90       	lpm	r0, Z+
    25b4:	f4 91       	lpm	r31, Z
    25b6:	e0 2d       	mov	r30, r0
    25b8:	09 94       	ijmp

000025ba <__umulhisi3>:
    25ba:	a2 9f       	mul	r26, r18
    25bc:	b0 01       	movw	r22, r0
    25be:	b3 9f       	mul	r27, r19
    25c0:	c0 01       	movw	r24, r0
    25c2:	a3 9f       	mul	r26, r19
    25c4:	70 0d       	add	r23, r0
    25c6:	81 1d       	adc	r24, r1
    25c8:	11 24       	eor	r1, r1
    25ca:	91 1d       	adc	r25, r1
    25cc:	b2 9f       	mul	r27, r18
    25ce:	70 0d       	add	r23, r0
    25d0:	81 1d       	adc	r24, r1
    25d2:	11 24       	eor	r1, r1
    25d4:	91 1d       	adc	r25, r1
    25d6:	08 95       	ret

000025d8 <__prologue_saves__>:
    25d8:	2f 92       	push	r2
    25da:	3f 92       	push	r3
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	ca 1b       	sub	r28, r26
    2602:	db 0b       	sbc	r29, r27
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	09 94       	ijmp

00002610 <__epilogue_restores__>:
    2610:	2a 88       	ldd	r2, Y+18	; 0x12
    2612:	39 88       	ldd	r3, Y+17	; 0x11
    2614:	48 88       	ldd	r4, Y+16	; 0x10
    2616:	5f 84       	ldd	r5, Y+15	; 0x0f
    2618:	6e 84       	ldd	r6, Y+14	; 0x0e
    261a:	7d 84       	ldd	r7, Y+13	; 0x0d
    261c:	8c 84       	ldd	r8, Y+12	; 0x0c
    261e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2620:	aa 84       	ldd	r10, Y+10	; 0x0a
    2622:	b9 84       	ldd	r11, Y+9	; 0x09
    2624:	c8 84       	ldd	r12, Y+8	; 0x08
    2626:	df 80       	ldd	r13, Y+7	; 0x07
    2628:	ee 80       	ldd	r14, Y+6	; 0x06
    262a:	fd 80       	ldd	r15, Y+5	; 0x05
    262c:	0c 81       	ldd	r16, Y+4	; 0x04
    262e:	1b 81       	ldd	r17, Y+3	; 0x03
    2630:	aa 81       	ldd	r26, Y+2	; 0x02
    2632:	b9 81       	ldd	r27, Y+1	; 0x01
    2634:	ce 0f       	add	r28, r30
    2636:	d1 1d       	adc	r29, r1
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	ed 01       	movw	r28, r26
    2644:	08 95       	ret

00002646 <malloc>:
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	91 05       	cpc	r25, r1
    2652:	10 f4       	brcc	.+4      	; 0x2658 <malloc+0x12>
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	e0 91 df 08 	lds	r30, 0x08DF	; 0x8008df <__flp>
    265c:	f0 91 e0 08 	lds	r31, 0x08E0	; 0x8008e0 <__flp+0x1>
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	a0 e0       	ldi	r26, 0x00	; 0
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	30 97       	sbiw	r30, 0x00	; 0
    266a:	19 f1       	breq	.+70     	; 0x26b2 <malloc+0x6c>
    266c:	40 81       	ld	r20, Z
    266e:	51 81       	ldd	r21, Z+1	; 0x01
    2670:	02 81       	ldd	r16, Z+2	; 0x02
    2672:	13 81       	ldd	r17, Z+3	; 0x03
    2674:	48 17       	cp	r20, r24
    2676:	59 07       	cpc	r21, r25
    2678:	c8 f0       	brcs	.+50     	; 0x26ac <malloc+0x66>
    267a:	84 17       	cp	r24, r20
    267c:	95 07       	cpc	r25, r21
    267e:	69 f4       	brne	.+26     	; 0x269a <malloc+0x54>
    2680:	10 97       	sbiw	r26, 0x00	; 0
    2682:	31 f0       	breq	.+12     	; 0x2690 <malloc+0x4a>
    2684:	12 96       	adiw	r26, 0x02	; 2
    2686:	0c 93       	st	X, r16
    2688:	12 97       	sbiw	r26, 0x02	; 2
    268a:	13 96       	adiw	r26, 0x03	; 3
    268c:	1c 93       	st	X, r17
    268e:	27 c0       	rjmp	.+78     	; 0x26de <malloc+0x98>
    2690:	00 93 df 08 	sts	0x08DF, r16	; 0x8008df <__flp>
    2694:	10 93 e0 08 	sts	0x08E0, r17	; 0x8008e0 <__flp+0x1>
    2698:	22 c0       	rjmp	.+68     	; 0x26de <malloc+0x98>
    269a:	21 15       	cp	r18, r1
    269c:	31 05       	cpc	r19, r1
    269e:	19 f0       	breq	.+6      	; 0x26a6 <malloc+0x60>
    26a0:	42 17       	cp	r20, r18
    26a2:	53 07       	cpc	r21, r19
    26a4:	18 f4       	brcc	.+6      	; 0x26ac <malloc+0x66>
    26a6:	9a 01       	movw	r18, r20
    26a8:	bd 01       	movw	r22, r26
    26aa:	ef 01       	movw	r28, r30
    26ac:	df 01       	movw	r26, r30
    26ae:	f8 01       	movw	r30, r16
    26b0:	db cf       	rjmp	.-74     	; 0x2668 <malloc+0x22>
    26b2:	21 15       	cp	r18, r1
    26b4:	31 05       	cpc	r19, r1
    26b6:	f9 f0       	breq	.+62     	; 0x26f6 <malloc+0xb0>
    26b8:	28 1b       	sub	r18, r24
    26ba:	39 0b       	sbc	r19, r25
    26bc:	24 30       	cpi	r18, 0x04	; 4
    26be:	31 05       	cpc	r19, r1
    26c0:	80 f4       	brcc	.+32     	; 0x26e2 <malloc+0x9c>
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	9b 81       	ldd	r25, Y+3	; 0x03
    26c6:	61 15       	cp	r22, r1
    26c8:	71 05       	cpc	r23, r1
    26ca:	21 f0       	breq	.+8      	; 0x26d4 <malloc+0x8e>
    26cc:	fb 01       	movw	r30, r22
    26ce:	93 83       	std	Z+3, r25	; 0x03
    26d0:	82 83       	std	Z+2, r24	; 0x02
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <malloc+0x96>
    26d4:	90 93 e0 08 	sts	0x08E0, r25	; 0x8008e0 <__flp+0x1>
    26d8:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <__flp>
    26dc:	fe 01       	movw	r30, r28
    26de:	32 96       	adiw	r30, 0x02	; 2
    26e0:	44 c0       	rjmp	.+136    	; 0x276a <malloc+0x124>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e2 0f       	add	r30, r18
    26e6:	f3 1f       	adc	r31, r19
    26e8:	81 93       	st	Z+, r24
    26ea:	91 93       	st	Z+, r25
    26ec:	22 50       	subi	r18, 0x02	; 2
    26ee:	31 09       	sbc	r19, r1
    26f0:	39 83       	std	Y+1, r19	; 0x01
    26f2:	28 83       	st	Y, r18
    26f4:	3a c0       	rjmp	.+116    	; 0x276a <malloc+0x124>
    26f6:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <__brkval>
    26fa:	30 91 de 08 	lds	r19, 0x08DE	; 0x8008de <__brkval+0x1>
    26fe:	23 2b       	or	r18, r19
    2700:	41 f4       	brne	.+16     	; 0x2712 <malloc+0xcc>
    2702:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_start>
    2706:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_start+0x1>
    270a:	30 93 de 08 	sts	0x08DE, r19	; 0x8008de <__brkval+0x1>
    270e:	20 93 dd 08 	sts	0x08DD, r18	; 0x8008dd <__brkval>
    2712:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_end>
    2716:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_end+0x1>
    271a:	21 15       	cp	r18, r1
    271c:	31 05       	cpc	r19, r1
    271e:	41 f4       	brne	.+16     	; 0x2730 <malloc+0xea>
    2720:	2d b7       	in	r18, 0x3d	; 61
    2722:	3e b7       	in	r19, 0x3e	; 62
    2724:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__malloc_margin>
    2728:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__malloc_margin+0x1>
    272c:	24 1b       	sub	r18, r20
    272e:	35 0b       	sbc	r19, r21
    2730:	e0 91 dd 08 	lds	r30, 0x08DD	; 0x8008dd <__brkval>
    2734:	f0 91 de 08 	lds	r31, 0x08DE	; 0x8008de <__brkval+0x1>
    2738:	e2 17       	cp	r30, r18
    273a:	f3 07       	cpc	r31, r19
    273c:	a0 f4       	brcc	.+40     	; 0x2766 <malloc+0x120>
    273e:	2e 1b       	sub	r18, r30
    2740:	3f 0b       	sbc	r19, r31
    2742:	28 17       	cp	r18, r24
    2744:	39 07       	cpc	r19, r25
    2746:	78 f0       	brcs	.+30     	; 0x2766 <malloc+0x120>
    2748:	ac 01       	movw	r20, r24
    274a:	4e 5f       	subi	r20, 0xFE	; 254
    274c:	5f 4f       	sbci	r21, 0xFF	; 255
    274e:	24 17       	cp	r18, r20
    2750:	35 07       	cpc	r19, r21
    2752:	48 f0       	brcs	.+18     	; 0x2766 <malloc+0x120>
    2754:	4e 0f       	add	r20, r30
    2756:	5f 1f       	adc	r21, r31
    2758:	50 93 de 08 	sts	0x08DE, r21	; 0x8008de <__brkval+0x1>
    275c:	40 93 dd 08 	sts	0x08DD, r20	; 0x8008dd <__brkval>
    2760:	81 93       	st	Z+, r24
    2762:	91 93       	st	Z+, r25
    2764:	02 c0       	rjmp	.+4      	; 0x276a <malloc+0x124>
    2766:	e0 e0       	ldi	r30, 0x00	; 0
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	cf 01       	movw	r24, r30
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	08 95       	ret

00002776 <free>:
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	09 f4       	brne	.+2      	; 0x2780 <free+0xa>
    277e:	81 c0       	rjmp	.+258    	; 0x2882 <free+0x10c>
    2780:	fc 01       	movw	r30, r24
    2782:	32 97       	sbiw	r30, 0x02	; 2
    2784:	13 82       	std	Z+3, r1	; 0x03
    2786:	12 82       	std	Z+2, r1	; 0x02
    2788:	a0 91 df 08 	lds	r26, 0x08DF	; 0x8008df <__flp>
    278c:	b0 91 e0 08 	lds	r27, 0x08E0	; 0x8008e0 <__flp+0x1>
    2790:	10 97       	sbiw	r26, 0x00	; 0
    2792:	81 f4       	brne	.+32     	; 0x27b4 <free+0x3e>
    2794:	20 81       	ld	r18, Z
    2796:	31 81       	ldd	r19, Z+1	; 0x01
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <__brkval>
    27a0:	30 91 de 08 	lds	r19, 0x08DE	; 0x8008de <__brkval+0x1>
    27a4:	28 17       	cp	r18, r24
    27a6:	39 07       	cpc	r19, r25
    27a8:	51 f5       	brne	.+84     	; 0x27fe <free+0x88>
    27aa:	f0 93 de 08 	sts	0x08DE, r31	; 0x8008de <__brkval+0x1>
    27ae:	e0 93 dd 08 	sts	0x08DD, r30	; 0x8008dd <__brkval>
    27b2:	67 c0       	rjmp	.+206    	; 0x2882 <free+0x10c>
    27b4:	ed 01       	movw	r28, r26
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	ce 17       	cp	r28, r30
    27bc:	df 07       	cpc	r29, r31
    27be:	40 f4       	brcc	.+16     	; 0x27d0 <free+0x5a>
    27c0:	4a 81       	ldd	r20, Y+2	; 0x02
    27c2:	5b 81       	ldd	r21, Y+3	; 0x03
    27c4:	9e 01       	movw	r18, r28
    27c6:	41 15       	cp	r20, r1
    27c8:	51 05       	cpc	r21, r1
    27ca:	f1 f0       	breq	.+60     	; 0x2808 <free+0x92>
    27cc:	ea 01       	movw	r28, r20
    27ce:	f5 cf       	rjmp	.-22     	; 0x27ba <free+0x44>
    27d0:	d3 83       	std	Z+3, r29	; 0x03
    27d2:	c2 83       	std	Z+2, r28	; 0x02
    27d4:	40 81       	ld	r20, Z
    27d6:	51 81       	ldd	r21, Z+1	; 0x01
    27d8:	84 0f       	add	r24, r20
    27da:	95 1f       	adc	r25, r21
    27dc:	c8 17       	cp	r28, r24
    27de:	d9 07       	cpc	r29, r25
    27e0:	59 f4       	brne	.+22     	; 0x27f8 <free+0x82>
    27e2:	88 81       	ld	r24, Y
    27e4:	99 81       	ldd	r25, Y+1	; 0x01
    27e6:	84 0f       	add	r24, r20
    27e8:	95 1f       	adc	r25, r21
    27ea:	02 96       	adiw	r24, 0x02	; 2
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	93 83       	std	Z+3, r25	; 0x03
    27f6:	82 83       	std	Z+2, r24	; 0x02
    27f8:	21 15       	cp	r18, r1
    27fa:	31 05       	cpc	r19, r1
    27fc:	29 f4       	brne	.+10     	; 0x2808 <free+0x92>
    27fe:	f0 93 e0 08 	sts	0x08E0, r31	; 0x8008e0 <__flp+0x1>
    2802:	e0 93 df 08 	sts	0x08DF, r30	; 0x8008df <__flp>
    2806:	3d c0       	rjmp	.+122    	; 0x2882 <free+0x10c>
    2808:	e9 01       	movw	r28, r18
    280a:	fb 83       	std	Y+3, r31	; 0x03
    280c:	ea 83       	std	Y+2, r30	; 0x02
    280e:	49 91       	ld	r20, Y+
    2810:	59 91       	ld	r21, Y+
    2812:	c4 0f       	add	r28, r20
    2814:	d5 1f       	adc	r29, r21
    2816:	ec 17       	cp	r30, r28
    2818:	fd 07       	cpc	r31, r29
    281a:	61 f4       	brne	.+24     	; 0x2834 <free+0xbe>
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	84 0f       	add	r24, r20
    2822:	95 1f       	adc	r25, r21
    2824:	02 96       	adiw	r24, 0x02	; 2
    2826:	e9 01       	movw	r28, r18
    2828:	99 83       	std	Y+1, r25	; 0x01
    282a:	88 83       	st	Y, r24
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	9b 83       	std	Y+3, r25	; 0x03
    2832:	8a 83       	std	Y+2, r24	; 0x02
    2834:	e0 e0       	ldi	r30, 0x00	; 0
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	12 96       	adiw	r26, 0x02	; 2
    283a:	8d 91       	ld	r24, X+
    283c:	9c 91       	ld	r25, X
    283e:	13 97       	sbiw	r26, 0x03	; 3
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	19 f0       	breq	.+6      	; 0x284a <free+0xd4>
    2844:	fd 01       	movw	r30, r26
    2846:	dc 01       	movw	r26, r24
    2848:	f7 cf       	rjmp	.-18     	; 0x2838 <free+0xc2>
    284a:	8d 91       	ld	r24, X+
    284c:	9c 91       	ld	r25, X
    284e:	11 97       	sbiw	r26, 0x01	; 1
    2850:	9d 01       	movw	r18, r26
    2852:	2e 5f       	subi	r18, 0xFE	; 254
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	82 0f       	add	r24, r18
    2858:	93 1f       	adc	r25, r19
    285a:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <__brkval>
    285e:	30 91 de 08 	lds	r19, 0x08DE	; 0x8008de <__brkval+0x1>
    2862:	28 17       	cp	r18, r24
    2864:	39 07       	cpc	r19, r25
    2866:	69 f4       	brne	.+26     	; 0x2882 <free+0x10c>
    2868:	30 97       	sbiw	r30, 0x00	; 0
    286a:	29 f4       	brne	.+10     	; 0x2876 <free+0x100>
    286c:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <__flp+0x1>
    2870:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <__flp>
    2874:	02 c0       	rjmp	.+4      	; 0x287a <free+0x104>
    2876:	13 82       	std	Z+3, r1	; 0x03
    2878:	12 82       	std	Z+2, r1	; 0x02
    287a:	b0 93 de 08 	sts	0x08DE, r27	; 0x8008de <__brkval+0x1>
    287e:	a0 93 dd 08 	sts	0x08DD, r26	; 0x8008dd <__brkval>
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <__do_global_dtors>:
    2888:	10 e0       	ldi	r17, 0x00	; 0
    288a:	c4 e5       	ldi	r28, 0x54	; 84
    288c:	d0 e0       	ldi	r29, 0x00	; 0
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <__do_global_dtors+0x10>
    2890:	fe 01       	movw	r30, r28
    2892:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__tablejump2__>
    2896:	21 96       	adiw	r28, 0x01	; 1
    2898:	c5 35       	cpi	r28, 0x55	; 85
    289a:	d1 07       	cpc	r29, r17
    289c:	c9 f7       	brne	.-14     	; 0x2890 <__do_global_dtors+0x8>
    289e:	f8 94       	cli

000028a0 <__stop_program>:
    28a0:	ff cf       	rjmp	.-2      	; 0x28a0 <__stop_program>
